; SD card interface module
;
; Requires zero-page variable storage:
;   zp_sd_address - 2 bytes
;   zp_sd_currentsector - 4 bytes

cmsg
  .byte "Command: ", $00

sd_init
  ; Let the SD card boot up, by pumping the clock with SD CS disabled

  ; We need to apply around 80 clock pulses with CS and MOSI high.
  ; Normally MOSI doesn't matter when CS is high, but the card is
  ; not yet is SPI mode, and in this non-SPI state it does care.

  lda #SD_CS | SD_MOSI
  ldx #160               ; toggle the clock 160 times, so 80 low-high transitions
preinitloop
  eor #SD_SCK
  sta VIA_PORTA
  dex
  bne preinitloop
  

cmd0 ; GO_IDLE_STATE - resets card to idle state, and SPI mode
  lda #<sd_cmd0_bytes
  sta zp_sd_address
  lda #>sd_cmd0_bytes
  sta zp_sd_address+1

  jsr sd_sendcommand

  ; Expect status response $01 (not initialized)
 ; cmp #$01
 ; bne initfailed

cmd8 ; SEND_IF_COND - tell the card how we want it to operate (3.3V, etc)
  lda #<sd_cmd8_bytes
  sta zp_sd_address
  lda #>sd_cmd8_bytes
  sta zp_sd_address+1

  jsr sd_sendcommand

  ; Expect status response $01 (not initialized)
  cmp #$01
  bne initfailed

  ; Read 32-bit return value, but ignore it
  jsr sd_readbyte
  jsr sd_readbyte
  jsr sd_readbyte
  jsr sd_readbyte

cmd55 ; APP_CMD - required prefix for ACMD commands
  lda #<sd_cmd55_bytes
  sta zp_sd_address
  lda #>sd_cmd55_bytes
  sta zp_sd_address+1

  jsr sd_sendcommand

  ; Expect status response $01 (not initialized)
  cmp #$01
  bne initfailed

cmd41 ; APP_SEND_OP_COND - send operating conditions, initialize card
  lda #<sd_cmd41_bytes
  sta zp_sd_address
  lda #>sd_cmd41_bytes
  sta zp_sd_address+1

  jsr sd_sendcommand

  ; Status response $00 means initialised
  cmp #$00
  beq initialized

  ; Otherwise expect status response $01 (not initialized)
  cmp #$01
  bne initfailed

  ; Not initialized yet, so wait a while then try again.
  ; This retry is important, to give the card time to initialize.

  ldx #0
  ldy #0
delayloop
  dey
  bne delayloop
  dex
  bne delayloop

  jmp cmd55


initialized
;  ldy #>initmsg
;  ldx #<initmsg
;  jsr w_acia_full
  clc
  rts

initfailed
  ;ldy #>initfailedmsg
  ;ldx #<initfailedmsg
  ;jsr w_acia_full
  sec
  rts

sd_cmd0_bytes
  .byte $40, $00, $00, $00, $00, $95
sd_cmd8_bytes
  .byte $48, $00, $00, $01, $aa, $87
sd_cmd55_bytes
  .byte $77, $00, $00, $00, $00, $01
sd_cmd41_bytes
  .byte $69, $40, $00, $00, $00, $01



sd_readbyte
  ; Enable the card and tick the clock 8 times with MOSI high, 
  ; capturing bits from MISO and returning them

  ldx #$fe    ; Preloaded with seven ones and a zero, so we stop after eight bits

looop

  lda #SD_MOSI                ; enable card (CS low), set MOSI (resting state), SCK low
  sta VIA_PORTA

  lda #SD_MOSI | SD_SCK       ; toggle the clock high
  sta VIA_PORTA

  lda VIA_PORTA                   ; read next bit
  and #SD_MISO

  clc                         ; default to clearing the bottom bit
  beq bitnotset              ; unless MISO was set
  sec                         ; in which case get ready to set the bottom bit
bitnotset

  txa                         ; transfer partial result from X
  rol                         ; rotate carry bit into read result, and loop bit into carry
  tax                         ; save partial result back to X
  
  bcs looop                   ; loop if we need to read more bits

  rts


sd_writebyte
  ; Tick the clock 8 times with descending bits on MOSI
  ; SD communication is mostly half-duplex so we ignore anything it sends back here

  ldx #8                      ; send 8 bits

loopp
  asl                         ; shift next bit into carry
  tay                         ; save remaining bits for later

  lda #0
  bcc sendbit                ; if carry clear, don't set MOSI for this bit
  ora #SD_MOSI

sendbit
  sta VIA_PORTA                   ; set MOSI (or not) first with SCK low
  eor #SD_SCK
  sta VIA_PORTA                   ; raise SCK keeping MOSI the same, to send the bit

  tya                         ; restore remaining bits to send

  dex
  bne loopp                   ; loop if there are more bits to send

  rts


sd_waitresult
  ; Wait for the SD card to return something other than $ff
  jsr sd_readbyte
  cmp #$ff
  beq sd_waitresult
  rts

loadtable:
	.byte $02,"-",$02,"\",$02,"|",$02,"/", $00

sd_sendcommand 

  lda #SD_MOSI           ; pull CS low to begin command
  sta VIA_PORTA

  ldy #0
  lda (zp_sd_address),y    ; command byte
  jsr sd_writebyte
  ldy #1
  lda (zp_sd_address),y    ; data 1
  jsr sd_writebyte
  ldy #2
  lda (zp_sd_address),y    ; data 2
  jsr sd_writebyte
  ldy #3
  lda (zp_sd_address),y    ; data 3
  jsr sd_writebyte
  ldy #4
  lda (zp_sd_address),y    ; data 4
  jsr sd_writebyte
  ldy #5
  lda (zp_sd_address),y    ; crc
  jsr sd_writebyte

  jsr sd_waitresult
  pha

  ; End command
  lda #SD_CS | SD_MOSI   ; set CS high again
  sta VIA_PORTA

  pla   ; restore result code
  rts


sd_readsector
  ; Read a sector from the SD card.  A sector is 512 bytes.
  ;
  ; Parameters:
  ;    zp_sd_currentsector   32-bit sector number
  ;    zp_sd_address     address of buffer to receive data
  
  lda #SD_MOSI
  sta VIA_PORTA

  ; Command 17, arg is sector number, crc not checked
  lda #$51                    ; CMD17 - READ_SINGLE_BLOCK
  jsr sd_writebyte
  lda zp_sd_currentsector+3   
  jsr sd_writebyte
  lda zp_sd_currentsector+2  
  jsr sd_writebyte
  lda zp_sd_currentsector+1  
  jsr sd_writebyte
  lda zp_sd_currentsector 
  jsr sd_writebyte
  lda #$01                    ; crc (not checked)
  jsr sd_writebyte

  jsr sd_waitresult
  cmp #$00
  bne sd_fail

  ; wait for data
  jsr sd_waitresult
  cmp #$fe
  bne sd_fail

  ; Need to read 512 bytes - two pages of 256 bytes each
  jsr readpage
  inc zp_sd_address+1
  jsr readpage
  dec zp_sd_address+1

  ; End command
  lda #SD_CS | SD_MOSI
  sta VIA_PORTA

  rts


sd_fail:
;  ldx #<statusmsg
;  ldy #>statusmsg  ; Status:
;  jsr w_acia_full

  ldx #<failedmsg
  ldy #>failedmsg  ; Failed!
  jsr w_acia_full
failloop
  jmp ($fffc)

readpage
  ; Read 256 bytes to the address at zp_sd_address
  ldy #0
readloop
  jsr sd_readbyte
  sta (zp_sd_address),y
  iny
  bne readloop
  rts

sd_writesector:
.(
  ; Write a sector to the SD card.  A sector is 512 bytes.
  ;
  ; Parameters:
  ;    zp_sd_currentsector   32-bit sector number
  ;    zp_sd_address     address of buffer to take data from
  
  lda #SD_MOSI
  sta PORTA

  ; Command 24, arg is sector number, crc not checked
  lda #$58                    ; CMD24 - WRITE_BLOCK
  jsr sd_writebyte
  lda zp_sd_currentsector+3   ; sector 24:31
  jsr sd_writebyte
  lda zp_sd_currentsector+2   ; sector 16:23
  jsr sd_writebyte
  lda zp_sd_currentsector+1   ; sector 8:15
  jsr sd_writebyte
  lda zp_sd_currentsector     ; sector 0:7
  jsr sd_writebyte
  lda #$01                    ; crc (not checked)
  jsr sd_writebyte

  jsr sd_waitresult
  cmp #$00
  bne sd_fail

  ; Send start token
  lda #$fe
  jsr sd_writebyte

  ; Need to write 512 bytes - two pages of 256 bytes each
  jsr writepage
  inc zp_sd_address+1
  jsr writepage
  dec zp_sd_address+1

  ; wait for data response
  jsr sd_waitresult
  and #$1f
  cmp #$05
  bne sd_fail

waitidle
  jsr sd_readbyte
  cmp #$ff
  bne waitidle

  ; End command
  lda #SD_CS | SD_MOSI ; set cs and mosi high (disconnected)
  sta PORTA

  rts

writepage:
  ; Write 256 bytes fom zp_sd_address
  ldy #0
writeloop:
  lda (zp_sd_address),y
  phy
  jsr sd_writebyte
  ply
  iny
  bne writeloop
  rts
.)

statusmsg
  .byte "Status: ", $00
initfailedmsg
  .byte "Init "
failedmsg
  .byte "Failed!", $0d, $0a, $00
respmsg
  .byte "Response: ", $00
initmsg
  .byte "Initialized!", $0d, $0a, $00

