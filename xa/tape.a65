; Audio-based data storage
; commands:
; tsave
; tload
;

; Save to cassette tape
;
; Argumented with a start and end address
;

tsavecmd:
.(
  ;; check arguments
  lda ARGINDEX
  cmp #3
  beq processparamr
  cmp #4
  beq speedp
  jmp error
speedp:
  clc
  lda #<INPUT
  adc ARGINDEX+4
  sta stackaccess
  lda #>INPUT
  sta stackaccess+1
  lda (stackaccess)
  cmp #'f'
  bne processparamr
  stz tapespeed
  jmp tsn
processparamr           
  lda #$ff
  sta tapespeed
tsn:			; process the (second) address parameter
  clc
  lda #<INPUT
  adc ARGINDEX+3
  sta stackaccess
  lda #>INPUT
  sta stackaccess+1
  jsr push16
  jsr read16hex
  clc			; process the (first) address parameter
  lda #<INPUT
  adc ARGINDEX+2
  sta stackaccess
  lda #>INPUT
  sta stackaccess+1
  jsr push16
  jsr read16hex

  ; stash the paramaters
  jsr pop16 
  lda stackaccess
  sta cnt
  lda stackaccess+1
  sta cnt+1
  jsr pop16
  lda stackaccess
  sta len
  lda stackaccess+1
  sta len+1
tsavekernal
  phx ; stash stack pointer

  lda #%10111111
  sta DDRA
  stz $b00e
  stz tapest

  lda #$8f
  sta $b818

  ldx #0
lp1:
  lda reg,x
  sta $b810,x
  inx
  cpx #5
  bne lp1
  lda #$4c
  sta $b80e
  lda #$9d
  sta $b80f

  ldx #<tsavemsg
  ldy #>tsavemsg	; press rec and play
  jsr w_acia_full

  lda #$18		; 4 seconds
  jsr tape_delay	; (ye fumble)

  ldx #<saving_msg	; Saving...
  ldy #>saving_msg
  jsr w_acia_full

  ldy #$40
  jsr inout		; intro sound

  lda #1
  sta thing
  ldy #0
beginn:
  jsr zero
begin: 
  lda cnt,y		; read in the address param
  and thing
  bne head1
  jsr zero
head:
  lda thing
  cmp #$80
  beq header_done
  asl thing
  jmp begin
head1:
  jsr one
  jmp head
header_done:
  lda #1
  sta thing
  jsr one
  jsr one
  iny
  cpy #$04
  bne beginn
  ldy #$20
  jsr inout
  ; now to send the actual data
  jsr zero
  ldx #0
  lda #1
  sta thing		; first bit
wop:
  lda (cnt)		; load data
  and thing		; mask it
  bne jsrone		; one
  jsr zero		; or zero
oner:
  lda thing		; load the bitmask
  cmp #$80		; end of byte?
  beq noo
  asl thing
  jmp wop		; next bit
jsrone:
  jsr one		; a one
  jmp oner
noo:
  lda #1		; byte done
  sta thing
  jsr one
  jsr one
  inc cnt		; inc pointer
  bne notcnt
  inc cnt+1
notcnt:
  lda cnt		; are we done?
  cmp len
  beq nearly
  jsr zero
  jmp wop		; if not, go again for another byte
nearly:
  lda cnt+1
  cmp len+1
  beq savedone
  jsr zero
  jmp wop
savedone
  ldy #$40
  jsr inout		; we are done, ending sound  

  ; done
  ldx #<msg2
  ldy #>msg2		; "Done!"
  jsr w_acia_full

  plx
  rts			; return

; subs

inout:
outer:
  ldx #$10		; $40 * $10 times make the sound
starter:
  jsr one		; sound
  dex
  bne starter
  dey
  bne outer
  rts

one:			; 2400hz sound 8 cyc
  php
  pha
  lda #$4c
  sta $b80e
  lda #$9d
  sta $b80f
  jmp bitd

bitd:
  lda tapespeed
  beq onef
  jsr tx_delay
  jsr tx_delay
  pla
  plp
  rts
onef:
  jsr ftx_delay
  jsr ftx_delay
  pla
  plp
  rts

reg:
  .byte $00, $08, $41, $00, $f0

;togtap:
;  lda tapest
;  eor #%10000000 	; data out on PA7
;  sta tapest
;  sta PORTA
;  rts

zero: 			; 1200hz sound 4 cyc
  php
  pha 
  lda #$a6
  sta $b80e
  lda #$4e
  sta $b80f
  jmp bitd

error
  lda #<tsaveerrstring
  sta PRINTVEC
  lda #>tsaveerrstring
  sta PRINTVEC+1
  jsr printvecstr

  jsr crlf
  rts

.)

tx_delay:
  phx
  ldx #$7e
tx_delay_inner:
  lda $b81b
  sta PORTA
  dex
  bne tx_delay_inner
  plx
  rts

ftx_delay:
  phx
  ldx #$3f
  bra tx_delay_inner

tape_delay:
  ldx #$ff		; wait for ye fumble.
rd1:
  lda #$7a		; (Y times through inner loop,
rd2:     
  sbc #$01		;  Y * $FF * 650uS = uS / 1e-6 = S )
  bne rd2
rd3:
  dex
  bne rd1
  dey
  bne tape_delay
  rts

tsavemsg:
  .byte $02, $ff, "Press Record And play on Tape.", $0d, $0a, $00
tloadmsg:
  .byte $02, $ff, "Press Play On Tape.", $0d, $0a, $00
loading_msg:
  .byte "Loading...", $00
saving_msg:
  .byte "Saving...", $00
msg2:
  .byte "Done!", $0d, $0a, $02, $5f, $00
loadedmsg:
  .byte "Loaded from ", $00
tomsg:
  .byte " to ", $00

; Load from a cassette tape.
;
; Needs no arguments because start and end addresses are encoded in tape.
;

tloadcmd:
.(
  ;; check arguments
  lda ARGINDEX
  cmp #1
  beq notf
  ;cmp #2
  ;bne error
  clc
  lda #<INPUT
  adc ARGINDEX+2
  sta stackaccess
  lda #>INPUT
  sta stackaccess+1
  lda (stackaccess)
  cmp #'f'
  bne notf
  stz tapespeed
  jmp frl
notf:
  lda #$ff
  sta tapespeed	
frl:
  phx
  lda #%10111111
  sta DDRA
  lda #%11111111
  sta DDRB

  ldx #<tloadmsg	; PRESS PLAY ON TAPE
  ldy #>tloadmsg
  jsr w_acia_full

  lda #$18		; ye fumble
  jsr tape_delay	; 4 second delay

  ldx #<loading_msg	; Loading...
  ldy #>loading_msg
  jsr w_acia_full

  ldy #0

  ; thanks to ben eater for help with this code

rx_wait_start:
  bit PORTA	; wait until PORTB.6 = 0 (start bit)
  bvs rx_wait_start

  jsr rx_delay  ; half-bit delay
  ldx #8
read_bita:
  jsr rx_delay	; run full-bit delay for 300 baud serial stream
  jsr rx_delay
  bit PORTA	; read in the state
  bvs recv_1a	; if it's not a one,
  clc		; it's a zero.
  jmp rx_donea
recv_1a:	; otherwise,
  sec		; it's a one.
  nop		; nops for timing
  nop
rx_donea:
  ror		; rotate carry into accumulator
  dex
  bne read_bita	; repeat until 8 bits read
  sta cnt,y
  iny
  cpy #$04
  beq got_len
  lda cnt
  pha
  lda cnt+1
  pha
  jsr rx_delay
  jsr rx_delay
  jmp rx_wait_start
got_len:
  jsr rx_delay
  jsr rx_delay
rx_wait:
  bit PORTA	; wait until PORTB.6 = 0 (start bit)
  bvs rx_wait
  jsr rx_delay
  ldx #8
read_bit:
  jsr rx_delay	; run bit delay for 300 baud serial stream
  jsr rx_delay
  bit PORTA	; read in the state
  bvs recv_1	; if it's not a one,
  clc		; it's a zero.
  jmp rx_done
recv_1:
  sec		; it's a one.
  nop		; nops for timing
  nop
rx_done:
  ror		; rotate carry into accumulator
  dex
  bne read_bit	; repeat until 8 bits read
  sta (cnt)	; store data
  jsr rx_delay
  jsr rx_delay
  inc cnt
  bne declen
  inc cnt+1
declen:
  lda cnt		; are we done?
  cmp len
  bne rx_wait_delay
  lda cnt+1
  cmp len+1
  bne rx_wait_delay	; if not, get another byte
load_done:
  ldx #<loadedmsg	; Loaded from X to Y
  ldy #>loadedmsg
  jsr w_acia_full
  pla
  jsr print_hex_acia
  pla
  jsr print_hex_acia
  ldx #<tomsg
  ldy #>tomsg
  jsr w_acia_full
  lda len+1
  jsr print_hex_acia
  lda len
  jsr print_hex_acia
  jsr crlf
  plx
  rts

rx_wait_delay:
  jsr rx_delay
  jsr rx_delay
  jmp rx_wait
.)

rx_delay:
  pha
  lda tapespeed
  beq frx_delay
  phx
  phy
  ldy #$02
rx_delay_outer:
  ldx #$A4
rx_delay_inner:
  dex
  bne rx_delay_inner
  dey
  bne rx_delay_outer
  ply
  plx
  pla
  rts

frx_delay:
  phx
  ldx #$A4
frx_delay_inner:
  dex
  bne frx_delay_inner
  plx
  pla
  rts

