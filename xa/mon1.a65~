;; Declarations of general use
;; Mainly, these define where things are in the memory map of the
;; 6502 Mite.
;;
;; Paul Dourish, January 1, 2017
;;


;; ACIA (6551) registers
;;
ACIA_DATA    = $4000
ACIA_STATUS  = $4001
ACIA_COMMAND = $4003
ACIA_CONTROL = $4003

;; VIA (6522) registers
;;
VIA_PORTB = $6000
PORTB     = $6000
VIA_PORTA = $6001
VIA_DDRB  = $6002
VIA_DDRA  = $6003
VIA_T1CL  = $6004
VIA_T1CH  = $6005
VIA_T1LL  = $6006
VIA_T1LH  = $6007
VIA_T2LL  = $6008
VIA_T2CL  = $6008
VIA_T2CH  = $6009 
VIA_SR    = $600A
VIA_ACR   = $600B
VIA_PCR   = $600C
VIA_IFR   = $600D
VIA_IER   = $600E
VIA_ORAX  = $600F

;; Generic initialization code
;;

  .org $8000

init
  LDX #$ff         ; initialize the stack
  TXS
  CLD              ; clear decimal mode
  SEI              ; disable interrupts

setupvia
  LDA #%11111111   ; Set port A to all outputs
  STA VIA_DDRA

input=$0400  

main
init_acia

  lda #%00001011		;No parity, no echo, no interrupt
  sta ACIA_COMMAND
  lda #%00011111		;1 stop bit, 8 data bits, 19200 baud
  sta ACIA_CONTROL

;; print the welcome message

write
  ldx #0

next_char
wait_txd_empty  
  lda ACIA_STATUS
  and #$10
  beq wait_txd_empty
  lda welcome,x
  beq outprompt
  sta ACIA_DATA
  inx
  jmp next_char

;; print a prompt

outprompt

;; read a line

  ldx #0
read
wait_rxd_full	 
  lda ACIA_STATUS
  and #$08
  beq wait_rxd_full

  lda ACIA_DATA
  sta input,x
  cmp #10
  beq endline
  inx
  jmp read

endline  

;; respond

respond
  ldx #0

next_char2
wait_txd_empty2
  lda ACIA_STATUS
  and #$10
  beq wait_txd_empty
  lda gottit,x
  beq done2
  sta ACIA_DATA
  inx
  jmp next_char2

done2

;; repeat

  jmp outprompt


welcome:
  .byte "6502 monitor v00", $0d, $0a, $00

gottit:
  .byte "Gottit", $0d, $0a, $00
