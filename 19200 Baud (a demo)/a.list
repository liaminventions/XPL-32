F00:0001       scroll = $00
F00:0002       scrollinc = $01
F00:0003       sco = $02
F00:0004       count = $03
F00:0005       
F00:0006       zp_sd_address = $40 ; 2
F00:0007       zp_sd_currentsector = $42 ; 4
F00:0008       zp_fat32_variables = $46 ; 24
F00:0009       
F00:0010       fat32_workspace = $200
F00:0011       
F00:0012       buffer = $400
F00:0013       endbuf = $600
F00:0014       
F00:0015       PORTB = $b000
F00:0016       PORTA = $b001
F00:0017       DDRB = $b002
F00:0018       DDRA = $b003
F00:0019       
F00:0020       SD_CS   = %00010000
F00:0021       SD_SCK  = %00001000
F00:0022       SD_MOSI = %00000100
F00:0023       SD_MISO = %00000010
F00:0024       EXTVID  = %10000000
F00:0025       
F00:0026       PORTA_OUTPUTPINS = SD_CS | SD_SCK | SD_MOSI
F00:0027       
F00:0028         .org $0600
F00:0029       
F00:0030       via_init:
F00:0031         lda #%11111111          ; Set all pins on port B to output
               S01:00000600:  A9 FF
F00:0032         sta DDRB
               S01:00000602:  8D 02 B0
F00:0033         lda #PORTA_OUTPUTPINS   ; Set various pins on port A to output
               S01:00000605:  A9 1C
F00:0034         sta DDRA
               S01:00000607:  8D 03 B0
F00:0035         rts
               S01:0000060A:  60
F00:0036         
F00:0037         .include "libsd.s"
F01:0001       ; SD card interface module
F01:0002       ;
F01:0003       ; Requires zero-page variable storage:
F01:0004       ;   zp_sd_address - 2 bytes
F01:0005       ;   zp_sd_currentsector - 4 bytes
F01:0006       
F01:0007       cmsg:
F01:0008         .byte "Command: ", $00
               S01:0000060B:  43 6F 6D 6D 61 6E 64 3A 20
               S01:00000614:  00
F01:0009       
F01:0010       sd_init:
F01:0011         ; Let the SD card boot up, by pumping the clock with SD CS disabled
F01:0012       
F01:0013         ; We need to apply around 80 clock pulses with CS and MOSI high.
F01:0014         ; Normally MOSI doesn't matter when CS is high, but the card is
F01:0015         ; not yet is SPI mode, and in this non-SPI state it does care.
F01:0016       
F01:0017         lda #SD_CS | SD_MOSI
               S01:00000615:  A9 14
F01:0018         ldx #160               ; toggle the clock 160 times, so 80 low-high transitions
               S01:00000617:  A2 A0
F01:0019       .preinitloop:
F01:0020         eor #SD_SCK
               S01:00000619:  49 08
F01:0021         sta PORTA
               S01:0000061B:  8D 01 B0
F01:0022         dex
               S01:0000061E:  CA
F01:0023         bne .preinitloop
               S01:0000061F:  D0 F8
F01:0024         
F01:0025       
F01:0026       .cmd0 ; GO_IDLE_STATE - resets card to idle state, and SPI mode
F01:0027         lda #<sd_cmd0_bytes
               S01:00000621:  A9 79
F01:0028         sta zp_sd_address
               S01:00000623:  85 40
F01:0029         lda #>sd_cmd0_bytes
               S01:00000625:  A9 06
F01:0030         sta zp_sd_address+1
               S01:00000627:  85 41
F01:0031       
F01:0032         jsr sd_sendcommand
               S01:00000629:  20 CB 06
F01:0033       
F01:0034         ; Expect status response $01 (not initialized)
F01:0035        ; cmp #$01
F01:0036        ; bne .initfailed
F01:0037       
F01:0038       .cmd8 ; SEND_IF_COND - tell the card how we want it to operate (3.3V, etc)
F01:0039         lda #<sd_cmd8_bytes
               S01:0000062C:  A9 7F
F01:0040         sta zp_sd_address
               S01:0000062E:  85 40
F01:0041         lda #>sd_cmd8_bytes
               S01:00000630:  A9 06
F01:0042         sta zp_sd_address+1
               S01:00000632:  85 41
F01:0043       
F01:0044         jsr sd_sendcommand
               S01:00000634:  20 CB 06
F01:0045       
F01:0046         ; Expect status response $01 (not initialized)
F01:0047         cmp #$01
               S01:00000637:  C9 01
F01:0048         bne .initfailed
               S01:00000639:  D0 3B
F01:0049       
F01:0050         ; Read 32-bit return value, but ignore it
F01:0051         jsr sd_readbyte
               S01:0000063B:  20 91 06
F01:0052         jsr sd_readbyte
               S01:0000063E:  20 91 06
F01:0053         jsr sd_readbyte
               S01:00000641:  20 91 06
F01:0054         jsr sd_readbyte
               S01:00000644:  20 91 06
F01:0055       
F01:0056       .cmd55 ; APP_CMD - required prefix for ACMD commands
F01:0057         lda #<sd_cmd55_bytes
               S01:00000647:  A9 85
F01:0058         sta zp_sd_address
               S01:00000649:  85 40
F01:0059         lda #>sd_cmd55_bytes
               S01:0000064B:  A9 06
F01:0060         sta zp_sd_address+1
               S01:0000064D:  85 41
F01:0061       
F01:0062         jsr sd_sendcommand
               S01:0000064F:  20 CB 06
F01:0063       
F01:0064         ; Expect status response $01 (not initialized)
F01:0065         cmp #$01
               S01:00000652:  C9 01
F01:0066         bne .initfailed
               S01:00000654:  D0 20
F01:0067       
F01:0068       .cmd41 ; APP_SEND_OP_COND - send operating conditions, initialize card
F01:0069         lda #<sd_cmd41_bytes
               S01:00000656:  A9 8B
F01:0070         sta zp_sd_address
               S01:00000658:  85 40
F01:0071         lda #>sd_cmd41_bytes
               S01:0000065A:  A9 06
F01:0072         sta zp_sd_address+1
               S01:0000065C:  85 41
F01:0073       
F01:0074         jsr sd_sendcommand
               S01:0000065E:  20 CB 06
F01:0075       
F01:0076         ; Status response $00 means initialised
F01:0077         cmp #$00
               S01:00000661:  C9 00
F01:0078         beq .initialized
               S01:00000663:  F0 11
F01:0079       
F01:0080         ; Otherwise expect status response $01 (not initialized)
F01:0081         cmp #$01
               S01:00000665:  C9 01
F01:0082         bne .initfailed
               S01:00000667:  D0 0D
F01:0083       
F01:0084         ; Not initialized yet, so wait a while then try again.
F01:0085         ; This retry is important, to give the card time to initialize.
F01:0086       
F01:0087         ldx #0
               S01:00000669:  A2 00
F01:0088         ldy #0
               S01:0000066B:  A0 00
F01:0089       .delayloop
F01:0090         dey
               S01:0000066D:  88
F01:0091         bne .delayloop
               S01:0000066E:  D0 FD
F01:0092         dex
               S01:00000670:  CA
F01:0093         bne .delayloop
               S01:00000671:  D0 FA
F01:0094       
F01:0095         jmp .cmd55
               S01:00000673:  4C 47 06
F01:0096       
F01:0097       
F01:0098       .initialized
F01:0099       ;  ldy #>initmsg
F01:0100       ;  ldx #<initmsg
F01:0101       ;  jsr w_acia_full
F01:0102       ;  rts
F01:0103       
F01:0104       .initfailed
F01:0105       ;  ldy #>initfailedmsg
F01:0106       ;  ldx #<initfailedmsg
F01:0107       ;  jsr w_acia_full
F01:0108       .loop
F01:0109         jmp .loop
               S01:00000676:  4C 76 06
F01:0110       
F01:0111       
F01:0112       sd_cmd0_bytes
F01:0113         .byte $40, $00, $00, $00, $00, $95
               S01:00000679:  40
               S01:0000067A:  00
               S01:0000067B:  00
               S01:0000067C:  00
               S01:0000067D:  00
               S01:0000067E:  95
F01:0114       sd_cmd8_bytes
F01:0115         .byte $48, $00, $00, $01, $aa, $87
               S01:0000067F:  48
               S01:00000680:  00
               S01:00000681:  00
               S01:00000682:  01
               S01:00000683:  AA
               S01:00000684:  87
F01:0116       sd_cmd55_bytes
F01:0117         .byte $77, $00, $00, $00, $00, $01
               S01:00000685:  77
               S01:00000686:  00
               S01:00000687:  00
               S01:00000688:  00
               S01:00000689:  00
               S01:0000068A:  01
F01:0118       sd_cmd41_bytes
F01:0119         .byte $69, $40, $00, $00, $00, $01
               S01:0000068B:  69
               S01:0000068C:  40
               S01:0000068D:  00
               S01:0000068E:  00
               S01:0000068F:  00
               S01:00000690:  01
F01:0120       
F01:0121       
F01:0122       
F01:0123       sd_readbyte:
F01:0124         ; Enable the card and tick the clock 8 times with MOSI high, 
F01:0125         ; capturing bits from MISO and returning them
F01:0126       
F01:0127         ldx #$fe    ; Preloaded with seven ones and a zero, so we stop after eight bits
               S01:00000691:  A2 FE
F01:0128       
F01:0129       .loop:
F01:0130       
F01:0131         lda #SD_MOSI                ; enable card (CS low), set MOSI (resting state), SCK low
               S01:00000693:  A9 04
F01:0132         sta PORTA
               S01:00000695:  8D 01 B0
F01:0133       
F01:0134         lda #SD_MOSI | SD_SCK       ; toggle the clock high
               S01:00000698:  A9 0C
F01:0135         sta PORTA
               S01:0000069A:  8D 01 B0
F01:0136       
F01:0137         lda PORTA                   ; read next bit
               S01:0000069D:  AD 01 B0
F01:0138         and #SD_MISO
               S01:000006A0:  29 02
F01:0139       
F01:0140         clc                         ; default to clearing the bottom bit
               S01:000006A2:  18
F01:0141         beq .bitnotset              ; unless MISO was set
               S01:000006A3:  F0 01
F01:0142         sec                         ; in which case get ready to set the bottom bit
               S01:000006A5:  38
F01:0143       .bitnotset:
F01:0144       
F01:0145         txa                         ; transfer partial result from X
               S01:000006A6:  8A
F01:0146         rol                         ; rotate carry bit into read result, and loop bit into carry
               S01:000006A7:  2A
F01:0147         tax                         ; save partial result back to X
               S01:000006A8:  AA
F01:0148         
F01:0149         bcs .loop                   ; loop if we need to read more bits
               S01:000006A9:  B0 E8
F01:0150       
F01:0151         rts
               S01:000006AB:  60
F01:0152       
F01:0153       
F01:0154       sd_writebyte:
F01:0155         ; Tick the clock 8 times with descending bits on MOSI
F01:0156         ; SD communication is mostly half-duplex so we ignore anything it sends back here
F01:0157       
F01:0158         ldx #8                      ; send 8 bits
               S01:000006AC:  A2 08
F01:0159       
F01:0160       .loop:
F01:0161         asl                         ; shift next bit into carry
               S01:000006AE:  0A
F01:0162         tay                         ; save remaining bits for later
               S01:000006AF:  A8
F01:0163       
F01:0164         lda #0
               S01:000006B0:  A9 00
F01:0165         bcc .sendbit                ; if carry clear, don't set MOSI for this bit
               S01:000006B2:  90 02
F01:0166         ora #SD_MOSI
               S01:000006B4:  09 04
F01:0167       
F01:0168       .sendbit:
F01:0169         sta PORTA                   ; set MOSI (or not) first with SCK low
               S01:000006B6:  8D 01 B0
F01:0170         eor #SD_SCK
               S01:000006B9:  49 08
F01:0171         sta PORTA                   ; raise SCK keeping MOSI the same, to send the bit
               S01:000006BB:  8D 01 B0
F01:0172       
F01:0173         tya                         ; restore remaining bits to send
               S01:000006BE:  98
F01:0174       
F01:0175         dex
               S01:000006BF:  CA
F01:0176         bne .loop                   ; loop if there are more bits to send
               S01:000006C0:  D0 EC
F01:0177       
F01:0178         rts
               S01:000006C2:  60
F01:0179       
F01:0180       
F01:0181       sd_waitresult:
F01:0182         ; Wait for the SD card to return something other than $ff
F01:0183         jsr sd_readbyte
               S01:000006C3:  20 91 06
F01:0184         cmp #$ff
               S01:000006C6:  C9 FF
F01:0185         beq sd_waitresult
               S01:000006C8:  F0 F9
F01:0186         rts
               S01:000006CA:  60
F01:0187       
F01:0188       
F01:0189       sd_sendcommand:
F01:0190         ; Debug print which command is being executed
F01:0191        ; jsr lcd_cleardisplay
F01:0192        ; jsr cleardisplay
F01:0193       
F01:0194       ;  phx
F01:0195       ;  phy
F01:0196       ;  ldx #<cmsg
F01:0197       ;  ldy #>cmsg
F01:0198       ;  jsr w_acia_full
F01:0199       ;  ply
F01:0200       ;  plx
F01:0201       
F01:0202       ;  ldx #0
F01:0203       ;  lda (zp_sd_address,x)
F01:0204       ;  jsr print_hex_acia
F01:0205       
F01:0206       ;  lda #$20
F01:0207       ;  jsr print_chara
F01:0208       ;  
F01:0209       ;  lda #$20
F01:0210       ;  jsr print_chara
F01:0211       
F01:0212         lda #SD_MOSI           ; pull CS low to begin command
               S01:000006CB:  A9 04
F01:0213         sta PORTA
               S01:000006CD:  8D 01 B0
F01:0214       
F01:0215         ldy #0
               S01:000006D0:  A0 00
F01:0216         lda (zp_sd_address),y    ; command byte
               S01:000006D2:  B1 40
F01:0217         jsr sd_writebyte
               S01:000006D4:  20 AC 06
F01:0218         ldy #1
               S01:000006D7:  A0 01
F01:0219         lda (zp_sd_address),y    ; data 1
               S01:000006D9:  B1 40
F01:0220         jsr sd_writebyte
               S01:000006DB:  20 AC 06
F01:0221         ldy #2
               S01:000006DE:  A0 02
F01:0222         lda (zp_sd_address),y    ; data 2
               S01:000006E0:  B1 40
F01:0223         jsr sd_writebyte
               S01:000006E2:  20 AC 06
F01:0224         ldy #3
               S01:000006E5:  A0 03
F01:0225         lda (zp_sd_address),y    ; data 3
               S01:000006E7:  B1 40
F01:0226         jsr sd_writebyte
               S01:000006E9:  20 AC 06
F01:0227         ldy #4
               S01:000006EC:  A0 04
F01:0228         lda (zp_sd_address),y    ; data 4
               S01:000006EE:  B1 40
F01:0229         jsr sd_writebyte
               S01:000006F0:  20 AC 06
F01:0230         ldy #5
               S01:000006F3:  A0 05
F01:0231         lda (zp_sd_address),y    ; crc
               S01:000006F5:  B1 40
F01:0232         jsr sd_writebyte
               S01:000006F7:  20 AC 06
F01:0233       
F01:0234         jsr sd_waitresult
               S01:000006FA:  20 C3 06
F01:0235         pha
               S01:000006FD:  48
F01:0236       
F01:0237       ;  phy
F01:0238       ;  phx
F01:0239       ;  ldy #>respmsg
F01:0240       ;  ldx #<respmsg
F01:0241       ;  jsr w_acia_full
F01:0242       ;  ply
F01:0243       ;  plx
F01:0244       
F01:0245         ; Debug print the result code
F01:0246       ;  jsr print_hex_acia
F01:0247       
F01:0248       ;  lda #$0d
F01:0249       ;  jsr print_chara
F01:0250       ;  
F01:0251       ;  lda #$0a
F01:0252       ;  jsr print_chara
F01:0253       
F01:0254         ; End command
F01:0255         lda #SD_CS | SD_MOSI   ; set CS high again
               S01:000006FE:  A9 14
F01:0256         sta PORTA
               S01:00000700:  8D 01 B0
F01:0257       
F01:0258         pla   ; restore result code
               S01:00000703:  68
F01:0259         rts
               S01:00000704:  60
F01:0260       
F01:0261       
F01:0262       sd_readsector:
F01:0263         ; Read a sector from the SD card.  A sector is 512 bytes.
F01:0264         ;
F01:0265         ; Parameters:
F01:0266         ;    zp_sd_currentsector   32-bit sector number
F01:0267         ;    zp_sd_address     address of buffer to receive data
F01:0268         
F01:0269         lda #SD_MOSI
               S01:00000705:  A9 04
F01:0270         sta PORTA
               S01:00000707:  8D 01 B0
F01:0271       
F01:0272         ; Command 17, arg is sector number, crc not checked
F01:0273         lda #$51                    ; CMD17 - READ_SINGLE_BLOCK
               S01:0000070A:  A9 51
F01:0274         jsr sd_writebyte
               S01:0000070C:  20 AC 06
F01:0275         lda zp_sd_currentsector+3   ; sector 24:31
               S01:0000070F:  A5 45
F01:0276         jsr sd_writebyte
               S01:00000711:  20 AC 06
F01:0277         lda zp_sd_currentsector+2   ; sector 16:23
               S01:00000714:  A5 44
F01:0278         jsr sd_writebyte
               S01:00000716:  20 AC 06
F01:0279         lda zp_sd_currentsector+1   ; sector 8:15
               S01:00000719:  A5 43
F01:0280         jsr sd_writebyte
               S01:0000071B:  20 AC 06
F01:0281         lda zp_sd_currentsector     ; sector 0:7
               S01:0000071E:  A5 42
F01:0282         jsr sd_writebyte
               S01:00000720:  20 AC 06
F01:0283         lda #$01                    ; crc (not checked)
               S01:00000723:  A9 01
F01:0284         jsr sd_writebyte
               S01:00000725:  20 AC 06
F01:0285       
F01:0286         jsr sd_waitresult
               S01:00000728:  20 C3 06
F01:0287         cmp #$00
               S01:0000072B:  C9 00
F01:0288         bne .fail
               S01:0000072D:  D0 17
F01:0289       
F01:0290         ; wait for data
F01:0291         jsr sd_waitresult
               S01:0000072F:  20 C3 06
F01:0292         cmp #$fe
               S01:00000732:  C9 FE
F01:0293         bne .fail
               S01:00000734:  D0 10
F01:0294       
F01:0295         ; Need to read 512 bytes - two pages of 256 bytes each
F01:0296         jsr .readpage
               S01:00000736:  20 49 07
F01:0297         inc zp_sd_address+1
               S01:00000739:  E6 41
F01:0298         jsr .readpage
               S01:0000073B:  20 49 07
F01:0299         dec zp_sd_address+1
               S01:0000073E:  C6 41
F01:0300       
F01:0301         ; End command
F01:0302         lda #SD_CS | SD_MOSI
               S01:00000740:  A9 14
F01:0303         sta PORTA
               S01:00000742:  8D 01 B0
F01:0304       
F01:0305         rts
               S01:00000745:  60
F01:0306       
F01:0307       
F01:0308       .fail
F01:0309       ;  ldx #<statusmsg
F01:0310       ;  ldy #>statusmsg  ; Status:
F01:0311       ;  jsr w_acia_full
F01:0312       
F01:0313       ;  ldx #<failedmsg
F01:0314       ;  ldy #>failedmsg  ; Failed!
F01:0315       ;  jsr w_acia_full
F01:0316       .failloop
F01:0317         jmp .failloop
               S01:00000746:  4C 46 07
F01:0318       
F01:0319       
F01:0320       .readpage
F01:0321         ; Read 256 bytes to the address at zp_sd_address
F01:0322         ldy #0
               S01:00000749:  A0 00
F01:0323       .readloop
F01:0324         jsr sd_readbyte
               S01:0000074B:  20 91 06
F01:0325         sta (zp_sd_address),y
               S01:0000074E:  91 40
F01:0326         iny
               S01:00000750:  C8
F01:0327         bne .readloop
               S01:00000751:  D0 F8
F01:0328         rts
               S01:00000753:  60
F01:0329       
F01:0330       statusmsg:
F01:0331         .byte "Status: ", $00
               S01:00000754:  53 74 61 74 75 73 3A 20
               S01:0000075C:  00
F01:0332       initfailedmsg:
F01:0333         .byte "Init "
               S01:0000075D:  49 6E 69 74 20
F01:0334       failedmsg:
F01:0335         .byte "Failed!", $0d, $0a, $00
               S01:00000762:  46 61 69 6C 65 64 21
               S01:00000769:  0D
               S01:0000076A:  0A
               S01:0000076B:  00
F01:0336       respmsg:
F01:0337         .byte "Response: ", $00
               S01:0000076C:  52 65 73 70 6F 6E 73 65 3A 20
               S01:00000776:  00
F01:0338       initmsg:
F01:0339         .byte "Initialized!", $0d, $0a, $00
               S01:00000777:  49 6E 69 74 69 61 6C 69 7A 65 64 21
               S01:00000783:  0D
               S01:00000784:  0A
               S01:00000785:  00
F01:0340       
F00:0038         .include "libfat32.s"
F02:0001       ; FAT32/SD interface library
F02:0002       ;
F02:0003       ; This module requires some RAM workspace to be defined elsewhere:
F02:0004       ; 
F02:0005       ; fat32_workspace    - a large page-aligned 512-byte workspace
F02:0006       ; zp_fat32_variables - 24 bytes of zero-page storage for variables etc
F02:0007       
F02:0008       
F02:0009       fat32_readbuffer = fat32_workspace
F02:0010       
F02:0011       fat32_fatstart          = zp_fat32_variables + $00  ; 4 bytes
F02:0012       fat32_datastart         = zp_fat32_variables + $04  ; 4 bytes
F02:0013       fat32_rootcluster       = zp_fat32_variables + $08  ; 4 bytes
F02:0014       fat32_sectorspercluster = zp_fat32_variables + $0c  ; 1 byte
F02:0015       fat32_pendingsectors    = zp_fat32_variables + $0d  ; 1 byte
F02:0016       fat32_address           = zp_fat32_variables + $0e  ; 2 bytes
F02:0017       fat32_nextcluster       = zp_fat32_variables + $10  ; 4 bytes
F02:0018       fat32_bytesremaining    = zp_fat32_variables + $14  ; 4 bytes 
F02:0019       
F02:0020       fat32_errorstage        = fat32_bytesremaining  ; only used during initializatio
F02:0021       fat32_filenamepointer   = fat32_bytesremaining  ; only used when searching for a file
F02:0022       
F02:0023       
F02:0024       fat32_init:
F02:0025         ; Initialize the module - read the MBR etc, find the partition,
F02:0026         ; and set up the variables ready for navigating the filesystem
F02:0027       
F02:0028         ; Read the MBR and extract pertinent information
F02:0029       
F02:0030         lda #0
               S01:00000786:  A9 00
F02:0031         sta fat32_errorstage
               S01:00000788:  85 5A
F02:0032       
F02:0033         ; Sector 0
F02:0034         lda #0
               S01:0000078A:  A9 00
F02:0035         sta zp_sd_currentsector
               S01:0000078C:  85 42
F02:0036         sta zp_sd_currentsector+1
               S01:0000078E:  85 43
F02:0037         sta zp_sd_currentsector+2
               S01:00000790:  85 44
F02:0038         sta zp_sd_currentsector+3
               S01:00000792:  85 45
F02:0039       
F02:0040         ; Target buffer
F02:0041         lda #<fat32_readbuffer
               S01:00000794:  A9 00
F02:0042         sta zp_sd_address
               S01:00000796:  85 40
F02:0043         lda #>fat32_readbuffer
               S01:00000798:  A9 02
F02:0044         sta zp_sd_address+1
               S01:0000079A:  85 41
F02:0045       
F02:0046         ; Do the read
F02:0047         jsr sd_readsector
               S01:0000079C:  20 05 07
F02:0048       
F02:0049       
F02:0050         inc fat32_errorstage ; stage 1 = boot sector signature check
               S01:0000079F:  E6 5A
F02:0051       
F02:0052         ; Check some things
F02:0053         lda fat32_readbuffer+510 ; Boot sector signature 55
               S01:000007A1:  AD FE 03
F02:0054         cmp #$55
               S01:000007A4:  C9 55
F02:0055         bne .fail
               S01:000007A6:  D0 2D
F02:0056         lda fat32_readbuffer+511 ; Boot sector signature aa
               S01:000007A8:  AD FF 03
F02:0057         cmp #$aa
               S01:000007AB:  C9 AA
F02:0058         bne .fail
               S01:000007AD:  D0 26
F02:0059       
F02:0060       
F02:0061         inc fat32_errorstage ; stage 2 = finding partition
               S01:000007AF:  E6 5A
F02:0062       
F02:0063         ; Find a FAT32 partition
F02:0064       .FSTYPE_FAT32 = 12
F02:0065         ldx #0
               S01:000007B1:  A2 00
F02:0066         lda fat32_readbuffer+$1c2,x
               S01:000007B3:  BD C2 03
F02:0067         cmp #.FSTYPE_FAT32
               S01:000007B6:  C9 0C
F02:0068         beq .foundpart
               S01:000007B8:  F0 1E
F02:0069         ldx #16
               S01:000007BA:  A2 10
F02:0070         lda fat32_readbuffer+$1c2,x
               S01:000007BC:  BD C2 03
F02:0071         cmp #.FSTYPE_FAT32
               S01:000007BF:  C9 0C
F02:0072         beq .foundpart
               S01:000007C1:  F0 15
F02:0073         ldx #32
               S01:000007C3:  A2 20
F02:0074         lda fat32_readbuffer+$1c2,x
               S01:000007C5:  BD C2 03
F02:0075         cmp #.FSTYPE_FAT32
               S01:000007C8:  C9 0C
F02:0076         beq .foundpart
               S01:000007CA:  F0 0C
F02:0077         ldx #48
               S01:000007CC:  A2 30
F02:0078         lda fat32_readbuffer+$1c2,x
               S01:000007CE:  BD C2 03
F02:0079         cmp #.FSTYPE_FAT32
               S01:000007D1:  C9 0C
F02:0080         beq .foundpart
               S01:000007D3:  F0 03
F02:0081       
F02:0082       .fail
F02:0083         jmp .error
               S01:000007D5:  4C 82 08
F02:0084       
F02:0085       .foundpart
F02:0086       
F02:0087         ; Read the FAT32 BPB
F02:0088         lda fat32_readbuffer+$1c6,x
               S01:000007D8:  BD C6 03
F02:0089         sta zp_sd_currentsector
               S01:000007DB:  85 42
F02:0090         lda fat32_readbuffer+$1c7,x
               S01:000007DD:  BD C7 03
F02:0091         sta zp_sd_currentsector+1
               S01:000007E0:  85 43
F02:0092         lda fat32_readbuffer+$1c8,x
               S01:000007E2:  BD C8 03
F02:0093         sta zp_sd_currentsector+2
               S01:000007E5:  85 44
F02:0094         lda fat32_readbuffer+$1c9,x
               S01:000007E7:  BD C9 03
F02:0095         sta zp_sd_currentsector+3
               S01:000007EA:  85 45
F02:0096       
F02:0097         jsr sd_readsector
               S01:000007EC:  20 05 07
F02:0098       
F02:0099       
F02:0100         inc fat32_errorstage ; stage 3 = BPB signature check
               S01:000007EF:  E6 5A
F02:0101       
F02:0102         ; Check some things
F02:0103         lda fat32_readbuffer+510 ; BPB sector signature 55
               S01:000007F1:  AD FE 03
F02:0104         cmp #$55
               S01:000007F4:  C9 55
F02:0105         bne .fail
               S01:000007F6:  D0 DD
F02:0106         lda fat32_readbuffer+511 ; BPB sector signature aa
               S01:000007F8:  AD FF 03
F02:0107         cmp #$aa
               S01:000007FB:  C9 AA
F02:0108         bne .fail
               S01:000007FD:  D0 D6
F02:0109       
F02:0110         inc fat32_errorstage ; stage 4 = RootEntCnt check
               S01:000007FF:  E6 5A
F02:0111       
F02:0112         lda fat32_readbuffer+17 ; RootEntCnt should be 0 for FAT32
               S01:00000801:  AD 11 02
F02:0113         ora fat32_readbuffer+18
               S01:00000804:  0D 12 02
F02:0114         bne .fail
               S01:00000807:  D0 CC
F02:0115       
F02:0116         inc fat32_errorstage ; stage 5 = TotSec16 check
               S01:00000809:  E6 5A
F02:0117       
F02:0118         lda fat32_readbuffer+19 ; TotSec16 should be 0 for FAT32
               S01:0000080B:  AD 13 02
F02:0119         ora fat32_readbuffer+20
               S01:0000080E:  0D 14 02
F02:0120         bne .fail
               S01:00000811:  D0 C2
F02:0121       
F02:0122         inc fat32_errorstage ; stage 6 = SectorsPerCluster check
               S01:00000813:  E6 5A
F02:0123       
F02:0124         ; Check bytes per filesystem sector, it should be 512 for any SD card that supports FAT32
F02:0125         lda fat32_readbuffer+11 ; low byte should be zero
               S01:00000815:  AD 0B 02
F02:0126         bne .fail
               S01:00000818:  D0 BB
F02:0127         lda fat32_readbuffer+12 ; high byte is 2 (512), 4, 8, or 16
               S01:0000081A:  AD 0C 02
F02:0128         cmp #2
               S01:0000081D:  C9 02
F02:0129         bne .fail
               S01:0000081F:  D0 B4
F02:0130       
F02:0131       
F02:0132         ; Calculate the starting sector of the FAT
F02:0133         clc
               S01:00000821:  18
F02:0134         lda zp_sd_currentsector
               S01:00000822:  A5 42
F02:0135         adc fat32_readbuffer+14    ; reserved sectors lo
               S01:00000824:  6D 0E 02
F02:0136         sta fat32_fatstart
               S01:00000827:  85 46
F02:0137         sta fat32_datastart
               S01:00000829:  85 4A
F02:0138         lda zp_sd_currentsector+1
               S01:0000082B:  A5 43
F02:0139         adc fat32_readbuffer+15    ; reserved sectors hi
               S01:0000082D:  6D 0F 02
F02:0140         sta fat32_fatstart+1
               S01:00000830:  85 47
F02:0141         sta fat32_datastart+1
               S01:00000832:  85 4B
F02:0142         lda zp_sd_currentsector+2
               S01:00000834:  A5 44
F02:0143         adc #0
               S01:00000836:  69 00
F02:0144         sta fat32_fatstart+2
               S01:00000838:  85 48
F02:0145         sta fat32_datastart+2
               S01:0000083A:  85 4C
F02:0146         lda zp_sd_currentsector+3
               S01:0000083C:  A5 45
F02:0147         adc #0
               S01:0000083E:  69 00
F02:0148         sta fat32_fatstart+3
               S01:00000840:  85 49
F02:0149         sta fat32_datastart+3
               S01:00000842:  85 4D
F02:0150       
F02:0151         ; Calculate the starting sector of the data area
F02:0152         ldx fat32_readbuffer+16   ; number of FATs
               S01:00000844:  AE 10 02
F02:0153       .skipfatsloop
F02:0154         clc
               S01:00000847:  18
F02:0155         lda fat32_datastart
               S01:00000848:  A5 4A
F02:0156         adc fat32_readbuffer+36 ; fatsize 0
               S01:0000084A:  6D 24 02
F02:0157         sta fat32_datastart
               S01:0000084D:  85 4A
F02:0158         lda fat32_datastart+1
               S01:0000084F:  A5 4B
F02:0159         adc fat32_readbuffer+37 ; fatsize 1
               S01:00000851:  6D 25 02
F02:0160         sta fat32_datastart+1
               S01:00000854:  85 4B
F02:0161         lda fat32_datastart+2
               S01:00000856:  A5 4C
F02:0162         adc fat32_readbuffer+38 ; fatsize 2
               S01:00000858:  6D 26 02
F02:0163         sta fat32_datastart+2
               S01:0000085B:  85 4C
F02:0164         lda fat32_datastart+3
               S01:0000085D:  A5 4D
F02:0165         adc fat32_readbuffer+39 ; fatsize 3
               S01:0000085F:  6D 27 02
F02:0166         sta fat32_datastart+3
               S01:00000862:  85 4D
F02:0167         dex
               S01:00000864:  CA
F02:0168         bne .skipfatsloop
               S01:00000865:  D0 E0
F02:0169       
F02:0170         ; Sectors-per-cluster is a power of two from 1 to 128
F02:0171         lda fat32_readbuffer+13
               S01:00000867:  AD 0D 02
F02:0172         sta fat32_sectorspercluster
               S01:0000086A:  85 52
F02:0173       
F02:0174         ; Remember the root cluster
F02:0175         lda fat32_readbuffer+44
               S01:0000086C:  AD 2C 02
F02:0176         sta fat32_rootcluster
               S01:0000086F:  85 4E
F02:0177         lda fat32_readbuffer+45
               S01:00000871:  AD 2D 02
F02:0178         sta fat32_rootcluster+1
               S01:00000874:  85 4F
F02:0179         lda fat32_readbuffer+46
               S01:00000876:  AD 2E 02
F02:0180         sta fat32_rootcluster+2
               S01:00000879:  85 50
F02:0181         lda fat32_readbuffer+47
               S01:0000087B:  AD 2F 02
F02:0182         sta fat32_rootcluster+3
               S01:0000087E:  85 51
F02:0183       
F02:0184         clc
               S01:00000880:  18
F02:0185         rts
               S01:00000881:  60
F02:0186       
F02:0187       .error
F02:0188         sec
               S01:00000882:  38
F02:0189         rts
               S01:00000883:  60
F02:0190       
F02:0191       
F02:0192       fat32_seekcluster:
F02:0193         ; Gets ready to read fat32_nextcluster, and advances it according to the FAT
F02:0194         
F02:0195         ; FAT sector = (cluster*4) / 512 = (cluster*2) / 256
F02:0196         lda fat32_nextcluster
               S01:00000884:  A5 56
F02:0197         asl
               S01:00000886:  0A
F02:0198         lda fat32_nextcluster+1
               S01:00000887:  A5 57
F02:0199         rol
               S01:00000889:  2A
F02:0200         sta zp_sd_currentsector
               S01:0000088A:  85 42
F02:0201         lda fat32_nextcluster+2
               S01:0000088C:  A5 58
F02:0202         rol
               S01:0000088E:  2A
F02:0203         sta zp_sd_currentsector+1
               S01:0000088F:  85 43
F02:0204         lda fat32_nextcluster+3
               S01:00000891:  A5 59
F02:0205         rol
               S01:00000893:  2A
F02:0206         sta zp_sd_currentsector+2
               S01:00000894:  85 44
F02:0207         ; note: cluster numbers never have the top bit set, so no carry can occur
F02:0208       
F02:0209         ; Add FAT starting sector
F02:0210         lda zp_sd_currentsector
               S01:00000896:  A5 42
F02:0211         adc fat32_fatstart
               S01:00000898:  65 46
F02:0212         sta zp_sd_currentsector
               S01:0000089A:  85 42
F02:0213         lda zp_sd_currentsector+1
               S01:0000089C:  A5 43
F02:0214         adc fat32_fatstart+1
               S01:0000089E:  65 47
F02:0215         sta zp_sd_currentsector+1
               S01:000008A0:  85 43
F02:0216         lda zp_sd_currentsector+2
               S01:000008A2:  A5 44
F02:0217         adc fat32_fatstart+2
               S01:000008A4:  65 48
F02:0218         sta zp_sd_currentsector+2
               S01:000008A6:  85 44
F02:0219         lda #0
               S01:000008A8:  A9 00
F02:0220         adc fat32_fatstart+3
               S01:000008AA:  65 49
F02:0221         sta zp_sd_currentsector+3
               S01:000008AC:  85 45
F02:0222       
F02:0223         ; Target buffer
F02:0224         lda #<fat32_readbuffer
               S01:000008AE:  A9 00
F02:0225         sta zp_sd_address
               S01:000008B0:  85 40
F02:0226         lda #>fat32_readbuffer
               S01:000008B2:  A9 02
F02:0227         sta zp_sd_address+1
               S01:000008B4:  85 41
F02:0228       
F02:0229         ; Read the sector from the FAT
F02:0230         jsr sd_readsector
               S01:000008B6:  20 05 07
F02:0231       
F02:0232         ; Before using this FAT data, set currentsector ready to read the cluster itself
F02:0233         ; We need to multiply the cluster number minus two by the number of sectors per 
F02:0234         ; cluster, then add the data region start sector
F02:0235       
F02:0236         ; Subtract two from cluster number
F02:0237         sec
               S01:000008B9:  38
F02:0238         lda fat32_nextcluster
               S01:000008BA:  A5 56
F02:0239         sbc #2
               S01:000008BC:  E9 02
F02:0240         sta zp_sd_currentsector
               S01:000008BE:  85 42
F02:0241         lda fat32_nextcluster+1
               S01:000008C0:  A5 57
F02:0242         sbc #0
               S01:000008C2:  E9 00
F02:0243         sta zp_sd_currentsector+1
               S01:000008C4:  85 43
F02:0244         lda fat32_nextcluster+2
               S01:000008C6:  A5 58
F02:0245         sbc #0
               S01:000008C8:  E9 00
F02:0246         sta zp_sd_currentsector+2
               S01:000008CA:  85 44
F02:0247         lda fat32_nextcluster+3
               S01:000008CC:  A5 59
F02:0248         sbc #0
               S01:000008CE:  E9 00
F02:0249         sta zp_sd_currentsector+3
               S01:000008D0:  85 45
F02:0250         
F02:0251         ; Multiply by sectors-per-cluster which is a power of two between 1 and 128
F02:0252         lda fat32_sectorspercluster
               S01:000008D2:  A5 52
F02:0253       .spcshiftloop
F02:0254         lsr
               S01:000008D4:  4A
F02:0255         bcs .spcshiftloopdone
               S01:000008D5:  B0 0B
F02:0256         asl zp_sd_currentsector
               S01:000008D7:  06 42
F02:0257         rol zp_sd_currentsector+1
               S01:000008D9:  26 43
F02:0258         rol zp_sd_currentsector+2
               S01:000008DB:  26 44
F02:0259         rol zp_sd_currentsector+3
               S01:000008DD:  26 45
F02:0260         jmp .spcshiftloop
               S01:000008DF:  4C D4 08
F02:0261       .spcshiftloopdone
F02:0262       
F02:0263         ; Add the data region start sector
F02:0264         clc
               S01:000008E2:  18
F02:0265         lda zp_sd_currentsector
               S01:000008E3:  A5 42
F02:0266         adc fat32_datastart
               S01:000008E5:  65 4A
F02:0267         sta zp_sd_currentsector
               S01:000008E7:  85 42
F02:0268         lda zp_sd_currentsector+1
               S01:000008E9:  A5 43
F02:0269         adc fat32_datastart+1
               S01:000008EB:  65 4B
F02:0270         sta zp_sd_currentsector+1
               S01:000008ED:  85 43
F02:0271         lda zp_sd_currentsector+2
               S01:000008EF:  A5 44
F02:0272         adc fat32_datastart+2
               S01:000008F1:  65 4C
F02:0273         sta zp_sd_currentsector+2
               S01:000008F3:  85 44
F02:0274         lda zp_sd_currentsector+3
               S01:000008F5:  A5 45
F02:0275         adc fat32_datastart+3
               S01:000008F7:  65 4D
F02:0276         sta zp_sd_currentsector+3
               S01:000008F9:  85 45
F02:0277       
F02:0278         ; That's now ready for later code to read this sector in - tell it how many consecutive
F02:0279         ; sectors it can now read
F02:0280         lda fat32_sectorspercluster
               S01:000008FB:  A5 52
F02:0281         sta fat32_pendingsectors
               S01:000008FD:  85 53
F02:0282       
F02:0283         ; Now go back to looking up the next cluster in the chain
F02:0284         ; Find the offset to this cluster's entry in the FAT sector we loaded earlier
F02:0285       
F02:0286         ; Offset = (cluster*4) & 511 = (cluster & 127) * 4
F02:0287         lda fat32_nextcluster
               S01:000008FF:  A5 56
F02:0288         and #$7f
               S01:00000901:  29 7F
F02:0289         asl
               S01:00000903:  0A
F02:0290         asl
               S01:00000904:  0A
F02:0291         tay ; Y = low byte of offset
               S01:00000905:  A8
F02:0292       
F02:0293         ; Add the potentially carried bit to the high byte of the address
F02:0294         lda zp_sd_address+1
               S01:00000906:  A5 41
F02:0295         adc #0
               S01:00000908:  69 00
F02:0296         sta zp_sd_address+1
               S01:0000090A:  85 41
F02:0297       
F02:0298         ; Copy out the next cluster in the chain for later use
F02:0299         lda (zp_sd_address),y
               S01:0000090C:  B1 40
F02:0300         sta fat32_nextcluster
               S01:0000090E:  85 56
F02:0301         iny
               S01:00000910:  C8
F02:0302         lda (zp_sd_address),y
               S01:00000911:  B1 40
F02:0303         sta fat32_nextcluster+1
               S01:00000913:  85 57
F02:0304         iny
               S01:00000915:  C8
F02:0305         lda (zp_sd_address),y
               S01:00000916:  B1 40
F02:0306         sta fat32_nextcluster+2
               S01:00000918:  85 58
F02:0307         iny
               S01:0000091A:  C8
F02:0308         lda (zp_sd_address),y
               S01:0000091B:  B1 40
F02:0309         and #$0f
               S01:0000091D:  29 0F
F02:0310         sta fat32_nextcluster+3
               S01:0000091F:  85 59
F02:0311       
F02:0312         ; See if it's the end of the chain
F02:0313         ora #$f0
               S01:00000921:  09 F0
F02:0314         and fat32_nextcluster+2
               S01:00000923:  25 58
F02:0315         and fat32_nextcluster+1
               S01:00000925:  25 57
F02:0316         cmp #$ff
               S01:00000927:  C9 FF
F02:0317         bne .notendofchain
               S01:00000929:  D0 08
F02:0318         lda fat32_nextcluster
               S01:0000092B:  A5 56
F02:0319         cmp #$f8
               S01:0000092D:  C9 F8
F02:0320         bcc .notendofchain
               S01:0000092F:  90 02
F02:0321       
F02:0322         ; It's the end of the chain, set the top bits so that we can tell this later on
F02:0323         sta fat32_nextcluster+3
               S01:00000931:  85 59
F02:0324       .notendofchain
F02:0325       
F02:0326         rts
               S01:00000933:  60
F02:0327       
F02:0328       
F02:0329       fat32_readnextsector:
F02:0330         ; Reads the next sector from a cluster chain into the buffer at fat32_address.
F02:0331         ;
F02:0332         ; Advances the current sector ready for the next read and looks up the next cluster
F02:0333         ; in the chain when necessary.
F02:0334         ;
F02:0335         ; On return, carry is clear if data was read, or set if the cluster chain has ended.
F02:0336       
F02:0337         ; Maybe there are pending sectors in the current cluster
F02:0338         lda fat32_pendingsectors
               S01:00000934:  A5 53
F02:0339         bne .readsector
               S01:00000936:  D0 07
F02:0340       
F02:0341         ; No pending sectors, check for end of cluster chain
F02:0342         lda fat32_nextcluster+3
               S01:00000938:  A5 59
F02:0343         bmi .endofchain
               S01:0000093A:  30 20
F02:0344       
F02:0345         ; Prepare to read the next cluster
F02:0346         jsr fat32_seekcluster
               S01:0000093C:  20 84 08
F02:0347       
F02:0348       .readsector
F02:0349         dec fat32_pendingsectors
               S01:0000093F:  C6 53
F02:0350       
F02:0351         ; Set up target address  
F02:0352         lda fat32_address
               S01:00000941:  A5 54
F02:0353         sta zp_sd_address
               S01:00000943:  85 40
F02:0354         lda fat32_address+1
               S01:00000945:  A5 55
F02:0355         sta zp_sd_address+1
               S01:00000947:  85 41
F02:0356       
F02:0357         ; Read the sector
F02:0358         jsr sd_readsector
               S01:00000949:  20 05 07
F02:0359       
F02:0360         ; Advance to next sector
F02:0361         inc zp_sd_currentsector
               S01:0000094C:  E6 42
F02:0362         bne .sectorincrementdone
               S01:0000094E:  D0 0A
F02:0363         inc zp_sd_currentsector+1
               S01:00000950:  E6 43
F02:0364         bne .sectorincrementdone
               S01:00000952:  D0 06
F02:0365         inc zp_sd_currentsector+2
               S01:00000954:  E6 44
F02:0366         bne .sectorincrementdone
               S01:00000956:  D0 02
F02:0367         inc zp_sd_currentsector+3
               S01:00000958:  E6 45
F02:0368       .sectorincrementdone
F02:0369       
F02:0370         ; Success - clear carry and return
F02:0371         clc
               S01:0000095A:  18
F02:0372         rts
               S01:0000095B:  60
F02:0373       
F02:0374       .endofchain
F02:0375         ; End of chain - set carry and return
F02:0376         sec
               S01:0000095C:  38
F02:0377         rts
               S01:0000095D:  60
F02:0378       
F02:0379       
F02:0380       fat32_openroot:
F02:0381         ; Prepare to read the root directory
F02:0382       
F02:0383         lda fat32_rootcluster
               S01:0000095E:  A5 4E
F02:0384         sta fat32_nextcluster
               S01:00000960:  85 56
F02:0385         lda fat32_rootcluster+1
               S01:00000962:  A5 4F
F02:0386         sta fat32_nextcluster+1
               S01:00000964:  85 57
F02:0387         lda fat32_rootcluster+2
               S01:00000966:  A5 50
F02:0388         sta fat32_nextcluster+2
               S01:00000968:  85 58
F02:0389         lda fat32_rootcluster+3
               S01:0000096A:  A5 51
F02:0390         sta fat32_nextcluster+3
               S01:0000096C:  85 59
F02:0391       
F02:0392         jsr fat32_seekcluster
               S01:0000096E:  20 84 08
F02:0393       
F02:0394         ; Set the pointer to a large value so we always read a sector the first time through
F02:0395         lda #$ff
               S01:00000971:  A9 FF
F02:0396         sta zp_sd_address+1
               S01:00000973:  85 41
F02:0397       
F02:0398         rts
               S01:00000975:  60
F02:0399       
F02:0400       
F02:0401       fat32_opendirent:
F02:0402         ; Prepare to read from a file or directory based on a dirent
F02:0403         ;
F02:0404         ; Point zp_sd_address at the dirent
F02:0405       
F02:0406         ; Remember file size in bytes remaining
F02:0407         ldy #28
               S01:00000976:  A0 1C
F02:0408         lda (zp_sd_address),y
               S01:00000978:  B1 40
F02:0409         sta fat32_bytesremaining
               S01:0000097A:  85 5A
F02:0410         iny
               S01:0000097C:  C8
F02:0411         lda (zp_sd_address),y
               S01:0000097D:  B1 40
F02:0412         sta fat32_bytesremaining+1
               S01:0000097F:  85 5B
F02:0413         iny
               S01:00000981:  C8
F02:0414         lda (zp_sd_address),y
               S01:00000982:  B1 40
F02:0415         sta fat32_bytesremaining+2
               S01:00000984:  85 5C
F02:0416         iny
               S01:00000986:  C8
F02:0417         lda (zp_sd_address),y
               S01:00000987:  B1 40
F02:0418         sta fat32_bytesremaining+3
               S01:00000989:  85 5D
F02:0419       
F02:0420         ; Seek to first cluster
F02:0421         ldy #26
               S01:0000098B:  A0 1A
F02:0422         lda (zp_sd_address),y
               S01:0000098D:  B1 40
F02:0423         sta fat32_nextcluster
               S01:0000098F:  85 56
F02:0424         iny
               S01:00000991:  C8
F02:0425         lda (zp_sd_address),y
               S01:00000992:  B1 40
F02:0426         sta fat32_nextcluster+1
               S01:00000994:  85 57
F02:0427         ldy #20
               S01:00000996:  A0 14
F02:0428         lda (zp_sd_address),y
               S01:00000998:  B1 40
F02:0429         sta fat32_nextcluster+2
               S01:0000099A:  85 58
F02:0430         iny
               S01:0000099C:  C8
F02:0431         lda (zp_sd_address),y
               S01:0000099D:  B1 40
F02:0432         sta fat32_nextcluster+3
               S01:0000099F:  85 59
F02:0433       
F02:0434         jsr fat32_seekcluster
               S01:000009A1:  20 84 08
F02:0435       
F02:0436         ; Set the pointer to a large value so we always read a sector the first time through
F02:0437         lda #$ff
               S01:000009A4:  A9 FF
F02:0438         sta zp_sd_address+1
               S01:000009A6:  85 41
F02:0439       
F02:0440         rts
               S01:000009A8:  60
F02:0441       
F02:0442       
F02:0443       fat32_readdirent:
F02:0444         ; Read a directory entry from the open directory
F02:0445         ;
F02:0446         ; On exit the carry is set if there were no more directory entries.
F02:0447         ;
F02:0448         ; Otherwise, A is set to the file's attribute byte and
F02:0449         ; zp_sd_address points at the returned directory entry.
F02:0450         ; LFNs and empty entries are ignored automatically.
F02:0451       
F02:0452         ; Increment pointer by 32 to point to next entry
F02:0453         clc
               S01:000009A9:  18
F02:0454         lda zp_sd_address
               S01:000009AA:  A5 40
F02:0455         adc #32
               S01:000009AC:  69 20
F02:0456         sta zp_sd_address
               S01:000009AE:  85 40
F02:0457         lda zp_sd_address+1
               S01:000009B0:  A5 41
F02:0458         adc #0
               S01:000009B2:  69 00
F02:0459         sta zp_sd_address+1
               S01:000009B4:  85 41
F02:0460       
F02:0461         ; If it's not at the end of the buffer, we have data already
F02:0462         cmp #>(fat32_readbuffer+$200)
               S01:000009B6:  C9 04
F02:0463         bcc .gotdata
               S01:000009B8:  90 0F
F02:0464       
F02:0465         ; Read another sector
F02:0466         lda #<fat32_readbuffer
               S01:000009BA:  A9 00
F02:0467         sta fat32_address
               S01:000009BC:  85 54
F02:0468         lda #>fat32_readbuffer
               S01:000009BE:  A9 02
F02:0469         sta fat32_address+1
               S01:000009C0:  85 55
F02:0470       
F02:0471         jsr fat32_readnextsector
               S01:000009C2:  20 34 09
F02:0472         bcc .gotdata
               S01:000009C5:  90 02
F02:0473       
F02:0474       .endofdirectory
F02:0475         sec
               S01:000009C7:  38
F02:0476         rts
               S01:000009C8:  60
F02:0477       
F02:0478       .gotdata
F02:0479         ; Check first character
F02:0480         ldy #0
               S01:000009C9:  A0 00
F02:0481         lda (zp_sd_address),y
               S01:000009CB:  B1 40
F02:0482       
F02:0483         ; End of directory => abort
F02:0484         beq .endofdirectory
               S01:000009CD:  F0 F8
F02:0485       
F02:0486         ; Empty entry => start again
F02:0487         cmp #$e5
               S01:000009CF:  C9 E5
F02:0488         beq fat32_readdirent
               S01:000009D1:  F0 D6
F02:0489       
F02:0490         ; Check attributes
F02:0491         ldy #11
               S01:000009D3:  A0 0B
F02:0492         lda (zp_sd_address),y
               S01:000009D5:  B1 40
F02:0493         and #$3f
               S01:000009D7:  29 3F
F02:0494         cmp #$0f ; LFN => start again
               S01:000009D9:  C9 0F
F02:0495         beq fat32_readdirent
               S01:000009DB:  F0 CC
F02:0496       
F02:0497         ; Yield this result
F02:0498         clc
               S01:000009DD:  18
F02:0499         rts
               S01:000009DE:  60
F02:0500       
F02:0501       
F02:0502       fat32_finddirent:
F02:0503         ; Finds a particular directory entry.  X,Y point to the 11-character filename to seek.
F02:0504         ; The directory should already be open for iteration.
F02:0505       
F02:0506         ; Form ZP pointer to user's filename
F02:0507         stx fat32_filenamepointer
               S01:000009DF:  86 5A
F02:0508         sty fat32_filenamepointer+1
               S01:000009E1:  84 5B
F02:0509         
F02:0510         ; Iterate until name is found or end of directory
F02:0511       .direntloop
F02:0512         jsr fat32_readdirent
               S01:000009E3:  20 A9 09
F02:0513         ldy #10
               S01:000009E6:  A0 0A
F02:0514         bcc .comparenameloop
               S01:000009E8:  90 01
F02:0515         rts ; with carry set
               S01:000009EA:  60
F02:0516       
F02:0517       .comparenameloop
F02:0518         lda (zp_sd_address),y
               S01:000009EB:  B1 40
F02:0519         cmp (fat32_filenamepointer),y
               S01:000009ED:  D1 5A
F02:0520         bne .direntloop ; no match
               S01:000009EF:  D0 F2
F02:0521         dey
               S01:000009F1:  88
F02:0522         bpl .comparenameloop
               S01:000009F2:  10 F7
F02:0523       
F02:0524         ; Found it
F02:0525         clc
               S01:000009F4:  18
F02:0526         rts
               S01:000009F5:  60
F02:0527       
F02:0528       
F02:0529       fat32_file_readbyte:
F02:0530         ; Read a byte from an open file
F02:0531         ;
F02:0532         ; The byte is returned in A with C clear; or if end-of-file was reached, C is set instead
F02:0533       
F02:0534         sec
               S01:000009F6:  38
F02:0535       
F02:0536         ; Is there any data to read at all?
F02:0537         lda fat32_bytesremaining
               S01:000009F7:  A5 5A
F02:0538         ora fat32_bytesremaining+1
               S01:000009F9:  05 5B
F02:0539         ora fat32_bytesremaining+2
               S01:000009FB:  05 5C
F02:0540         ora fat32_bytesremaining+3
               S01:000009FD:  05 5D
F02:0541         beq .rts
               S01:000009FF:  F0 3D
F02:0542       
F02:0543         ; Decrement the remaining byte count
F02:0544         lda fat32_bytesremaining
               S01:00000A01:  A5 5A
F02:0545         sbc #1
               S01:00000A03:  E9 01
F02:0546         sta fat32_bytesremaining
               S01:00000A05:  85 5A
F02:0547         lda fat32_bytesremaining+1
               S01:00000A07:  A5 5B
F02:0548         sbc #0
               S01:00000A09:  E9 00
F02:0549         sta fat32_bytesremaining+1
               S01:00000A0B:  85 5B
F02:0550         lda fat32_bytesremaining+2
               S01:00000A0D:  A5 5C
F02:0551         sbc #0
               S01:00000A0F:  E9 00
F02:0552         sta fat32_bytesremaining+2
               S01:00000A11:  85 5C
F02:0553         lda fat32_bytesremaining+3
               S01:00000A13:  A5 5D
F02:0554         sbc #0
               S01:00000A15:  E9 00
F02:0555         sta fat32_bytesremaining+3
               S01:00000A17:  85 5D
F02:0556         
F02:0557         ; Need to read a new sector?
F02:0558         lda zp_sd_address+1
               S01:00000A19:  A5 41
F02:0559         cmp #>(fat32_readbuffer+$200)
               S01:00000A1B:  C9 04
F02:0560         bcc .gotdata
               S01:00000A1D:  90 0D
F02:0561       
F02:0562         ; Read another sector
F02:0563         lda #<fat32_readbuffer
               S01:00000A1F:  A9 00
F02:0564         sta fat32_address
               S01:00000A21:  85 54
F02:0565         lda #>fat32_readbuffer
               S01:00000A23:  A9 02
F02:0566         sta fat32_address+1
               S01:00000A25:  85 55
F02:0567       
F02:0568         jsr fat32_readnextsector
               S01:00000A27:  20 34 09
F02:0569         bcs .rts                    ; this shouldn't happen
               S01:00000A2A:  B0 12
F02:0570       
F02:0571       .gotdata
F02:0572         ldy #0
               S01:00000A2C:  A0 00
F02:0573         lda (zp_sd_address),y
               S01:00000A2E:  B1 40
F02:0574       
F02:0575         inc zp_sd_address
               S01:00000A30:  E6 40
F02:0576         bne .rts
               S01:00000A32:  D0 0A
F02:0577         inc zp_sd_address+1
               S01:00000A34:  E6 41
F02:0578         bne .rts
               S01:00000A36:  D0 06
F02:0579         inc zp_sd_address+2
               S01:00000A38:  E6 42
F02:0580         bne .rts
               S01:00000A3A:  D0 02
F02:0581         inc zp_sd_address+3
               S01:00000A3C:  E6 43
F02:0582       
F02:0583       .rts
F02:0584         rts
               S01:00000A3E:  60
F02:0585       
F02:0586       
F02:0587       fat32_file_read:
F02:0588         ; Read a whole file into memory.  It's assumed the file has just been opened 
F02:0589         ; and no data has been read yet.
F02:0590         ;
F02:0591         ; Also we read whole sectors, so data in the target region beyond the end of the 
F02:0592         ; file may get overwritten, up to the next 512-byte boundary.
F02:0593         ;
F02:0594         ; And we don't properly support 64k+ files, as it's unnecessary complication given
F02:0595         ; the 6502's small address space
F02:0596       
F02:0597         ; Round the size up to the next whole sector
F02:0598         lda fat32_bytesremaining
               S01:00000A3F:  A5 5A
F02:0599         cmp #1                      ; set carry if bottom 8 bits not zero
               S01:00000A41:  C9 01
F02:0600         lda fat32_bytesremaining+1
               S01:00000A43:  A5 5B
F02:0601         adc #0                      ; add carry, if any
               S01:00000A45:  69 00
F02:0602         lsr                         ; divide by 2
               S01:00000A47:  4A
F02:0603         adc #0                      ; round up
               S01:00000A48:  69 00
F02:0604       
F02:0605         ; No data?
F02:0606         beq .done
               S01:00000A4A:  F0 12
F02:0607       
F02:0608         ; Store sector count - not a byte count any more
F02:0609         sta fat32_bytesremaining
               S01:00000A4C:  85 5A
F02:0610       
F02:0611         ; Read entire sectors to the user-supplied buffer
F02:0612       .wholesectorreadloop
F02:0613         ; Read a sector to fat32_address
F02:0614         jsr fat32_readnextsector
               S01:00000A4E:  20 34 09
F02:0615       
F02:0616         ; Advance fat32_address by 512 bytes
F02:0617         lda fat32_address+1
               S01:00000A51:  A5 55
F02:0618         adc #2                      ; carry already clear
               S01:00000A53:  69 02
F02:0619         sta fat32_address+1
               S01:00000A55:  85 55
F02:0620       
F02:0621         ldx fat32_bytesremaining    ; note - actually loads sectors remaining
               S01:00000A57:  A6 5A
F02:0622         dex
               S01:00000A59:  CA
F02:0623         stx fat32_bytesremaining    ; note - actually stores sectors remaining
               S01:00000A5A:  86 5A
F02:0624       
F02:0625         bne .wholesectorreadloop
               S01:00000A5C:  D0 F0
F02:0626       
F02:0627       .done
F02:0628         rts
               S01:00000A5E:  60
F02:0629       
F00:0039         .include "libacia.s"
F03:0001       ;       ------------------ 6551 ACIA Subroutine Library -------------------
F03:0002       ; Includes:
F03:0003       ; acia_init       - Initializes the ACIA
F03:0004       ; print_hex_acia  - Prints a hex value in A
F03:0005       ; crlf		  - Prints <CR> followed by <LF>
F03:0006       ; clear_display   - Sends a <CLS> command
F03:0007       ; txpoll          - Polls the TX bit to see if the ACIA is ready
F03:0008       ; print_chara     - Prints a Character that is stored in A
F03:0009       ; print_char_acia - Same as print_chara
F03:0010       ; ascii_home      - Home the cursor
F03:0011       ; w_acia_full     - Print a NULL-Termintated String with >HIGH in Y and <LOW in X
F03:0012       
F03:0013       acia_init:
F03:0014         pha
               S01:00000A5F:  48
F03:0015         lda #%00001011          ; No parity, no echo, no interrupt
               S01:00000A60:  A9 0B
F03:0016         sta $8002
               S01:00000A62:  8D 02 80
F03:0017         lda #%00011111          ; 1 stop bit, 8 data bits, 19200 baud
               S01:00000A65:  A9 1F
F03:0018         sta $8003
               S01:00000A67:  8D 03 80
F03:0019         pla
               S01:00000A6A:  68
F03:0020         rts
               S01:00000A6B:  60
F03:0021       
F03:0022       print_hex_acia:
F03:0023         pha
               S01:00000A6C:  48
F03:0024         ror
               S01:00000A6D:  6A
F03:0025         ror
               S01:00000A6E:  6A
F03:0026         ror
               S01:00000A6F:  6A
F03:0027         ror
               S01:00000A70:  6A
F03:0028         jsr print_nybble   ; This is just som usful hex cod
               S01:00000A71:  20 75 0A
F03:0029         pla
               S01:00000A74:  68
F03:0030       print_nybble:
F03:0031         and #15
               S01:00000A75:  29 0F
F03:0032         cmp #10
               S01:00000A77:  C9 0A
F03:0033         bmi .skipletter
               S01:00000A79:  30 02
F03:0034         adc #6
               S01:00000A7B:  69 06
F03:0035       .skipletter
F03:0036         adc #48
               S01:00000A7D:  69 30
F03:0037        ; jsr print_char
F03:0038         jsr print_chara
               S01:00000A7F:  20 AF 0A
F03:0039         rts
               S01:00000A82:  60
F03:0040       
F03:0041       crlf:
F03:0042         pha
               S01:00000A83:  48
F03:0043         phx
               S01:00000A84:  DA
F03:0044         phy
               S01:00000A85:  5A
F03:0045         lda #$0d
               S01:00000A86:  A9 0D
F03:0046         jsr print_chara
               S01:00000A88:  20 AF 0A
F03:0047         lda #$0a
               S01:00000A8B:  A9 0A
F03:0048         jsr print_chara
               S01:00000A8D:  20 AF 0A
F03:0049         ply
               S01:00000A90:  7A
F03:0050         plx
               S01:00000A91:  FA
F03:0051         pla
               S01:00000A92:  68
F03:0052         rts
               S01:00000A93:  60
F03:0053       
F03:0054       cleardisplay:
F03:0055         pha
               S01:00000A94:  48
F03:0056         jsr txpoll  ; Poll the TX bit
               S01:00000A95:  20 9F 0A
F03:0057         lda #12     ; Print decimal 12 (CLS)
               S01:00000A98:  A9 0C
F03:0058         sta $8000
               S01:00000A9A:  8D 00 80
F03:0059         pla
               S01:00000A9D:  68
F03:0060         rts
               S01:00000A9E:  60
F03:0061       
F03:0062       txpoll:
F03:0063         lda $8001
               S01:00000A9F:  AD 01 80
F03:0064         and #$10    ; Poll the TX bit
               S01:00000AA2:  29 10
F03:0065         beq txpoll
               S01:00000AA4:  F0 F9
F03:0066         rts
               S01:00000AA6:  60
F03:0067       
F03:0068       rxpoll:
F03:0069         lda $8001
               S01:00000AA7:  AD 01 80
F03:0070         and #$08    ; Poll the RX bit
               S01:00000AAA:  29 08
F03:0071         beq rxpoll
               S01:00000AAC:  F0 F9
F03:0072         rts
               S01:00000AAE:  60
F03:0073       
F03:0074       
F03:0075       print_chara:
F03:0076         pha
               S01:00000AAF:  48
F03:0077         jsr txpoll  ; Poll the TX bit
               S01:00000AB0:  20 9F 0A
F03:0078         pla
               S01:00000AB3:  68
F03:0079         sta $8000   ; Print character from A
               S01:00000AB4:  8D 00 80
F03:0080         rts
               S01:00000AB7:  60
F03:0081       
F03:0082       print_char_acia:
F03:0083         jmp print_chara  ; Same as "print_chara"
               S01:00000AB8:  4C AF 0A
F03:0084       
F03:0085       ascii_home:
F03:0086         pha
               S01:00000ABB:  48
F03:0087         lda #1
               S01:00000ABC:  A9 01
F03:0088         jsr print_chara  ; Print 1 (HOME)
               S01:00000ABE:  20 AF 0A
F03:0089         pla
               S01:00000AC1:  68
F03:0090         rts
               S01:00000AC2:  60
F03:0091       
F03:0092       w_acia_full:
F03:0093         pha
               S01:00000AC3:  48
F03:0094         lda $ff
               S01:00000AC4:  A5 FF
F03:0095         pha        ; Push Previous States onto the stack
               S01:00000AC6:  48
F03:0096         lda $fe
               S01:00000AC7:  A5 FE
F03:0097         pha
               S01:00000AC9:  48
F03:0098         sty $ff    ; Set Y as the Upper Address (8-15)
               S01:00000ACA:  84 FF
F03:0099         stx $fe    ; Set X as the Lower Adderss (0-7)
               S01:00000ACC:  86 FE
F03:0100         ldy #0
               S01:00000ACE:  A0 00
F03:0101       acia_man:
F03:0102         jsr txpoll   ; Poll TX
               S01:00000AD0:  20 9F 0A
F03:0103         lda ($fe),y  ; Load the Address
               S01:00000AD3:  B1 FE
F03:0104         sta $8000    ; Print what is at the address
               S01:00000AD5:  8D 00 80
F03:0105         beq endwacia ; If Done, End
               S01:00000AD8:  F0 04
F03:0106         iny          ; Next Character
               S01:00000ADA:  C8
F03:0107         jmp acia_man ; Back to the top
               S01:00000ADB:  4C D0 0A
F03:0108       endwacia:
F03:0109         pla
               S01:00000ADE:  68
F03:0110         sta $fe
               S01:00000ADF:  85 FE
F03:0111         pla          ; Restore Variables
               S01:00000AE1:  68
F03:0112         sta $ff
               S01:00000AE2:  85 FF
F03:0113         pla
               S01:00000AE4:  68
F03:0114         rts
               S01:00000AE5:  60
F03:0115       
F00:0040       
F00:0041       wait:
F00:0042       	phx
               S01:00000AE6:  DA
F00:0043       	phy
               S01:00000AE7:  5A
F00:0044               ldy  #$ff
               S01:00000AE8:  A0 FF
F00:0045               ldx  #$ff
               S01:00000AEA:  A2 FF
F00:0046       delay   dex          ; (2 cycles)
               S01:00000AEC:  CA
F00:0047               bne  delay   ; (3 cycles in loop, 2 cycles at end)
               S01:00000AED:  D0 FD
F00:0048               dey          ; (2 cycles)
               S01:00000AEF:  88
F00:0049               bne  delay   ; (3 cycles in loop, 2 cycles at end)
               S01:00000AF0:  D0 FA
F00:0050       	ply
               S01:00000AF2:  7A
F00:0051       	plx
               S01:00000AF3:  FA
F00:0052       	rts
               S01:00000AF4:  60
F00:0053       
F00:0054       
F00:0055         .org $0f00
F00:0056         jsr via_init
               S02:00000F00:  20 00 06
F00:0057         .include "sys.s"
F04:0001       d400_sVoc1FreqLo = $b800
F04:0002       d401_sVoc1FreqHi = $b801
F04:0003       d402_sVoc1PWidthLo = $b802
F04:0004       d403_sVoc1PWidthHi = $b803
F04:0005       d404_sVoc1Control = $b804
F04:0006       d405_sVoc1AttDec = $b805
F04:0007       d406_sVoc1SusRel = $b806
F04:0008       d407_sVoc2FreqLo = $b807
F04:0009       d408_sVoc2FreqHi = $b808
F04:0010       d409_sVoc2PWidthLo = $b809
F04:0011       d40a_sVoc2PWidthHi = $b80a
F04:0012       d40b_sVoc2Control = $b80b
F04:0013       d40c_sVoc2AttDec = $b80c
F04:0014       d40d_sVoc2SusRel = $b80d
F04:0015       d40e_sVoc3FreqLo = $b80e
F04:0016       d40f_sVoc3FreqHi = $b80f
F04:0017       d410_sVoc3PWidthLo = $b810
F04:0018       d411_sVoc3PWidthHi = $b811
F04:0019       d412_sVoc3Control = $b812
F04:0020       d413_sVoc3AttDec = $b813
F04:0021       d414_sVoc3SusRel = $b814
F04:0022       d415_sFiltFreqLo = $b815
F04:0023       d416_sFiltFreqHi = $b816
F04:0024       d417_sFiltControl = $b817
F04:0025       d418_sFiltMode = $b818
F04:0026       
F04:0027       init:
F04:0028         sei
               S02:00000F03:  78
F04:0029         lda #$55
               S02:00000F04:  A9 55
F04:0030         sta scroll
               S02:00000F06:  85 00
F04:0031         stz count
               S02:00000F08:  64 03
F04:0032         lda #<irq
               S02:00000F0A:  A9 23
F04:0033         sta $7ffe
               S02:00000F0C:  8D FE 7F
F04:0034         lda #>irq
               S02:00000F0F:  A9 0F
F04:0035         sta $7fff
               S02:00000F11:  8D FF 7F
F04:0036         lda #$c0
               S02:00000F14:  A9 C0
F04:0037         sta $b00e
               S02:00000F16:  8D 0E B0
F04:0038         ; IRQ Inits Go Here
F04:0039         lda #0 ; Song Numbehr
               S02:00000F19:  A9 00
F04:0040         jsr InitSid
               S02:00000F1B:  20 78 0F
F04:0041         cli
               S02:00000F1E:  58
F04:0042         nop
               S02:00000F1F:  EA
F04:0043       ; You can put code you want to run in the backround here.
F04:0044       loop:
F04:0045         jmp textstart
               S02:00000F20:  4C 85 26
F04:0046       irq:
F04:0047         pha
               S02:00000F23:  48
F04:0048         phx
               S02:00000F24:  DA
F04:0049         phy
               S02:00000F25:  5A
F04:0050         lda #1
               S02:00000F26:  A9 01
F04:0051         sta irqst
               S02:00000F28:  85 04
F04:0052         inc framecount
               S02:00000F2A:  E6 05
F04:0053         ; IRQ code goes here
F04:0054         lda #$40
               S02:00000F2C:  A9 40
F04:0055         sta $b00d
               S02:00000F2E:  8D 0D B0
F04:0056         jsr putbut
               S02:00000F31:  20 8B 0F
F04:0057         jsr PlaySid
               S02:00000F34:  20 5F 26
F04:0058         lda scroll
               S02:00000F37:  A5 00
F04:0059         beq scrollercheck
               S02:00000F39:  F0 04
F04:0060         ply
               S02:00000F3B:  7A
F04:0061         plx
               S02:00000F3C:  FA
F04:0062         pla
               S02:00000F3D:  68
F04:0063         rti
               S02:00000F3E:  40
F04:0064       
F04:0065       scrollercheck:
F04:0066         lda count
               S02:00000F3F:  A5 03
F04:0067         sec
               S02:00000F41:  38
F04:0068         sbc #10
               S02:00000F42:  E9 0A
F04:0069         beq nott
               S02:00000F44:  F0 06
F04:0070         inc count
               S02:00000F46:  E6 03
F04:0071         ply
               S02:00000F48:  7A
F04:0072         plx
               S02:00000F49:  FA
F04:0073         pla
               S02:00000F4A:  68
F04:0074         rti
               S02:00000F4B:  40
F04:0075       nott:
F04:0076         stz count
               S02:00000F4C:  64 03
F04:0077         lda sco
               S02:00000F4E:  A5 02
F04:0078         bne eeeee
               S02:00000F50:  D0 02
F04:0079       scroller:
F04:0080         ldx #0
               S02:00000F52:  A2 00
F04:0081       eeeee:
F04:0082         ldx sco
               S02:00000F54:  A6 02
F04:0083         ldx #<thingy
               S02:00000F56:  A2 74
F04:0084         ldy #>thingy
               S02:00000F58:  A0 0F
F04:0085         jsr w_acia_full
               S02:00000F5A:  20 C3 0A
F04:0086         lda scrollmsg,x
               S02:00000F5D:  BD 7C 2D
F04:0087         jsr print_chara
               S02:00000F60:  20 AF 0A
F04:0088         beq endscroll
               S02:00000F63:  F0 07
F04:0089         inx
               S02:00000F65:  E8
F04:0090         stx sco
               S02:00000F66:  86 02
F04:0091         ply
               S02:00000F68:  7A
F04:0092         plx
               S02:00000F69:  FA
F04:0093         pla
               S02:00000F6A:  68
F04:0094         rti
               S02:00000F6B:  40
F04:0095       endscroll:
F04:0096         lda #$55
               S02:00000F6C:  A9 55
F04:0097         sta scroll
               S02:00000F6E:  85 00
F04:0098         ply
               S02:00000F70:  7A
F04:0099         plx
               S02:00000F71:  FA
F04:0100         pla
               S02:00000F72:  68
F04:0101         rti
               S02:00000F73:  40
F04:0102       
F04:0103       thingy:
F04:0104         .byte $17, $0e, $40, $00
               S02:00000F74:  17
               S02:00000F75:  0E
               S02:00000F76:  40
               S02:00000F77:  00
F04:0105       
F04:0106       InitSid             ldx #$63
               S02:00000F78:  A2 63
F04:0107                           stx $b004
               S02:00000F7A:  8E 04 B0
F04:0108                           stx $b007
               S02:00000F7D:  8E 07 B0
F04:0109                           ldy #$26
               S02:00000F80:  A0 26
F04:0110                           sty $b005
               S02:00000F82:  8C 05 B0
F04:0111                           sty $b006
               S02:00000F85:  8C 06 B0
F04:0112       
F04:0113                           jmp initsid2
               S02:00000F88:  4C 56 26
F04:0114       
F04:0115       putbut              ldx #$63
               S02:00000F8B:  A2 63
F04:0116                           stx $b004
               S02:00000F8D:  8E 04 B0
F04:0117                           stx $b007
               S02:00000F90:  8E 07 B0
F04:0118                           ldy #$26
               S02:00000F93:  A0 26
F04:0119                           sty $b005
               S02:00000F95:  8C 05 B0
F04:0120                           sty $b006
               S02:00000F98:  8C 06 B0
F04:0121                           rts
               S02:00000F9B:  60
F04:0122       
F04:0123       
F04:0124       	.org $1000
F04:0125       
F04:0126       L1000               sei
               S03:00001000:  78
F04:0127                           lda #$01
               S03:00001001:  A9 01
F04:0128                           sta $b800
               S03:00001003:  8D 00 B8
F04:0129                           lda #$7f
               S03:00001006:  A9 7F
F04:0130                           sta $dc0d
               S03:00001008:  8D 0D DC
F04:0131                           lda #$35
               S03:0000100B:  A9 35
F04:0132                           sta $01
               S03:0000100D:  85 01
F04:0133                           lda #$00
               S03:0000100F:  A9 00
F04:0134                           ldx #$00
               S03:00001011:  A2 00
F04:0135                           ldy #$00
               S03:00001013:  A0 00
F04:0136                           jsr S1100
               S03:00001015:  20 00 11
F04:0137                           lda #$37
               S03:00001018:  A9 37
F04:0138                           sta $01
               S03:0000101A:  85 01
F04:0139                           lda #$34
               S03:0000101C:  A9 34
F04:0140                           sta $0314
               S03:0000101E:  8D 14 03
F04:0141                           lda #$10
               S03:00001021:  A9 10
F04:0142                           sta $0315
               S03:00001023:  8D 15 03
F04:0143                           lda #$3a
               S03:00001026:  A9 3A
F04:0144                           sta $b800
               S03:00001028:  8D 00 B8
F04:0145                           lda #$1b
               S03:0000102B:  A9 1B
F04:0146                           sta $d011
               S03:0000102D:  8D 11 D0
F04:0147                           cli
               S03:00001030:  58
F04:0148       L1031               jmp L1031
               S03:00001031:  4C 31 10
F04:0149                           
F04:0150       L1034               lda #$01
               S03:00001034:  A9 01
F04:0151                           sta $b800
               S03:00001036:  8D 00 B8
F04:0152                           lda #$35
               S03:00001039:  A9 35
F04:0153                           sta $01
               S03:0000103B:  85 01
F04:0154                           dec $b800
               S03:0000103D:  CE 00 B8
F04:0155                           jsr L1103
               S03:00001040:  20 03 11
F04:0156                           inc $b800
               S03:00001043:  EE 00 B8
F04:0157                           lda #$37
               S03:00001046:  A9 37
F04:0158                           sta $01
               S03:00001048:  85 01
F04:0159                           inc $104e
               S03:0000104A:  EE 4E 10
F04:0160                           lda #$78
               S03:0000104D:  A9 78
F04:0161                           and #$01
               S03:0000104F:  29 01
F04:0162                           tax
               S03:00001051:  AA
F04:0163                           lda $105b,x
               S03:00001052:  BD 5B 10
F04:0164                           sta $b800
               S03:00001055:  8D 00 B8
F04:0165                           jmp $ea7e
               S03:00001058:  4C 7E EA
F04:0166       
F04:0167       	.binary "sys1.bin"
               S03:0000105B:  3A CA BF BF 0B BF BF 0B 00 06 00 00 00 00 00 00
               S03:0000106B:  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
F04:0168       
F04:0169       S1100               jmp L1774
               S03:00001100:  4C 74 17
F04:0170                           
F04:0171       L1103               jmp L11f2
               S03:00001103:  4C F2 11
F04:0172                           
F04:0173       L1106               and $4d20
               S03:00001106:  2D 20 4D
F04:0174                           eor $53,x
               S03:00001109:  55 53
F04:0175                           eor #$43
               S03:0000110B:  49 43
F04:0176                           jsr $5942
               S03:0000110D:  20 42 59
F04:0177                           jsr $4d41
               S03:00001110:  20 41 4D
F04:0178                           lsr a
               S03:00001113:  4A
F04:0179                           bit $4e20
               S03:00001114:  2C 20 4E
F04:0180                           eor ($4d,x)
               S03:00001117:  41 4D
F04:0181                           eor $44
               S03:00001119:  45 44
F04:0182                           jsr $5327
               S03:0000111B:  20 27 53
F04:0183                           eor $3453,y
               S03:0000111E:  59 53 34
F04:0184                           bmi L115c
               S03:00001121:  30 39
F04:0185                           rol $27,x
               S03:00001123:  36 27
F04:0186                           jsr S202d
               S03:00001125:  20 2D 20
F04:0187       
F04:0188       	.binary "sys2.bin"
               S03:00001128:  43 4F 4E 56 45 52 54 45 44 20 42 59 20 50 41 47
               S03:00001138:  45 20 2D 20 50 4C 41 59 45 52 20 42 59 20 54 42
F04:0189       
F04:0190       L115c		    rol $04
               S03:0000115C:  26 04
F04:0191       		    rol $9b,x
               S03:0000115E:  36 9B
F04:0192       
F04:0193       	.binary "sys3.bin"
               S03:00001160:  37 7A 20 1B 1A 03 03 0F 09 02 04 E9 0A 22 23 24
               S03:00001170:  24 00 00 00 51 2B 3C 00 00 00 51 2B 3C 00 08 00
F04:0194       
F04:0195       L11f2               lda #$4f
               S03:000011F2:  A9 4F
F04:0196                           sta d418_sFiltMode
               S03:000011F4:  8D 18 B8
F04:0197                           bne L11fa
               S03:000011F7:  D0 01
F04:0198                           rts
               S03:000011F9:  60
F04:0199                           
F04:0200       L11fa               ldx #$02
               S03:000011FA:  A2 02
F04:0201       L11fc               stx $aa
               S03:000011FC:  86 AA
F04:0202                           lda $1159,x
               S03:000011FE:  BD 59 11
F04:0203                           sta $ab
               S03:00001201:  85 AB
F04:0204                           tay
               S03:00001203:  A8
F04:0205                           lda #$01
               S03:00001204:  A9 01
F04:0206                           bne L1215
               S03:00001206:  D0 0D
F04:0207                           lda $1171,x
               S03:00001208:  BD 71 11
F04:0208                           beq L1210
               S03:0000120B:  F0 03
F04:0209                           jmp L1353
               S03:0000120D:  4C 53 13
F04:0210                           
F04:0211       L1210               dec $1186,x
               S03:00001210:  DE 86 11
F04:0212                           beq L1218
               S03:00001213:  F0 03
F04:0213       L1215               jmp L14ea
               S03:00001215:  4C EA 14
F04:0214                           
F04:0215       L1218               sta $11bc,x
               S03:00001218:  9D BC 11
F04:0216                           sta d406_sVoc1SusRel,y
               S03:0000121B:  99 06 B8
F04:0217                           lda $115f,x
               S03:0000121E:  BD 5F 11
F04:0218                           sta $a5
               S03:00001221:  85 A5
F04:0219                           lda $1162,x
               S03:00001223:  BD 62 11
F04:0220                           sta $a6
               S03:00001226:  85 A6
F04:0221                           ldy L115c,x
               S03:00001228:  BC 5C 11
F04:0222                           lda ($a5),y
               S03:0000122B:  B1 A5
F04:0223                           beq L1264
               S03:0000122D:  F0 35
F04:0224                           jmp L12d1
               S03:0000122F:  4C D1 12
F04:0225                           
F04:0226       L1232               ldx $aa
               S03:00001232:  A6 AA
F04:0227                           dex
               S03:00001234:  CA
F04:0228                           bpl L11fc
               S03:00001235:  10 C5
F04:0229                           lda $1205
               S03:00001237:  AD 05 12
F04:0230                           eor #$01
               S03:0000123A:  49 01
F04:0231                           sta $1205
               S03:0000123C:  8D 05 12
F04:0232                           ldy $118c
               S03:0000123F:  AC 8C 11
F04:0233                           lda #$01
               S03:00001242:  A9 01
F04:0234                           ora #$f0
               S03:00001244:  09 F0
F04:0235                           sta d417_sFiltControl
               S03:00001246:  8D 17 B8
F04:0236                           ldy #$ef
               S03:00001249:  A0 EF
F04:0237       L124b               lda $246e,y
               S03:0000124B:  B9 6E 24
F04:0238                           bne L1254
               S03:0000124E:  D0 04
F04:0239                           dey
               S03:00001250:  88
F04:0240                           lda $246e,y
               S03:00001251:  B9 6E 24
F04:0241       L1254               cmp #$ff
               S03:00001254:  C9 FF
F04:0242                           bne L125c
               S03:00001256:  D0 04
F04:0243                           ldy #$ea
               S03:00001258:  A0 EA
F04:0244                           beq L124b
               S03:0000125A:  F0 EF
F04:0245       L125c               sta d416_sFiltFreqHi
               S03:0000125C:  8D 16 B8
F04:0246                           iny
               S03:0000125F:  C8
F04:0247                           sty $124a
               S03:00001260:  8C 4A 12
F04:0248                           rts
               S03:00001263:  60
F04:0249                           
F04:0250       L1264               sta L115c,x
               S03:00001264:  9D 5C 11
F04:0251                           sta $11d1,x
               S03:00001267:  9D D1 11
F04:0252                           lda $1165,x
               S03:0000126A:  BD 65 11
F04:0253                           beq L1275
               S03:0000126D:  F0 06
F04:0254                           dec $1165,x
               S03:0000126F:  DE 65 11
F04:0255                           jmp L12cc
               S03:00001272:  4C CC 12
F04:0256                           
F04:0257       L1275               lda $116b,x
               S03:00001275:  BD 6B 11
F04:0258                           sta $a7
               S03:00001278:  85 A7
F04:0259                           lda $116e,x
               S03:0000127A:  BD 6E 11
F04:0260                           sta $a8
               S03:0000127D:  85 A8
F04:0261                           ldy $1168,x
               S03:0000127F:  BC 68 11
F04:0262                           lda ($a7),y
               S03:00001282:  B1 A7
F04:0263                           bne L128f
               S03:00001284:  D0 09
F04:0264                           iny
               S03:00001286:  C8
F04:0265                           lda ($a7),y
               S03:00001287:  B1 A7
F04:0266                           sta $1168,x
               S03:00001289:  9D 68 11
F04:0267       
F04:0268                           tay
               S03:0000128C:  A8
F04:0269                           lda ($a7),y
               S03:0000128D:  B1 A7
F04:0270       L128f               bpl L12b3
               S03:0000128F:  10 22
F04:0271                           cmp #$c0
               S03:00001291:  C9 C0
F04:0272                           bcc L12a9
               S03:00001293:  90 14
F04:0273                           cmp #$ff
               S03:00001295:  C9 FF
F04:0274                           bne L129f
               S03:00001297:  D0 06
F04:0275                           lda #$00
               S03:00001299:  A9 00
F04:0276                           sta L11f2 + 1
               S03:0000129B:  8D F3 11
F04:0277                           rts
               S03:0000129E:  60
F04:0278                           
F04:0279       L129f               and #$3f
               S03:0000129F:  29 3F
F04:0280                           sta $1165,x
               S03:000012A1:  9D 65 11
F04:0281                           iny
               S03:000012A4:  C8
F04:0282                           lda ($a7),y
               S03:000012A5:  B1 A7
F04:0283                           bne L12b3
               S03:000012A7:  D0 0A
F04:0284       L12a9               and #$1f
               S03:000012A9:  29 1F
F04:0285                           sta $1177,x
               S03:000012AB:  9D 77 11
F04:0286                           iny
               S03:000012AE:  C8
F04:0287                           lda ($a7),y
               S03:000012AF:  B1 A7
F04:0288                           bmi L129f
               S03:000012B1:  30 EC
F04:0289       L12b3               sta $a7
               S03:000012B3:  85 A7
F04:0290                           iny
               S03:000012B5:  C8
F04:0291                           tya
               S03:000012B6:  98
F04:0292                           sta $1168,x
               S03:000012B7:  9D 68 11
F04:0293                           ldy $a7
               S03:000012BA:  A4 A7
F04:0294                           lda $1874,y
               S03:000012BC:  B9 74 18
F04:0295                           sta $115f,x
               S03:000012BF:  9D 5F 11
F04:0296                           sta $a5
               S03:000012C2:  85 A5
F04:0297                           lda $20c7,y
               S03:000012C4:  B9 C7 20
F04:0298                           sta $1162,x
               S03:000012C7:  9D 62 11
F04:0299                           sta $a6
               S03:000012CA:  85 A6
F04:0300       L12cc               ldy L115c,x
               S03:000012CC:  BC 5C 11
F04:0301                           lda ($a5),y
               S03:000012CF:  B1 A5
F04:0302       L12d1               sta $1171,x
               S03:000012D1:  9D 71 11
F04:0303                           cmp #$60
               S03:000012D4:  C9 60
F04:0304                           bcc L132f
               S03:000012D6:  90 57
F04:0305                           cmp #$80
               S03:000012D8:  C9 80
F04:0306                           bcc L1310
               S03:000012DA:  90 34
F04:0307                           cmp #$c0
               S03:000012DC:  C9 C0
F04:0308                           bcc L1302
               S03:000012DE:  90 22
F04:0309       L12e0               and #$3f
               S03:000012E0:  29 3F
F04:0310                           sta $11bc,x
               S03:000012E2:  9D BC 11
F04:0311                           sty $a9
               S03:000012E5:  84 A9
F04:0312                           tay
               S03:000012E7:  A8
F04:0313                           lda $20e6,y
               S03:000012E8:  B9 E6 20
F04:0314                           sta $11bf,x
               S03:000012EB:  9D BF 11
F04:0315                           lda $20e7,y
               S03:000012EE:  B9 E7 20
F04:0316                           sta $11c2,x
               S03:000012F1:  9D C2 11
F04:0317                           lda $20e8,y
               S03:000012F4:  B9 E8 20
F04:0318                           sta $11c5,x
               S03:000012F7:  9D C5 11
F04:0319                           ldy $a9
               S03:000012FA:  A4 A9
F04:0320                           iny
               S03:000012FC:  C8
F04:0321                           lda ($a5),y
               S03:000012FD:  B1 A5
F04:0322                           jmp L132f
               S03:000012FF:  4C 2F 13
F04:0323                           
F04:0324       L1302               and #$3f
               S03:00001302:  29 3F
F04:0325                           sta $118c,x
               S03:00001304:  9D 8C 11
F04:0326                           iny
               S03:00001307:  C8
F04:0327                           lda ($a5),y
               S03:00001308:  B1 A5
F04:0328                           bmi L12e0
               S03:0000130A:  30 D4
F04:0329                           cmp #$60
               S03:0000130C:  C9 60
F04:0330                           bcc L132f
               S03:0000130E:  90 1F
F04:0331       L1310               and #$1f
               S03:00001310:  29 1F
F04:0332                           sta $11d1,x
               S03:00001312:  9D D1 11
F04:0333                           sty $a9
               S03:00001315:  84 A9
F04:0334                           tay
               S03:00001317:  A8
F04:0335                           lda $2434,y
               S03:00001318:  B9 34 24
F04:0336                           tay
               S03:0000131B:  A8
F04:0337                           lda $2439,y
               S03:0000131C:  B9 39 24
F04:0338                           sta $11da,x
               S03:0000131F:  9D DA 11
F04:0339                           sta $11dd,x
               S03:00001322:  9D DD 11
F04:0340                           iny
               S03:00001325:  C8
F04:0341                           tya
               S03:00001326:  98
F04:0342                           sta $11d4,x
               S03:00001327:  9D D4 11
F04:0343                           ldy $a9
               S03:0000132A:  A4 A9
F04:0344                           iny
               S03:0000132C:  C8
F04:0345                           lda ($a5),y
               S03:0000132D:  B1 A5
F04:0346       L132f               sta $1174,x
               S03:0000132F:  9D 74 11
F04:0347                           clc
               S03:00001332:  18
F04:0348                           adc $1177,x
               S03:00001333:  7D 77 11
F04:0349                           sta $117a,x
               S03:00001336:  9D 7A 11
F04:0350                           iny
               S03:00001339:  C8
F04:0351                           lda ($a5),y
               S03:0000133A:  B1 A5
F04:0352                           asl a
               S03:0000133C:  0A
F04:0353                           sec
               S03:0000133D:  38
F04:0354                           sbc #$01
               S03:0000133E:  E9 01
F04:0355                           sta $1186,x
               S03:00001340:  9D 86 11
F04:0356                           sta $1189,x
               S03:00001343:  9D 89 11
F04:0357                           iny
               S03:00001346:  C8
F04:0358                           tya
               S03:00001347:  98
F04:0359                           sta L115c,x
               S03:00001348:  9D 5C 11
F04:0360                           lda #$00
               S03:0000134B:  A9 00
F04:0361                           bne L1352
               S03:0000134D:  D0 03
F04:0362                           jmp L1232
               S03:0000134F:  4C 32 12
F04:0363                           
F04:0364       L1352               rts
               S03:00001352:  60
F04:0365                           
F04:0366       L1353               ldy $118c,x
               S03:00001353:  BC 8C 11
F04:0367                           sty $a9
               S03:00001356:  84 A9
F04:0368                           lda $23a9,y
               S03:00001358:  B9 A9 23
F04:0369                           sta $a5
               S03:0000135B:  85 A5
F04:0370                           dex
               S03:0000135D:  CA
F04:0371                           bpl L137c
               S03:0000135E:  10 1C
F04:0372                           and #$07
               S03:00001360:  29 07
F04:0373                           sta $1243
               S03:00001362:  8D 43 12
F04:0374                           lda $22e9,y
               S03:00001365:  B9 E9 22
F04:0375                           bmi L137c
               S03:00001368:  30 12
F04:0376                           tay
               S03:0000136A:  A8
F04:0377                           lda $244c,y
               S03:0000136B:  B9 4C 24
F04:0378                           tay
               S03:0000136E:  A8
F04:0379                           lda $246e,y
               S03:0000136F:  B9 6E 24
F04:0380                           sta L11f2 + 1
               S03:00001372:  8D F3 11
F04:0381                           iny
               S03:00001375:  C8
F04:0382                           sty $1259
               S03:00001376:  8C 59 12
F04:0383                           sty $124a
               S03:00001379:  8C 4A 12
F04:0384       L137c               ldx $a9
               S03:0000137C:  A6 A9
F04:0385                           ldy $ab
               S03:0000137E:  A4 AB
F04:0386                           lda $2269,x
               S03:00001380:  BD 69 22
F04:0387                           sta d405_sVoc1AttDec,y
               S03:00001383:  99 05 B8
F04:0388                           lda $22a9,x
               S03:00001386:  BD A9 22
F04:0389                           sta d406_sVoc1SusRel,y
               S03:00001389:  99 06 B8
F04:0390                           ldx $aa
               S03:0000138C:  A6 AA
F04:0391                           lda #$00
               S03:0000138E:  A9 00
F04:0392                           sta $1183,x
               S03:00001390:  9D 83 11
F04:0393                           sta $11b3,x
               S03:00001393:  9D B3 11
F04:0394                           sta $1171,x
               S03:00001396:  9D 71 11
F04:0395                           lda $a5
               S03:00001399:  A5 A5
F04:0396                           and #$20
               S03:0000139B:  29 20
F04:0397                           bne L13b2
               S03:0000139D:  D0 13
F04:0398                           sta $1195,x
               S03:0000139F:  9D 95 11
F04:0399                           sta $119e,x
               S03:000013A2:  9D 9E 11
F04:0400                           ldx $a9
               S03:000013A5:  A6 A9
F04:0401                           lda $20e9,x
               S03:000013A7:  BD E9 20
F04:0402                           sta d403_sVoc1PWidthHi,y
               S03:000013AA:  99 03 B8
F04:0403                           ldx $aa
               S03:000013AD:  A6 AA
F04:0404                           sta $1198,x
               S03:000013AF:  9D 98 11
F04:0405       L13b2               ldy $a9
               S03:000013B2:  A4 A9
F04:0406                           lda $a5
               S03:000013B4:  A5 A5
F04:0407                           and #$10
               S03:000013B6:  29 10
F04:0408                           sta $11e6,x
               S03:000013B8:  9D E6 11
F04:0409                           beq L142a
               S03:000013BB:  F0 6D
F04:0410                           lda $2369,y
               S03:000013BD:  B9 69 23
F04:0411                           sta $11ef,x
               S03:000013C0:  9D EF 11
F04:0412                           beq L13f5
               S03:000013C3:  F0 30
F04:0413                           ldx $2329,y
               S03:000013C5:  BE 29 23
F04:0414                           lda $2569,x
               S03:000013C8:  BD 69 25
F04:0415                           ldx $aa
               S03:000013CB:  A6 AA
F04:0416                           sta $11e9,x
               S03:000013CD:  9D E9 11
F04:0417                           sta $11ec,x
               S03:000013D0:  9D EC 11
F04:0418                           inc $11ec,x
               S03:000013D3:  FE EC 11
F04:0419                           tay
               S03:000013D6:  A8
F04:0420                           lda $256e,y
               S03:000013D7:  B9 6E 25
F04:0421                           sta $a7
               S03:000013DA:  85 A7
F04:0422                           ldx $25e2,y
               S03:000013DC:  BE E2 25
F04:0423                           lda $17af,x
               S03:000013DF:  BD AF 17
F04:0424                           ldy $ab
               S03:000013E2:  A4 AB
F04:0425                           sta d400_sVoc1FreqLo,y
               S03:000013E4:  99 00 B8
F04:0426                           lda $180f,x
               S03:000013E7:  BD 0F 18
F04:0427                           sta d401_sVoc1FreqHi,y
               S03:000013EA:  99 01 B8
F04:0428                           lda $a7
               S03:000013ED:  A5 A7
F04:0429                           sta d404_sVoc1Control,y
               S03:000013EF:  99 04 B8
F04:0430                           jmp L1232
               S03:000013F2:  4C 32 12
F04:0431                           
F04:0432       L13f5               ldx $2329,y
               S03:000013F5:  BE 29 23
F04:0433                           lda $2569,x
               S03:000013F8:  BD 69 25
F04:0434                           ldx $aa
               S03:000013FB:  A6 AA
F04:0435                           sta $11e9,x
               S03:000013FD:  9D E9 11
F04:0436                           sta $11ec,x
               S03:00001400:  9D EC 11
F04:0437                           inc $11ec,x
               S03:00001403:  FE EC 11
F04:0438                           tay
               S03:00001406:  A8
F04:0439                           lda $256e,y
               S03:00001407:  B9 6E 25
F04:0440                           sta $a7
               S03:0000140A:  85 A7
F04:0441                           lda $25e2,y
               S03:0000140C:  B9 E2 25
F04:0442                           clc
               S03:0000140F:  18
F04:0443                           adc $1174,x
               S03:00001410:  7D 74 11
F04:0444                           tax
               S03:00001413:  AA
F04:0445                           lda $17af,x
               S03:00001414:  BD AF 17
F04:0446                           ldy $ab
               S03:00001417:  A4 AB
F04:0447                           sta d400_sVoc1FreqLo,y
               S03:00001419:  99 00 B8
F04:0448                           lda $180f,x
               S03:0000141C:  BD 0F 18
F04:0449                           sta d401_sVoc1FreqHi,y
               S03:0000141F:  99 01 B8
F04:0450                           lda $a7
               S03:00001422:  A5 A7
F04:0451                           sta d404_sVoc1Control,y
               S03:00001424:  99 04 B8
F04:0452                           jmp L1232
               S03:00001427:  4C 32 12
F04:0453                           
F04:0454       L142a               lda $a5
               S03:0000142A:  A5 A5
F04:0455                           bpl L144f
               S03:0000142C:  10 21
F04:0456                           lda #$81
               S03:0000142E:  A9 81
F04:0457                           ldy $ab
               S03:00001430:  A4 AB
F04:0458                           sta d404_sVoc1Control,y
               S03:00001432:  99 04 B8
F04:0459                           lda #$bf
               S03:00001435:  A9 BF
F04:0460                           sta d400_sVoc1FreqLo,y
               S03:00001437:  99 00 B8
F04:0461                           sta d401_sVoc1FreqHi,y
               S03:0000143A:  99 01 B8
F04:0462                           ldy $117a,x
               S03:0000143D:  BC 7A 11
F04:0463                           lda $180f,y
               S03:00001440:  B9 0F 18
F04:0464                           sta $1192,x
               S03:00001443:  9D 92 11
F04:0465                           lda $17af,y
               S03:00001446:  B9 AF 17
F04:0466                           sta $118f,x
               S03:00001449:  9D 8F 11
F04:0467                           jmp L1472
               S03:0000144C:  4C 72 14
F04:0468                           
F04:0469       L144f               lda $21a9,y
               S03:0000144F:  B9 A9 21
F04:0470                           ldy $ab
               S03:00001452:  A4 AB
F04:0471                           sta d404_sVoc1Control,y
               S03:00001454:  99 04 B8
F04:0472                           ldy $117a,x
               S03:00001457:  BC 7A 11
F04:0473                           lda $180f,y
               S03:0000145A:  B9 0F 18
F04:0474                           sta $a7
               S03:0000145D:  85 A7
F04:0475                           lda $17af,y
               S03:0000145F:  B9 AF 17
F04:0476                           ldy $ab
               S03:00001462:  A4 AB
F04:0477                           sta d400_sVoc1FreqLo,y
               S03:00001464:  99 00 B8
F04:0478                           sta $118f,x
               S03:00001467:  9D 8F 11
F04:0479                           lda $a7
               S03:0000146A:  A5 A7
F04:0480                           sta d401_sVoc1FreqHi,y
               S03:0000146C:  99 01 B8
F04:0481                           sta $1192,x
               S03:0000146F:  9D 92 11
F04:0482       L1472               lda $a5
               S03:00001472:  A5 A5
F04:0483                           and #$40
               S03:00001474:  29 40
F04:0484                           sta $11a7,x
               S03:00001476:  9D A7 11
F04:0485                           beq L1499
               S03:00001479:  F0 1E
F04:0486                           ldy $a9
               S03:0000147B:  A4 A9
F04:0487                           lda $2329,y
               S03:0000147D:  B9 29 23
F04:0488                           sta $11aa,x
               S03:00001480:  9D AA 11
F04:0489                           lda $2369,y
               S03:00001483:  B9 69 23
F04:0490                           sta $a7
               S03:00001486:  85 A7
F04:0491                           and #$0f
               S03:00001488:  29 0F
F04:0492                           sta $11b0,x
               S03:0000148A:  9D B0 11
F04:0493                           sta $11b6,x
               S03:0000148D:  9D B6 11
F04:0494                           lda $a7
               S03:00001490:  A5 A7
F04:0495                           lsr a
               S03:00001492:  4A
F04:0496                           lsr a
               S03:00001493:  4A
F04:0497                           lsr a
               S03:00001494:  4A
F04:0498                           lsr a
               S03:00001495:  4A
F04:0499                           sta $11ad,x
               S03:00001496:  9D AD 11
F04:0500       L1499               lda $11bc,x
               S03:00001499:  BD BC 11
F04:0501                           beq L14aa
               S03:0000149C:  F0 0C
F04:0502                           lda $11c5,x
               S03:0000149E:  BD C5 11
F04:0503                           sta $11cb,x
               S03:000014A1:  9D CB 11
F04:0504                           lda $11bf,x
               S03:000014A4:  BD BF 11
F04:0505                           sta $11c8,x
               S03:000014A7:  9D C8 11
F04:0506       L14aa               lda $a5
               S03:000014AA:  A5 A5
F04:0507                           ldy $a9
               S03:000014AC:  A4 A9
F04:0508                           and #$20
               S03:000014AE:  29 20
F04:0509                           bne L14c1
               S03:000014B0:  D0 0F
F04:0510                           lda $2169,y
               S03:000014B2:  B9 69 21
F04:0511                           sta $11a1,x
               S03:000014B5:  9D A1 11
F04:0512                           sta $11a4,x
               S03:000014B8:  9D A4 11
F04:0513                           lda $2129,y
               S03:000014BB:  B9 29 21
F04:0514                           sta $119b,x
               S03:000014BE:  9D 9B 11
F04:0515       L14c1               lda $2229,y
               S03:000014C1:  B9 29 22
F04:0516                           sta $1180,x
               S03:000014C4:  9D 80 11
F04:0517                           lda $a5
               S03:000014C7:  A5 A5
F04:0518                           and #$08
               S03:000014C9:  29 08
F04:0519                           sta $117d,x
               S03:000014CB:  9D 7D 11
F04:0520                           lda $11d1,x
               S03:000014CE:  BD D1 11
F04:0521                           sta $11ce,x
               S03:000014D1:  9D CE 11
F04:0522                           beq L14e7
               S03:000014D4:  F0 11
F04:0523                           lda $11d4,x
               S03:000014D6:  BD D4 11
F04:0524                           sta $11d7,x
               S03:000014D9:  9D D7 11
F04:0525                           tay
               S03:000014DC:  A8
F04:0526                           lda $2439,y
               S03:000014DD:  B9 39 24
F04:0527                           clc
               S03:000014E0:  18
F04:0528                           adc $117a,x
               S03:000014E1:  7D 7A 11
F04:0529                           sta $11e0,x
               S03:000014E4:  9D E0 11
F04:0530       L14e7               jmp L1232
               S03:000014E7:  4C 32 12
F04:0531                           
F04:0532       L14ea               ldx $aa
               S03:000014EA:  A6 AA
F04:0533                           lda $11e6,x
               S03:000014EC:  BD E6 11
F04:0534                           beq L154f
               S03:000014EF:  F0 5E
F04:0535                           lda $11ef,x
               S03:000014F1:  BD EF 11
F04:0536                           bne L151c
               S03:000014F4:  D0 26
F04:0537                           ldy $11ec,x
               S03:000014F6:  BC EC 11
F04:0538                           lda $256e,y
               S03:000014F9:  B9 6E 25
F04:0539                           beq L151c
               S03:000014FC:  F0 1E
F04:0540                           sta $a7
               S03:000014FE:  85 A7
F04:0541                           inc $11ec,x
               S03:00001500:  FE EC 11
F04:0542                           ldx $25e2,y
               S03:00001503:  BE E2 25
F04:0543                           ldy $ab
               S03:00001506:  A4 AB
F04:0544                           lda $180f,x
               S03:00001508:  BD 0F 18
F04:0545                           sta d401_sVoc1FreqHi,y
               S03:0000150B:  99 01 B8
F04:0546                           lda $17af,x
               S03:0000150E:  BD AF 17
F04:0547                           sta d400_sVoc1FreqLo,y
               S03:00001511:  99 00 B8
F04:0548                           lda $a7
               S03:00001514:  A5 A7
F04:0549                           sta d404_sVoc1Control,y
               S03:00001516:  99 04 B8
F04:0550                           jmp L1232
               S03:00001519:  4C 32 12
F04:0551                           
F04:0552       L151c               ldy $11ec,x
               S03:0000151C:  BC EC 11
F04:0553                           lda $256e,y
               S03:0000151F:  B9 6E 25
F04:0554                           beq L1547
               S03:00001522:  F0 23
F04:0555                           sta $a7
               S03:00001524:  85 A7
F04:0556                           inc $11ec,x
               S03:00001526:  FE EC 11
F04:0557                           lda $25e2,y
               S03:00001529:  B9 E2 25
F04:0558                           clc
               S03:0000152C:  18
F04:0559                           adc $1174,x
               S03:0000152D:  7D 74 11
F04:0560                           tax
               S03:00001530:  AA
F04:0561                           ldy $ab
               S03:00001531:  A4 AB
F04:0562                           lda $180f,x
               S03:00001533:  BD 0F 18
F04:0563                           sta d401_sVoc1FreqHi,y
               S03:00001536:  99 01 B8
F04:0564                           lda $17af,x
               S03:00001539:  BD AF 17
F04:0565                           sta d400_sVoc1FreqLo,y
               S03:0000153C:  99 00 B8
F04:0566                           lda $a7
               S03:0000153F:  A5 A7
F04:0567                           sta d404_sVoc1Control,y
               S03:00001541:  99 04 B8
F04:0568                           jmp L1232
               S03:00001544:  4C 32 12
F04:0569                           
F04:0570       L1547               ldy $ab
               S03:00001547:  A4 AB
F04:0571                           sta d404_sVoc1Control,y
               S03:00001549:  99 04 B8
F04:0572                           jmp L1232
               S03:0000154C:  4C 32 12
F04:0573                           
F04:0574       L154f               lda $118c,x
               S03:0000154F:  BD 8C 11
F04:0575                           sta $a9
               S03:00001552:  85 A9
F04:0576                           lda $119e,x
               S03:00001554:  BD 9E 11
F04:0577                           bne L1584
               S03:00001557:  D0 2B
F04:0578                           lda $1195,x
               S03:00001559:  BD 95 11
F04:0579                           clc
               S03:0000155C:  18
F04:0580                           adc $119b,x
               S03:0000155D:  7D 9B 11
F04:0581                           ldy $ab
               S03:00001560:  A4 AB
F04:0582                           sta $1195,x
               S03:00001562:  9D 95 11
F04:0583                           sta d402_sVoc1PWidthLo,y
               S03:00001565:  99 02 B8
F04:0584                           lda $1198,x
               S03:00001568:  BD 98 11
F04:0585                           adc #$00
               S03:0000156B:  69 00
F04:0586                           sta $1198,x
               S03:0000156D:  9D 98 11
F04:0587                           sta d403_sVoc1PWidthHi,y
               S03:00001570:  99 03 B8
F04:0588                           dec $11a4,x
               S03:00001573:  DE A4 11
F04:0589                           bne L15ae
               S03:00001576:  D0 36
F04:0590                           inc $119e,x
               S03:00001578:  FE 9E 11
F04:0591                           lda $11a1,x
               S03:0000157B:  BD A1 11
F04:0592                           sta $11a4,x
               S03:0000157E:  9D A4 11
F04:0593                           jmp L15ae
               S03:00001581:  4C AE 15
F04:0594                           
F04:0595       L1584               lda $1195,x
               S03:00001584:  BD 95 11
F04:0596                           sec
               S03:00001587:  38
F04:0597                           sbc $119b,x
               S03:00001588:  FD 9B 11
F04:0598                           ldy $ab
               S03:0000158B:  A4 AB
F04:0599                           sta d402_sVoc1PWidthLo,y
               S03:0000158D:  99 02 B8
F04:0600                           sta $1195,x
               S03:00001590:  9D 95 11
F04:0601                           lda $1198,x
               S03:00001593:  BD 98 11
F04:0602                           adc #$ff
               S03:00001596:  69 FF
F04:0603                           sta $1198,x
               S03:00001598:  9D 98 11
F04:0604                           sta d403_sVoc1PWidthHi,y
               S03:0000159B:  99 03 B8
F04:0605                           dec $11a4,x
               S03:0000159E:  DE A4 11
F04:0606                           bne L15ae
               S03:000015A1:  D0 0B
F04:0607                           lda #$00
               S03:000015A3:  A9 00
F04:0608                           sta $119e,x
               S03:000015A5:  9D 9E 11
F04:0609                           lda $11a1,x
               S03:000015A8:  BD A1 11
F04:0610                           sta $11a4,x
               S03:000015AB:  9D A4 11
F04:0611       L15ae               lda $118f,x
               S03:000015AE:  BD 8F 11
F04:0612                           sta d400_sVoc1FreqLo,y
               S03:000015B1:  99 00 B8
F04:0613                           lda $1192,x
               S03:000015B4:  BD 92 11
F04:0614                           sta d401_sVoc1FreqHi,y
               S03:000015B7:  99 01 B8
F04:0615                           lda $1183,x
               S03:000015BA:  BD 83 11
F04:0616                           bne L15f4
               S03:000015BD:  D0 35
F04:0617                           lda $117d,x
               S03:000015BF:  BD 7D 11
F04:0618                           bne L15e2
               S03:000015C2:  D0 1E
F04:0619                           lda $1189,x
               S03:000015C4:  BD 89 11
F04:0620                           sec
               S03:000015C7:  38
F04:0621                           sbc $1180,x
               S03:000015C8:  FD 80 11
F04:0622                           cmp $1186,x
               S03:000015CB:  DD 86 11
F04:0623                           beq L15d2
               S03:000015CE:  F0 02
F04:0624                           bne L15ea
               S03:000015D0:  D0 18
F04:0625       L15d2               ldy $a9
               S03:000015D2:  A4 A9
F04:0626                           lda $21e9,y
               S03:000015D4:  B9 E9 21
F04:0627                           ldy $ab
               S03:000015D7:  A4 AB
F04:0628                           sta d404_sVoc1Control,y
               S03:000015D9:  99 04 B8
F04:0629                           inc $1183,x
               S03:000015DC:  FE 83 11
F04:0630                           jmp L15f4
               S03:000015DF:  4C F4 15
F04:0631                           
F04:0632       L15e2               lda $1186,x
               S03:000015E2:  BD 86 11
F04:0633                           cmp $1180,x
               S03:000015E5:  DD 80 11
F04:0634                           beq L15d2
               S03:000015E8:  F0 E8
F04:0635       L15ea               ldy $a9
               S03:000015EA:  A4 A9
F04:0636                           lda $21a9,y
               S03:000015EC:  B9 A9 21
F04:0637                           ldy $ab
               S03:000015EF:  A4 AB
F04:0638                           sta d404_sVoc1Control,y
               S03:000015F1:  99 04 B8
F04:0639       L15f4               lda $11a7,x
               S03:000015F4:  BD A7 11
F04:0640                           bne L15fc
               S03:000015F7:  D0 03
F04:0641                           jmp L16b8
               S03:000015F9:  4C B8 16
F04:0642                           
F04:0643       L15fc               lda $11aa,x
               S03:000015FC:  BD AA 11
F04:0644                           beq L1607
               S03:000015FF:  F0 06
F04:0645                           dec $11aa,x
               S03:00001601:  DE AA 11
F04:0646                           jmp L16b8
               S03:00001604:  4C B8 16
F04:0647                           
F04:0648       L1607               ldy $11b3,x
               S03:00001607:  BC B3 11
F04:0649                           beq L1644
               S03:0000160A:  F0 38
F04:0650                           dey
               S03:0000160C:  88
F04:0651                           beq L1667
               S03:0000160D:  F0 58
F04:0652                           dey
               S03:0000160F:  88
F04:0653                           beq L1615
               S03:00001610:  F0 03
F04:0654                           jmp L168a
               S03:00001612:  4C 8A 16
F04:0655                           
F04:0656       L1615               ldy $117a,x
               S03:00001615:  BC 7A 11
F04:0657                           lda $11ad,x
               S03:00001618:  BD AD 11
F04:0658                           sta $a7
               S03:0000161B:  85 A7
F04:0659                           lda $118f,x
               S03:0000161D:  BD 8F 11
F04:0660       L1620               sec
               S03:00001620:  38
F04:0661                           sbc $180e,y
               S03:00001621:  F9 0E 18
F04:0662                           bcs L1629
               S03:00001624:  B0 03
F04:0663                           dec $1192,x
               S03:00001626:  DE 92 11
F04:0664       L1629               dec $a7
               S03:00001629:  C6 A7
F04:0665                           bpl L1620
               S03:0000162B:  10 F3
F04:0666                           sta $118f,x
               S03:0000162D:  9D 8F 11
F04:0667                           dec $11b6,x
               S03:00001630:  DE B6 11
F04:0668                           bmi L1638
               S03:00001633:  30 03
F04:0669                           jmp L16b8
               S03:00001635:  4C B8 16
F04:0670                           
F04:0671       L1638               inc $11b3,x
               S03:00001638:  FE B3 11
F04:0672                           lda $11b0,x
               S03:0000163B:  BD B0 11
F04:0673                           sta $11b6,x
               S03:0000163E:  9D B6 11
F04:0674                           jmp L16b8
               S03:00001641:  4C B8 16
F04:0675                           
F04:0676       L1644               ldy $117a,x
               S03:00001644:  BC 7A 11
F04:0677                           lda $11ad,x
               S03:00001647:  BD AD 11
F04:0678                           sta $a7
               S03:0000164A:  85 A7
F04:0679                           lda $118f,x
               S03:0000164C:  BD 8F 11
F04:0680       L164f               clc
               S03:0000164F:  18
F04:0681                           adc $180f,y
               S03:00001650:  79 0F 18
F04:0682                           bcc L1658
               S03:00001653:  90 03
F04:0683                           inc $1192,x
               S03:00001655:  FE 92 11
F04:0684       L1658               dec $a7
               S03:00001658:  C6 A7
F04:0685                           bpl L164f
               S03:0000165A:  10 F3
F04:0686                           sta $118f,x
               S03:0000165C:  9D 8F 11
F04:0687                           dec $11b6,x
               S03:0000165F:  DE B6 11
F04:0688                           bmi L1638
               S03:00001662:  30 D4
F04:0689                           jmp L16b8
               S03:00001664:  4C B8 16
F04:0690                           
F04:0691       L1667               ldy $117a,x
               S03:00001667:  BC 7A 11
F04:0692                           lda $11ad,x
               S03:0000166A:  BD AD 11
F04:0693                           sta $a7
               S03:0000166D:  85 A7
F04:0694                           lda $118f,x
               S03:0000166F:  BD 8F 11
F04:0695       L1672               sec
               S03:00001672:  38
F04:0696                           sbc $180f,y
               S03:00001673:  F9 0F 18
F04:0697                           bcs L167b
               S03:00001676:  B0 03
F04:0698                           dec $1192,x
               S03:00001678:  DE 92 11
F04:0699       L167b               dec $a7
               S03:0000167B:  C6 A7
F04:0700                           bpl L1672
               S03:0000167D:  10 F3
F04:0701                           sta $118f,x
               S03:0000167F:  9D 8F 11
F04:0702                           dec $11b6,x
               S03:00001682:  DE B6 11
F04:0703                           bmi L1638
               S03:00001685:  30 B1
F04:0704                           jmp L16b8
               S03:00001687:  4C B8 16
F04:0705                           
F04:0706       L168a               ldy $117a,x
               S03:0000168A:  BC 7A 11
F04:0707                           lda $11ad,x
               S03:0000168D:  BD AD 11
F04:0708                           sta $a7
               S03:00001690:  85 A7
F04:0709                           lda $118f,x
               S03:00001692:  BD 8F 11
F04:0710       L1695               clc
               S03:00001695:  18
F04:0711                           adc $180e,y
               S03:00001696:  79 0E 18
F04:0712                           bcc L169e
               S03:00001699:  90 03
F04:0713                           inc $1192,x
               S03:0000169B:  FE 92 11
F04:0714       L169e               dec $a7
               S03:0000169E:  C6 A7
F04:0715                           bpl L1695
               S03:000016A0:  10 F3
F04:0716                           sta $118f,x
               S03:000016A2:  9D 8F 11
F04:0717                           dec $11b6,x
               S03:000016A5:  DE B6 11
F04:0718                           bmi L16ad
               S03:000016A8:  30 03
F04:0719                           jmp L16b8
               S03:000016AA:  4C B8 16
F04:0720                           
F04:0721       L16ad               lda #$00
               S03:000016AD:  A9 00
F04:0722                           sta $11b3,x
               S03:000016AF:  9D B3 11
F04:0723                           lda $11b0,x
               S03:000016B2:  BD B0 11
F04:0724                           sta $11b6,x
               S03:000016B5:  9D B6 11
F04:0725       L16b8               lda $11bc,x
               S03:000016B8:  BD BC 11
F04:0726                           bne L16c0
               S03:000016BB:  D0 03
F04:0727                           jmp L1720
               S03:000016BD:  4C 20 17
F04:0728                           
F04:0729       L16c0               lda $11c8,x
               S03:000016C0:  BD C8 11
F04:0730                           beq L16cb
               S03:000016C3:  F0 06
F04:0731                           dec $11c8,x
               S03:000016C5:  DE C8 11
F04:0732                           jmp L1720
               S03:000016C8:  4C 20 17
F04:0733                           
F04:0734       L16cb               lda $11c2,x
               S03:000016CB:  BD C2 11
F04:0735                           bmi L16f7
               S03:000016CE:  30 27
F04:0736                           sta $a7
               S03:000016D0:  85 A7
F04:0737                           ldy $117a,x
               S03:000016D2:  BC 7A 11
F04:0738                           lda $118f,x
               S03:000016D5:  BD 8F 11
F04:0739                           sec
               S03:000016D8:  38
F04:0740       L16d9               sbc $180f,y
               S03:000016D9:  F9 0F 18
F04:0741                           bcs L16e2
               S03:000016DC:  B0 04
F04:0742                           sec
               S03:000016DE:  38
F04:0743                           dec $1192,x
               S03:000016DF:  DE 92 11
F04:0744       L16e2               dec $a7
               S03:000016E2:  C6 A7
F04:0745                           bne L16d9
               S03:000016E4:  D0 F3
F04:0746                           sta $118f,x
               S03:000016E6:  9D 8F 11
F04:0747                           dec $11cb,x
               S03:000016E9:  DE CB 11
F04:0748                           lda $11cb,x
               S03:000016EC:  BD CB 11
F04:0749                           bne L16f4
               S03:000016EF:  D0 03
F04:0750                           sta $11bc,x
               S03:000016F1:  9D BC 11
F04:0751       L16f4               jmp L1232
               S03:000016F4:  4C 32 12
F04:0752                           
F04:0753       L16f7               and #$7f
               S03:000016F7:  29 7F
F04:0754                           sta $a7
               S03:000016F9:  85 A7
F04:0755                           ldy $117a,x
               S03:000016FB:  BC 7A 11
F04:0756                           lda $118f,x
               S03:000016FE:  BD 8F 11
F04:0757                           clc
               S03:00001701:  18
F04:0758       L1702               adc $180f,y
               S03:00001702:  79 0F 18
F04:0759                           bcc L170b
               S03:00001705:  90 04
F04:0760                           inc $1192,x
               S03:00001707:  FE 92 11
F04:0761                           clc
               S03:0000170A:  18
F04:0762       L170b               dec $a7
               S03:0000170B:  C6 A7
F04:0763                           bpl L1702
               S03:0000170D:  10 F3
F04:0764                           sta $118f,x
               S03:0000170F:  9D 8F 11
F04:0765                           dec $11cb,x
               S03:00001712:  DE CB 11
F04:0766                           lda $11cb,x
               S03:00001715:  BD CB 11
F04:0767                           bne L16f4
               S03:00001718:  D0 DA
F04:0768                           sta $11bc,x
               S03:0000171A:  9D BC 11
F04:0769       L171d               jmp L1232
               S03:0000171D:  4C 32 12
F04:0770                           
F04:0771       L1720               lda $11ce,x
               S03:00001720:  BD CE 11
F04:0772                           beq L171d
               S03:00001723:  F0 F8
F04:0773                           dec $11dd,x
               S03:00001725:  DE DD 11
F04:0774                           beq L1730
               S03:00001728:  F0 06
F04:0775                           lda $11e0,x
               S03:0000172A:  BD E0 11
F04:0776                           jmp L1748
               S03:0000172D:  4C 48 17
F04:0777                           
F04:0778       L1730               lda $11da,x
               S03:00001730:  BD DA 11
F04:0779                           sta $11dd,x
               S03:00001733:  9D DD 11
F04:0780                           inc $11d7,x
               S03:00001736:  FE D7 11
F04:0781                           ldy $11d7,x
               S03:00001739:  BC D7 11
F04:0782       L173c               lda $2439,y
               S03:0000173C:  B9 39 24
F04:0783                           bmi L175a
               S03:0000173F:  30 19
F04:0784                           clc
               S03:00001741:  18
F04:0785                           adc $117a,x
               S03:00001742:  7D 7A 11
F04:0786                           sta $11e0,x
               S03:00001745:  9D E0 11
F04:0787       L1748               tax
               S03:00001748:  AA
F04:0788                           ldy $ab
               S03:00001749:  A4 AB
F04:0789                           lda $17af,x
               S03:0000174B:  BD AF 17
F04:0790                           sta d400_sVoc1FreqLo,y
               S03:0000174E:  99 00 B8
F04:0791                           lda $180f,x
               S03:00001751:  BD 0F 18
F04:0792                           sta d401_sVoc1FreqHi,y
               S03:00001754:  99 01 B8
F04:0793                           jmp L1232
               S03:00001757:  4C 32 12
F04:0794                           
F04:0795       L175a               and #$7f
               S03:0000175A:  29 7F
F04:0796                           beq L1768
               S03:0000175C:  F0 0A
F04:0797                           lda $11d4,x
               S03:0000175E:  BD D4 11
F04:0798                           sta $11d7,x
               S03:00001761:  9D D7 11
F04:0799                           tay
               S03:00001764:  A8
F04:0800                           jmp L173c
               S03:00001765:  4C 3C 17
F04:0801                           
F04:0802       L1768               sta $11ce,x
               S03:00001768:  9D CE 11
F04:0803                           lda $11e0,x
               S03:0000176B:  BD E0 11
F04:0804                           sta $117a,x
               S03:0000176E:  9D 7A 11
F04:0805                           jmp L1232
               S03:00001771:  4C 32 12
F04:0806                           
F04:0807       L1774               ldx #$17
               S03:00001774:  A2 17
F04:0808       L1776               lda #$00
               S03:00001776:  A9 00
F04:0809                           sta d400_sVoc1FreqLo,x
               S03:00001778:  9D 00 B8
F04:0810                           dex
               S03:0000177B:  CA
F04:0811                           bpl L1776
               S03:0000177C:  10 F8
F04:0812                           ldx #$02
               S03:0000177E:  A2 02
F04:0813                           stx $134c
               S03:00001780:  8E 4C 13
F04:0814                           stx L11f2 + 1
               S03:00001783:  8E F3 11
F04:0815       L1786               stx $aa
               S03:00001786:  86 AA
F04:0816                           lda $1872,x
               S03:00001788:  BD 72 18
F04:0817                           sta $116b,x
               S03:0000178B:  9D 6B 11
F04:0818                           lda $186f,x
               S03:0000178E:  BD 6F 18
F04:0819                           sta $116e,x
               S03:00001791:  9D 6E 11
F04:0820                           sta $1171,x
               S03:00001794:  9D 71 11
F04:0821                           lda #$00
               S03:00001797:  A9 00
F04:0822                           sta $1165,x
               S03:00001799:  9D 65 11
F04:0823                           sta $1168,x
               S03:0000179C:  9D 68 11
F04:0824                           sta $1177,x
               S03:0000179F:  9D 77 11
F04:0825                           jsr L1264
               S03:000017A2:  20 64 12
F04:0826                           ldx $aa
               S03:000017A5:  A6 AA
F04:0827                           dex
               S03:000017A7:  CA
F04:0828                           bpl L1786
               S03:000017A8:  10 DC
F04:0829                           inx
               S03:000017AA:  E8
F04:0830                           stx $134c
               S03:000017AB:  8E 4C 13
F04:0831                           rts
               S03:000017AE:  60
F04:0832       
F04:0833       	.binary "sys4.bin"
               S03:000017AF:  0C 1C 2D 3E 51 66 7B 91 A9 C3 DD FA 18 38 5A 7D
               S03:000017BF:  A3 CC F6 23 53 86 BB F8 30 70 B4 FB 47 98 ED 47
F04:0834       
F04:0835       S202d               dey
               S03:0000202D:  88
F04:0836                           eor ($06),y
               S03:0000202E:  51 06
F04:0837       
F04:0838       	.binary "sys5.bin"
               S03:00002030:  BB 32 03 B2 37 03 88 51 06 00 A7 3A 03 98 32 03
               S03:00002040:  87 51 06 BD 3A 03 BF 32 03 87 51 06 9C 3E 03 A8
F04:0839       
F04:0840       initsid2            jsr S1100
               S03:00002656:  20 00 11
F04:0841                           lda #$00
               S03:00002659:  A9 00
F04:0842                           sta PlaySid + 1
               S03:0000265B:  8D 60 26
F04:0843                           rts
               S03:0000265E:  60
F04:0844                           
F04:0845       PlaySid             lda #$00
               S03:0000265F:  A9 00
F04:0846                           inc PlaySid + 1
               S03:00002661:  EE 60 26
F04:0847                           and #$01
               S03:00002664:  29 01
F04:0848                           asl a
               S03:00002666:  0A
F04:0849                           tax
               S03:00002667:  AA
F04:0850                           nop
               S03:00002668:  EA
F04:0851                           lda $2681,x
               S03:00002669:  BD 81 26
F04:0852                           sta $dc05
               S03:0000266C:  8D 05 DC
F04:0853                           lda $2682,x
               S03:0000266F:  BD 82 26
F04:0854                           sta $dc04
               S03:00002672:  8D 04 DC
F04:0855                           jmp L1103
               S03:00002675:  4C 03 11
F04:0856       
F04:0857       	.binary "sys6.bin"
               S03:00002678:  00 00 00 00 00 00 00 00 00 23 6F 29 57
F04:0858       
F00:0058         .include "text_1.s"
F05:0001       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F05:0002       ;;;;;;;;;  the main thread ;;;;;;;;;
F05:0003       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F05:0004       
F05:0005       irqst = $04
F05:0006       framecount = $05
F05:0007       bitdex = $06
F05:0008       
F05:0009       graph = $fe  ; 2 bytes
F05:0010       
F05:0011       textstart:
F05:0012         sei
               S03:00002685:  78
F05:0013         stz irqst
               S03:00002686:  64 04
F05:0014         cli
               S03:00002688:  58
F05:0015         lda #1
               S03:00002689:  A9 01
F05:0016       a:cmp irqst		; allign main thread to IRQ
               S03:0000268B:  C5 04
F05:0017         bne a
               S03:0000268D:  D0 FC
F05:0018       
F05:0019         ldx #<text_01
               S03:0000268F:  A2 06
F05:0020         ldy #>text_01
               S03:00002691:  A0 29
F05:0021         jsr w_acia_full	; first text
               S03:00002693:  20 C3 0A
F05:0022       
F05:0023         jsr wait_beat
               S03:00002696:  20 BC 27
F05:0024       
F05:0025         jsr out
               S03:00002699:  20 A2 27
F05:0026       
F05:0027         ldx #<text_03
               S03:0000269C:  A2 61
F05:0028         ldy #>text_03
               S03:0000269E:  A0 29
F05:0029         jsr w_acia_full	; second text
               S03:000026A0:  20 C3 0A
F05:0030         jsr wait_beat
               S03:000026A3:  20 BC 27
F05:0031       
F05:0032         jsr out
               S03:000026A6:  20 A2 27
F05:0033       
F05:0034         ldx #0
               S03:000026A9:  A2 00
F05:0035       text_ii:
F05:0036         jsr txpoll
               S03:000026AB:  20 9F 0A
F05:0037         lda text_data,x
               S03:000026AE:  BD 10 28
F05:0038         beq text_ii_end
               S03:000026B1:  F0 07
F05:0039         sta $8000
               S03:000026B3:  8D 00 80
F05:0040         inx
               S03:000026B6:  E8
F05:0041         jmp text_ii
               S03:000026B7:  4C AB 26
F05:0042       
F05:0043       text_ii_end:
F05:0044         jsr wait_beat
               S03:000026BA:  20 BC 27
F05:0045         
F05:0046         ldx #<text_02
               S03:000026BD:  A2 4A
F05:0047         ldy #>text_02
               S03:000026BF:  A0 29
F05:0048         jsr w_acia_full
               S03:000026C1:  20 C3 0A
F05:0049       
F05:0050         jsr wait_beat
               S03:000026C4:  20 BC 27
F05:0051       
F05:0052         ldx #<endtext
               S03:000026C7:  A2 7C
F05:0053         ldy #>endtext
               S03:000026C9:  A0 29
F05:0054         jsr w_acia_full
               S03:000026CB:  20 C3 0A
F05:0055         ldx #<endtext
               S03:000026CE:  A2 7C
F05:0056         ldy #>endtext		; bUt!11
               S03:000026D0:  A0 29
F05:0057         jsr w_acia_full
               S03:000026D2:  20 C3 0A
F05:0058         ldx #<endtext
               S03:000026D5:  A2 7C
F05:0059         ldy #>endtext
               S03:000026D7:  A0 29
F05:0060         jsr w_acia_full
               S03:000026D9:  20 C3 0A
F05:0061         ldx #<endtext
               S03:000026DC:  A2 7C
F05:0062         ldy #>endtext
               S03:000026DE:  A0 29
F05:0063         jsr w_acia_full
               S03:000026E0:  20 C3 0A
F05:0064       
F05:0065         lda #$02
               S03:000026E3:  A9 02
F05:0066         jsr print_chara
               S03:000026E5:  20 AF 0A
F05:0067         lda #0
               S03:000026E8:  A9 00
F05:0068         jsr print_chara
               S03:000026EA:  20 AF 0A
F05:0069       
F05:0070         ldx #<setup
               S03:000026ED:  A2 7F
F05:0071         ldy #>setup
               S03:000026EF:  A0 29
F05:0072         jsr w_acia_full
               S03:000026F1:  20 C3 0A
F05:0073       
F05:0074         jsr graphics		; write a screen
               S03:000026F4:  20 4A 27
F05:0075       
F05:0076         ;sei
F05:0077         ;stz scroll		; scroll on+
F05:0078         ;stz sco
F05:0079         ;cli
F05:0080       
F05:0081         jsr rootsetup		; setup <FOLDER>
               S03:000026F7:  20 2E 27
F05:0082       
F05:0083         ldy #>imagefile	; setup image load
               S03:000026FA:  A0 27
F05:0084         ldx #<imagefile
               S03:000026FC:  A2 F1
F05:0085         jsr fat32_finddirent
               S03:000026FE:  20 DF 09
F05:0086         jsr fat32_opendirent  ; open filename addr
               S03:00002701:  20 76 09
F05:0087         lda #<poketable
               S03:00002704:  A9 87
F05:0088         sta fat32_address	; host addr
               S03:00002706:  85 54
F05:0089         lda #>poketable
               S03:00002708:  A9 29
F05:0090         sta fat32_address+1
               S03:0000270A:  85 55
F05:0091         jsr fat32_file_read	; read
               S03:0000270C:  20 3F 0A
F05:0092         jsr graphics
               S03:0000270F:  20 4A 27
F05:0093         jmp not
               S03:00002712:  4C 1A 27
F05:0094       
F05:0095       nono:			; ded
F05:0096         lda "!"
               S03:00002715:  A5 21
F05:0097         jsr print_chara
               S03:00002717:  20 AF 0A
F05:0098       not:
F05:0099         jmp not
               S03:0000271A:  4C 1A 27
F05:0100                		; say goodbye!
F05:0101         
F05:0102       ee:
F05:0103       
F05:0104         lda #<poketable
               S03:0000271D:  A9 87
F05:0105         sta fat32_address
               S03:0000271F:  85 54
F05:0106         lda #>poketable
               S03:00002721:  A9 29
F05:0107         sta fat32_address+1
               S03:00002723:  85 55
F05:0108       
F05:0109         jsr fat32_file_read
               S03:00002725:  20 3F 0A
F05:0110       
F05:0111         jsr graphics
               S03:00002728:  20 4A 27
F05:0112       
F05:0113         jmp reset		; done?
               S03:0000272B:  4C 79 2D
F05:0114       
F05:0115       
F05:0116       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F05:0117       ;;;;;;;;;;; SUBROUTINES ;;;;;;;;;;;
F05:0118       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F05:0119       
F05:0120       rootsetup:
F05:0121         pha
               S03:0000272E:  48
F05:0122         phx
               S03:0000272F:  DA
F05:0123         phy
               S03:00002730:  5A
F05:0124         ; Open root directory
F05:0125         jsr fat32_openroot
               S03:00002731:  20 5E 09
F05:0126       
F05:0127         ; Find subdirectory by name
F05:0128         ldx #<dirname
               S03:00002734:  A2 E5
F05:0129         ldy #>dirname
               S03:00002736:  A0 27
F05:0130         jsr fat32_finddirent
               S03:00002738:  20 DF 09
F05:0131         bcc foundsubdir
               S03:0000273B:  90 05
F05:0132       
F05:0133       error:
F05:0134         clc
               S03:0000273D:  18
F05:0135         rts
               S03:0000273E:  60
F05:0136         rts
               S03:0000273F:  60
F05:0137         rts
               S03:00002740:  60
F05:0138         rts
               S03:00002741:  60
F05:0139       
F05:0140       foundsubdir:
F05:0141       
F05:0142         ; Open subdirectory
F05:0143         jsr fat32_opendirent
               S03:00002742:  20 76 09
F05:0144         sec
               S03:00002745:  38
F05:0145         ply
               S03:00002746:  7A
F05:0146         plx 
               S03:00002747:  FA
F05:0147         pla
               S03:00002748:  68
F05:0148         rts
               S03:00002749:  60
F05:0149       
F05:0150       graphics:
F05:0151         pha
               S03:0000274A:  48
F05:0152         phx
               S03:0000274B:  DA
F05:0153         phy
               S03:0000274C:  5A
F05:0154         lda #$80
               S03:0000274D:  A9 80
F05:0155         sta bitdex
               S03:0000274F:  85 06
F05:0156         ldx #<poketable	; addr setup
               S03:00002751:  A2 87
F05:0157         stx graph
               S03:00002753:  86 FE
F05:0158         ldy #>poketable
               S03:00002755:  A0 29
F05:0159         sty graph+1
               S03:00002757:  84 FF
F05:0160         ldx #0		; x0 y0
               S03:00002759:  A2 00
F05:0161         ldy #0
               S03:0000275B:  A0 00
F05:0162       gloop:
F05:0163         lda (graph)		; take a pixel
               S03:0000275D:  B2 FE
F05:0164         and bitdex
               S03:0000275F:  25 06
F05:0165         beq zero		; zero?
               S03:00002761:  F0 05
F05:0166         lda #$05		; no,
               S03:00002763:  A9 05
F05:0167         jmp gloop1		; write a 1
               S03:00002765:  4C 6A 27
F05:0168       zero:
F05:0169         lda #$06		; ye, write a 0
               S03:00002768:  A9 06
F05:0170       gloop1:
F05:0171         jsr print_chara	; place it
               S03:0000276A:  20 AF 0A
F05:0172         txa			; at 
               S03:0000276D:  8A
F05:0173         jsr print_chara	; x
               S03:0000276E:  20 AF 0A
F05:0174         tya			; ,
               S03:00002771:  98
F05:0175         jsr print_chara	; y
               S03:00002772:  20 AF 0A
F05:0176         inx			; next x
               S03:00002775:  E8
F05:0177         cpx #160
               S03:00002776:  E0 A0
F05:0178         bne norm		; x=160? (x-max)
               S03:00002778:  D0 07
F05:0179         ldx #0		; then inc col
               S03:0000277A:  A2 00
F05:0180         iny			; are we done?
               S03:0000277C:  C8
F05:0181         cpy #80
               S03:0000277D:  C0 50
F05:0182         beq endit		; then done!!11!
               S03:0000277F:  F0 1C
F05:0183       norm:
F05:0184         lda bitdex
               S03:00002781:  A5 06
F05:0185         cmp #1
               S03:00002783:  C9 01
F05:0186         beq bytedone
               S03:00002785:  F0 07
F05:0187         php
               S03:00002787:  08
F05:0188         lsr bitdex
               S03:00002788:  46 06
F05:0189         plp
               S03:0000278A:  28
F05:0190         jmp gloop
               S03:0000278B:  4C 5D 27
F05:0191       bytedone:
F05:0192         lda #$80
               S03:0000278E:  A9 80
F05:0193         sta bitdex
               S03:00002790:  85 06
F05:0194         inc graph
               S03:00002792:  E6 FE
F05:0195         lda graph
               S03:00002794:  A5 FE
F05:0196         bne back
               S03:00002796:  D0 02
F05:0197       inchi:
F05:0198         inc graph+1
               S03:00002798:  E6 FF
F05:0199       back:
F05:0200         jmp gloop
               S03:0000279A:  4C 5D 27
F05:0201       endit:
F05:0202         ply
               S03:0000279D:  7A
F05:0203         plx
               S03:0000279E:  FA
F05:0204         pla
               S03:0000279F:  68
F05:0205         clc
               S03:000027A0:  18
F05:0206         rts
               S03:000027A1:  60
F05:0207       
F05:0208       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F05:0209       
F05:0210       out:
F05:0211         pha
               S03:000027A2:  48
F05:0212         phx
               S03:000027A3:  DA
F05:0213         ldx #64
               S03:000027A4:  A2 40
F05:0214       downloop:
F05:0215         jsr txpoll
               S03:000027A6:  20 9F 0A
F05:0216         lda #$08
               S03:000027A9:  A9 08
F05:0217         sta $8000
               S03:000027AB:  8D 00 80
F05:0218         jsr txpoll
               S03:000027AE:  20 9F 0A
F05:0219         lda #$14
               S03:000027B1:  A9 14
F05:0220         sta $8000
               S03:000027B3:  8D 00 80
F05:0221         dex
               S03:000027B6:  CA
F05:0222         bne downloop
               S03:000027B7:  D0 ED
F05:0223         plx
               S03:000027B9:  FA
F05:0224         pla
               S03:000027BA:  68
F05:0225         rts
               S03:000027BB:  60
F05:0226       
F05:0227       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F05:0228       
F05:0229       wait_beat:
F05:0230         phy
               S03:000027BC:  5A
F05:0231         ldy #9
               S03:000027BD:  A0 09
F05:0232       waitloop:
F05:0233         jsr wait
               S03:000027BF:  20 E6 0A
F05:0234         dey
               S03:000027C2:  88
F05:0235         bne waitloop
               S03:000027C3:  D0 FA
F05:0236         ply
               S03:000027C5:  7A
F05:0237         rts
               S03:000027C6:  60
F05:0238       
F05:0239       long_wait:
F05:0240         phx
               S03:000027C7:  DA
F05:0241         phy
               S03:000027C8:  5A
F05:0242         pha
               S03:000027C9:  48
F05:0243         ldx #$ff
               S03:000027CA:  A2 FF
F05:0244       long_loop
F05:0245         jsr wait
               S03:000027CC:  20 E6 0A
F05:0246         dex
               S03:000027CF:  CA
F05:0247         bne long_loop
               S03:000027D0:  D0 FA
F05:0248         pla
               S03:000027D2:  68
F05:0249         ply
               S03:000027D3:  7A
F05:0250         plx
               S03:000027D4:  FA
F05:0251         rts
               S03:000027D5:  60
F05:0252       
F05:0253       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F05:0254       
F05:0255       wait24:
F05:0256         pha
               S03:000027D6:  48
F05:0257         phx
               S03:000027D7:  DA
F05:0258         phy
               S03:000027D8:  5A
F05:0259         stz framecount
               S03:000027D9:  64 05
F05:0260       b:inc framecount
               S03:000027DB:  E6 05
F05:0261         lda framecount
               S03:000027DD:  A5 05
F05:0262         bne b
               S03:000027DF:  D0 FA
F05:0263         ply
               S03:000027E1:  7A
F05:0264         plx
               S03:000027E2:  FA
F05:0265         pla
               S03:000027E3:  68
F05:0266         rts
               S03:000027E4:  60
F05:0267       
F05:0268       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F05:0269       ;;;;;;;;;;;;;  DATA  ;;;;;;;;;;;;;;;;
F05:0270       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F05:0271       
F05:0272       dirname:
F05:0273         .asciiz "FOLDER     "
               S03:000027E5:  46 4F 4C 44 45 52 20 20 20 20 20
F05:0274       
F05:0275       imagefile:
F05:0276         .byte "IB      DAT"
               S03:000027F1:  49 42 20 20 20 20 20 20 44 41 54
F05:0277       
F05:0278       text_pointers:
F05:0279         .word text_data
               S03:000027FC:  10 28
F05:0280         .word text_data1
               S03:000027FE:  26 28
F05:0281         .word text_data2
               S03:00002800:  3B 28
F05:0282         .word text_data3
               S03:00002802:  55 28
F05:0283         .word text_data4
               S03:00002804:  6F 28
F05:0284         .word text_data5
               S03:00002806:  92 28
F05:0285         .word text_data6
               S03:00002808:  B5 28
F05:0286         .word text_data7
               S03:0000280A:  DD 28
F05:0287         .word 0,0
               S03:0000280C:  00 00
               S03:0000280E:  00 00
F05:0288       
F05:0289       text_data:
F05:0290         .byte $0c
               S03:00002810:  0C
F05:0291         .byte $18, $08, "40 character text", $0d, $0a;,0
               S03:00002811:  18
               S03:00002812:  08
               S03:00002813:  34 30 20 63 68 61 72 61 63 74 65 72 20 74 65 78
               S03:00002823:  74
               S03:00002824:  0D
               S03:00002825:  0A
F05:0292       text_data1:
F05:0293         .byte $18, $01, "80 character text", $0d, $0a;,0
               S03:00002826:  18
               S03:00002827:  01
               S03:00002828:  38 30 20 63 68 61 72 61 63 74 65 72 20 74 65 78
               S03:00002838:  74
               S03:00002839:  0D
               S03:0000283A:  0A
F05:0294       text_data2:
F05:0295         .byte $18, $02, "40 character bold text", $0d, $0a;,0
               S03:0000283B:  18
               S03:0000283C:  02
               S03:0000283D:  34 30 20 63 68 61 72 61 63 74 65 72 20 62 6F 6C
               S03:0000284D:  64 20 74 65 78 74
               S03:00002853:  0D
               S03:00002854:  0A
F05:0296       text_data3:
F05:0297         .byte $18, $03, "80 character bold text", $0d, $0a;,0
               S03:00002855:  18
               S03:00002856:  03
               S03:00002857:  38 30 20 63 68 61 72 61 63 74 65 72 20 62 6F 6C
               S03:00002867:  64 20 74 65 78 74
               S03:0000286D:  0D
               S03:0000286E:  0A
F05:0298       text_data4:
F05:0299         .byte $18, $04, "40 character double height text", $0d, $0a;,0
               S03:0000286F:  18
               S03:00002870:  04
               S03:00002871:  34 30 20 63 68 61 72 61 63 74 65 72 20 64 6F 75
               S03:00002881:  62 6C 65 20 68 65 69 67 68 74 20 74 65 78 74
               S03:00002890:  0D
               S03:00002891:  0A
F05:0300       text_data5:
F05:0301         .byte $18, $05, "80 character double height text", $0d, $0a;,0
               S03:00002892:  18
               S03:00002893:  05
               S03:00002894:  38 30 20 63 68 61 72 61 63 74 65 72 20 64 6F 75
               S03:000028A4:  62 6C 65 20 68 65 69 67 68 74 20 74 65 78 74
               S03:000028B3:  0D
               S03:000028B4:  0A
F05:0302       text_data6:
F05:0303         .byte $18, $06, "40 character double height bold text", $0d, $0a;,0
               S03:000028B5:  18
               S03:000028B6:  06
               S03:000028B7:  34 30 20 63 68 61 72 61 63 74 65 72 20 64 6F 75
               S03:000028C7:  62 6C 65 20 68 65 69 67 68 74 20 62 6F 6C 64 20
               S03:000028D7:  0D
               S03:000028D8:  0A
F05:0304       text_data7:
F05:0305         .byte $18, $07, "80 character double height bold text", $0d, $0a;,0
               S03:000028DD:  18
               S03:000028DE:  07
               S03:000028DF:  38 30 20 63 68 61 72 61 63 74 65 72 20 64 6F 75
               S03:000028EF:  62 6C 65 20 68 65 69 67 68 74 20 62 6F 6C 64 20
               S03:000028FF:  0D
               S03:00002900:  0A
F05:0306       text_end:
F05:0307         .byte 0
               S03:00002905:  00
F05:0308       
F05:0309       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F05:0310       
F05:0311       text_01:
F05:0312       ;   empty cursor|clear| column | Row      |
F05:0313         .byte $02, $ff, $18, $03, $0c, $0e, $0a, $0f, $0a, "This is a demonstration of the capabilities of the XPL-32.", $00
               S03:00002906:  02
               S03:00002907:  FF
               S03:00002908:  18
               S03:00002909:  03
               S03:0000290A:  0C
               S03:0000290B:  0E
               S03:0000290C:  0A
               S03:0000290D:  0F
               S03:0000290E:  0A
               S03:0000290F:  54 68 69 73 20 69 73 20 61 20 64 65 6D 6F 6E 73
               S03:0000291F:  74 72 61 74 69 6F 6E 20 6F 66 20 74 68 65 20 63
               S03:0000292F:  00
F05:0314       text_02:
F05:0315         .byte $18, $06, $0c, $0e, $0c, $0f, $0c, "And graphics...", $00
               S03:0000294A:  18
               S03:0000294B:  06
               S03:0000294C:  0C
               S03:0000294D:  0E
               S03:0000294E:  0C
               S03:0000294F:  0F
               S03:00002950:  0C
               S03:00002951:  41 6E 64 20 67 72 61 70 68 69 63 73 2E 2E 2E
               S03:00002960:  00
F05:0316       text_03:
F05:0317         .byte $18, $06, $0c, $0e, $0a, $0f, $0c, "Here's Text Mode...", $00
               S03:00002961:  18
               S03:00002962:  06
               S03:00002963:  0C
               S03:00002964:  0E
               S03:00002965:  0A
               S03:00002966:  0F
               S03:00002967:  0C
               S03:00002968:  48 65 72 65 27 73 20 54 65 78 74 20 4D 6F 64 65
               S03:00002978:  2E 2E 2E
               S03:0000297B:  00
F05:0318       ;dat_1:
F05:0319       ;  .byte "1Mhz WDC65c02        "
F05:0320       ;dat_2:
F05:0321       ;  .byte "1.8432 Mhz ACIA      "
F05:0322       ;dat_3:
F05:0323       ;  .byte "WDC65c22             "
F05:0324       ;dat_4:
F05:0325       ;  .byte "6581 SID             "
F05:0326       ;dat_5:
F05:0327       ;  .byte "An LCD screen        "
F05:0328       ;dat_6:
F05:0329       ;  .byte "A Serial text display"
F05:0330       ;dat_7:
F05:0331       ;  .byte "4 EXP ports          "
F05:0332       endtext:
F05:0333         .byte $08, $16, $00
               S03:0000297C:  08
               S03:0000297D:  16
               S03:0000297E:  00
F05:0334       ;mrbut:
F05:0335       ;  .byte $0e, $0c, $0f, $44, $00
F05:0336       setup:
F05:0337         .byte $1b, $2d, $0c, $0e, $4f, $0f, $18, $00
               S03:0000297F:  1B
               S03:00002980:  2D
               S03:00002981:  0C
               S03:00002982:  0E
               S03:00002983:  4F
               S03:00002984:  0F
               S03:00002985:  18
               S03:00002986:  00
F05:0338       
F05:0339       poketable:
F05:0340         .binary "xpl.bin"
               S03:00002987:  00 00 00 00 00 00 00 00 00 00 00 30 00 38 00 00
               S03:00002997:  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 10
F05:0341       
F00:0059       
F00:0060       reset:
F00:0061         jmp reset
               S03:00002D79:  4C 79 2D
F00:0062       
F00:0063       scrollmsg:
F00:0064       
F00:0065         .byte "6502 Power! I know that the graphics look simple, but under the hood, it is crazy. Just wait till you see the c
               S03:00002D7C:  36 35 30 32 20 50 6F 77 65 72 21 20 49 20 6B 6E
               S03:00002D8C:  6F 77 20 74 68 61 74 20 74 68 65 20 67 72 61 70
               S03:00002D9C:  00
F00:0066       
F00:0067       


Sections:
S01  seg600
S02  segf00
S03  seg1000


Sources:
F00  demo.s
F01  libsd.s
F02  libfat32.s
F03  libacia.s
F04  sys.s
F05  text_1.s


Symbols:
text_end EXPR(10501=0x2905) UNUSED ABS 
text_data7 EXPR(10461=0x28dd) ABS 
text_data6 EXPR(10421=0x28b5) ABS 
text_data5 EXPR(10386=0x2892) ABS 
text_data4 EXPR(10351=0x286f) ABS 
text_data3 EXPR(10325=0x2855) ABS 
text_data2 EXPR(10299=0x283b) ABS 
text_data1 EXPR(10278=0x2826) ABS 
text_pointers EXPR(10236=0x27fc) UNUSED ABS 
b EXPR(10203=0x27db) ABS 
wait24 EXPR(10198=0x27d6) UNUSED ABS 
long_loop EXPR(10188=0x27cc) ABS 
long_wait EXPR(10183=0x27c7) UNUSED ABS 
waitloop EXPR(10175=0x27bf) ABS 
downloop EXPR(10150=0x27a6) ABS 
inchi EXPR(10136=0x2798) UNUSED ABS 
back EXPR(10138=0x279a) ABS 
bytedone EXPR(10126=0x278e) ABS 
endit EXPR(10141=0x279d) ABS 
norm EXPR(10113=0x2781) ABS 
gloop1 EXPR(10090=0x276a) ABS 
zero EXPR(10088=0x2768) ABS 
gloop EXPR(10077=0x275d) ABS 
error EXPR(10045=0x273d) UNUSED ABS 
foundsubdir EXPR(10050=0x2742) ABS 
dirname EXPR(10213=0x27e5) ABS 
reset EXPR(11641=0x2d79) ABS 
ee EXPR(10013=0x271d) UNUSED ABS 
nono EXPR(10005=0x2715) UNUSED ABS 
not EXPR(10010=0x271a) ABS 
poketable EXPR(10631=0x2987) ABS 
imagefile EXPR(10225=0x27f1) ABS 
rootsetup EXPR(10030=0x272e) ABS 
graphics EXPR(10058=0x274a) ABS 
setup EXPR(10623=0x297f) ABS 
endtext EXPR(10620=0x297c) ABS 
text_02 EXPR(10570=0x294a) ABS 
text_ii_end EXPR(9914=0x26ba) ABS 
text_data EXPR(10256=0x2810) ABS 
text_ii EXPR(9899=0x26ab) ABS 
text_03 EXPR(10593=0x2961) ABS 
out EXPR(10146=0x27a2) ABS 
wait_beat EXPR(10172=0x27bc) ABS 
text_01 EXPR(10502=0x2906) ABS 
a EXPR(9867=0x268b) ABS 
graph EXPR(254=0xfe) EQU 
bitdex EXPR(6=0x6) EQU 
L1786 EXPR(6022=0x1786) ABS 
L1776 EXPR(6006=0x1776) ABS 
L1768 EXPR(5992=0x1768) ABS 
L175a EXPR(5978=0x175a) ABS 
L173c EXPR(5948=0x173c) ABS 
L1748 EXPR(5960=0x1748) ABS 
L1730 EXPR(5936=0x1730) ABS 
L171d EXPR(5917=0x171d) ABS 
L170b EXPR(5899=0x170b) ABS 
L1702 EXPR(5890=0x1702) ABS 
L16f4 EXPR(5876=0x16f4) ABS 
L16e2 EXPR(5858=0x16e2) ABS 
L16d9 EXPR(5849=0x16d9) ABS 
L16f7 EXPR(5879=0x16f7) ABS 
L16cb EXPR(5835=0x16cb) ABS 
L1720 EXPR(5920=0x1720) ABS 
L16c0 EXPR(5824=0x16c0) ABS 
L16ad EXPR(5805=0x16ad) ABS 
L169e EXPR(5790=0x169e) ABS 
L1695 EXPR(5781=0x1695) ABS 
L167b EXPR(5755=0x167b) ABS 
L1672 EXPR(5746=0x1672) ABS 
L1658 EXPR(5720=0x1658) ABS 
L164f EXPR(5711=0x164f) ABS 
L1638 EXPR(5688=0x1638) ABS 
L1629 EXPR(5673=0x1629) ABS 
L1620 EXPR(5664=0x1620) ABS 
L168a EXPR(5770=0x168a) ABS 
L1615 EXPR(5653=0x1615) ABS 
L1667 EXPR(5735=0x1667) ABS 
L1644 EXPR(5700=0x1644) ABS 
L1607 EXPR(5639=0x1607) ABS 
L16b8 EXPR(5816=0x16b8) ABS 
L15fc EXPR(5628=0x15fc) ABS 
L15ea EXPR(5610=0x15ea) ABS 
L15d2 EXPR(5586=0x15d2) ABS 
L15e2 EXPR(5602=0x15e2) ABS 
L15f4 EXPR(5620=0x15f4) ABS 
L15ae EXPR(5550=0x15ae) ABS 
L1584 EXPR(5508=0x1584) ABS 
L1547 EXPR(5447=0x1547) ABS 
L151c EXPR(5404=0x151c) ABS 
L154f EXPR(5455=0x154f) ABS 
L14e7 EXPR(5351=0x14e7) ABS 
L14c1 EXPR(5313=0x14c1) ABS 
L14aa EXPR(5290=0x14aa) ABS 
L1499 EXPR(5273=0x1499) ABS 
L1472 EXPR(5234=0x1472) ABS 
L144f EXPR(5199=0x144f) ABS 
L13f5 EXPR(5109=0x13f5) ABS 
L142a EXPR(5162=0x142a) ABS 
L13b2 EXPR(5042=0x13b2) ABS 
L137c EXPR(4988=0x137c) ABS 
L1352 EXPR(4946=0x1352) ABS 
L12e0 EXPR(4832=0x12e0) ABS 
L1302 EXPR(4866=0x1302) ABS 
L1310 EXPR(4880=0x1310) ABS 
L132f EXPR(4911=0x132f) ABS 
L129f EXPR(4767=0x129f) ABS 
L12a9 EXPR(4777=0x12a9) ABS 
L12b3 EXPR(4787=0x12b3) ABS 
L128f EXPR(4751=0x128f) ABS 
L12cc EXPR(4812=0x12cc) ABS 
L1275 EXPR(4725=0x1275) ABS 
L125c EXPR(4700=0x125c) ABS 
L1254 EXPR(4692=0x1254) ABS 
L124b EXPR(4683=0x124b) ABS 
L1232 EXPR(4658=0x1232) ABS 
L12d1 EXPR(4817=0x12d1) ABS 
L1264 EXPR(4708=0x1264) ABS 
L14ea EXPR(5354=0x14ea) ABS 
L1218 EXPR(4632=0x1218) ABS 
L1353 EXPR(4947=0x1353) ABS 
L1210 EXPR(4624=0x1210) ABS 
L1215 EXPR(4629=0x1215) ABS 
L11fc EXPR(4604=0x11fc) ABS 
L11fa EXPR(4602=0x11fa) ABS 
S202d EXPR(8237=0x202d) ABS 
L115c EXPR(4444=0x115c) ABS 
L1106 EXPR(4358=0x1106) UNUSED ABS 
L11f2 EXPR(4594=0x11f2) ABS 
L1774 EXPR(6004=0x1774) ABS 
L1103 EXPR(4355=0x1103) ABS 
L1034 EXPR(4148=0x1034) UNUSED ABS 
L1031 EXPR(4145=0x1031) ABS 
S1100 EXPR(4352=0x1100) ABS 
L1000 EXPR(4096=0x1000) UNUSED ABS 
initsid2 EXPR(9814=0x2656) ABS 
endscroll EXPR(3948=0xf6c) ABS 
scrollmsg EXPR(11644=0x2d7c) ABS 
thingy EXPR(3956=0xf74) ABS 
scroller EXPR(3922=0xf52) UNUSED ABS 
eeeee EXPR(3924=0xf54) ABS 
nott EXPR(3916=0xf4c) ABS 
scrollercheck EXPR(3903=0xf3f) ABS 
PlaySid EXPR(9823=0x265f) ABS 
putbut EXPR(3979=0xf8b) ABS 
framecount EXPR(5=0x5) EQU 
irqst EXPR(4=0x4) EQU 
textstart EXPR(9861=0x2685) ABS 
loop EXPR(3872=0xf20) UNUSED ABS 
InitSid EXPR(3960=0xf78) ABS 
irq EXPR(3875=0xf23) ABS 
init EXPR(3843=0xf03) UNUSED ABS 
d418_sFiltMode EXPR(47128=0xb818) EQU 
d417_sFiltControl EXPR(47127=0xb817) EQU 
d416_sFiltFreqHi EXPR(47126=0xb816) EQU 
d415_sFiltFreqLo EXPR(47125=0xb815) UNUSED EQU 
d414_sVoc3SusRel EXPR(47124=0xb814) UNUSED EQU 
d413_sVoc3AttDec EXPR(47123=0xb813) UNUSED EQU 
d412_sVoc3Control EXPR(47122=0xb812) UNUSED EQU 
d411_sVoc3PWidthHi EXPR(47121=0xb811) UNUSED EQU 
d410_sVoc3PWidthLo EXPR(47120=0xb810) UNUSED EQU 
d40f_sVoc3FreqHi EXPR(47119=0xb80f) UNUSED EQU 
d40e_sVoc3FreqLo EXPR(47118=0xb80e) UNUSED EQU 
d40d_sVoc2SusRel EXPR(47117=0xb80d) UNUSED EQU 
d40c_sVoc2AttDec EXPR(47116=0xb80c) UNUSED EQU 
d40b_sVoc2Control EXPR(47115=0xb80b) UNUSED EQU 
d40a_sVoc2PWidthHi EXPR(47114=0xb80a) UNUSED EQU 
d409_sVoc2PWidthLo EXPR(47113=0xb809) UNUSED EQU 
d408_sVoc2FreqHi EXPR(47112=0xb808) UNUSED EQU 
d407_sVoc2FreqLo EXPR(47111=0xb807) UNUSED EQU 
d406_sVoc1SusRel EXPR(47110=0xb806) EQU 
d405_sVoc1AttDec EXPR(47109=0xb805) EQU 
d404_sVoc1Control EXPR(47108=0xb804) EQU 
d403_sVoc1PWidthHi EXPR(47107=0xb803) EQU 
d402_sVoc1PWidthLo EXPR(47106=0xb802) EQU 
d401_sVoc1FreqHi EXPR(47105=0xb801) EQU 
d400_sVoc1FreqLo EXPR(47104=0xb800) EQU 
delay EXPR(2796=0xaec) ABS 
wait EXPR(2790=0xae6) ABS 
endwacia EXPR(2782=0xade) ABS 
acia_man EXPR(2768=0xad0) ABS 
w_acia_full EXPR(2755=0xac3) ABS 
ascii_home EXPR(2747=0xabb) UNUSED ABS 
print_char_acia EXPR(2744=0xab8) UNUSED ABS 
rxpoll EXPR(2727=0xaa7) ABS 
txpoll EXPR(2719=0xa9f) ABS 
cleardisplay EXPR(2708=0xa94) UNUSED ABS 
crlf EXPR(2691=0xa83) UNUSED ABS 
print_chara EXPR(2735=0xaaf) ABS 
 print_nybble skipletter EXPR(2685=0xa7d) ABS 
print_nybble EXPR(2677=0xa75) ABS 
print_hex_acia EXPR(2668=0xa6c) UNUSED ABS 
acia_init EXPR(2655=0xa5f) UNUSED ABS 
 fat32_file_read wholesectorreadloop EXPR(2638=0xa4e) ABS 
 fat32_file_read done EXPR(2654=0xa5e) ABS 
fat32_file_read EXPR(2623=0xa3f) ABS 
 fat32_file_readbyte gotdata EXPR(2604=0xa2c) ABS 
 fat32_file_readbyte rts EXPR(2622=0xa3e) ABS 
fat32_file_readbyte EXPR(2550=0x9f6) UNUSED ABS 
 fat32_finddirent comparenameloop EXPR(2539=0x9eb) ABS 
 fat32_finddirent direntloop EXPR(2531=0x9e3) ABS 
fat32_finddirent EXPR(2527=0x9df) ABS 
 fat32_readdirent endofdirectory EXPR(2503=0x9c7) ABS 
 fat32_readdirent gotdata EXPR(2505=0x9c9) ABS 
fat32_readdirent EXPR(2473=0x9a9) ABS 
fat32_opendirent EXPR(2422=0x976) ABS 
fat32_openroot EXPR(2398=0x95e) ABS 
 fat32_readnextsector sectorincrementdone EXPR(2394=0x95a) ABS 
 fat32_readnextsector endofchain EXPR(2396=0x95c) ABS 
 fat32_readnextsector readsector EXPR(2367=0x93f) ABS 
fat32_readnextsector EXPR(2356=0x934) ABS 
 fat32_seekcluster notendofchain EXPR(2355=0x933) ABS 
 fat32_seekcluster spcshiftloopdone EXPR(2274=0x8e2) ABS 
 fat32_seekcluster spcshiftloop EXPR(2260=0x8d4) ABS 
fat32_seekcluster EXPR(2180=0x884) ABS 
 fat32_init skipfatsloop EXPR(2119=0x847) ABS 
 fat32_init error EXPR(2178=0x882) ABS 
 fat32_init foundpart EXPR(2008=0x7d8) ABS 
 fat32_init FSTYPE_FAT32 EXPR(12=0xc) EQU 
 fat32_init fail EXPR(2005=0x7d5) ABS 
fat32_init EXPR(1926=0x786) UNUSED ABS 
fat32_filenamepointer EXPR(90=0x5a) EQU 
fat32_errorstage EXPR(90=0x5a) EQU 
fat32_bytesremaining EXPR(90=0x5a) EQU 
fat32_nextcluster EXPR(86=0x56) EQU 
fat32_address EXPR(84=0x54) EQU 
fat32_pendingsectors EXPR(83=0x53) EQU 
fat32_sectorspercluster EXPR(82=0x52) EQU 
fat32_rootcluster EXPR(78=0x4e) EQU 
fat32_datastart EXPR(74=0x4a) EQU 
fat32_fatstart EXPR(70=0x46) EQU 
fat32_readbuffer EXPR(512=0x200) EQU 
initmsg EXPR(1911=0x777) UNUSED ABS 
respmsg EXPR(1900=0x76c) UNUSED ABS 
failedmsg EXPR(1890=0x762) UNUSED ABS 
initfailedmsg EXPR(1885=0x75d) UNUSED ABS 
statusmsg EXPR(1876=0x754) UNUSED ABS 
 sd_readsector readloop EXPR(1867=0x74b) ABS 
 sd_readsector failloop EXPR(1862=0x746) ABS 
 sd_readsector readpage EXPR(1865=0x749) ABS 
 sd_readsector fail EXPR(1862=0x746) ABS 
sd_readsector EXPR(1797=0x705) ABS 
sd_waitresult EXPR(1731=0x6c3) ABS 
 sd_writebyte sendbit EXPR(1718=0x6b6) ABS 
 sd_writebyte loop EXPR(1710=0x6ae) ABS 
sd_writebyte EXPR(1708=0x6ac) ABS 
 sd_readbyte bitnotset EXPR(1702=0x6a6) ABS 
 sd_readbyte loop EXPR(1683=0x693) ABS 
 sd_init loop EXPR(1654=0x676) ABS 
 sd_init delayloop EXPR(1645=0x66d) ABS 
 sd_init initialized EXPR(1654=0x676) ABS 
sd_cmd41_bytes EXPR(1675=0x68b) ABS 
 sd_init cmd41 EXPR(1622=0x656) UNUSED ABS 
sd_cmd55_bytes EXPR(1669=0x685) ABS 
 sd_init cmd55 EXPR(1607=0x647) ABS 
sd_readbyte EXPR(1681=0x691) ABS 
 sd_init initfailed EXPR(1654=0x676) ABS 
sd_cmd8_bytes EXPR(1663=0x67f) ABS 
 sd_init cmd8 EXPR(1580=0x62c) UNUSED ABS 
sd_sendcommand EXPR(1739=0x6cb) ABS 
sd_cmd0_bytes EXPR(1657=0x679) ABS 
 sd_init cmd0 EXPR(1569=0x621) UNUSED ABS 
 sd_init preinitloop EXPR(1561=0x619) ABS 
sd_init EXPR(1557=0x615) UNUSED ABS 
cmsg EXPR(1547=0x60b) UNUSED ABS 
via_init EXPR(1536=0x600) ABS 
PORTA_OUTPUTPINS EXPR(28=0x1c) EQU 
EXTVID EXPR(128=0x80) UNUSED EQU 
SD_MISO EXPR(2=0x2) EQU 
SD_MOSI EXPR(4=0x4) EQU 
SD_SCK EXPR(8=0x8) EQU 
SD_CS EXPR(16=0x10) EQU 
DDRA EXPR(45059=0xb003) EQU 
DDRB EXPR(45058=0xb002) EQU 
PORTA EXPR(45057=0xb001) EQU 
PORTB EXPR(45056=0xb000) UNUSED EQU 
endbuf EXPR(1536=0x600) UNUSED EQU 
buffer EXPR(1024=0x400) UNUSED EQU 
fat32_workspace EXPR(512=0x200) EQU 
zp_fat32_variables EXPR(70=0x46) EQU 
zp_sd_currentsector EXPR(66=0x42) EQU 
zp_sd_address EXPR(64=0x40) EQU 
count EXPR(3=0x3) EQU 
sco EXPR(2=0x2) EQU 
scrollinc EXPR(1=0x1) UNUSED EQU 
scroll EXPR(0=0x0) EQU 
__RPTCNT EXPR(-1=0xffff) INTERNAL 
__VASM EXPR(0=0x0) INTERNAL 

There have been no errors.
