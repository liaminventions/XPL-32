ca65 V2.17 - Raspbian 2.17-1
Main file   : osi_bas.s
Current file: osi_bas.s

000000r 1               ; Microsoft BASIC for 6502 (OSI VERSION)
000000r 1               ;
000000r 1               ; ==================================================================================
000000r 1               ; MODIFIED FROM THE ORIGINAL FILES AT http://www.pagetable.com/?p=46
000000r 1               ; MERGED INTO ONE FILE AND MACROS AND CONDITIONAL STATEMENTS REMOVED
000000r 1               ; BY G. SEARLE 2013
000000r 1               ;
000000r 1               ; I/O and dummy load/saves added to the end of this code
000000r 1               ;
000000r 1               ; This then assembles to the OSI version with the following
000000r 1               ; minor changes to the original BASIC code:
000000r 1               ; 1. Control-C call changed
000000r 1               ; 2. Load/save calls changed
000000r 1               ; 3. RAM start set to $0200 instead of $0300
000000r 1               ; 4. ROM start set to $C000
000000r 1               ; 5. Second letter of error messages back to ASCII value (instead of $80+val)
000000r 1               ; ==================================================================================
000000r 1               ;
000000r 1               ; Extract of original header comments follows:
000000r 1               ;
000000r 1               ; (first revision of this distribution, 20 Oct 2008, Michael Steil www.pagetable.com)
000000r 1               ;
000000r 1               ;
000000r 1               ; Name                 Release   MS Version    ROM   9digit  INPUTBUFFER   extensions
000000r 1               ;---------------------------------------------------------------------------------------------------
000000r 1               ; OSI BASIC             1977     1.0 REV 3.2    Y      N          ZP            -
000000r 1               ;
000000r 1               ; Credits:
000000r 1               ; * main work by Michael Steil
000000r 1               ; * function names and all uppercase comments taken from Bob Sander-Cederlof's excellent AppleSoft II disassembly:
000000r 1               ;   http://www.txbobsc.com/scsc/scdocumentor/
000000r 1               ; * Applesoft lite by Tom Greene http://cowgod.org/replica1/applesoft/ helped a lot, too.
000000r 1               ; * Thanks to Joe Zbicak for help with Intellision Keyboard BASIC
000000r 1               ; * This work is dedicated to the memory of my dear hacking pal Michael "acidity" Kollmann.
000000r 1               
000000r 1               fat32_workspace = $200      ; two pages
000000r 1               
000000r 1               buffer = $400               ; 512 bytes
000000r 1               endbuf = $600
000000r 1               
000000r 1               .debuginfo +
000000r 1               
000000r 1               .setcpu "6502"
000000r 1               .macpack longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               
000000r 1               ; zero page
000000r 1               ZP_START1 = $00
000000r 1               ZP_START2 = $0D
000000r 1               ZP_START3 = $5B
000000r 1               ZP_START4 = $65
000000r 1               
000000r 1               ;extra ZP variables
000000r 1               USR             := $000A
000000r 1               
000000r 1               ; constants
000000r 1               STACK_TOP		:= $FC
000000r 1               SPACE_FOR_GOSUB := $33
000000r 1               NULL_MAX		:= $0A
000000r 1               WIDTH			:= 72
000000r 1               WIDTH2			:= 56
000000r 1               
000000r 1               ; memory layout
000000r 1               RAMSTART2		:= $0600
000000r 1               BYTES_FP		:= 4
000000r 1               BYTES_PER_ELEMENT := BYTES_FP
000000r 1               BYTES_PER_VARIABLE := BYTES_FP+2
000000r 1               MANTISSA_BYTES	:= BYTES_FP-1
000000r 1               BYTES_PER_FRAME := 2*BYTES_FP+8
000000r 1               FOR_STACK1		:= 2*BYTES_FP+5
000000r 1               FOR_STACK2		:= BYTES_FP+4
000000r 1               MAX_EXPON = 10
000000r 1               STACK           := $0100
000000r 1               
000000r 1               INPUTBUFFERX = INPUTBUFFER & $FF00
000000r 1               
000000r 1               CR=13
000000r 1               LF=10
000000r 1               
000000r 1               CRLF_1 := CR
000000r 1               CRLF_2 := LF
000000r 1               
000000r 1               .feature org_per_seg
000000r 1               .zeropage
000000r 1               .org $0000
000000  1               .org ZP_START1
000000  1               charbuffer:
000000  1  xx           	.res 1
000001  1               sdbuffer:
000001  1  xx xx xx xx  	.res 11
000005  1  xx xx xx xx  
000009  1  xx xx xx     
00000C  1               zp_sd_address:
00000C  1  xx xx        	.res 2
00000E  1               zp_sd_currentsector:
00000E  1  xx xx xx xx  	.res 4
000012  1               GORESTART:
000012  1  xx xx xx     	.res 3
000015  1               GOSTROUT:
000015  1  xx xx xx     	.res 3
000018  1               GOAYINT:
000018  1  xx xx        	.res 2
00001A  1               GOGIVEAYF:
00001A  1  xx xx        	.res 2
00001C  1               
00001C  1               .org ZP_START2
00000D  1               Z15:
00000D  1  xx           	.res 1
00000E  1               POSX:
00000E  1  xx           	.res 1
00000F  1               Z17:
00000F  1  xx           	.res 1
000010  1               Z18:
000010  1  xx           	.res 1
000011  1               LINNUM:
000011  1               TXPSV:
000011  1  xx xx        	.res 2
000013  1               INPUTBUFFER:
000013  1               
000013  1               .org ZP_START3
00005B  1               CHARAC:
00005B  1  xx           	.res 1
00005C  1               ENDCHR:
00005C  1  xx           	.res 1
00005D  1               EOLPNTR:
00005D  1  xx           	.res 1
00005E  1               DIMFLG:
00005E  1  xx           	.res 1
00005F  1               VALTYP:
00005F  1  xx           	.res 1
000060  1               DATAFLG:
000060  1  xx           	.res 1
000061  1               SUBFLG:
000061  1  xx           	.res 1
000062  1               INPUTFLG:
000062  1  xx           	.res 1
000063  1               CPRMASK:
000063  1  xx           	.res 1
000064  1               Z14:
000064  1  xx           	.res 1
000065  1               
000065  1               .org ZP_START4
000065  1               TEMPPT:
000065  1  xx           	.res 1
000066  1               LASTPT:
000066  1  xx xx        	.res 2
000068  1               TEMPST:
000068  1  xx xx xx xx  	.res 9
00006C  1  xx xx xx xx  
000070  1  xx           
000071  1               INDEX:
000071  1  xx xx        	.res 2
000073  1               DEST:
000073  1  xx xx        	.res 2
000075  1               RESULT:
000075  1  xx xx xx xx  	.res BYTES_FP
000079  1               RESULT_LAST = RESULT + BYTES_FP-1
000079  1               TXTTAB:
000079  1  xx xx        	.res 2
00007B  1               VARTAB:
00007B  1  xx xx        	.res 2
00007D  1               ARYTAB:
00007D  1  xx xx        	.res 2
00007F  1               STREND:
00007F  1  xx xx        	.res 2
000081  1               FRETOP:
000081  1  xx xx        	.res 2
000083  1               FRESPC:
000083  1  xx xx        	.res 2
000085  1               MEMSIZ:
000085  1  xx xx        	.res 2
000087  1               CURLIN:
000087  1  xx xx        	.res 2
000089  1               OLDLIN:
000089  1  xx xx        	.res 2
00008B  1               OLDTEXT:
00008B  1  xx xx        	.res 2
00008D  1               Z8C:
00008D  1  xx xx        	.res 2
00008F  1               DATPTR:
00008F  1  xx xx        	.res 2
000091  1               INPTR:
000091  1  xx xx        	.res 2
000093  1               VARNAM:
000093  1  xx xx        	.res 2
000095  1               VARPNT:
000095  1  xx xx        	.res 2
000097  1               FORPNT:
000097  1  xx xx        	.res 2
000099  1               LASTOP:
000099  1  xx xx        	.res 2
00009B  1               CPRTYP:
00009B  1  xx           	.res 1
00009C  1               FNCNAM:
00009C  1               TEMP3:
00009C  1  xx xx        	.res 2
00009E  1               DSCPTR:
00009E  1  xx xx        	.res 2
0000A0  1               DSCLEN:
0000A0  1  xx xx        	.res 2
0000A2  1               JMPADRS	:= DSCLEN + 1
0000A2  1               
0000A2  1               Z52:
0000A2  1  xx           	.res 1
0000A3  1               ARGEXTENSION:
0000A3  1               TEMP1:
0000A3  1  xx           	.res 1
0000A4  1               HIGHDS:
0000A4  1  xx xx        	.res 2
0000A6  1               HIGHTR:
0000A6  1  xx xx        	.res 2
0000A8  1               INDX:
0000A8  1               TMPEXP:
0000A8  1               TEMP2:
0000A8  1  xx           	.res 1
0000A9  1               EXPON:
0000A9  1  xx           	.res 1
0000AA  1               LOWTR:
0000AA  1               LOWTRX:
0000AA  1  xx           	.res 1
0000AB  1               EXPSGN:
0000AB  1  xx           	.res 1
0000AC  1               FAC:
0000AC  1  xx xx xx xx  	.res BYTES_FP
0000B0  1               FAC_LAST = FAC + BYTES_FP-1
0000B0  1               FACSIGN:
0000B0  1  xx           	.res 1
0000B1  1               SERLEN:
0000B1  1  xx           	.res 1
0000B2  1               SHIFTSIGNEXT:
0000B2  1  xx           	.res 1
0000B3  1               ARG:
0000B3  1  xx xx xx xx  	.res BYTES_FP
0000B7  1               ARG_LAST = ARG + BYTES_FP-1
0000B7  1               ARGSIGN:
0000B7  1  xx           	.res 1
0000B8  1               STRNG1:
0000B8  1  xx xx        	.res 2
0000BA  1               SGNCPR = STRNG1
0000BA  1               FACEXTENSION = STRNG1+1
0000BA  1               STRNG2:
0000BA  1  xx xx        	.res 2
0000BC  1               XYLODSAV2:
0000BC  1  xx xx        	.res 2
0000BE  1               zp_fat32_variables:
0000BE  1  xx xx xx xx  	.res 24
0000C2  1  xx xx xx xx  
0000C6  1  xx xx xx xx  
0000D6  1               CHRGET:
0000D6  1               TXTPTR = <(GENERIC_TXTPTR-GENERIC_CHRGET + CHRGET)
0000D6  1               CHRGOT = <(GENERIC_CHRGOT-GENERIC_CHRGET + CHRGET)
0000D6  1               CHRGOT2 = <(GENERIC_CHRGOT2-GENERIC_CHRGET + CHRGET)
0000D6  1               RNDSEED = <(GENERIC_RNDSEED-GENERIC_CHRGET + CHRGET)
0000D6  1               
0000D6  1               .segment "CODE"
000000r 1               .org $C000
00C000  1               TOKEN_ADDRESS_TABLE:
00C000  1  85 CB        		.word END-1
00C002  1  AD CA        		.word FOR-1
00C004  1  8B CF        		.word NEXT-1
00C006  1  57 CC        		.word DATA-1
00C008  1  6E CE        		.word INPUT-1
00C00A  1  4C D2        		.word DIM-1
00C00C  1  9A CE        		.word READ-1
00C00E  1  04 CD        		.word LET-1
00C010  1               TOKEN_GOTO=$80+(*-TOKEN_ADDRESS_TABLE)/2
00C010  1  04 CC        		.word GOTO-1
00C012  1  DC CB        		.word RUN-1
00C014  1  87 CC        		.word IF-1
00C016  1  71 CB        		.word RESTORE-1
00C018  1               TOKEN_GOSUB=$80+(*-TOKEN_ADDRESS_TABLE)/2
00C018  1  E7 CB        		.word GOSUB-1
00C01A  1  31 CC        		.word POP-1
00C01C  1               TOKEN_REM=$80+(*-TOKEN_ADDRESS_TABLE)/2
00C01C  1  9A CC        		.word REM-1
00C01E  1  83 CB        		.word STOP-1
00C020  1  AA CC        		.word ON-1
00C022  1  C6 CB        		.word NULL-1
00C024  1  7D D9        		.word WAIT-1
00C026  1  FE E4        		.word LOAD-1
00C028  1  36 E6        		.word SAVE-1
00C02A  1  29 D5        		.word DEF-1
00C02C  1  74 D9        		.word POKE-1
00C02E  1               TOKEN_PRINT=$80+(*-TOKEN_ADDRESS_TABLE)/2
00C02E  1  7A CD        		.word PRINT-1
00C030  1  AC CB        		.word CONT-1
00C032  1  0C CA        		.word LIST-1
00C034  1  D7 CB        		.word CLEAR-1
00C036  1  B8 C9        		.word NEW-1
00C038  1               TOKEN_TAB=$00+$80+(*-TOKEN_ADDRESS_TABLE)/2
00C038  1               TOKEN_TO=$01+$80+(*-TOKEN_ADDRESS_TABLE)/2
00C038  1               TOKEN_FN=$02+$80+(*-TOKEN_ADDRESS_TABLE)/2
00C038  1               TOKEN_SPC=$03+$80+(*-TOKEN_ADDRESS_TABLE)/2
00C038  1               TOKEN_THEN=$04+$80+(*-TOKEN_ADDRESS_TABLE)/2
00C038  1               TOKEN_NOT=$05+$80+(*-TOKEN_ADDRESS_TABLE)/2
00C038  1               TOKEN_STEP=$06+$80+(*-TOKEN_ADDRESS_TABLE)/2
00C038  1               TOKEN_PLUS=$07+$80+(*-TOKEN_ADDRESS_TABLE)/2
00C038  1               TOKEN_MINUS=$08+$80+(*-TOKEN_ADDRESS_TABLE)/2
00C038  1               TOKEN_GREATER=$0E+$80+(*-TOKEN_ADDRESS_TABLE)/2
00C038  1               TOKEN_EQUAL=$0F+$80+(*-TOKEN_ADDRESS_TABLE)/2
00C038  1               NUM_TOKENS=(*-TOKEN_ADDRESS_TABLE)/2
00C038  1               
00C038  1               UNFNC:
00C038  1               TOKEN_SGN=$11+$80+(*-TOKEN_ADDRESS_TABLE)/2
00C038  1  24 DD        		.word SGN
00C03A  1  AE DD        		.word INT
00C03C  1  41 DD        		.word ABS
00C03E  1  0A 00        		.word USR
00C040  1  F9 D4        		.word FRE
00C042  1  1A D5        		.word POS
00C044  1  F8 DF        		.word SQR
00C046  1  0C E1        		.word RND
00C048  1  09 DB        		.word LOG
00C04A  1  67 E0        		.word EXP
00C04C  1  48 E1        		.word COS
00C04E  1  4F E1        		.word SIN
00C050  1  98 E1        		.word TAN
00C052  1  E5 E1        		.word ATN
00C054  1  6A D9        		.word PEEK
00C056  1  D8 D8        		.word LEN
00C058  1  D8 D5        		.word STR
00C05A  1  09 D9        		.word VAL
00C05C  1  E7 D8        		.word ASC
00C05E  1  48 D8        		.word CHRSTR
00C060  1               TOKEN_LEFTSTR=$11+$80+(*-TOKEN_ADDRESS_TABLE)/2
00C060  1  5C D8        		.word LEFTSTR
00C062  1  88 D8        		.word RIGHTSTR
00C064  1  93 D8        		.word MIDSTR
00C066  1               
00C066  1               MATHTBL:
00C066  1  79                   .byte   $79
00C067  1  BA D9                .word   FADDT-1
00C069  1  79                   .byte   $79
00C06A  1  A3 D9                .word   FSUBT-1
00C06C  1  7B                   .byte   $7B
00C06D  1  49 DB                .word   FMULTT-1
00C06F  1  7B                   .byte   $7B
00C070  1  18 DC                .word   FDIVT-1
00C072  1  7F                   .byte   $7F
00C073  1  01 E0                .word   FPWRT-1
00C075  1  50                   .byte   $50
00C076  1  B4 D1                .word   TAND-1
00C078  1  46                   .byte   $46
00C079  1  B1 D1                .word   OR-1
00C07B  1  7D                   .byte   $7D
00C07C  1  3A E0                .word   NEGOP-1
00C07E  1  5A                   .byte   $5A
00C07F  1  23 D1                .word   EQUOP-1
00C081  1  64                   .byte   $64
00C082  1  E1 D1                .word   RELOPS-1
00C084  1               
00C084  1               TOKEN_NAME_TABLE:
00C084  1  45 4E C4     		.byte "EN", $80+'D'
00C087  1  46 4F D2     		.byte "FO", $80+'R'
00C08A  1  4E 45 58 D4  		.byte "NEX", $80+'T'
00C08E  1  44 41 54 C1  		.byte "DAT", $80+'A'
00C092  1  49 4E 50 55  		.byte "INPU", $80+'T'
00C096  1  D4           
00C097  1  44 49 CD     		.byte "DI", $80+'M'
00C09A  1  52 45 41 C4  		.byte "REA", $80+'D'
00C09E  1  4C 45 D4     		.byte "LE", $80+'T'
00C0A1  1  47 4F 54 CF  		.byte "GOT", $80+'O'
00C0A5  1  52 55 CE     		.byte "RU", $80+'N'
00C0A8  1  49 C6        		.byte "I", $80+'F'
00C0AA  1  52 45 53 54  		.byte "RESTOR", $80+'E'
00C0AE  1  4F 52 C5     
00C0B1  1  47 4F 53 55  		.byte "GOSU", $80+'B'
00C0B5  1  C2           
00C0B6  1  52 45 54 55  		.byte "RETUR", $80+'N'
00C0BA  1  52 CE        
00C0BC  1  52 45 CD     		.byte "RE", $80+'M'
00C0BF  1  53 54 4F D0  		.byte "STO", $80+'P'
00C0C3  1  4F CE        		.byte "O", $80+'N'
00C0C5  1  4E 55 4C CC  		.byte "NUL", $80+'L'
00C0C9  1  57 41 49 D4  		.byte "WAI", $80+'T'
00C0CD  1  4C 4F 41 C4  		.byte "LOA", $80+'D'
00C0D1  1  53 41 56 C5  		.byte "SAV", $80+'E'
00C0D5  1  44 45 C6     		.byte "DE", $80+'F'
00C0D8  1  50 4F 4B C5  		.byte "POK", $80+'E'
00C0DC  1  50 52 49 4E  		.byte "PRIN", $80+'T'
00C0E0  1  D4           
00C0E1  1  43 4F 4E D4  		.byte "CON", $80+'T'
00C0E5  1  4C 49 53 D4  		.byte "LIS", $80+'T'
00C0E9  1  43 4C 45 41  		.byte "CLEA", $80+'R'
00C0ED  1  D2           
00C0EE  1  4E 45 D7     		.byte "NE", $80+'W'
00C0F1  1  54 41 42 A8  		.byte "TAB", $80+'('
00C0F5  1  54 CF        		.byte "T", $80+'O'
00C0F7  1  46 CE        		.byte "F", $80+'N'
00C0F9  1  53 50 43 A8  		.byte "SPC", $80+'('
00C0FD  1  54 48 45 CE  		.byte "THE", $80+'N'
00C101  1  4E 4F D4     		.byte "NO", $80+'T'
00C104  1  53 54 45 D0  		.byte "STE", $80+'P'
00C108  1  AB           		.byte "", $80+'+'
00C109  1  AD           		.byte "", $80+'-'
00C10A  1  AA           		.byte "", $80+'*'
00C10B  1  AF           		.byte "", $80+'/'
00C10C  1  DE           		.byte "", $80+'^'
00C10D  1  41 4E C4     		.byte "AN", $80+'D'
00C110  1  4F D2        		.byte "O", $80+'R'
00C112  1  BE           		.byte "", $80+'>'
00C113  1  BD           		.byte "", $80+'='
00C114  1  BC           		.byte "", $80+'<'
00C115  1  53 47 CE     		.byte "SG", $80+'N'
00C118  1  49 4E D4     		.byte "IN", $80+'T'
00C11B  1  41 42 D3     		.byte "AB", $80+'S'
00C11E  1  55 53 D2     		.byte "US", $80+'R'
00C121  1  46 52 C5     		.byte "FR", $80+'E'
00C124  1  50 4F D3     		.byte "PO", $80+'S'
00C127  1  53 51 D2     		.byte "SQ", $80+'R'
00C12A  1  52 4E C4     		.byte "RN", $80+'D'
00C12D  1  4C 4F C7     		.byte "LO", $80+'G'
00C130  1  45 58 D0     		.byte "EX", $80+'P'
00C133  1  43 4F D3     		.byte "CO", $80+'S'
00C136  1  53 49 CE     		.byte "SI", $80+'N'
00C139  1  54 41 CE     		.byte "TA", $80+'N'
00C13C  1  41 54 CE     		.byte "AT", $80+'N'
00C13F  1  50 45 45 CB  		.byte "PEE", $80+'K'
00C143  1  4C 45 CE     		.byte "LE", $80+'N'
00C146  1  53 54 52 A4  		.byte "STR", $80+'$'
00C14A  1  56 41 CC     		.byte "VA", $80+'L'
00C14D  1  41 53 C3     		.byte "AS", $80+'C'
00C150  1  43 48 52 A4  		.byte "CHR", $80+'$'
00C154  1  4C 45 46 54  		.byte "LEFT", $80+'$'
00C158  1  A4           
00C159  1  52 49 47 48  		.byte "RIGHT", $80+'$'
00C15D  1  54 A4        
00C15F  1  4D 49 44 A4  		.byte "MID", $80+'$'
00C163  1  00           		.byte   0
00C164  1               
00C164  1               ERROR_MESSAGES:
00C164  1               ERR_NOFOR := <(*-ERROR_MESSAGES)
00C164  1  4E 46                .byte "NF"
00C166  1               ERR_SYNTAX := <(*-ERROR_MESSAGES)
00C166  1  53 4E                .byte "SN"
00C168  1               ERR_NOGOSUB := <(*-ERROR_MESSAGES)
00C168  1  52 47                .byte "RG"
00C16A  1               ERR_NODATA := <(*-ERROR_MESSAGES)
00C16A  1  4F 44                .byte "OD"
00C16C  1               ERR_ILLQTY := <(*-ERROR_MESSAGES)
00C16C  1  46 43                .byte "FC"
00C16E  1               ERR_OVERFLOW := <(*-ERROR_MESSAGES)
00C16E  1  4F 56                .byte "OV"
00C170  1               ERR_MEMFULL := <(*-ERROR_MESSAGES)
00C170  1  4F 4D                .byte "OM"
00C172  1               ERR_UNDEFSTAT := <(*-ERROR_MESSAGES)
00C172  1  55 53                .byte "US"
00C174  1               ERR_BADSUBS := <(*-ERROR_MESSAGES)
00C174  1  42 53                .byte "BS"
00C176  1               ERR_REDIMD := <(*-ERROR_MESSAGES)
00C176  1  44 44                .byte "DD"
00C178  1               ERR_ZERODIV := <(*-ERROR_MESSAGES)
00C178  1  2F 30                .byte "/0"
00C17A  1               ERR_ILLDIR := <(*-ERROR_MESSAGES)
00C17A  1  49 44                .byte "ID"
00C17C  1               ERR_BADTYPE := <(*-ERROR_MESSAGES)
00C17C  1  54 4D                .byte "TM"
00C17E  1               ERR_STRLONG := <(*-ERROR_MESSAGES)
00C17E  1  4C 53                .byte "LS"
00C180  1               ERR_FRMCPX := <(*-ERROR_MESSAGES)
00C180  1  53 54                .byte "ST"
00C182  1               ERR_CANTCONT := <(*-ERROR_MESSAGES)
00C182  1  43 4E                .byte "CN"
00C184  1               ERR_UNDEFFN := <(*-ERROR_MESSAGES)
00C184  1  55 46                .byte "UF"
00C186  1               
00C186  1               ; global messages: "error", "in", "ready", "break"
00C186  1               QT_ERROR:
00C186  1  20 45 52 52          .byte   " ERROR"
00C18A  1  4F 52        
00C18C  1  00                   .byte   0
00C18D  1               QT_IN:
00C18D  1  20 49 4E 20          .byte   " IN "
00C191  1  00                   .byte   $00
00C192  1               QT_OK:
00C192  1  0D 0A 4F 4B  		.byte   CR,LF,"OK",CR,LF
00C196  1  0D 0A        
00C198  1  00           		.byte	0
00C199  1               QT_BREAK:
00C199  1  0D 0A 42 52  		.byte CR,LF,"BREAK"
00C19D  1  45 41 4B     
00C1A0  1  00                   .byte   0
00C1A1  1               
00C1A1  1               	.include "hwconfig.s"
00C1A1  2               PORTB = $b000
00C1A1  2               PORTA = $b001
00C1A1  2               DDRB = $b002
00C1A1  2               DDRA = $b003
00C1A1  2               
00C1A1  2               LCD_E  = %10000000
00C1A1  2               LCD_RW = %01000000
00C1A1  2               LCD_RS = %00100000
00C1A1  2               
00C1A1  2               SD_CS   = %00010000
00C1A1  2               SD_SCK  = %00001000
00C1A1  2               SD_MOSI = %00000100
00C1A1  2               SD_MISO = %00000010
00C1A1  2               
00C1A1  2               PORTA_OUTPUTPINS = LCD_E | LCD_RW | LCD_RS | SD_CS | SD_SCK | SD_MOSI
00C1A1  2               
00C1A1  2               via_init:
00C1A1  2  A9 FF          lda #%11111111          ; Set all pins on port B to output
00C1A3  2  8D 02 B0       sta DDRB
00C1A6  2  A9 FC          lda #PORTA_OUTPUTPINS   ; Set various pins on port A to output
00C1A8  2  8D 03 B0       sta DDRA
00C1AB  2  60             rts
00C1AC  2               
00C1AC  2               
00C1AC  1                	.include "libsd.s"
00C1AC  2               ; SD card interface module
00C1AC  2               ;
00C1AC  2               ; Requires zero-page variable storage:
00C1AC  2               ;   zp_sd_address - a bytes
00C1AC  2               ;   zp_sd_currentsector - 4 bytes
00C1AC  2               
00C1AC  2               cmsg:
00C1AC  2  43 6F 6D 6D    .byte "Command: ", $00
00C1B0  2  61 6E 64 3A  
00C1B4  2  20 00        
00C1B6  2               
00C1B6  2               sd_init:
00C1B6  2                 ; Let the SD card boot up, by pumping the clock with SD CS disabled
00C1B6  2               
00C1B6  2                 ; We need to apply around 80 clock pulses with CS and MOSI higha
00C1B6  2                 ; Normally MOSI doesn't matter when CS is high, but the card is
00C1B6  2                 ; not yet is SPI mode, and in this non-SPI state it does carea
00C1B6  2               
00C1B6  2  A9 14          lda #SD_CS | SD_MOSI
00C1B8  2  A2 A0          ldx #160               ; toggle the clock 160 times, so 80 low-high transitions
00C1BA  2               apreinitloop:
00C1BA  2  49 08          eor #SD_SCK
00C1BC  2  8D 01 B0       sta PORTA
00C1BF  2  CA             dex
00C1C0  2  D0 F8          bne apreinitloop
00C1C2  2               
00C1C2  2               
00C1C2  2               acmd0: ; GO_IDLE_STATE - resets card to idle state, and SPI mode
00C1C2  2  A9 29          lda #<sd_cmd0_bytes
00C1C4  2  85 0C          sta zp_sd_address
00C1C6  2  A9 C2          lda #>sd_cmd0_bytes
00C1C8  2  85 0D          sta zp_sd_address+1
00C1CA  2               
00C1CA  2  20 7B C2       jsr sd_sendcommand
00C1CD  2               
00C1CD  2                 ; Expect status response $01 (not initialized)
00C1CD  2                ; cmp #$01
00C1CD  2                ; bne ainitfailed
00C1CD  2               
00C1CD  2               acmd8: ; SEND_IF_COND - tell the card how we want it to operate (3a3V, etc)
00C1CD  2  A9 2F          lda #<sd_cmd8_bytes
00C1CF  2  85 0C          sta zp_sd_address
00C1D1  2  A9 C2          lda #>sd_cmd8_bytes
00C1D3  2  85 0D          sta zp_sd_address+1
00C1D5  2               
00C1D5  2  20 7B C2       jsr sd_sendcommand
00C1D8  2               
00C1D8  2                 ; Expect status response $01 (not initialized)
00C1D8  2  C9 01          cmp #$01
00C1DA  2  D0 43          bne ainitfailed
00C1DC  2               
00C1DC  2                 ; Read 3a-bit return value, but ignore it
00C1DC  2  20 41 C2       jsr sd_readbyte
00C1DF  2  20 41 C2       jsr sd_readbyte
00C1E2  2  20 41 C2       jsr sd_readbyte
00C1E5  2  20 41 C2       jsr sd_readbyte
00C1E8  2               
00C1E8  2               acmd55: ; APP_CMD - required prefix for ACMD commands
00C1E8  2  A9 35          lda #<sd_cmd55_bytes
00C1EA  2  85 0C          sta zp_sd_address
00C1EC  2  A9 C2          lda #>sd_cmd55_bytes
00C1EE  2  85 0D          sta zp_sd_address+1
00C1F0  2               
00C1F0  2  20 7B C2       jsr sd_sendcommand
00C1F3  2               
00C1F3  2                 ; Expect status response $01 (not initialized)
00C1F3  2  C9 01          cmp #$01
00C1F5  2  D0 28          bne ainitfailed
00C1F7  2               
00C1F7  2               acmd41: ; APP_SEND_OP_COND - send operating conditions, initialize card
00C1F7  2  A9 3B          lda #<sd_cmd41_bytes
00C1F9  2  85 0C          sta zp_sd_address
00C1FB  2  A9 C2          lda #>sd_cmd41_bytes
00C1FD  2  85 0D          sta zp_sd_address+1
00C1FF  2               
00C1FF  2  20 7B C2       jsr sd_sendcommand
00C202  2               
00C202  2                 ; Status response $00 means initialised
00C202  2  C9 00          cmp #$00
00C204  2  F0 11          beq ainitialized
00C206  2               
00C206  2                 ; Otherwise expect status response $01 (not initialized)
00C206  2  C9 01          cmp #$01
00C208  2  D0 15          bne ainitfailed
00C20A  2               
00C20A  2                 ; Not initialized yet, so wait a while then try againa
00C20A  2                 ; This retry is important, to give the card time to initializea
00C20A  2               
00C20A  2  A2 00          ldx #0
00C20C  2  A0 00          ldy #0
00C20E  2               adelayloop:
00C20E  2  88             dey
00C20F  2  D0 FD          bne adelayloop
00C211  2  CA             dex
00C212  2  D0 FA          bne adelayloop
00C214  2               
00C214  2  4C E8 C1       jmp acmd55
00C217  2               
00C217  2               
00C217  2               ainitialized:
00C217  2  A0 C3          ldy #>initmsg
00C219  2  A2 27          ldx #<initmsg
00C21B  2  20 77 C6       jsr w_acia_full
00C21E  2  60             rts
00C21F  2               
00C21F  2               ainitfailed:
00C21F  2  A0 C3          ldy #>initfailedmsg
00C221  2  A2 0D          ldx #<initfailedmsg
00C223  2  20 77 C6       jsr w_acia_full
00C226  2               aloop:
00C226  2  4C 43 FF       jmp dispstart
00C229  2               
00C229  2               sd_cmd0_bytes:
00C229  2  40 00 00 00    .byte $40, $00, $00, $00, $00, $95
00C22D  2  00 95        
00C22F  2               sd_cmd8_bytes:
00C22F  2  48 00 00 01    .byte $48, $00, $00, $01, $aa, $87
00C233  2  AA 87        
00C235  2               sd_cmd55_bytes:
00C235  2  77 00 00 00    .byte $77, $00, $00, $00, $00, $01
00C239  2  00 01        
00C23B  2               sd_cmd41_bytes:
00C23B  2  69 40 00 00    .byte $69, $40, $00, $00, $00, $01
00C23F  2  00 01        
00C241  2               
00C241  2               
00C241  2               
00C241  2               sd_readbyte:
00C241  2                 ; Enable the card and tick the clock 8 times with MOSI high,
00C241  2                 ; capturing bits from MISO and returning them
00C241  2               
00C241  2  A2 FE          ldx #$fe    ; Preloaded with seven ones and a zero, so we stop after eight bits
00C243  2               
00C243  2               baloop:
00C243  2               
00C243  2  A9 04          lda #SD_MOSI                ; enable card (CS low), set MOSI (resting state), SCK low
00C245  2  8D 01 B0       sta PORTA
00C248  2               
00C248  2  A9 0C          lda #SD_MOSI | SD_SCK       ; toggle the clock high
00C24A  2  8D 01 B0       sta PORTA
00C24D  2               
00C24D  2  AD 01 B0       lda PORTA                   ; read next bit
00C250  2  29 02          and #SD_MISO
00C252  2               
00C252  2  18             clc                         ; default to clearing the bottom bit
00C253  2  F0 01          beq abitnotset              ; unless MISO was set
00C255  2  38             sec                         ; in which case get ready to set the bottom bit
00C256  2               abitnotset:
00C256  2               
00C256  2  8A             txa                         ; transfer partial result from X
00C257  2  2A             rol                         ; rotate carry bit into read result, and loop bit into carry
00C258  2  AA             tax                         ; save partial result back to X
00C259  2               
00C259  2  B0 E8          bcs baloop                   ; loop if we need to read more bits
00C25B  2               
00C25B  2  60             rts
00C25C  2               
00C25C  2               
00C25C  2               sd_writebyte:
00C25C  2                 ; Tick the clock 8 times with descending bits on MOSI
00C25C  2                 ; SD communication is mostly half-duplex so we ignore anything it sends back here
00C25C  2               
00C25C  2  A2 08          ldx #8                      ; send 8 bits
00C25E  2               
00C25E  2               arloop:
00C25E  2  0A             asl                         ; shift next bit into carry
00C25F  2  A8             tay                         ; save remaining bits for later
00C260  2               
00C260  2  A9 00          lda #0
00C262  2  90 02          bcc asendbit                ; if carry clear, don't set MOSI for this bit
00C264  2  09 04          ora #SD_MOSI
00C266  2               
00C266  2               asendbit:
00C266  2  8D 01 B0       sta PORTA                   ; set MOSI (or not) first with SCK low
00C269  2  49 08          eor #SD_SCK
00C26B  2  8D 01 B0       sta PORTA                   ; raise SCK keeping MOSI the same, to send the bit
00C26E  2               
00C26E  2  98             tya                         ; restore remaining bits to send
00C26F  2               
00C26F  2  CA             dex
00C270  2  D0 EC          bne arloop                   ; loop if there are more bits to send
00C272  2               
00C272  2  60             rts
00C273  2               
00C273  2               
00C273  2               sd_waitresult:
00C273  2                 ; Wait for the SD card to return something other than $ff
00C273  2  20 41 C2       jsr sd_readbyte
00C276  2  C9 FF          cmp #$ff
00C278  2  F0 F9          beq sd_waitresult
00C27A  2  60             rts
00C27B  2               
00C27B  2               
00C27B  2               sd_sendcommand:
00C27B  2                 ; Debug print which command is being executed
00C27B  2                ; jsr lcd_cleardisplay
00C27B  2                ; jsr cleardisplay
00C27B  2               
00C27B  2               ;  phx
00C27B  2               ;  phy
00C27B  2               ;  ldx #<cmsg
00C27B  2               ;  ldy #>cmsg
00C27B  2               ;  jsr w_acia_full
00C27B  2               ;  ply
00C27B  2               ;  plx
00C27B  2               
00C27B  2               ;  ldx #0
00C27B  2               ;  lda (zp_sd_address,x)
00C27B  2               ;  jsr print_hex_acia
00C27B  2               
00C27B  2               ;  lda #$a0
00C27B  2               ;  jsr print_chara
00C27B  2               ;
00C27B  2               ;  lda #$a0
00C27B  2               ;  jsr print_chara
00C27B  2               
00C27B  2  A9 04          lda #SD_MOSI           ; pull CS low to begin command
00C27D  2  8D 01 B0       sta PORTA
00C280  2               
00C280  2  A0 00          ldy #0
00C282  2  B1 0C          lda (zp_sd_address),y    ; command byte
00C284  2  20 5C C2       jsr sd_writebyte
00C287  2  A0 01          ldy #1
00C289  2  B1 0C          lda (zp_sd_address),y    ; data 1
00C28B  2  20 5C C2       jsr sd_writebyte
00C28E  2  A0 02          ldy #2
00C290  2  B1 0C          lda (zp_sd_address),y    ; data 2
00C292  2  20 5C C2       jsr sd_writebyte
00C295  2  A0 03          ldy #3
00C297  2  B1 0C          lda (zp_sd_address),y    ; data 3
00C299  2  20 5C C2       jsr sd_writebyte
00C29C  2  A0 04          ldy #4
00C29E  2  B1 0C          lda (zp_sd_address),y    ; data 4
00C2A0  2  20 5C C2       jsr sd_writebyte
00C2A3  2  A0 05          ldy #5
00C2A5  2  B1 0C          lda (zp_sd_address),y    ; crc
00C2A7  2  20 5C C2       jsr sd_writebyte
00C2AA  2               
00C2AA  2  20 73 C2       jsr sd_waitresult
00C2AD  2  48             pha
00C2AE  2               
00C2AE  2               ;  phy
00C2AE  2               ;  phx
00C2AE  2               ;  ldy #>respmsg
00C2AE  2               ;  ldx #<respmsg
00C2AE  2               ;  jsr w_acia_full
00C2AE  2               ;  ply
00C2AE  2               ;  plx
00C2AE  2               
00C2AE  2                 ; Debug print the result code
00C2AE  2               ;  jsr print_hex_acia
00C2AE  2               
00C2AE  2               ;  lda #$0d
00C2AE  2               ;  jsr print_chara
00C2AE  2               ;
00C2AE  2               ;  lda #$0a
00C2AE  2               ;  jsr print_chara
00C2AE  2               
00C2AE  2                 ; End command
00C2AE  2  A9 14          lda #SD_CS | SD_MOSI   ; set CS high again
00C2B0  2  8D 01 B0       sta PORTA
00C2B3  2               
00C2B3  2  68             pla   ; restore result code
00C2B4  2  60             rts
00C2B5  2               
00C2B5  2               
00C2B5  2               sd_readsector:
00C2B5  2                 ; Read a sector from the SD carda  A sector is 51a bytesa
00C2B5  2                 ;
00C2B5  2                 ; Parameters:
00C2B5  2                 ;    zp_sd_currentsector   3a-bit sector number
00C2B5  2                 ;    zp_sd_address     address of buffer to receive data
00C2B5  2               
00C2B5  2  A9 04          lda #SD_MOSI
00C2B7  2  8D 01 B0       sta PORTA
00C2BA  2               
00C2BA  2                 ; Command 17, arg is sector number, crc not checked
00C2BA  2  A9 51          lda #$51                    ; CMD17 - READ_SINGLE_BLOCK
00C2BC  2  20 5C C2       jsr sd_writebyte
00C2BF  2  A5 11          lda zp_sd_currentsector+3   ; sector a4:31
00C2C1  2  20 5C C2       jsr sd_writebyte
00C2C4  2  A5 10          lda zp_sd_currentsector+2   ; sector 16:23
00C2C6  2  20 5C C2       jsr sd_writebyte
00C2C9  2  A5 0F          lda zp_sd_currentsector+1   ; sector 8:15
00C2CB  2  20 5C C2       jsr sd_writebyte
00C2CE  2  A5 0E          lda zp_sd_currentsector     ; sector 0:7
00C2D0  2  20 5C C2       jsr sd_writebyte
00C2D3  2  A9 01          lda #$01                    ; crc (not checked)
00C2D5  2  20 5C C2       jsr sd_writebyte
00C2D8  2               
00C2D8  2  20 73 C2       jsr sd_waitresult
00C2DB  2  C9 00          cmp #$00
00C2DD  2  D0 17          bne afail
00C2DF  2               
00C2DF  2                 ; wait for data
00C2DF  2  20 73 C2       jsr sd_waitresult
00C2E2  2  C9 FE          cmp #$fe
00C2E4  2  D0 10          bne afail
00C2E6  2               
00C2E6  2                 ; Need to read 51a bytes - two pages of a56 bytes each
00C2E6  2  20 F9 C2       jsr areadpage
00C2E9  2  E6 0D          inc zp_sd_address+1
00C2EB  2  20 F9 C2       jsr areadpage
00C2EE  2  C6 0D          dec zp_sd_address+1
00C2F0  2               
00C2F0  2                 ; End command
00C2F0  2  A9 14          lda #SD_CS | SD_MOSI
00C2F2  2  8D 01 B0       sta PORTA
00C2F5  2               
00C2F5  2  60             rts
00C2F6  2               
00C2F6  2               
00C2F6  2               afail:
00C2F6  2               ;  ldx #<statusmsg
00C2F6  2               ;  ldy #>statusmsg  ; Status:
00C2F6  2               ;  jsr w_acia_full
00C2F6  2               
00C2F6  2               ;  ldx #<failedmsg
00C2F6  2               ;  ldy #>failedmsg  ; Failed!
00C2F6  2               ;  jsr w_acia_full
00C2F6  2               afailloop:
00C2F6  2  4C F6 C2       jmp afailloop
00C2F9  2               
00C2F9  2               
00C2F9  2               areadpage:
00C2F9  2                 ; Read a56 bytes to the address at zp_sd_address
00C2F9  2  A0 00          ldy #0
00C2FB  2               areadloop:
00C2FB  2  20 41 C2       jsr sd_readbyte
00C2FE  2  91 0C          sta (zp_sd_address),y
00C300  2  C8             iny
00C301  2  D0 F8          bne areadloop
00C303  2  60             rts
00C304  2               
00C304  2               statusmsg:
00C304  2  53 74 61 74    .byte "Status: ", $00
00C308  2  75 73 3A 20  
00C30C  2  00           
00C30D  2               initfailedmsg:
00C30D  2  49 6E 69 74    .byte "Init "
00C311  2  20           
00C312  2               failedmsg:
00C312  2  46 61 69 6C    .byte "Failed!", $0d, $0a, $00
00C316  2  65 64 21 0D  
00C31A  2  0A 00        
00C31C  2               respmsg:
00C31C  2  52 65 73 70    .byte "Response: ", $00
00C320  2  6F 6E 73 65  
00C324  2  3A 20 00     
00C327  2               initmsg:
00C327  2  49 6E 69 74    .byte "Initialized!", $0d, $0a, $00
00C32B  2  69 61 6C 69  
00C32F  2  7A 65 64 21  
00C336  2               
00C336  1                 	.include "libfat32.s"
00C336  2               ; FAT32/SD interface library
00C336  2               ;
00C336  2               ; This module requires some RAM workspace to be defined elsewhere:
00C336  2               ;
00C336  2               ; fat32_workspace    - a large page-aligned 512-byte workspace
00C336  2               ; zp_fat32_variables - 24 bytes of zero-page storage for variables etc
00C336  2               
00C336  2               fat32_readbuffer = fat32_workspace
00C336  2               
00C336  2               fat32_fatstart          = zp_fat32_variables + $00  ; 4 bytes
00C336  2               fat32_datastart         = zp_fat32_variables + $04  ; 4 bytes
00C336  2               fat32_rootcluster       = zp_fat32_variables + $08  ; 4 bytes
00C336  2               fat32_sectorspercluster = zp_fat32_variables + $0c  ; 1 byte
00C336  2               fat32_pendingsectors    = zp_fat32_variables + $0d  ; 1 byte
00C336  2               fat32_address           = zp_fat32_variables + $0e  ; 2 bytes
00C336  2               fat32_nextcluster       = zp_fat32_variables + $10  ; 4 bytes
00C336  2               fat32_bytesremaining    = zp_fat32_variables + $14  ; 4 bytes
00C336  2               
00C336  2               fat32_errorstage        = fat32_bytesremaining  ; only used during initializatio
00C336  2               fat32_filenamepointer   = fat32_bytesremaining  ; only used when searching for a file
00C336  2               
00C336  2               
00C336  2               fat32_init:
00C336  2                 ; Initialize the module - read the MBR etc, find the partition,
00C336  2                 ; and set up the variables ready for navigating the filesystem
00C336  2               
00C336  2                 ; Read the MBR and extract pertinent information
00C336  2               
00C336  2  A9 00          lda #0
00C338  2  85 D2          sta fat32_errorstage
00C33A  2               
00C33A  2                 ; Sector 0
00C33A  2  A9 00          lda #0
00C33C  2  85 0E          sta zp_sd_currentsector
00C33E  2  85 0F          sta zp_sd_currentsector+1
00C340  2  85 10          sta zp_sd_currentsector+2
00C342  2  85 11          sta zp_sd_currentsector+3
00C344  2               
00C344  2                 ; Target buffer
00C344  2  A9 00          lda #<fat32_readbuffer
00C346  2  85 0C          sta zp_sd_address
00C348  2  A9 02          lda #>fat32_readbuffer
00C34A  2  85 0D          sta zp_sd_address+1
00C34C  2               
00C34C  2                 ; Do the read
00C34C  2  20 B5 C2       jsr sd_readsector
00C34F  2               
00C34F  2               
00C34F  2  E6 D2          inc fat32_errorstage ; stage 1 = boot sector signature check
00C351  2               
00C351  2                 ; Check some things
00C351  2  AD FE 03       lda fat32_readbuffer+510 ; Boot sector signature 55
00C354  2  C9 55          cmp #$55
00C356  2  D0 2D          bne ufail
00C358  2  AD FF 03       lda fat32_readbuffer+511 ; Boot sector signature aa
00C35B  2  C9 AA          cmp #$aa
00C35D  2  D0 26          bne ufail
00C35F  2               
00C35F  2               
00C35F  2  E6 D2          inc fat32_errorstage ; stage 2 = finding partition
00C361  2               
00C361  2                 ; Find a FAT32 partition
00C361  2               uFSTYPE_FAT32 = 12
00C361  2  A2 00          ldx #0
00C363  2  BD C2 03       lda fat32_readbuffer+$1c2,x
00C366  2  C9 0C          cmp #uFSTYPE_FAT32
00C368  2  F0 1E          beq ufoundpart
00C36A  2  A2 10          ldx #16
00C36C  2  BD C2 03       lda fat32_readbuffer+$1c2,x
00C36F  2  C9 0C          cmp #uFSTYPE_FAT32
00C371  2  F0 15          beq ufoundpart
00C373  2  A2 20          ldx #32
00C375  2  BD C2 03       lda fat32_readbuffer+$1c2,x
00C378  2  C9 0C          cmp #uFSTYPE_FAT32
00C37A  2  F0 0C          beq ufoundpart
00C37C  2  A2 30          ldx #48
00C37E  2  BD C2 03       lda fat32_readbuffer+$1c2,x
00C381  2  C9 0C          cmp #uFSTYPE_FAT32
00C383  2  F0 03          beq ufoundpart
00C385  2               
00C385  2               ufail:
00C385  2  4C 32 C4       jmp uerror
00C388  2               
00C388  2               ufoundpart:
00C388  2               
00C388  2                 ; Read the FAT32 BPB
00C388  2  BD C6 03       lda fat32_readbuffer+$1c6,x
00C38B  2  85 0E          sta zp_sd_currentsector
00C38D  2  BD C7 03       lda fat32_readbuffer+$1c7,x
00C390  2  85 0F          sta zp_sd_currentsector+1
00C392  2  BD C8 03       lda fat32_readbuffer+$1c8,x
00C395  2  85 10          sta zp_sd_currentsector+2
00C397  2  BD C9 03       lda fat32_readbuffer+$1c9,x
00C39A  2  85 11          sta zp_sd_currentsector+3
00C39C  2               
00C39C  2  20 B5 C2       jsr sd_readsector
00C39F  2               
00C39F  2               
00C39F  2  E6 D2          inc fat32_errorstage ; stage 3 = BPB signature check
00C3A1  2               
00C3A1  2                 ; Check some things
00C3A1  2  AD FE 03       lda fat32_readbuffer+510 ; BPB sector signature 55
00C3A4  2  C9 55          cmp #$55
00C3A6  2  D0 DD          bne ufail
00C3A8  2  AD FF 03       lda fat32_readbuffer+511 ; BPB sector signature aa
00C3AB  2  C9 AA          cmp #$aa
00C3AD  2  D0 D6          bne ufail
00C3AF  2               
00C3AF  2  E6 D2          inc fat32_errorstage ; stage 4 = RootEntCnt check
00C3B1  2               
00C3B1  2  AD 11 02       lda fat32_readbuffer+17 ; RootEntCnt should be 0 for FAT32
00C3B4  2  0D 12 02       ora fat32_readbuffer+18
00C3B7  2  D0 CC          bne ufail
00C3B9  2               
00C3B9  2  E6 D2          inc fat32_errorstage ; stage 5 = TotSec16 check
00C3BB  2               
00C3BB  2  AD 13 02       lda fat32_readbuffer+19 ; TotSec16 should be 0 for FAT32
00C3BE  2  0D 14 02       ora fat32_readbuffer+20
00C3C1  2  D0 C2          bne ufail
00C3C3  2               
00C3C3  2  E6 D2          inc fat32_errorstage ; stage 6 = SectorsPerCluster check
00C3C5  2               
00C3C5  2                 ; Check bytes per filesystem sector, it should be 512 for any SD card that supports FAT32
00C3C5  2  AD 0B 02       lda fat32_readbuffer+11 ; low byte should be zero
00C3C8  2  D0 BB          bne ufail
00C3CA  2  AD 0C 02       lda fat32_readbuffer+12 ; high byte is 2 (512), 4, 8, or 16
00C3CD  2  C9 02          cmp #2
00C3CF  2  D0 B4          bne ufail
00C3D1  2               
00C3D1  2               
00C3D1  2                 ; Calculate the starting sector of the FAT
00C3D1  2  18             clc
00C3D2  2  A5 0E          lda zp_sd_currentsector
00C3D4  2  6D 0E 02       adc fat32_readbuffer+14    ; reserved sectors lo
00C3D7  2  85 BE          sta fat32_fatstart
00C3D9  2  85 C2          sta fat32_datastart
00C3DB  2  A5 0F          lda zp_sd_currentsector+1
00C3DD  2  6D 0F 02       adc fat32_readbuffer+15    ; reserved sectors hi
00C3E0  2  85 BF          sta fat32_fatstart+1
00C3E2  2  85 C3          sta fat32_datastart+1
00C3E4  2  A5 10          lda zp_sd_currentsector+2
00C3E6  2  69 00          adc #0
00C3E8  2  85 C0          sta fat32_fatstart+2
00C3EA  2  85 C4          sta fat32_datastart+2
00C3EC  2  A5 11          lda zp_sd_currentsector+3
00C3EE  2  69 00          adc #0
00C3F0  2  85 C1          sta fat32_fatstart+3
00C3F2  2  85 C5          sta fat32_datastart+3
00C3F4  2               
00C3F4  2                 ; Calculate the starting sector of the data area
00C3F4  2  AE 10 02       ldx fat32_readbuffer+16   ; number of FATs
00C3F7  2               uskipfatsloop:
00C3F7  2  18             clc
00C3F8  2  A5 C2          lda fat32_datastart
00C3FA  2  6D 24 02       adc fat32_readbuffer+36 ; fatsize 0
00C3FD  2  85 C2          sta fat32_datastart
00C3FF  2  A5 C3          lda fat32_datastart+1
00C401  2  6D 25 02       adc fat32_readbuffer+37 ; fatsize 1
00C404  2  85 C3          sta fat32_datastart+1
00C406  2  A5 C4          lda fat32_datastart+2
00C408  2  6D 26 02       adc fat32_readbuffer+38 ; fatsize 2
00C40B  2  85 C4          sta fat32_datastart+2
00C40D  2  A5 C5          lda fat32_datastart+3
00C40F  2  6D 27 02       adc fat32_readbuffer+39 ; fatsize 3
00C412  2  85 C5          sta fat32_datastart+3
00C414  2  CA             dex
00C415  2  D0 E0          bne uskipfatsloop
00C417  2               
00C417  2                 ; Sectors-per-cluster is a power of two from 1 to 128
00C417  2  AD 0D 02       lda fat32_readbuffer+13
00C41A  2  85 CA          sta fat32_sectorspercluster
00C41C  2               
00C41C  2                 ; Remember the root cluster
00C41C  2  AD 2C 02       lda fat32_readbuffer+44
00C41F  2  85 C6          sta fat32_rootcluster
00C421  2  AD 2D 02       lda fat32_readbuffer+45
00C424  2  85 C7          sta fat32_rootcluster+1
00C426  2  AD 2E 02       lda fat32_readbuffer+46
00C429  2  85 C8          sta fat32_rootcluster+2
00C42B  2  AD 2F 02       lda fat32_readbuffer+47
00C42E  2  85 C9          sta fat32_rootcluster+3
00C430  2               
00C430  2  18             clc
00C431  2  60             rts
00C432  2               
00C432  2               uerror:
00C432  2  38             sec
00C433  2  60             rts
00C434  2               
00C434  2               
00C434  2               fat32_seekcluster:
00C434  2                 ; Gets ready to read fat32_nextcluster, and advances it according to the FAT
00C434  2               
00C434  2                 ; FAT sector = (cluster*4) / 512 = (cluster*2) / 256
00C434  2  A5 CE          lda fat32_nextcluster
00C436  2  0A             asl
00C437  2  A5 CF          lda fat32_nextcluster+1
00C439  2  2A             rol
00C43A  2  85 0E          sta zp_sd_currentsector
00C43C  2  A5 D0          lda fat32_nextcluster+2
00C43E  2  2A             rol
00C43F  2  85 0F          sta zp_sd_currentsector+1
00C441  2  A5 D1          lda fat32_nextcluster+3
00C443  2  2A             rol
00C444  2  85 10          sta zp_sd_currentsector+2
00C446  2                 ; note: cluster numbers never have the top bit set, so no carry can occur
00C446  2               
00C446  2                 ; Add FAT starting sector
00C446  2  A5 0E          lda zp_sd_currentsector
00C448  2  65 BE          adc fat32_fatstart
00C44A  2  85 0E          sta zp_sd_currentsector
00C44C  2  A5 0F          lda zp_sd_currentsector+1
00C44E  2  65 BF          adc fat32_fatstart+1
00C450  2  85 0F          sta zp_sd_currentsector+1
00C452  2  A5 10          lda zp_sd_currentsector+2
00C454  2  65 C0          adc fat32_fatstart+2
00C456  2  85 10          sta zp_sd_currentsector+2
00C458  2  A9 00          lda #0
00C45A  2  65 C1          adc fat32_fatstart+3
00C45C  2  85 11          sta zp_sd_currentsector+3
00C45E  2               
00C45E  2                 ; Target buffer
00C45E  2  A9 00          lda #<fat32_readbuffer
00C460  2  85 0C          sta zp_sd_address
00C462  2  A9 02          lda #>fat32_readbuffer
00C464  2  85 0D          sta zp_sd_address+1
00C466  2               
00C466  2                 ; Read the sector from the FAT
00C466  2  20 B5 C2       jsr sd_readsector
00C469  2               
00C469  2                 ; Before using this FAT data, set currentsector ready to read the cluster itself
00C469  2                 ; We need to multiply the cluster number minus two by the number of sectors per
00C469  2                 ; cluster, then add the data region start sector
00C469  2               
00C469  2                 ; Subtract two from cluster number
00C469  2  38             sec
00C46A  2  A5 CE          lda fat32_nextcluster
00C46C  2  E9 02          sbc #2
00C46E  2  85 0E          sta zp_sd_currentsector
00C470  2  A5 CF          lda fat32_nextcluster+1
00C472  2  E9 00          sbc #0
00C474  2  85 0F          sta zp_sd_currentsector+1
00C476  2  A5 D0          lda fat32_nextcluster+2
00C478  2  E9 00          sbc #0
00C47A  2  85 10          sta zp_sd_currentsector+2
00C47C  2  A5 D1          lda fat32_nextcluster+3
00C47E  2  E9 00          sbc #0
00C480  2  85 11          sta zp_sd_currentsector+3
00C482  2               
00C482  2                 ; Multiply by sectors-per-cluster which is a power of two between 1 and 128
00C482  2  A5 CA          lda fat32_sectorspercluster
00C484  2               uspcshiftloop:
00C484  2  4A             lsr
00C485  2  B0 0B          bcs uspcshiftloopdone
00C487  2  06 0E          asl zp_sd_currentsector
00C489  2  26 0F          rol zp_sd_currentsector+1
00C48B  2  26 10          rol zp_sd_currentsector+2
00C48D  2  26 11          rol zp_sd_currentsector+3
00C48F  2  4C 84 C4       jmp uspcshiftloop
00C492  2               uspcshiftloopdone:
00C492  2               
00C492  2                 ; Add the data region start sector
00C492  2  18             clc
00C493  2  A5 0E          lda zp_sd_currentsector
00C495  2  65 C2          adc fat32_datastart
00C497  2  85 0E          sta zp_sd_currentsector
00C499  2  A5 0F          lda zp_sd_currentsector+1
00C49B  2  65 C3          adc fat32_datastart+1
00C49D  2  85 0F          sta zp_sd_currentsector+1
00C49F  2  A5 10          lda zp_sd_currentsector+2
00C4A1  2  65 C4          adc fat32_datastart+2
00C4A3  2  85 10          sta zp_sd_currentsector+2
00C4A5  2  A5 11          lda zp_sd_currentsector+3
00C4A7  2  65 C5          adc fat32_datastart+3
00C4A9  2  85 11          sta zp_sd_currentsector+3
00C4AB  2               
00C4AB  2                 ; That's now ready for later code to read this sector in - tell it how many consecutive
00C4AB  2                 ; sectors it can now read
00C4AB  2  A5 CA          lda fat32_sectorspercluster
00C4AD  2  85 CB          sta fat32_pendingsectors
00C4AF  2               
00C4AF  2                 ; Now go back to looking up the next cluster in the chain
00C4AF  2                 ; Find the offset to this cluster's entry in the FAT sector we loaded earlier
00C4AF  2               
00C4AF  2                 ; Offset = (cluster*4) & 511 = (cluster & 127) * 4
00C4AF  2  A5 CE          lda fat32_nextcluster
00C4B1  2  29 7F          and #$7f
00C4B3  2  0A             asl
00C4B4  2  0A             asl
00C4B5  2  A8             tay ; Y = low byte of offset
00C4B6  2               
00C4B6  2                 ; Add the potentially carried bit to the high byte of the address
00C4B6  2  A5 0D          lda zp_sd_address+1
00C4B8  2  69 00          adc #0
00C4BA  2  85 0D          sta zp_sd_address+1
00C4BC  2               
00C4BC  2                 ; Copy out the next cluster in the chain for later use
00C4BC  2  B1 0C          lda (zp_sd_address),y
00C4BE  2  85 CE          sta fat32_nextcluster
00C4C0  2  C8             iny
00C4C1  2  B1 0C          lda (zp_sd_address),y
00C4C3  2  85 CF          sta fat32_nextcluster+1
00C4C5  2  C8             iny
00C4C6  2  B1 0C          lda (zp_sd_address),y
00C4C8  2  85 D0          sta fat32_nextcluster+2
00C4CA  2  C8             iny
00C4CB  2  B1 0C          lda (zp_sd_address),y
00C4CD  2  29 0F          and #$0f
00C4CF  2  85 D1          sta fat32_nextcluster+3
00C4D1  2               
00C4D1  2                 ; See if it's the end of the chain
00C4D1  2  09 F0          ora #$f0
00C4D3  2  25 D0          and fat32_nextcluster+2
00C4D5  2  25 CF          and fat32_nextcluster+1
00C4D7  2  C9 FF          cmp #$ff
00C4D9  2  D0 08          bne unotendofchain
00C4DB  2  A5 CE          lda fat32_nextcluster
00C4DD  2  C9 F8          cmp #$f8
00C4DF  2  90 02          bcc unotendofchain
00C4E1  2               
00C4E1  2                 ; It's the end of the chain, set the top bits so that we can tell this later on
00C4E1  2  85 D1          sta fat32_nextcluster+3
00C4E3  2               unotendofchain:
00C4E3  2               
00C4E3  2  60             rts
00C4E4  2               
00C4E4  2               
00C4E4  2               fat32_readnextsector:
00C4E4  2                 ; Reads the next sector from a cluster chain into the buffer at fat32_addressu
00C4E4  2                 ;
00C4E4  2                 ; Advances the current sector ready for the next read and looks up the next cluster
00C4E4  2                 ; in the chain when necessaryu
00C4E4  2                 ;
00C4E4  2                 ; On return, carry is clear if data was read, or set if the cluster chain has endedu
00C4E4  2               
00C4E4  2                 ; Maybe there are pending sectors in the current cluster
00C4E4  2  A5 CB          lda fat32_pendingsectors
00C4E6  2  D0 07          bne ureadsector
00C4E8  2               
00C4E8  2                 ; No pending sectors, check for end of cluster chain
00C4E8  2  A5 D1          lda fat32_nextcluster+3
00C4EA  2  30 20          bmi uendofchain
00C4EC  2               
00C4EC  2                 ; Prepare to read the next cluster
00C4EC  2  20 34 C4       jsr fat32_seekcluster
00C4EF  2               
00C4EF  2               ureadsector:
00C4EF  2  C6 CB          dec fat32_pendingsectors
00C4F1  2               
00C4F1  2                 ; Set up target address
00C4F1  2  A5 CC          lda fat32_address
00C4F3  2  85 0C          sta zp_sd_address
00C4F5  2  A5 CD          lda fat32_address+1
00C4F7  2  85 0D          sta zp_sd_address+1
00C4F9  2               
00C4F9  2                 ; Read the sector
00C4F9  2  20 B5 C2       jsr sd_readsector
00C4FC  2               
00C4FC  2                 ; Advance to next sector
00C4FC  2  E6 0E          inc zp_sd_currentsector
00C4FE  2  D0 0A          bne usectorincrementdone
00C500  2  E6 0F          inc zp_sd_currentsector+1
00C502  2  D0 06          bne usectorincrementdone
00C504  2  E6 10          inc zp_sd_currentsector+2
00C506  2  D0 02          bne usectorincrementdone
00C508  2  E6 11          inc zp_sd_currentsector+3
00C50A  2               usectorincrementdone:
00C50A  2               
00C50A  2                 ; Success - clear carry and return
00C50A  2  18             clc
00C50B  2  60             rts
00C50C  2               
00C50C  2               uendofchain:
00C50C  2                 ; End of chain - set carry and return
00C50C  2  38             sec
00C50D  2  60             rts
00C50E  2               
00C50E  2               
00C50E  2               fat32_openroot:
00C50E  2                 ; Prepare to read the root directory
00C50E  2               
00C50E  2  A5 C6          lda fat32_rootcluster
00C510  2  85 CE          sta fat32_nextcluster
00C512  2  A5 C7          lda fat32_rootcluster+1
00C514  2  85 CF          sta fat32_nextcluster+1
00C516  2  A5 C8          lda fat32_rootcluster+2
00C518  2  85 D0          sta fat32_nextcluster+2
00C51A  2  A5 C9          lda fat32_rootcluster+3
00C51C  2  85 D1          sta fat32_nextcluster+3
00C51E  2               
00C51E  2  20 34 C4       jsr fat32_seekcluster
00C521  2               
00C521  2                 ; Set the pointer to a large value so we always read a sector the first time through
00C521  2  A9 FF          lda #$ff
00C523  2  85 0D          sta zp_sd_address+1
00C525  2               
00C525  2  60             rts
00C526  2               
00C526  2               
00C526  2               fat32_opendirent:
00C526  2                 ; Prepare to read from a file or directory based on a dirent
00C526  2                 ;
00C526  2                 ; Point zp_sd_address at the dirent
00C526  2               
00C526  2                 ; Remember file size in bytes remaining
00C526  2  A0 1C          ldy #28
00C528  2  B1 0C          lda (zp_sd_address),y
00C52A  2  85 D2          sta fat32_bytesremaining
00C52C  2  C8             iny
00C52D  2  B1 0C          lda (zp_sd_address),y
00C52F  2  85 D3          sta fat32_bytesremaining+1
00C531  2  C8             iny
00C532  2  B1 0C          lda (zp_sd_address),y
00C534  2  85 D4          sta fat32_bytesremaining+2
00C536  2  C8             iny
00C537  2  B1 0C          lda (zp_sd_address),y
00C539  2  85 D5          sta fat32_bytesremaining+3
00C53B  2               
00C53B  2                 ; Seek to first cluster
00C53B  2  A0 1A          ldy #26
00C53D  2  B1 0C          lda (zp_sd_address),y
00C53F  2  85 CE          sta fat32_nextcluster
00C541  2  C8             iny
00C542  2  B1 0C          lda (zp_sd_address),y
00C544  2  85 CF          sta fat32_nextcluster+1
00C546  2  A0 14          ldy #20
00C548  2  B1 0C          lda (zp_sd_address),y
00C54A  2  85 D0          sta fat32_nextcluster+2
00C54C  2  C8             iny
00C54D  2  B1 0C          lda (zp_sd_address),y
00C54F  2  85 D1          sta fat32_nextcluster+3
00C551  2               
00C551  2  20 34 C4       jsr fat32_seekcluster
00C554  2               
00C554  2                 ; Set the pointer to a large value so we always read a sector the first time through
00C554  2  A9 FF          lda #$ff
00C556  2  85 0D          sta zp_sd_address+1
00C558  2               
00C558  2  60             rts
00C559  2               
00C559  2               
00C559  2               fat32_readdirent:
00C559  2                 ; Read a directory entry from the open directory
00C559  2                 ;
00C559  2                 ; On exit the carry is set if there were no more directory entriesu
00C559  2                 ;
00C559  2                 ; Otherwise, A is set to the file's attribute byte and
00C559  2                 ; zp_sd_address points at the returned directory entryu
00C559  2                 ; LFNs and empty entries are ignored automaticallyu
00C559  2               
00C559  2                 ; Increment pointer by 32 to point to next entry
00C559  2  18             clc
00C55A  2  A5 0C          lda zp_sd_address
00C55C  2  69 20          adc #32
00C55E  2  85 0C          sta zp_sd_address
00C560  2  A5 0D          lda zp_sd_address+1
00C562  2  69 00          adc #0
00C564  2  85 0D          sta zp_sd_address+1
00C566  2               
00C566  2                 ; If it's not at the end of the buffer, we have data already
00C566  2  C9 04          cmp #>(fat32_readbuffer+$200)
00C568  2  90 0F          bcc ugotdata
00C56A  2               
00C56A  2                 ; Read another sector
00C56A  2  A9 00          lda #<fat32_readbuffer
00C56C  2  85 CC          sta fat32_address
00C56E  2  A9 02          lda #>fat32_readbuffer
00C570  2  85 CD          sta fat32_address+1
00C572  2               
00C572  2  20 E4 C4       jsr fat32_readnextsector
00C575  2  90 02          bcc ugotdata
00C577  2               
00C577  2               uendofdirectory:
00C577  2  38             sec
00C578  2  60             rts
00C579  2               
00C579  2               ugotdata:
00C579  2                 ; Check first character
00C579  2  A0 00          ldy #0
00C57B  2  B1 0C          lda (zp_sd_address),y
00C57D  2               
00C57D  2                 ; End of directory => abort
00C57D  2  F0 F8          beq uendofdirectory
00C57F  2               
00C57F  2                 ; Empty entry => start again
00C57F  2  C9 E5          cmp #$e5
00C581  2  F0 D6          beq fat32_readdirent
00C583  2               
00C583  2                 ; Check attributes
00C583  2  A0 0B          ldy #11
00C585  2  B1 0C          lda (zp_sd_address),y
00C587  2  29 3F          and #$3f
00C589  2  C9 0F          cmp #$0f ; LFN => start again
00C58B  2  F0 CC          beq fat32_readdirent
00C58D  2               
00C58D  2                 ; Yield this result
00C58D  2  18             clc
00C58E  2  60             rts
00C58F  2               
00C58F  2               
00C58F  2               fat32_finddirent:
00C58F  2                 ; Finds a particular directory entryu  X,Y point to the 11-character filename to seeku
00C58F  2                 ; The directory should already be open for iterationu
00C58F  2               
00C58F  2                 ; Form ZP pointer to user's filename
00C58F  2  86 D2          stx fat32_filenamepointer
00C591  2  84 D3          sty fat32_filenamepointer+1
00C593  2               
00C593  2                 ; Iterate until name is found or end of directory
00C593  2               udirentloop:
00C593  2  20 59 C5       jsr fat32_readdirent
00C596  2  A0 0A          ldy #10
00C598  2  90 01          bcc ucomparenameloop
00C59A  2  60             rts ; with carry set
00C59B  2               
00C59B  2               ucomparenameloop:
00C59B  2  B1 0C          lda (zp_sd_address),y
00C59D  2  D1 D2          cmp (fat32_filenamepointer),y
00C59F  2  D0 F2          bne udirentloop ; no match
00C5A1  2  88             dey
00C5A2  2  10 F7          bpl ucomparenameloop
00C5A4  2               
00C5A4  2                 ; Found it
00C5A4  2  18             clc
00C5A5  2  60             rts
00C5A6  2               
00C5A6  2               
00C5A6  2               fat32_file_readbyte:
00C5A6  2                 ; Read a byte from an open file
00C5A6  2                 ;
00C5A6  2                 ; The byte is returned in A with C clear; or if end-of-file was reached, C is set instead
00C5A6  2               
00C5A6  2  38             sec
00C5A7  2               
00C5A7  2                 ; Is there any data to read at all?
00C5A7  2  A5 D2          lda fat32_bytesremaining
00C5A9  2  05 D3          ora fat32_bytesremaining+1
00C5AB  2  05 D4          ora fat32_bytesremaining+2
00C5AD  2  05 D5          ora fat32_bytesremaining+3
00C5AF  2  F0 3D          beq urts
00C5B1  2               
00C5B1  2                 ; Decrement the remaining byte count
00C5B1  2  A5 D2          lda fat32_bytesremaining
00C5B3  2  E9 01          sbc #1
00C5B5  2  85 D2          sta fat32_bytesremaining
00C5B7  2  A5 D3          lda fat32_bytesremaining+1
00C5B9  2  E9 00          sbc #0
00C5BB  2  85 D3          sta fat32_bytesremaining+1
00C5BD  2  A5 D4          lda fat32_bytesremaining+2
00C5BF  2  E9 00          sbc #0
00C5C1  2  85 D4          sta fat32_bytesremaining+2
00C5C3  2  A5 D5          lda fat32_bytesremaining+3
00C5C5  2  E9 00          sbc #0
00C5C7  2  85 D5          sta fat32_bytesremaining+3
00C5C9  2               
00C5C9  2                 ; Need to read a new sector?
00C5C9  2  A5 0D          lda zp_sd_address+1
00C5CB  2  C9 04          cmp #>(fat32_readbuffer+$200)
00C5CD  2  90 0D          bcc uegotdata
00C5CF  2               
00C5CF  2                 ; Read another sector
00C5CF  2  A9 00          lda #<fat32_readbuffer
00C5D1  2  85 CC          sta fat32_address
00C5D3  2  A9 02          lda #>fat32_readbuffer
00C5D5  2  85 CD          sta fat32_address+1
00C5D7  2               
00C5D7  2  20 E4 C4       jsr fat32_readnextsector
00C5DA  2  B0 12          bcs urts                    ; this shouldn't happen
00C5DC  2               
00C5DC  2               uegotdata:
00C5DC  2  A0 00          ldy #0
00C5DE  2  B1 0C          lda (zp_sd_address),y
00C5E0  2               
00C5E0  2  E6 0C          inc zp_sd_address
00C5E2  2  D0 0A          bne urts
00C5E4  2  E6 0D          inc zp_sd_address+1
00C5E6  2  D0 06          bne urts
00C5E8  2  E6 0E          inc zp_sd_address+2
00C5EA  2  D0 02          bne urts
00C5EC  2  E6 0F          inc zp_sd_address+3
00C5EE  2               
00C5EE  2               urts:
00C5EE  2  60             rts
00C5EF  2               
00C5EF  2               
00C5EF  2               fat32_file_read:
00C5EF  2                 ; Read a whole file into memoryu  It's assumed the file has just been opened
00C5EF  2                 ; and no data has been read yetu
00C5EF  2                 ;
00C5EF  2                 ; Also we read whole sectors, so data in the target region beyond the end of the
00C5EF  2                 ; file may get overwritten, up to the next 512-byte boundaryu
00C5EF  2                 ;
00C5EF  2                 ; And we don't properly support 64k+ files, as it's unnecessary complication given
00C5EF  2                 ; the 6502's small address space
00C5EF  2               
00C5EF  2                 ; Round the size up to the next whole sector
00C5EF  2  A5 D2          lda fat32_bytesremaining
00C5F1  2  C9 01          cmp #1                      ; set carry if bottom 8 bits not zero
00C5F3  2  A5 D3          lda fat32_bytesremaining+1
00C5F5  2  69 00          adc #0                      ; add carry, if any
00C5F7  2  4A             lsr                         ; divide by 2
00C5F8  2  69 00          adc #0                      ; round up
00C5FA  2               
00C5FA  2                 ; No data?
00C5FA  2  F0 12          beq udone
00C5FC  2               
00C5FC  2                 ; Store sector count - not a byte count any more
00C5FC  2  85 D2          sta fat32_bytesremaining
00C5FE  2               
00C5FE  2                 ; Read entire sectors to the user-supplied buffer
00C5FE  2               uwholesectorreadloop:
00C5FE  2                 ; Read a sector to fat32_address
00C5FE  2  20 E4 C4       jsr fat32_readnextsector
00C601  2               
00C601  2                 ; Advance fat32_address by 512 bytes
00C601  2  A5 CD          lda fat32_address+1
00C603  2  69 02          adc #2                      ; carry already clear
00C605  2  85 CD          sta fat32_address+1
00C607  2               
00C607  2  A6 D2          ldx fat32_bytesremaining    ; note - actually loads sectors remaining
00C609  2  CA             dex
00C60A  2  86 D2          stx fat32_bytesremaining    ; note - actually stores sectors remaining
00C60C  2               
00C60C  2  D0 F0          bne uwholesectorreadloop
00C60E  2               
00C60E  2               udone:
00C60E  2  60             rts
00C60F  2               
00C60F  2               
00C60F  2               
00C60F  1                 	.include "libacia.s"
00C60F  2               ;       ------------------ 6551 ACIA Subroutine Library -------------------
00C60F  2               ; Includes:
00C60F  2               ; acia_init       - Initializes the ACIA
00C60F  2               ; print_hex_acia  - Prints a hex value in A
00C60F  2               ; crlf		  - Prints <CR> followed by <LF>
00C60F  2               ; clear_display   - Sends a <CLS> command
00C60F  2               ; txpoll          - Polls the TX bit to see if the ACIA is ready
00C60F  2               ; print_chara     - Prints a Character that is stored in A
00C60F  2               ; print_char_acia - Same as print_chara
00C60F  2               ; ascii_home      - Home the cursor
00C60F  2               ; w_acia_full     - Print a NULL-Termintated String with >HIGH in Y and <LOW in X
00C60F  2               
00C60F  2               acia_init:
00C60F  2  48             pha
00C610  2  A9 0B          lda #%00001011          ; No parity, no echo, no interrupt
00C612  2  8D 02 80       sta $8002
00C615  2  A9 1F          lda #%00011111          ; 1 stop bit, 8 data bits, 19200 baud
00C617  2  8D 03 80       sta $8003
00C61A  2  68             pla
00C61B  2  60             rts
00C61C  2               
00C61C  2               print_hex_acia:
00C61C  2  48             pha
00C61D  2  6A             ror
00C61E  2  6A             ror
00C61F  2  6A             ror
00C620  2  6A             ror
00C621  2  20 25 C6       jsr print_nybble   ; This is just som usful hex cod
00C624  2  68             pla
00C625  2               print_nybble:
00C625  2  29 0F          and #15
00C627  2  C9 0A          cmp #10
00C629  2  30 02          bmi cskipletter
00C62B  2  69 06          adc #6
00C62D  2               cskipletter:
00C62D  2  69 30          adc #48
00C62F  2                ; jsr print_char
00C62F  2  20 63 C6       jsr print_chara
00C632  2  60             rts
00C633  2               
00C633  2               crlf:
00C633  2  48             pha
00C634  2  8A             txa
00C635  2  48             pha
00C636  2  98             tya
00C637  2  48             pha
00C638  2  A9 0D          lda #$0d
00C63A  2  20 63 C6       jsr print_chara
00C63D  2  A9 0A          lda #$0a
00C63F  2  20 63 C6       jsr print_chara
00C642  2  68             pla
00C643  2  A8             tay
00C644  2  68             pla
00C645  2  AA             tax
00C646  2  68             pla
00C647  2  60             rts
00C648  2               
00C648  2               cleardisplay:
00C648  2  48             pha
00C649  2  20 53 C6       jsr txpoll  ; Poll the TX bit
00C64C  2  A9 0C          lda #12     ; Print decimal 12 (CLS)
00C64E  2  8D 00 80       sta $8000
00C651  2  68             pla
00C652  2  60             rts
00C653  2               
00C653  2               txpoll:
00C653  2  AD 01 80       lda $8001
00C656  2  29 10          and #$10    ; Poll the TX bit
00C658  2  F0 F9          beq txpoll
00C65A  2  60             rts
00C65B  2               
00C65B  2               rxpoll:
00C65B  2  AD 01 80       lda $8001
00C65E  2  29 08          and #$08    ; Poll the RX bit
00C660  2  F0 F9          beq rxpoll
00C662  2  60             rts
00C663  2               
00C663  2               
00C663  2               print_chara:
00C663  2  48             pha
00C664  2  20 53 C6       jsr txpoll  ; Poll the TX bit
00C667  2  68             pla
00C668  2  8D 00 80       sta $8000   ; Print character from A
00C66B  2  60             rts
00C66C  2               
00C66C  2               print_char_acia:
00C66C  2  4C 63 C6       jmp print_chara  ; Same as "print_chara"
00C66F  2               
00C66F  2               ascii_home:
00C66F  2  48             pha
00C670  2  A9 01          lda #1
00C672  2  20 63 C6       jsr print_chara  ; Print 1 (HOME)
00C675  2  68             pla
00C676  2  60             rts
00C677  2               
00C677  2               w_acia_full:
00C677  2  48             pha
00C678  2  A5 FF          lda $ff
00C67A  2  48             pha        ; Push Previous States onto the stack
00C67B  2  A5 FE          lda $fe
00C67D  2  48             pha
00C67E  2  84 FF          sty $ff    ; Set Y as the Upper Address (8-15)
00C680  2  86 FE          stx $fe    ; Set X as the Lower Adderss (0-7)
00C682  2  A0 00          ldy #0
00C684  2               acia_man:
00C684  2  20 53 C6       jsr txpoll   ; Poll TX
00C687  2  B1 FE          lda ($fe),y  ; Load the Address
00C689  2  8D 00 80       sta $8000    ; Print what is at the address
00C68C  2  F0 04          beq endwacia ; If Done, End
00C68E  2  C8             iny          ; Next Character
00C68F  2  4C 84 C6       jmp acia_man ; Back to the top
00C692  2               endwacia:
00C692  2  68             pla
00C693  2  85 FE          sta $fe
00C695  2  68             pla          ; Restore Variables
00C696  2  85 FF          sta $ff
00C698  2  68             pla
00C699  2  60             rts
00C69A  2               
00C69A  1               	.include "errors.s"
00C69A  2               error_sound:
00C69A  2  20 D7 C6     	jsr clear_sid
00C69D  2  A9 0F        	lda #$0f
00C69F  2  8D 18 B8     	sta $b818
00C6A2  2  A9 E7        	lda #$e7
00C6A4  2  8D 02 B8     	sta $b802
00C6A7  2  A9 0F        	lda #$0f
00C6A9  2  8D 05 B8     	sta $b805
00C6AC  2  A9 F8        	lda #$f8
00C6AE  2  8D 06 B8     	sta $b806
00C6B1  2  AD D5 C6     	lda freq_table
00C6B4  2  8D 00 B8     	sta $b800
00C6B7  2  AD D6 C6     	lda freq_table+1
00C6BA  2  8D 01 B8     	sta $b801
00C6BD  2  A9 41        	lda #$41
00C6BF  2  8D 04 B8     	sta $b804
00C6C2  2               
00C6C2  2               outer:
00C6C2  2  A0 FF        	ldy #$ff
00C6C4  2               inner:
00C6C4  2  A2 FF        	ldx #$ff
00C6C6  2               
00C6C6  2               innerloop:
00C6C6  2  CA           	dex
00C6C7  2  D0 FD        	bne innerloop
00C6C9  2               
00C6C9  2  88           	dey
00C6CA  2  F0 03        	beq ende
00C6CC  2  4C C4 C6     	jmp inner
00C6CF  2               ende:
00C6CF  2  A9 40        	lda #$40
00C6D1  2  8D 04 B8     	sta $b804
00C6D4  2  60           	rts
00C6D5  2               
00C6D5  2               freq_table:
00C6D5  2  50 50        	.byte $50, $50
00C6D7  2               
00C6D7  2               clear_sid:
00C6D7  2  A2 18        	ldx #$18
00C6D9  2  A9 00        	lda #0
00C6DB  2               csid:
00C6DB  2  9D 00 B8     	sta $B800,X
00C6DE  2  CA           	dex
00C6DF  2  D0 FA        	bne csid
00C6E1  2  60           	rts
00C6E2  2               
00C6E2  2               
00C6E2  1               dirname:
00C6E2  1  46 4F 4C 44  	.asciiz "FOLDER     "
00C6E6  1  45 52 20 20  
00C6EA  1  20 20 20 00  
00C6EE  1               errormsg:
00C6EE  1  0D 0A 45 52  	.byte CR,LF,"ERROR!",CR,LF
00C6F2  1  52 4F 52 21  
00C6F6  1  0D 0A        
00C6F8  1  00           	.byte 0
00C6F9  1               
00C6F9  1               ; generic stack and memory management code
00C6F9  1               ; this code is identical across all versions of
00C6F9  1               ; BASIC
00C6F9  1               ; ----------------------------------------------------------------------------
00C6F9  1               ; CALLED BY "NEXT" AND "FOR" TO SCAN THROUGH
00C6F9  1               ; THE STACK FOR A FRAME WITH THE SAME VARIABLE.
00C6F9  1               ;
00C6F9  1               ; (FORPNT) = ADDRESS OF VARIABLE IF "FOR" OR "NEXT"
00C6F9  1               ; 	= $XXFF IF CALLED FROM "RETURN"
00C6F9  1               ; 	<<< BUG: SHOULD BE $FFXX >>>
00C6F9  1               ;
00C6F9  1               ;	RETURNS .NE. IF VARIABLE NOT FOUND,
00C6F9  1               ;	(X) = STACK PNTR AFTER SKIPPING ALL FRAMES
00C6F9  1               ;
00C6F9  1               ;	.EQ. IF FOUND
00C6F9  1               ;	(X) = STACK PNTR OF FRAME FOUND
00C6F9  1               ; ----------------------------------------------------------------------------
00C6F9  1               GTFORPNT:
00C6F9  1  BA                   tsx
00C6FA  1  E8                   inx
00C6FB  1  E8                   inx
00C6FC  1  E8                   inx
00C6FD  1  E8                   inx
00C6FE  1               L2279:
00C6FE  1  BD 01 01             lda     STACK+1,x
00C701  1  C9 81                cmp     #$81
00C703  1  D0 21                bne     L22A1
00C705  1  A5 98                lda     FORPNT+1
00C707  1  D0 0A                bne     L228E
00C709  1  BD 02 01             lda     STACK+2,x
00C70C  1  85 97                sta     FORPNT
00C70E  1  BD 03 01             lda     STACK+3,x
00C711  1  85 98                sta     FORPNT+1
00C713  1               L228E:
00C713  1  DD 03 01             cmp     STACK+3,x
00C716  1  D0 07                bne     L229A
00C718  1  A5 97                lda     FORPNT
00C71A  1  DD 02 01             cmp     STACK+2,x
00C71D  1  F0 07                beq     L22A1
00C71F  1               L229A:
00C71F  1  8A                   txa
00C720  1  18                   clc
00C721  1  69 10                adc     #BYTES_PER_FRAME
00C723  1  AA                   tax
00C724  1  D0 D8                bne     L2279
00C726  1               L22A1:
00C726  1  60                   rts
00C727  1               ; ----------------------------------------------------------------------------
00C727  1               ; MOVE BLOCK OF MEMORY UP
00C727  1               ;
00C727  1               ; ON ENTRY:
00C727  1               ;	(Y,A) = (HIGHDS) = DESTINATION END+1
00C727  1               ;	(LOWTR) = LOWEST ADDRESS OF SOURCE
00C727  1               ;	(HIGHTR) = HIGHEST SOURCE ADDRESS+1
00C727  1               ; ----------------------------------------------------------------------------
00C727  1               BLTU:
00C727  1  20 77 C7             jsr     REASON
00C72A  1  85 7F                sta     STREND
00C72C  1  84 80                sty     STREND+1
00C72E  1               BLTU2:
00C72E  1  38                   sec
00C72F  1  A5 A6                lda     HIGHTR
00C731  1  E5 AA                sbc     LOWTR
00C733  1  85 71                sta     INDEX
00C735  1  A8                   tay
00C736  1  A5 A7                lda     HIGHTR+1
00C738  1  E5 AB                sbc     LOWTR+1
00C73A  1  AA                   tax
00C73B  1  E8                   inx
00C73C  1  98                   tya
00C73D  1  F0 23                beq     L22DD
00C73F  1  A5 A6                lda     HIGHTR
00C741  1  38                   sec
00C742  1  E5 71                sbc     INDEX
00C744  1  85 A6                sta     HIGHTR
00C746  1  B0 03                bcs     L22C6
00C748  1  C6 A7                dec     HIGHTR+1
00C74A  1  38                   sec
00C74B  1               L22C6:
00C74B  1  A5 A4                lda     HIGHDS
00C74D  1  E5 71                sbc     INDEX
00C74F  1  85 A4                sta     HIGHDS
00C751  1  B0 08                bcs     L22D6
00C753  1  C6 A5                dec     HIGHDS+1
00C755  1  90 04                bcc     L22D6
00C757  1               L22D2:
00C757  1  B1 A6                lda     (HIGHTR),y
00C759  1  91 A4                sta     (HIGHDS),y
00C75B  1               L22D6:
00C75B  1  88                   dey
00C75C  1  D0 F9                bne     L22D2
00C75E  1  B1 A6                lda     (HIGHTR),y
00C760  1  91 A4                sta     (HIGHDS),y
00C762  1               L22DD:
00C762  1  C6 A7                dec     HIGHTR+1
00C764  1  C6 A5                dec     HIGHDS+1
00C766  1  CA                   dex
00C767  1  D0 F2                bne     L22D6
00C769  1  60                   rts
00C76A  1               ; ----------------------------------------------------------------------------
00C76A  1               ; CHECK IF ENOUGH ROOM LEFT ON STACK
00C76A  1               ; FOR "FOR", "GOSUB", OR EXPRESSION EVALUATION
00C76A  1               ; ----------------------------------------------------------------------------
00C76A  1               CHKMEM:
00C76A  1  0A                   asl     a
00C76B  1  69 33                adc     #SPACE_FOR_GOSUB
00C76D  1  B0 35                bcs     MEMERR
00C76F  1  85 71                sta     INDEX
00C771  1  BA                   tsx
00C772  1  E4 71                cpx     INDEX
00C774  1  90 2E                bcc     MEMERR
00C776  1  60                   rts
00C777  1               ; ----------------------------------------------------------------------------
00C777  1               ; CHECK IF ENOUGH ROOM BETWEEN ARRAYS AND STRINGS
00C777  1               ; (Y,A) = ADDR ARRAYS NEED TO GROW TO
00C777  1               ; ----------------------------------------------------------------------------
00C777  1               REASON:
00C777  1  C4 82                cpy     FRETOP+1
00C779  1  90 28                bcc     L231E
00C77B  1  D0 04                bne     L22FC
00C77D  1  C5 81                cmp     FRETOP
00C77F  1  90 22                bcc     L231E
00C781  1               L22FC:
00C781  1  48                   pha
00C782  1  A2 08                ldx     #FAC-TEMP1-1
00C784  1  98                   tya
00C785  1               L2300:
00C785  1  48                   pha
00C786  1  B5 A3                lda     TEMP1,x
00C788  1  CA                   dex
00C789  1  10 FA                bpl     L2300
00C78B  1  20 93 D6             jsr     GARBAG
00C78E  1  A2 F8                ldx     #TEMP1-FAC+1+256
00C790  1               L230B:
00C790  1  68                   pla
00C791  1  95 AC                sta     FAC,x
00C793  1  E8                   inx
00C794  1  30 FA                bmi     L230B
00C796  1  68                   pla
00C797  1  A8                   tay
00C798  1  68                   pla
00C799  1  C4 82                cpy     FRETOP+1
00C79B  1  90 06                bcc     L231E
00C79D  1  D0 05                bne     MEMERR
00C79F  1  C5 81                cmp     FRETOP
00C7A1  1  B0 01                bcs     MEMERR
00C7A3  1               L231E:
00C7A3  1  60                   rts
00C7A4  1               MEMERR:
00C7A4  1  A2 0C                ldx     #ERR_MEMFULL
00C7A6  1               ; ----------------------------------------------------------------------------
00C7A6  1               ; HANDLE AN ERROR
00C7A6  1               ;
00C7A6  1               ; (X)=OFFSET IN ERROR MESSAGE TABLE
00C7A6  1               ; (ERRFLG) > 128 IF "ON ERR" TURNED ON
00C7A6  1               ; (CURLIN+1) = $FF IF IN DIRECT MODE
00C7A6  1               ; ----------------------------------------------------------------------------
00C7A6  1               ERROR:
00C7A6  1  46 64                lsr     Z14
00C7A8  1  20 B8 CD             jsr     CRDO
00C7AB  1  20 2F CE             jsr     OUTQUES
00C7AE  1  BD 64 C1             lda     ERROR_MESSAGES,x
00C7B1  1  20 31 CE             jsr     OUTDO
00C7B4  1  BD 65 C1             lda     ERROR_MESSAGES+1,x
00C7B7  1  20 31 CE             jsr     OUTDO
00C7BA  1  20 E9 C9             jsr     STKINI
00C7BD  1  A9 86                lda     #<QT_ERROR
00C7BF  1  A0 C1                ldy     #>QT_ERROR
00C7C1  1               ; ----------------------------------------------------------------------------
00C7C1  1               ; PRINT STRING AT (Y,A)
00C7C1  1               ; PRINT CURRENT LINE # UNLESS IN DIRECT MODE
00C7C1  1               ; FALL INTO WARM RESTART
00C7C1  1               ; ----------------------------------------------------------------------------
00C7C1  1               PRINT_ERROR_LINNUM:
00C7C1  1  20 0F CE             jsr     STROUT
00C7C4  1  A4 88                ldy     CURLIN+1
00C7C6  1  C8                   iny
00C7C7  1  F0 03                beq     RESTART
00C7C9  1  20 9F DE             jsr     INPRT
00C7CC  1               ; ----------------------------------------------------------------------------
00C7CC  1               ; WARM RESTART ENTRY
00C7CC  1               ; ----------------------------------------------------------------------------
00C7CC  1               RESTART:
00C7CC  1  46 64                lsr     Z14
00C7CE  1  A9 92                lda     #<QT_OK
00C7D0  1  A0 C1                ldy     #>QT_OK
00C7D2  1  20 15 00             jsr     GOSTROUT
00C7D5  1               L2351:
00C7D5  1  20 AF C8             jsr     INLIN
00C7D8  1  86 DD                stx     TXTPTR
00C7DA  1  84 DE                sty     TXTPTR+1
00C7DC  1  20 D6 00             jsr     CHRGET
00C7DF  1               ; bug in pre-1.1: CHRGET sets Z on '\0'
00C7DF  1               ; and ':' - a line starting with ':' in
00C7DF  1               ; direct mode gets ignored
00C7DF  1  F0 F4                beq     L2351
00C7E1  1  A2 FF                ldx     #$FF
00C7E3  1  86 88                stx     CURLIN+1
00C7E5  1  90 06                bcc     NUMBERED_LINE
00C7E7  1  20 FE C8             jsr     PARSE_INPUT_LINE
00C7EA  1  4C 4E CB             jmp     NEWSTT2
00C7ED  1               ; ----------------------------------------------------------------------------
00C7ED  1               ; HANDLE NUMBERED LINE
00C7ED  1               ; ----------------------------------------------------------------------------
00C7ED  1               NUMBERED_LINE:
00C7ED  1  20 CB CC             jsr     LINGET
00C7F0  1  20 FE C8             jsr     PARSE_INPUT_LINE
00C7F3  1  84 5D                sty     EOLPNTR
00C7F5  1  20 8A C9             jsr     FNDLIN
00C7F8  1  90 44                bcc     PUT_NEW_LINE
00C7FA  1  A0 01                ldy     #$01
00C7FC  1  B1 AA                lda     (LOWTR),y
00C7FE  1  85 72                sta     INDEX+1
00C800  1  A5 7B                lda     VARTAB
00C802  1  85 71                sta     INDEX
00C804  1  A5 AB                lda     LOWTR+1
00C806  1  85 74                sta     DEST+1
00C808  1  A5 AA                lda     LOWTR
00C80A  1  88                   dey
00C80B  1  F1 AA                sbc     (LOWTR),y
00C80D  1  18                   clc
00C80E  1  65 7B                adc     VARTAB
00C810  1  85 7B                sta     VARTAB
00C812  1  85 73                sta     DEST
00C814  1  A5 7C                lda     VARTAB+1
00C816  1  69 FF                adc     #$FF
00C818  1  85 7C                sta     VARTAB+1
00C81A  1  E5 AB                sbc     LOWTR+1
00C81C  1  AA                   tax
00C81D  1  38                   sec
00C81E  1  A5 AA                lda     LOWTR
00C820  1  E5 7B                sbc     VARTAB
00C822  1  A8                   tay
00C823  1  B0 03                bcs     L23A5
00C825  1  E8                   inx
00C826  1  C6 74                dec     DEST+1
00C828  1               L23A5:
00C828  1  18                   clc
00C829  1  65 71                adc     INDEX
00C82B  1  90 03                bcc     L23AD
00C82D  1  C6 72                dec     INDEX+1
00C82F  1  18                   clc
00C830  1               L23AD:
00C830  1  B1 71                lda     (INDEX),y
00C832  1  91 73                sta     (DEST),y
00C834  1  C8                   iny
00C835  1  D0 F9                bne     L23AD
00C837  1  E6 72                inc     INDEX+1
00C839  1  E6 74                inc     DEST+1
00C83B  1  CA                   dex
00C83C  1  D0 F2                bne     L23AD
00C83E  1               ; ----------------------------------------------------------------------------
00C83E  1               PUT_NEW_LINE:
00C83E  1  A5 13                lda     INPUTBUFFER
00C840  1  F0 2F                beq     FIX_LINKS
00C842  1  A5 85                lda     MEMSIZ
00C844  1  A4 86                ldy     MEMSIZ+1
00C846  1  85 81                sta     FRETOP
00C848  1  84 82                sty     FRETOP+1
00C84A  1  A5 7B                lda     VARTAB
00C84C  1  85 A6                sta     HIGHTR
00C84E  1  65 5D                adc     EOLPNTR
00C850  1  85 A4                sta     HIGHDS
00C852  1  A4 7C                ldy     VARTAB+1
00C854  1  84 A7                sty     HIGHTR+1
00C856  1  90 01                bcc     L23D6
00C858  1  C8                   iny
00C859  1               L23D6:
00C859  1  84 A5                sty     HIGHDS+1
00C85B  1  20 27 C7             jsr     BLTU
00C85E  1  A5 7F                lda     STREND
00C860  1  A4 80                ldy     STREND+1
00C862  1  85 7B                sta     VARTAB
00C864  1  84 7C                sty     VARTAB+1
00C866  1  A4 5D                ldy     EOLPNTR
00C868  1  88                   dey
00C869  1               ; ---COPY LINE INTO PROGRAM-------
00C869  1               L23E6:
00C869  1  B9 0F 00             lda     INPUTBUFFER-4,y
00C86C  1  91 AA                sta     (LOWTR),y
00C86E  1  88                   dey
00C86F  1  10 F8                bpl     L23E6
00C871  1               ; ----------------------------------------------------------------------------
00C871  1               ; CLEAR ALL VARIABLES
00C871  1               ; RE-ESTABLISH ALL FORWARD LINKS
00C871  1               ; ----------------------------------------------------------------------------
00C871  1               FIX_LINKS:
00C871  1  20 CF C9             jsr     SETPTRS
00C874  1  A5 79                lda     TXTTAB
00C876  1  A4 7A                ldy     TXTTAB+1
00C878  1  85 71                sta     INDEX
00C87A  1  84 72                sty     INDEX+1
00C87C  1  18                   clc
00C87D  1               L23FA:
00C87D  1  A0 01                ldy     #$01
00C87F  1  B1 71                lda     (INDEX),y
00C881  1  D0 03 4C D5          jeq     L2351
00C885  1  C7           
00C886  1               
00C886  1  A0 04                ldy     #$04
00C888  1               L2405:
00C888  1  C8                   iny
00C889  1  B1 71                lda     (INDEX),y
00C88B  1  D0 FB                bne     L2405
00C88D  1  C8                   iny
00C88E  1  98                   tya
00C88F  1  65 71                adc     INDEX
00C891  1  AA                   tax
00C892  1  A0 00                ldy     #$00
00C894  1  91 71                sta     (INDEX),y
00C896  1  A5 72                lda     INDEX+1
00C898  1  69 00                adc     #$00
00C89A  1  C8                   iny
00C89B  1  91 71                sta     (INDEX),y
00C89D  1  86 71                stx     INDEX
00C89F  1  85 72                sta     INDEX+1
00C8A1  1  90 DA                bcc     L23FA	; always
00C8A3  1               ; ----------------------------------------------------------------------------
00C8A3  1               L2420:
00C8A3  1  20 31 CE             jsr     OUTDO
00C8A6  1  CA                   dex
00C8A7  1  10 08                bpl     INLIN2
00C8A9  1               L2423:
00C8A9  1  20 31 CE             jsr     OUTDO
00C8AC  1  20 B8 CD             jsr     CRDO
00C8AF  1               ; ----------------------------------------------------------------------------
00C8AF  1               ; READ A LINE, AND STRIP OFF SIGN BITS
00C8AF  1               ; ----------------------------------------------------------------------------
00C8AF  1               INLIN:
00C8AF  1  A2 00                ldx     #$00
00C8B1  1               INLIN2:
00C8B1  1  20 DE C8             jsr     GETLN
00C8B4  1  C9 07                cmp     #$07
00C8B6  1  F0 14                beq     L2443
00C8B8  1  C9 0D                cmp     #$0D
00C8BA  1  F0 1F                beq     L2453
00C8BC  1  C9 08                cmp     #$08 ; BACKSPACE
00C8BE  1  F0 E3                beq     L2420
00C8C0  1  C9 20                cmp     #$20
00C8C2  1  90 ED                bcc     INLIN2
00C8C4  1  C9 7D                cmp     #$7D
00C8C6  1  B0 E9                bcs     INLIN2
00C8C8  1  C9 40                cmp     #$40 ; @
00C8CA  1  F0 DD                beq     L2423
00C8CC  1               L2443:
00C8CC  1  E0 47                cpx     #$47
00C8CE  1  B0 04                bcs     L244C
00C8D0  1  95 13                sta     INPUTBUFFER,x
00C8D2  1  E8                   inx
00C8D3  1  2C                   .byte   $2C
00C8D4  1               L244C:
00C8D4  1  A9 07                lda     #$07 ; BEL
00C8D6  1  20 31 CE             jsr     OUTDO
00C8D9  1  D0 D6                bne     INLIN2
00C8DB  1               L2453:
00C8DB  1  4C B2 CD             jmp     L29B9
00C8DE  1               GETLN:
00C8DE  1  20 74 FF             jsr     MONRDKEY
00C8E1  1  EA                   nop
00C8E2  1  EA                   nop
00C8E3  1  EA                   nop
00C8E4  1  EA                   nop
00C8E5  1  EA                   nop
00C8E6  1  EA                   nop
00C8E7  1  EA                   nop
00C8E8  1  EA                   nop
00C8E9  1  EA                   nop
00C8EA  1  EA                   nop
00C8EB  1  EA                   nop
00C8EC  1  EA                   nop
00C8ED  1  EA                   nop
00C8EE  1  EA                   nop
00C8EF  1  29 7F                and     #$7F
00C8F1  1               RDKEY:
00C8F1  1  C9 0F                cmp     #$0F
00C8F3  1  D0 08                bne     L2465
00C8F5  1  48                   pha
00C8F6  1  A5 64                lda     Z14
00C8F8  1  49 FF                eor     #$FF
00C8FA  1  85 64                sta     Z14
00C8FC  1  68                   pla
00C8FD  1               L2465:
00C8FD  1  60                   rts
00C8FE  1               ; ----------------------------------------------------------------------------
00C8FE  1               ; TOKENIZE THE INPUT LINE
00C8FE  1               ; ----------------------------------------------------------------------------
00C8FE  1               PARSE_INPUT_LINE:
00C8FE  1  A6 DD                ldx     TXTPTR
00C900  1  A0 04                ldy     #$04
00C902  1  84 60                sty     DATAFLG
00C904  1               L246C:
00C904  1  B5 00                lda     INPUTBUFFERX,x
00C906  1  C9 20                cmp     #$20
00C908  1  F0 3A                beq     L24AC
00C90A  1  85 5C                sta     ENDCHR
00C90C  1  C9 22                cmp     #$22
00C90E  1  F0 58                beq     L24D0
00C910  1  24 60                bit     DATAFLG
00C912  1  70 30                bvs     L24AC
00C914  1  C9 3F                cmp     #$3F
00C916  1  D0 04                bne     L2484
00C918  1  A9 97                lda     #TOKEN_PRINT
00C91A  1  D0 28                bne     L24AC
00C91C  1               L2484:
00C91C  1  C9 30                cmp     #$30
00C91E  1  90 04                bcc     L248C
00C920  1  C9 3C                cmp     #$3C
00C922  1  90 20                bcc     L24AC
00C924  1               ; ----------------------------------------------------------------------------
00C924  1               ; SEARCH TOKEN NAME TABLE FOR MATCH STARTING
00C924  1               ; WITH CURRENT CHAR FROM INPUT LINE
00C924  1               ; ----------------------------------------------------------------------------
00C924  1               L248C:
00C924  1  84 BA                sty     STRNG2
00C926  1  A0 00                ldy     #$00
00C928  1  84 5D                sty     EOLPNTR
00C92A  1  88                   dey
00C92B  1  86 DD                stx     TXTPTR
00C92D  1  CA                   dex
00C92E  1               L2496:
00C92E  1  C8                   iny
00C92F  1               L2497:
00C92F  1  E8                   inx
00C930  1               L2498:
00C930  1  B5 00                lda     INPUTBUFFERX,x
00C932  1  C9 20                cmp     #$20
00C934  1  F0 F9                beq     L2497
00C936  1  38                   sec
00C937  1  F9 84 C0             sbc     TOKEN_NAME_TABLE,y
00C93A  1  F0 F2                beq     L2496
00C93C  1  C9 80                cmp     #$80
00C93E  1  D0 2F                bne     L24D7
00C940  1  05 5D                ora     EOLPNTR
00C942  1               ; ----------------------------------------------------------------------------
00C942  1               ; STORE CHARACTER OR TOKEN IN OUTPUT LINE
00C942  1               ; ----------------------------------------------------------------------------
00C942  1               L24AA:
00C942  1  A4 BA                ldy     STRNG2
00C944  1               L24AC:
00C944  1  E8                   inx
00C945  1  C8                   iny
00C946  1  99 0E 00             sta     INPUTBUFFER-5,y
00C949  1  B9 0E 00             lda     INPUTBUFFER-5,y
00C94C  1  F0 34                beq     L24EA
00C94E  1  38                   sec
00C94F  1  E9 3A                sbc     #$3A
00C951  1  F0 04                beq     L24BF
00C953  1  C9 49                cmp     #$49
00C955  1  D0 02                bne     L24C1
00C957  1               L24BF:
00C957  1  85 60                sta     DATAFLG
00C959  1               L24C1:
00C959  1  38                   sec
00C95A  1  E9 54                sbc     #TOKEN_REM-':'
00C95C  1  D0 A6                bne     L246C
00C95E  1  85 5C                sta     ENDCHR
00C960  1               ; ----------------------------------------------------------------------------
00C960  1               ; HANDLE LITERAL (BETWEEN QUOTES) OR REMARK,
00C960  1               ; BY COPYING CHARS UP TO ENDCHR.
00C960  1               ; ----------------------------------------------------------------------------
00C960  1               L24C8:
00C960  1  B5 00                lda     INPUTBUFFERX,x
00C962  1  F0 E0                beq     L24AC
00C964  1  C5 5C                cmp     ENDCHR
00C966  1  F0 DC                beq     L24AC
00C968  1               L24D0:
00C968  1  C8                   iny
00C969  1  99 0E 00             sta     INPUTBUFFER-5,y
00C96C  1  E8                   inx
00C96D  1  D0 F1                bne     L24C8
00C96F  1               ; ----------------------------------------------------------------------------
00C96F  1               ; ADVANCE POINTER TO NEXT TOKEN NAME
00C96F  1               ; ----------------------------------------------------------------------------
00C96F  1               L24D7:
00C96F  1  A6 DD                ldx     TXTPTR
00C971  1  E6 5D                inc     EOLPNTR
00C973  1               L24DB:
00C973  1  C8                   iny
00C974  1  B9 83 C0             lda     MATHTBL+28+1,y
00C977  1  10 FA                bpl     L24DB
00C979  1  B9 84 C0             lda     TOKEN_NAME_TABLE,y
00C97C  1  D0 B2                bne     L2498
00C97E  1  B5 00                lda     INPUTBUFFERX,x
00C980  1  10 C0                bpl     L24AA
00C982  1               ; ---END OF LINE------------------
00C982  1               L24EA:
00C982  1  99 10 00             sta     INPUTBUFFER-3,y
00C985  1  A9 12                lda     #<INPUTBUFFER-1
00C987  1  85 DD                sta     TXTPTR
00C989  1  60                   rts
00C98A  1               ; ----------------------------------------------------------------------------
00C98A  1               ; SEARCH FOR LINE
00C98A  1               ;
00C98A  1               ; (LINNUM) = LINE # TO FIND
00C98A  1               ; IF NOT FOUND:  CARRY = 0
00C98A  1               ;	LOWTR POINTS AT NEXT LINE
00C98A  1               ; IF FOUND:      CARRY = 1
00C98A  1               ;	LOWTR POINTS AT LINE
00C98A  1               ; ----------------------------------------------------------------------------
00C98A  1               FNDLIN:
00C98A  1  A5 79                lda     TXTTAB
00C98C  1  A6 7A                ldx     TXTTAB+1
00C98E  1               FL1:
00C98E  1  A0 01                ldy     #$01
00C990  1  85 AA                sta     LOWTR
00C992  1  86 AB                stx     LOWTR+1
00C994  1  B1 AA                lda     (LOWTR),y
00C996  1  F0 1F                beq     L251F
00C998  1  C8                   iny
00C999  1  C8                   iny
00C99A  1  A5 12                lda     LINNUM+1
00C99C  1  D1 AA                cmp     (LOWTR),y
00C99E  1  90 18                bcc     L2520
00C9A0  1  F0 03                beq     L250D
00C9A2  1  88                   dey
00C9A3  1  D0 09                bne     L2516
00C9A5  1               L250D:
00C9A5  1  A5 11                lda     LINNUM
00C9A7  1  88                   dey
00C9A8  1  D1 AA                cmp     (LOWTR),y
00C9AA  1  90 0C                bcc     L2520
00C9AC  1  F0 0A                beq     L2520
00C9AE  1               L2516:
00C9AE  1  88                   dey
00C9AF  1  B1 AA                lda     (LOWTR),y
00C9B1  1  AA                   tax
00C9B2  1  88                   dey
00C9B3  1  B1 AA                lda     (LOWTR),y
00C9B5  1  B0 D7                bcs     FL1
00C9B7  1               L251F:
00C9B7  1  18                   clc
00C9B8  1               L2520:
00C9B8  1  60                   rts
00C9B9  1               ; ----------------------------------------------------------------------------
00C9B9  1               ; "NEW" STATEMENT
00C9B9  1               ; ----------------------------------------------------------------------------
00C9B9  1               NEW:
00C9B9  1  D0 FD                bne     L2520
00C9BB  1               SCRTCH:
00C9BB  1  A9 00                lda     #$00
00C9BD  1  A8                   tay
00C9BE  1  91 79                sta     (TXTTAB),y
00C9C0  1  C8                   iny
00C9C1  1  91 79                sta     (TXTTAB),y
00C9C3  1  A5 79                lda     TXTTAB
00C9C5  1  69 02                adc     #$02
00C9C7  1  85 7B                sta     VARTAB
00C9C9  1  A5 7A                lda     TXTTAB+1
00C9CB  1  69 00                adc     #$00
00C9CD  1  85 7C                sta     VARTAB+1
00C9CF  1               ; ----------------------------------------------------------------------------
00C9CF  1               SETPTRS:
00C9CF  1  20 FF C9             jsr     STXTPT
00C9D2  1               ; ----------------------------------------------------------------------------
00C9D2  1               ; "CLEAR" STATEMENT
00C9D2  1               ; ----------------------------------------------------------------------------
00C9D2  1               CLEARC:
00C9D2  1  A5 85                lda     MEMSIZ
00C9D4  1  A4 86                ldy     MEMSIZ+1
00C9D6  1  85 81                sta     FRETOP
00C9D8  1  84 82                sty     FRETOP+1
00C9DA  1  A5 7B                lda     VARTAB
00C9DC  1  A4 7C                ldy     VARTAB+1
00C9DE  1  85 7D                sta     ARYTAB
00C9E0  1  84 7E                sty     ARYTAB+1
00C9E2  1  85 7F                sta     STREND
00C9E4  1  84 80                sty     STREND+1
00C9E6  1  20 72 CB             jsr     RESTORE
00C9E9  1               ; ----------------------------------------------------------------------------
00C9E9  1               STKINI:
00C9E9  1  A2 68                ldx     #TEMPST
00C9EB  1  86 65                stx     TEMPPT
00C9ED  1  68                   pla
00C9EE  1  8D FD 01             sta     STACK+STACK_TOP+1
00C9F1  1  68                   pla
00C9F2  1  8D FE 01             sta     STACK+STACK_TOP+2
00C9F5  1  A2 FC                ldx     #STACK_TOP
00C9F7  1  9A                   txs
00C9F8  1  A9 00                lda     #$00
00C9FA  1  85 8C                sta     OLDTEXT+1
00C9FC  1  85 61                sta     SUBFLG
00C9FE  1               L256A:
00C9FE  1  60                   rts
00C9FF  1               ; ----------------------------------------------------------------------------
00C9FF  1               ; SET TXTPTR TO BEGINNING OF PROGRAM
00C9FF  1               ; ----------------------------------------------------------------------------
00C9FF  1               STXTPT:
00C9FF  1  18                   clc
00CA00  1  A5 79                lda     TXTTAB
00CA02  1  69 FF                adc     #$FF
00CA04  1  85 DD                sta     TXTPTR
00CA06  1  A5 7A                lda     TXTTAB+1
00CA08  1  69 FF                adc     #$FF
00CA0A  1  85 DE                sta     TXTPTR+1
00CA0C  1  60                   rts
00CA0D  1               ; ----------------------------------------------------------------------------
00CA0D  1               ; ----------------------------------------------------------------------------
00CA0D  1               ; "LIST" STATEMENT
00CA0D  1               ; ----------------------------------------------------------------------------
00CA0D  1               LIST:
00CA0D  1  90 06                bcc     L2581
00CA0F  1  F0 04                beq     L2581
00CA11  1  C9 A4                cmp     #TOKEN_MINUS
00CA13  1  D0 E9                bne     L256A
00CA15  1               L2581:
00CA15  1  20 CB CC             jsr     LINGET
00CA18  1  20 8A C9             jsr     FNDLIN
00CA1B  1  20 DC 00             jsr     CHRGOT
00CA1E  1  F0 0C                beq     L2598
00CA20  1  C9 A4                cmp     #TOKEN_MINUS
00CA22  1  D0 94                bne     L2520
00CA24  1  20 D6 00             jsr     CHRGET
00CA27  1  20 CB CC             jsr     LINGET
00CA2A  1  D0 8C                bne     L2520
00CA2C  1               L2598:
00CA2C  1  68                   pla
00CA2D  1  68                   pla
00CA2E  1  A5 11                lda     LINNUM
00CA30  1  05 12                ora     LINNUM+1
00CA32  1  D0 06                bne     L25A6
00CA34  1  A9 FF                lda     #$FF
00CA36  1  85 11                sta     LINNUM
00CA38  1  85 12                sta     LINNUM+1
00CA3A  1               L25A6:
00CA3A  1  A0 01                ldy     #$01
00CA3C  1  84 60                sty     DATAFLG
00CA3E  1  B1 AA                lda     (LOWTRX),y
00CA40  1  F0 41                beq     L25E5
00CA42  1  20 81 CB             jsr     ISCNTC
00CA45  1  20 B8 CD             jsr     CRDO
00CA48  1  C8                   iny
00CA49  1  B1 AA                lda     (LOWTRX),y
00CA4B  1  AA                   tax
00CA4C  1  C8                   iny
00CA4D  1  B1 AA                lda     (LOWTRX),y
00CA4F  1  C5 12                cmp     LINNUM+1
00CA51  1  D0 04                bne     L25C1
00CA53  1  E4 11                cpx     LINNUM
00CA55  1  F0 02                beq     L25C3
00CA57  1               L25C1:
00CA57  1  B0 2A                bcs     L25E5
00CA59  1               ; ---LIST ONE LINE----------------
00CA59  1               L25C3:
00CA59  1  84 97                sty     FORPNT
00CA5B  1  20 AA DE             jsr     LINPRT
00CA5E  1  A9 20                lda     #$20
00CA60  1               L25CA:
00CA60  1  A4 97                ldy     FORPNT
00CA62  1  29 7F                and     #$7F
00CA64  1               L25CE:
00CA64  1  20 31 CE             jsr     OUTDO
00CA67  1  C9 22                cmp     #$22
00CA69  1  D0 06                bne     LA519
00CA6B  1  A5 60                lda     DATAFLG
00CA6D  1  49 FF                eor     #$FF
00CA6F  1  85 60                sta     DATAFLG
00CA71  1               LA519:
00CA71  1  C8                   iny
00CA72  1  B1 AA                lda     (LOWTRX),y
00CA74  1  D0 10                bne     L25E8
00CA76  1  A8                   tay
00CA77  1  B1 AA                lda     (LOWTRX),y
00CA79  1  AA                   tax
00CA7A  1  C8                   iny
00CA7B  1  B1 AA                lda     (LOWTRX),y
00CA7D  1  86 AA                stx     LOWTRX
00CA7F  1  85 AB                sta     LOWTRX+1
00CA81  1  D0 B7                bne     L25A6
00CA83  1               L25E5:
00CA83  1  4C CC C7             jmp     RESTART
00CA86  1               L25E8:
00CA86  1  10 DC                bpl     L25CE
00CA88  1  C9 FF                cmp     #$FF
00CA8A  1  F0 D8                beq     L25CE
00CA8C  1  24 60                bit     DATAFLG
00CA8E  1  30 D4                bmi     L25CE
00CA90  1  38                   sec
00CA91  1  E9 7F                sbc     #$7F
00CA93  1  AA                   tax
00CA94  1  84 97                sty     FORPNT
00CA96  1  A0 FF                ldy     #$FF
00CA98  1               L25F2:
00CA98  1  CA                   dex
00CA99  1  F0 08                beq     L25FD
00CA9B  1               L25F5:
00CA9B  1  C8                   iny
00CA9C  1  B9 84 C0             lda     TOKEN_NAME_TABLE,y
00CA9F  1  10 FA                bpl     L25F5
00CAA1  1  30 F5                bmi     L25F2
00CAA3  1               L25FD:
00CAA3  1  C8                   iny
00CAA4  1  B9 84 C0             lda     TOKEN_NAME_TABLE,y
00CAA7  1  30 B7                bmi     L25CA
00CAA9  1  20 31 CE             jsr     OUTDO
00CAAC  1  D0 F5                bne     L25FD	; always
00CAAE  1               ; ----------------------------------------------------------------------------
00CAAE  1               ; "FOR" STATEMENT
00CAAE  1               ;
00CAAE  1               ; FOR PUSHES 18 BYTES ON THE STACK:
00CAAE  1               ; 2 -- TXTPTR
00CAAE  1               ; 2 -- LINE NUMBER
00CAAE  1               ; 5 -- INITIAL (CURRENT)  FOR VARIABLE VALUE
00CAAE  1               ; 1 -- STEP SIGN
00CAAE  1               ; 5 -- STEP VALUE
00CAAE  1               ; 2 -- ADDRESS OF FOR VARIABLE IN VARTAB
00CAAE  1               ; 1 -- FOR TOKEN ($81)
00CAAE  1               ; ----------------------------------------------------------------------------
00CAAE  1               FOR:
00CAAE  1  A9 80                lda     #$80
00CAB0  1  85 61                sta     SUBFLG
00CAB2  1  20 05 CD             jsr     LET
00CAB5  1  20 F9 C6             jsr     GTFORPNT
00CAB8  1  D0 05                bne     L2619
00CABA  1  8A                   txa
00CABB  1  69 0D                adc     #FOR_STACK1
00CABD  1  AA                   tax
00CABE  1  9A                   txs
00CABF  1               L2619:
00CABF  1  68                   pla
00CAC0  1  68                   pla
00CAC1  1  A9 08                lda     #FOR_STACK2
00CAC3  1  20 6A C7             jsr     CHKMEM
00CAC6  1  20 66 CC             jsr     DATAN
00CAC9  1  18                   clc
00CACA  1  98                   tya
00CACB  1  65 DD                adc     TXTPTR
00CACD  1  48                   pha
00CACE  1  A5 DE                lda     TXTPTR+1
00CAD0  1  69 00                adc     #$00
00CAD2  1  48                   pha
00CAD3  1  A5 88                lda     CURLIN+1
00CAD5  1  48                   pha
00CAD6  1  A5 87                lda     CURLIN
00CAD8  1  48                   pha
00CAD9  1  A9 9D                lda     #TOKEN_TO
00CADB  1  20 4F D1             jsr     SYNCHR
00CADE  1  20 FC CF             jsr     CHKNUM
00CAE1  1  20 F9 CF             jsr     FRMNUM
00CAE4  1  A5 B0                lda     FACSIGN
00CAE6  1  09 7F                ora     #$7F
00CAE8  1  25 AD                and     FAC+1
00CAEA  1  85 AD                sta     FAC+1
00CAEC  1  A9 F7                lda     #<STEP
00CAEE  1  A0 CA                ldy     #>STEP
00CAF0  1  85 71                sta     INDEX
00CAF2  1  84 72                sty     INDEX+1
00CAF4  1  4C B2 D0             jmp     FRM_STACK3
00CAF7  1               ; ----------------------------------------------------------------------------
00CAF7  1               ; "STEP" PHRASE OF "FOR" STATEMENT
00CAF7  1               ; ----------------------------------------------------------------------------
00CAF7  1               STEP:
00CAF7  1  A9 E8                lda     #<CON_ONE
00CAF9  1  A0 DA                ldy     #>CON_ONE
00CAFB  1  20 97 DC             jsr     LOAD_FAC_FROM_YA
00CAFE  1  20 DC 00             jsr     CHRGOT
00CB01  1  C9 A2                cmp     #TOKEN_STEP
00CB03  1  D0 06                bne     L2665
00CB05  1  20 D6 00             jsr     CHRGET
00CB08  1  20 F9 CF             jsr     FRMNUM
00CB0B  1               L2665:
00CB0B  1  20 16 DD             jsr     SIGN
00CB0E  1  20 A7 D0             jsr     FRM_STACK2
00CB11  1  A5 98                lda     FORPNT+1
00CB13  1  48                   pha
00CB14  1  A5 97                lda     FORPNT
00CB16  1  48                   pha
00CB17  1  A9 81                lda     #$81
00CB19  1  48                   pha
00CB1A  1               ; ----------------------------------------------------------------------------
00CB1A  1               ; PERFORM NEXT STATEMENT
00CB1A  1               ; ----------------------------------------------------------------------------
00CB1A  1               NEWSTT:
00CB1A  1  20 81 CB             jsr     ISCNTC
00CB1D  1  A5 DD                lda     TXTPTR
00CB1F  1  A4 DE                ldy     TXTPTR+1
00CB21  1  F0 06                beq     L2683
00CB23  1  85 8B                sta     OLDTEXT
00CB25  1  84 8C                sty     OLDTEXT+1
00CB27  1  A0 00                ldy     #$00
00CB29  1               L2683:
00CB29  1  B1 DD                lda     (TXTPTR),y
00CB2B  1  F0 07                beq     LA5DC	; old: 1 cycle more on generic case
00CB2D  1  C9 3A                cmp     #$3A
00CB2F  1  F0 1D                beq     NEWSTT2
00CB31  1               SYNERR1:
00CB31  1  4C 58 D1             jmp     SYNERR
00CB34  1               LA5DC:
00CB34  1  A0 02                ldy     #$02
00CB36  1  B1 DD                lda     (TXTPTR),y
00CB38  1  18                   clc
00CB39  1  F0 62                beq     L2701
00CB3B  1  C8                   iny
00CB3C  1  B1 DD                lda     (TXTPTR),y
00CB3E  1  85 87                sta     CURLIN
00CB40  1  C8                   iny
00CB41  1  B1 DD                lda     (TXTPTR),y
00CB43  1  85 88                sta     CURLIN+1
00CB45  1  98                   tya
00CB46  1  65 DD                adc     TXTPTR
00CB48  1  85 DD                sta     TXTPTR
00CB4A  1  90 02                bcc     NEWSTT2
00CB4C  1  E6 DE                inc     TXTPTR+1
00CB4E  1               NEWSTT2:
00CB4E  1  20 D6 00             jsr     CHRGET
00CB51  1  20 57 CB             jsr     EXECUTE_STATEMENT
00CB54  1  4C 1A CB             jmp     NEWSTT
00CB57  1               ; ----------------------------------------------------------------------------
00CB57  1               ; EXECUTE A STATEMENT
00CB57  1               ;
00CB57  1               ; (A) IS FIRST CHAR OF STATEMENT
00CB57  1               ; CARRY IS SET
00CB57  1               ; ----------------------------------------------------------------------------
00CB57  1               EXECUTE_STATEMENT:
00CB57  1  F0 6D                beq     RET1
00CB59  1  38                   sec
00CB5A  1               EXECUTE_STATEMENT1:
00CB5A  1  E9 80                sbc     #$80
00CB5C  1  B0 03 4C 05          jcc     LET	; old: 1 cycle more on instr.
00CB60  1  CD           
00CB61  1               
00CB61  1  C9 1C                cmp     #NUM_TOKENS
00CB63  1  B0 CC                bcs     SYNERR1
00CB65  1  0A                   asl     a
00CB66  1  A8                   tay
00CB67  1  B9 01 C0             lda     TOKEN_ADDRESS_TABLE+1,y
00CB6A  1  48                   pha
00CB6B  1  B9 00 C0             lda     TOKEN_ADDRESS_TABLE,y
00CB6E  1  48                   pha
00CB6F  1  4C D6 00             jmp     CHRGET
00CB72  1               ; ----------------------------------------------------------------------------
00CB72  1               ; "RESTORE" STATEMENT
00CB72  1               ; ----------------------------------------------------------------------------
00CB72  1               RESTORE:
00CB72  1  38                   sec
00CB73  1  A5 79                lda     TXTTAB
00CB75  1  E9 01                sbc     #$01
00CB77  1  A4 7A                ldy     TXTTAB+1
00CB79  1  B0 01                bcs     SETDA
00CB7B  1  88                   dey
00CB7C  1               SETDA:
00CB7C  1  85 8F                sta     DATPTR
00CB7E  1  84 90                sty     DATPTR+1
00CB80  1  60                   rts
00CB81  1               ; ----------------------------------------------------------------------------
00CB81  1               ; SEE IF CONTROL-C TYPED
00CB81  1               ; ----------------------------------------------------------------------------
00CB81  1               
00CB81  1               ISCNTC:
00CB81  1               ; MODIFIED CALL BY G.SEARLE FROM THE ORIGINAL OSI CODE
00CB81  1  20 84 FF             jsr     MONISCNTC
00CB84  1               ; runs into "STOP"
00CB84  1               ; ----------------------------------------------------------------------------
00CB84  1               ; "STOP" STATEMENT
00CB84  1               ; ----------------------------------------------------------------------------
00CB84  1               STOP:
00CB84  1  B0 01                bcs     END2
00CB86  1               ; ----------------------------------------------------------------------------
00CB86  1               ; "END" STATEMENT
00CB86  1               ; ----------------------------------------------------------------------------
00CB86  1               END:
00CB86  1  18                   clc
00CB87  1               END2:
00CB87  1  D0 3D                bne     RET1
00CB89  1  A5 DD                lda     TXTPTR
00CB8B  1  A4 DE                ldy     TXTPTR+1
00CB8D  1  F0 0C                beq     END4
00CB8F  1  85 8B                sta     OLDTEXT
00CB91  1  84 8C                sty     OLDTEXT+1
00CB93  1               CONTROL_C_TYPED:
00CB93  1  A5 87                lda     CURLIN
00CB95  1  A4 88                ldy     CURLIN+1
00CB97  1  85 89                sta     OLDLIN
00CB99  1  84 8A                sty     OLDLIN+1
00CB9B  1               END4:
00CB9B  1  68                   pla
00CB9C  1  68                   pla
00CB9D  1               L2701:
00CB9D  1  A9 99                lda     #<QT_BREAK
00CB9F  1  A0 C1                ldy     #>QT_BREAK
00CBA1  1  A2 00                ldx     #$00
00CBA3  1  86 64                stx     Z14
00CBA5  1  90 03                bcc     L270E
00CBA7  1  4C C1 C7             jmp     PRINT_ERROR_LINNUM
00CBAA  1               L270E:
00CBAA  1  4C CC C7             jmp     RESTART
00CBAD  1               ; ----------------------------------------------------------------------------
00CBAD  1               ; "CONT" COMMAND
00CBAD  1               ; ----------------------------------------------------------------------------
00CBAD  1               CONT:
00CBAD  1  D0 17                bne     RET1
00CBAF  1  A2 1E                ldx     #ERR_CANTCONT
00CBB1  1  A4 8C                ldy     OLDTEXT+1
00CBB3  1  D0 03                bne     L271C
00CBB5  1  4C A6 C7             jmp     ERROR
00CBB8  1               L271C:
00CBB8  1  A5 8B                lda     OLDTEXT
00CBBA  1  85 DD                sta     TXTPTR
00CBBC  1  84 DE                sty     TXTPTR+1
00CBBE  1  A5 89                lda     OLDLIN
00CBC0  1  A4 8A                ldy     OLDLIN+1
00CBC2  1  85 87                sta     CURLIN
00CBC4  1  84 88                sty     CURLIN+1
00CBC6  1               RET1:
00CBC6  1  60                   rts
00CBC7  1               NULL:
00CBC7  1  20 FA D8             jsr     GETBYT
00CBCA  1  D0 FA                bne     RET1
00CBCC  1  E8                   inx
00CBCD  1  E0 0A                cpx     #NULL_MAX
00CBCF  1  B0 04                bcs     L2739
00CBD1  1  CA                   dex
00CBD2  1  86 0D                stx     Z15
00CBD4  1  60                   rts
00CBD5  1               L2739:
00CBD5  1  4C D4 D3             jmp     IQERR
00CBD8  1               CLEAR:
00CBD8  1  D0 EC                bne     RET1
00CBDA  1  4C D2 C9             jmp     CLEARC
00CBDD  1               ; ----------------------------------------------------------------------------
00CBDD  1               ; "RUN" COMMAND
00CBDD  1               ; ----------------------------------------------------------------------------
00CBDD  1               RUN:
00CBDD  1  D0 03                bne     L27CF
00CBDF  1  4C CF C9             jmp     SETPTRS
00CBE2  1               L27CF:
00CBE2  1  20 D2 C9             jsr     CLEARC
00CBE5  1  4C FC CB             jmp     L27E9
00CBE8  1               ; ----------------------------------------------------------------------------
00CBE8  1               ; "GOSUB" STATEMENT
00CBE8  1               ;
00CBE8  1               ; LEAVES 7 BYTES ON STACK:
00CBE8  1               ; 2 -- RETURN ADDRESS (NEWSTT)
00CBE8  1               ; 2 -- TXTPTR
00CBE8  1               ; 2 -- LINE #
00CBE8  1               ; 1 -- GOSUB TOKEN
00CBE8  1               ; ----------------------------------------------------------------------------
00CBE8  1               GOSUB:
00CBE8  1  A9 03                lda     #$03
00CBEA  1  20 6A C7             jsr     CHKMEM
00CBED  1  A5 DE                lda     TXTPTR+1
00CBEF  1  48                   pha
00CBF0  1  A5 DD                lda     TXTPTR
00CBF2  1  48                   pha
00CBF3  1  A5 88                lda     CURLIN+1
00CBF5  1  48                   pha
00CBF6  1  A5 87                lda     CURLIN
00CBF8  1  48                   pha
00CBF9  1  A9 8C                lda     #TOKEN_GOSUB
00CBFB  1  48                   pha
00CBFC  1               L27E9:
00CBFC  1  20 DC 00             jsr     CHRGOT
00CBFF  1  20 05 CC             jsr     GOTO
00CC02  1  4C 1A CB             jmp     NEWSTT
00CC05  1               ; ----------------------------------------------------------------------------
00CC05  1               ; "GOTO" STATEMENT
00CC05  1               ; ALSO USED BY "RUN" AND "GOSUB"
00CC05  1               ; ----------------------------------------------------------------------------
00CC05  1               GOTO:
00CC05  1  20 CB CC             jsr     LINGET
00CC08  1  20 69 CC             jsr     REMN
00CC0B  1  A5 88                lda     CURLIN+1
00CC0D  1  C5 12                cmp     LINNUM+1
00CC0F  1  B0 0B                bcs     L2809
00CC11  1  98                   tya
00CC12  1  38                   sec
00CC13  1  65 DD                adc     TXTPTR
00CC15  1  A6 DE                ldx     TXTPTR+1
00CC17  1  90 07                bcc     L280D
00CC19  1  E8                   inx
00CC1A  1  B0 04                bcs     L280D
00CC1C  1               L2809:
00CC1C  1  A5 79                lda     TXTTAB
00CC1E  1  A6 7A                ldx     TXTTAB+1
00CC20  1               L280D:
00CC20  1  20 8E C9             jsr     FL1
00CC23  1  90 1E                bcc     UNDERR
00CC25  1  A5 AA                lda     LOWTRX
00CC27  1  E9 01                sbc     #$01
00CC29  1  85 DD                sta     TXTPTR
00CC2B  1  A5 AB                lda     LOWTRX+1
00CC2D  1  E9 00                sbc     #$00
00CC2F  1  85 DE                sta     TXTPTR+1
00CC31  1               L281E:
00CC31  1  60                   rts
00CC32  1               ; ----------------------------------------------------------------------------
00CC32  1               ; "POP" AND "RETURN" STATEMENTS
00CC32  1               ; ----------------------------------------------------------------------------
00CC32  1               POP:
00CC32  1  D0 FD                bne     L281E
00CC34  1  A9 FF                lda     #$FF
00CC36  1  85 97                sta     FORPNT
00CC38  1  20 F9 C6             jsr     GTFORPNT
00CC3B  1  9A                   txs
00CC3C  1  C9 8C                cmp     #TOKEN_GOSUB
00CC3E  1  F0 0B                beq     RETURN
00CC40  1  A2 04                ldx     #ERR_NOGOSUB
00CC42  1  2C                   .byte   $2C
00CC43  1               UNDERR:
00CC43  1  A2 0E                ldx     #ERR_UNDEFSTAT
00CC45  1  4C A6 C7             jmp     ERROR
00CC48  1               ; ----------------------------------------------------------------------------
00CC48  1               SYNERR2:
00CC48  1  4C 58 D1             jmp     SYNERR
00CC4B  1               ; ----------------------------------------------------------------------------
00CC4B  1               RETURN:
00CC4B  1  68                   pla
00CC4C  1  68                   pla
00CC4D  1  85 87                sta     CURLIN
00CC4F  1  68                   pla
00CC50  1  85 88                sta     CURLIN+1
00CC52  1  68                   pla
00CC53  1  85 DD                sta     TXTPTR
00CC55  1  68                   pla
00CC56  1  85 DE                sta     TXTPTR+1
00CC58  1               ; ----------------------------------------------------------------------------
00CC58  1               ; "DATA" STATEMENT
00CC58  1               ; EXECUTED BY SKIPPING TO NEXT COLON OR EOL
00CC58  1               ; ----------------------------------------------------------------------------
00CC58  1               DATA:
00CC58  1  20 66 CC             jsr     DATAN
00CC5B  1               ; ----------------------------------------------------------------------------
00CC5B  1               ; ADD (Y) TO TXTPTR
00CC5B  1               ; ----------------------------------------------------------------------------
00CC5B  1               ADDON:
00CC5B  1  98                   tya
00CC5C  1  18                   clc
00CC5D  1  65 DD                adc     TXTPTR
00CC5F  1  85 DD                sta     TXTPTR
00CC61  1  90 02                bcc     L2852
00CC63  1  E6 DE                inc     TXTPTR+1
00CC65  1               L2852:
00CC65  1  60                   rts
00CC66  1               ; ----------------------------------------------------------------------------
00CC66  1               ; SCAN AHEAD TO NEXT ":" OR EOL
00CC66  1               ; ----------------------------------------------------------------------------
00CC66  1               DATAN:
00CC66  1  A2 3A                ldx     #$3A
00CC68  1  2C                   .byte   $2C
00CC69  1               REMN:
00CC69  1  A2 00                ldx     #$00
00CC6B  1  86 5B                stx     CHARAC
00CC6D  1  A0 00                ldy     #$00
00CC6F  1  84 5C                sty     ENDCHR
00CC71  1               L285E:
00CC71  1  A5 5C                lda     ENDCHR
00CC73  1  A6 5B                ldx     CHARAC
00CC75  1  85 5B                sta     CHARAC
00CC77  1  86 5C                stx     ENDCHR
00CC79  1               L2866:
00CC79  1  B1 DD                lda     (TXTPTR),y
00CC7B  1  F0 E8                beq     L2852
00CC7D  1  C5 5C                cmp     ENDCHR
00CC7F  1  F0 E4                beq     L2852
00CC81  1  C8                   iny
00CC82  1  C9 22                cmp     #$22
00CC84  1  F0 EB                beq     L285E; old: swap & cont is faster
00CC86  1  D0 F1                bne     L2866
00CC88  1               ; ----------------------------------------------------------------------------
00CC88  1               ; "IF" STATEMENT
00CC88  1               ; ----------------------------------------------------------------------------
00CC88  1               IF:
00CC88  1  20 0D D0             jsr     FRMEVL
00CC8B  1  20 DC 00             jsr     CHRGOT
00CC8E  1  C9 88                cmp     #TOKEN_GOTO
00CC90  1  F0 05                beq     L2884
00CC92  1  A9 A0                lda     #TOKEN_THEN
00CC94  1  20 4F D1             jsr     SYNCHR
00CC97  1               L2884:
00CC97  1  A5 AC                lda     FAC
00CC99  1  D0 05                bne     L288D
00CC9B  1               ; ----------------------------------------------------------------------------
00CC9B  1               ; "REM" STATEMENT, OR FALSE "IF" STATEMENT
00CC9B  1               ; ----------------------------------------------------------------------------
00CC9B  1               REM:
00CC9B  1  20 69 CC             jsr     REMN
00CC9E  1  F0 BB                beq     ADDON
00CCA0  1               L288D:
00CCA0  1  20 DC 00             jsr     CHRGOT
00CCA3  1  B0 03                bcs     L2895
00CCA5  1  4C 05 CC             jmp     GOTO
00CCA8  1               L2895:
00CCA8  1  4C 57 CB             jmp     EXECUTE_STATEMENT
00CCAB  1               ; ----------------------------------------------------------------------------
00CCAB  1               ; "ON" STATEMENT
00CCAB  1               ;
00CCAB  1               ; ON <EXP> GOTO <LIST>
00CCAB  1               ; ON <EXP> GOSUB <LIST>
00CCAB  1               ; ----------------------------------------------------------------------------
00CCAB  1               ON:
00CCAB  1  20 FA D8             jsr     GETBYT
00CCAE  1  48                   pha
00CCAF  1  C9 8C                cmp     #TOKEN_GOSUB
00CCB1  1  F0 04                beq     L28A4
00CCB3  1               L28A0:
00CCB3  1  C9 88                cmp     #TOKEN_GOTO
00CCB5  1  D0 91                bne     SYNERR2
00CCB7  1               L28A4:
00CCB7  1  C6 AF                dec     FAC_LAST
00CCB9  1  D0 04                bne     L28AC
00CCBB  1  68                   pla
00CCBC  1  4C 5A CB             jmp     EXECUTE_STATEMENT1
00CCBF  1               L28AC:
00CCBF  1  20 D6 00             jsr     CHRGET
00CCC2  1  20 CB CC             jsr     LINGET
00CCC5  1  C9 2C                cmp     #$2C
00CCC7  1  F0 EE                beq     L28A4
00CCC9  1  68                   pla
00CCCA  1               L28B7:
00CCCA  1  60                   rts
00CCCB  1               ; ----------------------------------------------------------------------------
00CCCB  1               ; CONVERT LINE NUMBER
00CCCB  1               ; ----------------------------------------------------------------------------
00CCCB  1               LINGET:
00CCCB  1  A2 00                ldx     #$00
00CCCD  1  86 11                stx     LINNUM
00CCCF  1  86 12                stx     LINNUM+1
00CCD1  1               L28BE:
00CCD1  1  B0 F7                bcs     L28B7
00CCD3  1  E9 2F                sbc     #$2F
00CCD5  1  85 5B                sta     CHARAC
00CCD7  1  A5 12                lda     LINNUM+1
00CCD9  1  85 71                sta     INDEX
00CCDB  1  C9 19                cmp     #$19
00CCDD  1  B0 D4                bcs     L28A0
00CCDF  1               ; <<<<<DANGEROUS CODE>>>>>
00CCDF  1               ; NOTE THAT IF (A) = $AB ON THE LINE ABOVE,
00CCDF  1               ; ON.1 WILL COMPARE = AND CAUSE A CATASTROPHIC
00CCDF  1               ; JUMP TO $22D9 (FOR GOTO), OR OTHER LOCATIONS
00CCDF  1               ; FOR OTHER CALLS TO LINGET.
00CCDF  1               ;
00CCDF  1               ; YOU CAN SEE THIS IS YOU FIRST PUT "BRK" IN $22D9,
00CCDF  1               ; THEN TYPE "GO TO 437761".
00CCDF  1               ;
00CCDF  1               ; ANY VALUE FROM 437760 THROUGH 440319 WILL CAUSE
00CCDF  1               ; THE PROBLEM.  ($AB00 - $ABFF)
00CCDF  1               ; <<<<<DANGEROUS CODE>>>>>
00CCDF  1  A5 11                lda     LINNUM
00CCE1  1  0A                   asl     a
00CCE2  1  26 71                rol     INDEX
00CCE4  1  0A                   asl     a
00CCE5  1  26 71                rol     INDEX
00CCE7  1  65 11                adc     LINNUM
00CCE9  1  85 11                sta     LINNUM
00CCEB  1  A5 71                lda     INDEX
00CCED  1  65 12                adc     LINNUM+1
00CCEF  1  85 12                sta     LINNUM+1
00CCF1  1  06 11                asl     LINNUM
00CCF3  1  26 12                rol     LINNUM+1
00CCF5  1  A5 11                lda     LINNUM
00CCF7  1  65 5B                adc     CHARAC
00CCF9  1  85 11                sta     LINNUM
00CCFB  1  90 02                bcc     L28EC
00CCFD  1  E6 12                inc     LINNUM+1
00CCFF  1               L28EC:
00CCFF  1  20 D6 00             jsr     CHRGET
00CD02  1  4C D1 CC             jmp     L28BE
00CD05  1               ; ----------------------------------------------------------------------------
00CD05  1               ; "LET" STATEMENT
00CD05  1               ;
00CD05  1               ; LET <VAR> = <EXP>
00CD05  1               ; <VAR> = <EXP>
00CD05  1               ; ----------------------------------------------------------------------------
00CD05  1               LET:
00CD05  1  20 57 D2             jsr     PTRGET
00CD08  1  85 97                sta     FORPNT
00CD0A  1  84 98                sty     FORPNT+1
00CD0C  1  A9 AB                lda     #TOKEN_EQUAL
00CD0E  1  20 4F D1             jsr     SYNCHR
00CD11  1  A5 5F                lda     VALTYP
00CD13  1  48                   pha
00CD14  1  20 0D D0             jsr     FRMEVL
00CD17  1  68                   pla
00CD18  1  2A                   rol     a
00CD19  1  20 FF CF             jsr     CHKVAL
00CD1C  1  D0 03                bne     LETSTRING
00CD1E  1               ; ----------------------------------------------------------------------------
00CD1E  1               ; REAL VARIABLE = EXPRESSION
00CD1E  1               ; ----------------------------------------------------------------------------
00CD1E  1  4C C0 DC             jmp     SETFOR
00CD21  1               LETSTRING:
00CD21  1               ; ----------------------------------------------------------------------------
00CD21  1               ; INSTALL STRING, DESCRIPTOR ADDRESS IS AT FAC+3,4
00CD21  1               ; ----------------------------------------------------------------------------
00CD21  1  A0 02                ldy     #$02
00CD23  1  B1 AE                lda     (FAC_LAST-1),y
00CD25  1  C5 82                cmp     FRETOP+1
00CD27  1  90 17                bcc     L2946
00CD29  1  D0 07                bne     L2938
00CD2B  1  88                   dey
00CD2C  1  B1 AE                lda     (FAC_LAST-1),y
00CD2E  1  C5 81                cmp     FRETOP
00CD30  1  90 0E                bcc     L2946
00CD32  1               L2938:
00CD32  1  A4 AF                ldy     FAC_LAST
00CD34  1  C4 7C                cpy     VARTAB+1
00CD36  1  90 08                bcc     L2946
00CD38  1  D0 0D                bne     L294D
00CD3A  1  A5 AE                lda     FAC_LAST-1
00CD3C  1  C5 7B                cmp     VARTAB
00CD3E  1  B0 07                bcs     L294D
00CD40  1               L2946:
00CD40  1  A5 AE                lda     FAC_LAST-1
00CD42  1  A4 AF                ldy     FAC_LAST
00CD44  1  4C 5D CD             jmp     L2963
00CD47  1               L294D:
00CD47  1  A0 00                ldy     #$00
00CD49  1  B1 AE                lda     (FAC_LAST-1),y
00CD4B  1  20 E8 D5             jsr     STRINI
00CD4E  1  A5 9E                lda     DSCPTR
00CD50  1  A4 9F                ldy     DSCPTR+1
00CD52  1  85 B8                sta     STRNG1
00CD54  1  84 B9                sty     STRNG1+1
00CD56  1  20 D6 D7             jsr     MOVINS
00CD59  1  A9 AC                lda     #FAC
00CD5B  1  A0 00                ldy     #$00
00CD5D  1               L2963:
00CD5D  1  85 9E                sta     DSCPTR
00CD5F  1  84 9F                sty     DSCPTR+1
00CD61  1  20 37 D8             jsr     FRETMS
00CD64  1  A0 00                ldy     #$00
00CD66  1  B1 9E                lda     (DSCPTR),y
00CD68  1  91 97                sta     (FORPNT),y
00CD6A  1  C8                   iny
00CD6B  1  B1 9E                lda     (DSCPTR),y
00CD6D  1  91 97                sta     (FORPNT),y
00CD6F  1  C8                   iny
00CD70  1  B1 9E                lda     (DSCPTR),y
00CD72  1  91 97                sta     (FORPNT),y
00CD74  1  60                   rts
00CD75  1               PRSTRING:
00CD75  1  20 12 CE             jsr     STRPRT
00CD78  1               L297E:
00CD78  1  20 DC 00             jsr     CHRGOT
00CD7B  1               ; ----------------------------------------------------------------------------
00CD7B  1               ; "PRINT" STATEMENT
00CD7B  1               ; ----------------------------------------------------------------------------
00CD7B  1               PRINT:
00CD7B  1  F0 3B                beq     CRDO
00CD7D  1               PRINT2:
00CD7D  1  F0 57                beq     L29DD
00CD7F  1  C9 9C                cmp     #TOKEN_TAB
00CD81  1  F0 6B                beq     L29F5
00CD83  1  C9 9F                cmp     #TOKEN_SPC
00CD85  1  F0 67                beq     L29F5
00CD87  1  C9 2C                cmp     #','
00CD89  1  F0 4C                beq     L29DE
00CD8B  1  C9 3B                cmp     #$3B
00CD8D  1  F0 7A                beq     L2A0D
00CD8F  1  20 0D D0             jsr     FRMEVL
00CD92  1  24 5F                bit     VALTYP
00CD94  1  30 DF                bmi     PRSTRING
00CD96  1  20 BA DE             jsr     FOUT
00CD99  1  20 FA D5             jsr     STRLIT
00CD9C  1  A0 00                ldy     #$00
00CD9E  1  B1 AE                lda     (FAC_LAST-1),y
00CDA0  1  18                   clc
00CDA1  1  65 0E                adc     POSX
00CDA3  1  C5 0F                cmp     Z17
00CDA5  1  90 03                bcc     L29B1
00CDA7  1  20 B8 CD             jsr     CRDO
00CDAA  1               L29B1:
00CDAA  1  20 12 CE             jsr     STRPRT
00CDAD  1  20 2C CE             jsr     OUTSP
00CDB0  1  D0 C6                bne     L297E ; branch always
00CDB2  1               L29B9:
00CDB2  1  A0 00                ldy     #$00
00CDB4  1  94 13                sty     INPUTBUFFER,x
00CDB6  1  A2 12                ldx     #LINNUM+1
00CDB8  1               CRDO:
00CDB8  1  A9 0D                lda     #CRLF_1
00CDBA  1  85 0E                sta     POSX
00CDBC  1  20 31 CE             jsr     OUTDO
00CDBF  1  A9 0A                lda     #CRLF_2
00CDC1  1  20 31 CE             jsr     OUTDO
00CDC4  1               PRINTNULLS:
00CDC4  1  8A                   txa
00CDC5  1  48                   pha
00CDC6  1  A6 0D                ldx     Z15
00CDC8  1  F0 08                beq     L29D9
00CDCA  1  A9 00                lda     #$00
00CDCC  1               L29D3:
00CDCC  1  20 31 CE             jsr     OUTDO
00CDCF  1  CA                   dex
00CDD0  1  D0 FA                bne     L29D3
00CDD2  1               L29D9:
00CDD2  1  86 0E                stx     POSX
00CDD4  1  68                   pla
00CDD5  1  AA                   tax
00CDD6  1               L29DD:
00CDD6  1  60                   rts
00CDD7  1               L29DE:
00CDD7  1  A5 0E                lda     POSX
00CDD9  1  C5 10                cmp     Z18
00CDDB  1  90 06                bcc     L29EA
00CDDD  1  20 B8 CD             jsr     CRDO
00CDE0  1  4C 09 CE             jmp     L2A0D
00CDE3  1               L29EA:
00CDE3  1  38                   sec
00CDE4  1               L29EB:
00CDE4  1  E9 0E                sbc     #$0E
00CDE6  1  B0 FC                bcs     L29EB
00CDE8  1  49 FF                eor     #$FF
00CDEA  1  69 01                adc     #$01
00CDEC  1  D0 14                bne     L2A08
00CDEE  1               L29F5:
00CDEE  1  48                   pha
00CDEF  1  20 F7 D8             jsr     GTBYTC
00CDF2  1  C9 29                cmp     #')'
00CDF4  1  D0 66                bne     SYNERR4
00CDF6  1  68                   pla
00CDF7  1  C9 9C                cmp     #TOKEN_TAB
00CDF9  1  D0 08                bne     L2A0A
00CDFB  1  8A                   txa
00CDFC  1  E5 0E                sbc     POSX
00CDFE  1  90 09                bcc     L2A0D
00CE00  1  F0 07                beq     L2A0D
00CE02  1               L2A08:
00CE02  1  AA                   tax
00CE03  1               L2A0A:
00CE03  1  20 2C CE             jsr     OUTSP
00CE06  1  CA                   dex
00CE07  1  D0 FA                bne     L2A0A
00CE09  1               L2A0D:
00CE09  1  20 D6 00             jsr     CHRGET
00CE0C  1  4C 7D CD             jmp     PRINT2
00CE0F  1               ; ----------------------------------------------------------------------------
00CE0F  1               ; PRINT STRING AT (Y,A)
00CE0F  1               ; ----------------------------------------------------------------------------
00CE0F  1               STROUT:
00CE0F  1  20 FA D5             jsr     STRLIT
00CE12  1               ; ----------------------------------------------------------------------------
00CE12  1               ; PRINT STRING AT (FACMO,FACLO)
00CE12  1               ; ----------------------------------------------------------------------------
00CE12  1               STRPRT:
00CE12  1  20 02 D8             jsr     FREFAC
00CE15  1  AA                   tax
00CE16  1  A0 00                ldy     #$00
00CE18  1  E8                   inx
00CE19  1               L2A22:
00CE19  1  CA                   dex
00CE1A  1  F0 BA                beq     L29DD
00CE1C  1  B1 71                lda     (INDEX),y
00CE1E  1  20 31 CE             jsr     OUTDO
00CE21  1  C8                   iny
00CE22  1  C9 0D                cmp     #$0D
00CE24  1  D0 F3                bne     L2A22
00CE26  1  20 C4 CD             jsr     PRINTNULLS
00CE29  1  4C 19 CE             jmp     L2A22
00CE2C  1               ; ----------------------------------------------------------------------------
00CE2C  1               OUTSP:
00CE2C  1  A9 20                lda     #$20
00CE2E  1  2C                   .byte   $2C
00CE2F  1               OUTQUES:
00CE2F  1  A9 3F                lda     #$3F
00CE31  1               ; ----------------------------------------------------------------------------
00CE31  1               ; PRINT CHAR FROM (A)
00CE31  1               ; ----------------------------------------------------------------------------
00CE31  1               OUTDO:
00CE31  1  24 64                bit     Z14
00CE33  1  30 18                bmi     L2A56
00CE35  1               ; Commodore forgot to remove this in CBM1
00CE35  1  48                   pha
00CE36  1  C9 20                cmp     #$20
00CE38  1  90 0B                bcc     L2A4E
00CE3A  1  A5 0E                lda     POSX
00CE3C  1  C5 0F                cmp     Z17
00CE3E  1  D0 03                bne     L2A4C
00CE40  1  20 B8 CD             jsr     CRDO
00CE43  1               L2A4C:
00CE43  1  E6 0E                inc     POSX
00CE45  1               L2A4E:
00CE45  1               ; Commodore forgot to remove this in CBM1
00CE45  1  68                   pla
00CE46  1  20 65 FF             jsr     MONCOUT
00CE49  1  EA                   nop
00CE4A  1  EA                   nop
00CE4B  1  EA                   nop
00CE4C  1  EA                   nop
00CE4D  1               L2A56:
00CE4D  1  29 FF                and     #$FF
00CE4F  1  60                   rts
00CE50  1               ; ----------------------------------------------------------------------------
00CE50  1               ; ???
00CE50  1               ; ----------------------------------------------------------------------------
00CE50  1               ; ----------------------------------------------------------------------------
00CE50  1               ; INPUT CONVERSION ERROR:  ILLEGAL CHARACTER
00CE50  1               ; IN NUMERIC FIELD.  MUST DISTINGUISH
00CE50  1               ; BETWEEN INPUT, READ, AND GET
00CE50  1               ; ----------------------------------------------------------------------------
00CE50  1               INPUTERR:
00CE50  1  A5 62                lda     INPUTFLG
00CE52  1  F0 0B                beq     RESPERR	; INPUT
00CE54  1               ; without this, it treats GET errors
00CE54  1               ; like READ errors
00CE54  1  A5 8D                lda     Z8C
00CE56  1  A4 8E                ldy     Z8C+1
00CE58  1  85 87                sta     CURLIN
00CE5A  1  84 88                sty     CURLIN+1
00CE5C  1               SYNERR4:
00CE5C  1  4C 58 D1             jmp     SYNERR
00CE5F  1               RESPERR:
00CE5F  1  A9 79                lda     #<ERRREENTRY
00CE61  1  A0 CF                ldy     #>ERRREENTRY
00CE63  1  20 0F CE             jsr     STROUT
00CE66  1  A5 8B                lda     OLDTEXT
00CE68  1  A4 8C                ldy     OLDTEXT+1
00CE6A  1  85 DD                sta     TXTPTR
00CE6C  1  84 DE                sty     TXTPTR+1
00CE6E  1  60                   rts
00CE6F  1               ; ----------------------------------------------------------------------------
00CE6F  1               ; "GET" STATEMENT
00CE6F  1               ; ----------------------------------------------------------------------------
00CE6F  1               GET:
00CE6F  1               ; ----------------------------------------------------------------------------
00CE6F  1               ; "INPUT#" STATEMENT
00CE6F  1               ; ----------------------------------------------------------------------------
00CE6F  1               ; ----------------------------------------------------------------------------
00CE6F  1               ; "INPUT" STATEMENT
00CE6F  1               ; ----------------------------------------------------------------------------
00CE6F  1               INPUT:
00CE6F  1  46 64                lsr     Z14
00CE71  1  C9 22                cmp     #$22
00CE73  1  D0 0B                bne     L2A9E
00CE75  1  20 0D D1             jsr     STRTXT
00CE78  1  A9 3B                lda     #$3B
00CE7A  1  20 4F D1             jsr     SYNCHR
00CE7D  1  20 12 CE             jsr     STRPRT
00CE80  1               L2A9E:
00CE80  1  20 20 D5             jsr     ERRDIR
00CE83  1  A9 2C                lda     #$2C
00CE85  1  85 12                sta     INPUTBUFFER-1
00CE87  1  20 92 CE             jsr     NXIN
00CE8A  1  A5 13                lda     INPUTBUFFER
00CE8C  1  D0 12                bne     L2ABE
00CE8E  1  18                   clc
00CE8F  1  4C 93 CB             jmp     CONTROL_C_TYPED
00CE92  1               NXIN:
00CE92  1  20 2F CE             jsr     OUTQUES	; '?'
00CE95  1  20 2C CE             jsr     OUTSP
00CE98  1  4C AF C8             jmp     INLIN
00CE9B  1               ; ----------------------------------------------------------------------------
00CE9B  1               ; "GETC" STATEMENT
00CE9B  1               ; ----------------------------------------------------------------------------
00CE9B  1               ; ----------------------------------------------------------------------------
00CE9B  1               ; "READ" STATEMENT
00CE9B  1               ; ----------------------------------------------------------------------------
00CE9B  1               READ:
00CE9B  1  A6 8F                ldx     DATPTR
00CE9D  1  A4 90                ldy     DATPTR+1
00CE9F  1               ; AppleSoft II, too
00CE9F  1  A9                   .byte   $A9	; LDA #$98
00CEA0  1               L2ABE:
00CEA0  1  98                   tya
00CEA1  1               ; ----------------------------------------------------------------------------
00CEA1  1               ; PROCESS INPUT LIST
00CEA1  1               ;
00CEA1  1               ; (Y,X) IS ADDRESS OF INPUT DATA STRING
00CEA1  1               ; (A) = VALUE FOR INPUTFLG:  $00 FOR INPUT
00CEA1  1               ; 				$40 FOR GET
00CEA1  1               ;				$98 FOR READ
00CEA1  1               ; ----------------------------------------------------------------------------
00CEA1  1  85 62                sta     INPUTFLG
00CEA3  1  86 91                stx     INPTR
00CEA5  1  84 92                sty     INPTR+1
00CEA7  1               PROCESS_INPUT_ITEM:
00CEA7  1  20 57 D2             jsr     PTRGET
00CEAA  1  85 97                sta     FORPNT
00CEAC  1  84 98                sty     FORPNT+1
00CEAE  1  A5 DD                lda     TXTPTR
00CEB0  1  A4 DE                ldy     TXTPTR+1
00CEB2  1  85 11                sta     TXPSV
00CEB4  1  84 12                sty     TXPSV+1
00CEB6  1  A6 91                ldx     INPTR
00CEB8  1  A4 92                ldy     INPTR+1
00CEBA  1  86 DD                stx     TXTPTR
00CEBC  1  84 DE                sty     TXTPTR+1
00CEBE  1  20 DC 00             jsr     CHRGOT
00CEC1  1  D0 0E                bne     INSTART
00CEC3  1  24 62                bit     INPUTFLG
00CEC5  1               ; BUG: The beq/bne L2AF8 below is supposed
00CEC5  1               ; to be always taken. For this to happen,
00CEC5  1               ; the last load must be a 0 for beq
00CEC5  1               ; and != 0 for bne. The original Microsoft
00CEC5  1               ; code had ldx/ldy/bne here, which was only
00CEC5  1               ; correct for a non-ZP INPUTBUFFER. Commodore
00CEC5  1               ; fixed it in CBMBASIC V1 by swapping the
00CEC5  1               ; ldx and the ldy. It was broken on KIM,
00CEC5  1               ; but okay on APPLE and CBM2, because
00CEC5  1               ; these used a non-ZP INPUTBUFFER.
00CEC5  1               ; Microsoft fixed this somewhere after KIM
00CEC5  1               ; and before MICROTAN, by using beq instead
00CEC5  1               ; of bne in the ZP case.
00CEC5  1  30 62                bmi     FINDATA
00CEC7  1  20 2F CE             jsr     OUTQUES
00CECA  1  20 92 CE             jsr     NXIN
00CECD  1  86 DD                stx     TXTPTR
00CECF  1  84 DE                sty     TXTPTR+1
00CED1  1               ; ----------------------------------------------------------------------------
00CED1  1               INSTART:
00CED1  1  20 D6 00             jsr     CHRGET
00CED4  1  24 5F                bit     VALTYP
00CED6  1  10 24                bpl     L2B34
00CED8  1  85 5B                sta     CHARAC
00CEDA  1  C9 22                cmp     #$22
00CEDC  1  F0 07                beq     L2B1D
00CEDE  1  A9 3A                lda     #$3A
00CEE0  1  85 5B                sta     CHARAC
00CEE2  1  A9 2C                lda     #$2C
00CEE4  1  18                   clc
00CEE5  1               L2B1D:
00CEE5  1  85 5C                sta     ENDCHR
00CEE7  1  A5 DD                lda     TXTPTR
00CEE9  1  A4 DE                ldy     TXTPTR+1
00CEEB  1  69 00                adc     #$00
00CEED  1  90 01                bcc     L2B28
00CEEF  1  C8                   iny
00CEF0  1               L2B28:
00CEF0  1  20 00 D6             jsr     STRLT2
00CEF3  1  20 3F D9             jsr     POINT
00CEF6  1  20 21 CD             jsr     LETSTRING
00CEF9  1  4C 02 CF             jmp     INPUT_MORE
00CEFC  1               ; ----------------------------------------------------------------------------
00CEFC  1               L2B34:
00CEFC  1  20 D3 DD             jsr     FIN
00CEFF  1  20 C0 DC             jsr     SETFOR
00CF02  1               ; ----------------------------------------------------------------------------
00CF02  1               INPUT_MORE:
00CF02  1  20 DC 00             jsr     CHRGOT
00CF05  1  F0 07                beq     L2B48
00CF07  1  C9 2C                cmp     #$2C
00CF09  1  F0 03                beq     L2B48
00CF0B  1  4C 50 CE             jmp     INPUTERR
00CF0E  1               L2B48:
00CF0E  1  A5 DD                lda     TXTPTR
00CF10  1  A4 DE                ldy     TXTPTR+1
00CF12  1  85 91                sta     INPTR
00CF14  1  84 92                sty     INPTR+1
00CF16  1  A5 11                lda     TXPSV
00CF18  1  A4 12                ldy     TXPSV+1
00CF1A  1  85 DD                sta     TXTPTR
00CF1C  1  84 DE                sty     TXTPTR+1
00CF1E  1  20 DC 00             jsr     CHRGOT
00CF21  1  F0 2C                beq     INPDONE
00CF23  1  20 4D D1             jsr     CHKCOM
00CF26  1  4C A7 CE             jmp     PROCESS_INPUT_ITEM
00CF29  1               ; ----------------------------------------------------------------------------
00CF29  1               FINDATA:
00CF29  1  20 66 CC             jsr     DATAN
00CF2C  1  C8                   iny
00CF2D  1  AA                   tax
00CF2E  1  D0 12                bne     L2B7C
00CF30  1  A2 06                ldx     #ERR_NODATA
00CF32  1  C8                   iny
00CF33  1  B1 DD                lda     (TXTPTR),y
00CF35  1  F0 69                beq     GERR
00CF37  1  C8                   iny
00CF38  1  B1 DD                lda     (TXTPTR),y
00CF3A  1  85 8D                sta     Z8C
00CF3C  1  C8                   iny
00CF3D  1  B1 DD                lda     (TXTPTR),y
00CF3F  1  C8                   iny
00CF40  1  85 8E                sta     Z8C+1
00CF42  1               L2B7C:
00CF42  1  B1 DD                lda     (TXTPTR),y
00CF44  1  AA                   tax
00CF45  1  20 5B CC             jsr     ADDON
00CF48  1  E0 83                cpx     #$83
00CF4A  1  D0 DD                bne     FINDATA
00CF4C  1  4C D1 CE             jmp     INSTART
00CF4F  1               ; ---NO MORE INPUT REQUESTED------
00CF4F  1               INPDONE:
00CF4F  1  A5 91                lda     INPTR
00CF51  1  A4 92                ldy     INPTR+1
00CF53  1  A6 62                ldx     INPUTFLG
00CF55  1  F0 03                beq     L2B94 ; INPUT
00CF57  1  4C 7C CB             jmp     SETDA
00CF5A  1               L2B94:
00CF5A  1  A0 00                ldy     #$00
00CF5C  1  B1 91                lda     (INPTR),y
00CF5E  1  F0 07                beq     L2BA1
00CF60  1  A9 68                lda     #<ERREXTRA
00CF62  1  A0 CF                ldy     #>ERREXTRA
00CF64  1  4C 0F CE             jmp     STROUT
00CF67  1               L2BA1:
00CF67  1  60                   rts
00CF68  1               ; ----------------------------------------------------------------------------
00CF68  1               ERREXTRA:
00CF68  1  3F 45 58 54          .byte   "?EXTRA IGNORED"
00CF6C  1  52 41 20 49  
00CF70  1  47 4E 4F 52  
00CF76  1               
00CF76  1               
00CF76  1  0D 0A 00             .byte   $0D,$0A,$00
00CF79  1               ERRREENTRY:
00CF79  1  3F 52 45 44          .byte   "?REDO FROM START"
00CF7D  1  4F 20 46 52  
00CF81  1  4F 4D 20 53  
00CF89  1               
00CF89  1               
00CF89  1  0D 0A 00             .byte   $0D,$0A,$00
00CF8C  1               ; ----------------------------------------------------------------------------
00CF8C  1               ; "NEXT" STATEMENT
00CF8C  1               ; ----------------------------------------------------------------------------
00CF8C  1               NEXT:
00CF8C  1  D0 04                bne     NEXT1
00CF8E  1  A0 00                ldy     #$00
00CF90  1  F0 03                beq     NEXT2
00CF92  1               NEXT1:
00CF92  1  20 57 D2             jsr     PTRGET
00CF95  1               NEXT2:
00CF95  1  85 97                sta     FORPNT
00CF97  1  84 98                sty     FORPNT+1
00CF99  1  20 F9 C6             jsr     GTFORPNT
00CF9C  1  F0 04                beq     NEXT3
00CF9E  1  A2 00                ldx     #$00
00CFA0  1               GERR:
00CFA0  1  F0 68                beq     JERROR
00CFA2  1               NEXT3:
00CFA2  1  9A                   txs
00CFA3  1  E8                   inx
00CFA4  1  E8                   inx
00CFA5  1  E8                   inx
00CFA6  1  E8                   inx
00CFA7  1  8A                   txa
00CFA8  1  E8                   inx
00CFA9  1  E8                   inx
00CFAA  1  E8                   inx
00CFAB  1  E8                   inx
00CFAC  1  E8                   inx
00CFAD  1  86 73                stx     DEST
00CFAF  1  A0 01                ldy     #>STACK
00CFB1  1  20 97 DC             jsr     LOAD_FAC_FROM_YA
00CFB4  1  BA                   tsx
00CFB5  1  BD 08 01             lda     STACK+BYTES_FP+4,x
00CFB8  1  85 B0                sta     FACSIGN
00CFBA  1  A5 97                lda     FORPNT
00CFBC  1  A4 98                ldy     FORPNT+1
00CFBE  1  20 B8 D9             jsr     FADD
00CFC1  1  20 C0 DC             jsr     SETFOR
00CFC4  1  A0 01                ldy     #>STACK
00CFC6  1  20 46 DD             jsr     FCOMP2
00CFC9  1  BA                   tsx
00CFCA  1  38                   sec
00CFCB  1  FD 08 01             sbc     STACK+BYTES_FP+4,x
00CFCE  1  F0 17                beq     L2C22
00CFD0  1  BD 0D 01             lda     STACK+2*BYTES_FP+5,x
00CFD3  1  85 87                sta     CURLIN
00CFD5  1  BD 0E 01             lda     STACK+2*BYTES_FP+6,x
00CFD8  1  85 88                sta     CURLIN+1
00CFDA  1  BD 10 01             lda     STACK+2*BYTES_FP+8,x
00CFDD  1  85 DD                sta     TXTPTR
00CFDF  1  BD 0F 01             lda     STACK+2*BYTES_FP+7,x
00CFE2  1  85 DE                sta     TXTPTR+1
00CFE4  1               L2C1F:
00CFE4  1  4C 1A CB             jmp     NEWSTT
00CFE7  1               L2C22:
00CFE7  1  8A                   txa
00CFE8  1  69 0F                adc     #2*BYTES_FP+7
00CFEA  1  AA                   tax
00CFEB  1  9A                   txs
00CFEC  1  20 DC 00             jsr     CHRGOT
00CFEF  1  C9 2C                cmp     #$2C
00CFF1  1  D0 F1                bne     L2C1F
00CFF3  1  20 D6 00             jsr     CHRGET
00CFF6  1  20 92 CF             jsr     NEXT1
00CFF9  1               ; ----------------------------------------------------------------------------
00CFF9  1               ; EVALUATE EXPRESSION, MAKE SURE IT IS NUMERIC
00CFF9  1               ; ----------------------------------------------------------------------------
00CFF9  1               FRMNUM:
00CFF9  1  20 0D D0             jsr     FRMEVL
00CFFC  1               ; ----------------------------------------------------------------------------
00CFFC  1               ; MAKE SURE (FAC) IS NUMERIC
00CFFC  1               ; ----------------------------------------------------------------------------
00CFFC  1               CHKNUM:
00CFFC  1  18                   clc
00CFFD  1  24                   .byte   $24
00CFFE  1               ; ----------------------------------------------------------------------------
00CFFE  1               ; MAKE SURE (FAC) IS STRING
00CFFE  1               ; ----------------------------------------------------------------------------
00CFFE  1               CHKSTR:
00CFFE  1  38                   sec
00CFFF  1               ; ----------------------------------------------------------------------------
00CFFF  1               ; MAKE SURE (FAC) IS CORRECT TYPE
00CFFF  1               ; IF C=0, TYPE MUST BE NUMERIC
00CFFF  1               ; IF C=1, TYPE MUST BE STRING
00CFFF  1               ; ----------------------------------------------------------------------------
00CFFF  1               CHKVAL:
00CFFF  1  24 5F                bit     VALTYP
00D001  1  30 03                bmi     L2C41
00D003  1  B0 03                bcs     L2C43
00D005  1               L2C40:
00D005  1  60                   rts
00D006  1               L2C41:
00D006  1  B0 FD                bcs     L2C40
00D008  1               L2C43:
00D008  1  A2 18                ldx     #ERR_BADTYPE
00D00A  1               JERROR:
00D00A  1  4C A6 C7             jmp     ERROR
00D00D  1               ; ----------------------------------------------------------------------------
00D00D  1               ; EVALUATE THE EXPRESSION AT TXTPTR, LEAVING THE
00D00D  1               ; RESULT IN FAC.  WORKS FOR BOTH STRING AND NUMERIC
00D00D  1               ; EXPRESSIONS.
00D00D  1               ; ----------------------------------------------------------------------------
00D00D  1               FRMEVL:
00D00D  1  A6 DD                ldx     TXTPTR
00D00F  1  D0 02                bne     L2C4E
00D011  1  C6 DE                dec     TXTPTR+1
00D013  1               L2C4E:
00D013  1  C6 DD                dec     TXTPTR
00D015  1  A2 00                ldx     #$00
00D017  1  24                   .byte   $24
00D018  1               FRMEVL1:
00D018  1  48                   pha
00D019  1  8A                   txa
00D01A  1  48                   pha
00D01B  1  A9 01                lda     #$01
00D01D  1  20 6A C7             jsr     CHKMEM
00D020  1  20 EC D0             jsr     FRM_ELEMENT
00D023  1  A9 00                lda     #$00
00D025  1  85 9B                sta     CPRTYP
00D027  1               FRMEVL2:
00D027  1  20 DC 00             jsr     CHRGOT
00D02A  1               L2C65:
00D02A  1  38                   sec
00D02B  1  E9 AA                sbc     #TOKEN_GREATER
00D02D  1  90 17                bcc     L2C81
00D02F  1  C9 03                cmp     #$03
00D031  1  B0 13                bcs     L2C81
00D033  1  C9 01                cmp     #$01
00D035  1  2A                   rol     a
00D036  1  49 01                eor     #$01
00D038  1  45 9B                eor     CPRTYP
00D03A  1  C5 9B                cmp     CPRTYP
00D03C  1  90 61                bcc     SNTXERR
00D03E  1  85 9B                sta     CPRTYP
00D040  1  20 D6 00             jsr     CHRGET
00D043  1  4C 2A D0             jmp     L2C65
00D046  1               L2C81:
00D046  1  A6 9B                ldx     CPRTYP
00D048  1  D0 2C                bne     FRM_RELATIONAL
00D04A  1  B0 78                bcs     L2D02
00D04C  1  69 07                adc     #$07
00D04E  1  90 74                bcc     L2D02
00D050  1  65 5F                adc     VALTYP
00D052  1  D0 03                bne     L2C92
00D054  1  4C 99 D7             jmp     CAT
00D057  1               L2C92:
00D057  1  69 FF                adc     #$FF
00D059  1  85 71                sta     INDEX
00D05B  1  0A                   asl     a
00D05C  1  65 71                adc     INDEX
00D05E  1  A8                   tay
00D05F  1               FRM_PRECEDENCE_TEST:
00D05F  1  68                   pla
00D060  1  D9 66 C0             cmp     MATHTBL,y
00D063  1  B0 64                bcs     FRM_PERFORM1
00D065  1  20 FC CF             jsr     CHKNUM
00D068  1               L2CA3:
00D068  1  48                   pha
00D069  1               L2CA4:
00D069  1  20 8F D0             jsr     FRM_RECURSE
00D06C  1  68                   pla
00D06D  1  A4 99                ldy     LASTOP
00D06F  1  10 17                bpl     PREFNC
00D071  1  AA                   tax
00D072  1  F0 53                beq     GOEX
00D074  1  D0 5C                bne     FRM_PERFORM2
00D076  1               ; ----------------------------------------------------------------------------
00D076  1               ; FOUND ONE OR MORE RELATIONAL OPERATORS <,=,>
00D076  1               ; ----------------------------------------------------------------------------
00D076  1               FRM_RELATIONAL:
00D076  1  46 5F                lsr     VALTYP
00D078  1  8A                   txa
00D079  1  2A                   rol     a
00D07A  1  A6 DD                ldx     TXTPTR
00D07C  1  D0 02                bne     L2CBB
00D07E  1  C6 DE                dec     TXTPTR+1
00D080  1               L2CBB:
00D080  1  C6 DD                dec     TXTPTR
00D082  1  A0 1B                ldy     #$1B
00D084  1  85 9B                sta     CPRTYP
00D086  1  D0 D7                bne     FRM_PRECEDENCE_TEST
00D088  1               PREFNC:
00D088  1  D9 66 C0             cmp     MATHTBL,y
00D08B  1  B0 45                bcs     FRM_PERFORM2
00D08D  1  90 D9                bcc     L2CA3
00D08F  1               ; ----------------------------------------------------------------------------
00D08F  1               ; STACK THIS OPERATION AND CALL FRMEVL FOR
00D08F  1               ; ANOTHER ONE
00D08F  1               ; ----------------------------------------------------------------------------
00D08F  1               FRM_RECURSE:
00D08F  1  B9 68 C0             lda     MATHTBL+2,y
00D092  1  48                   pha
00D093  1  B9 67 C0             lda     MATHTBL+1,y
00D096  1  48                   pha
00D097  1  20 A2 D0             jsr     FRM_STACK1
00D09A  1  A5 9B                lda     CPRTYP
00D09C  1  4C 18 D0             jmp     FRMEVL1
00D09F  1               SNTXERR:
00D09F  1  4C 58 D1             jmp     SYNERR
00D0A2  1               ; ----------------------------------------------------------------------------
00D0A2  1               ; STACK (FAC)
00D0A2  1               ; THREE ENTRY POINTS:
00D0A2  1               ; 	1, FROM FRMEVL
00D0A2  1               ;	2, FROM "STEP"
00D0A2  1               ;	3, FROM "FOR"
00D0A2  1               ; ----------------------------------------------------------------------------
00D0A2  1               FRM_STACK1:
00D0A2  1  A5 B0                lda     FACSIGN
00D0A4  1  BE 66 C0             ldx     MATHTBL,y
00D0A7  1               ; ----------------------------------------------------------------------------
00D0A7  1               ; ENTER HERE FROM "STEP", TO PUSH STEP SIGN AND VALUE
00D0A7  1               ; ----------------------------------------------------------------------------
00D0A7  1               FRM_STACK2:
00D0A7  1  A8                   tay
00D0A8  1  68                   pla
00D0A9  1  85 71                sta     INDEX
00D0AB  1  E6 71                inc     INDEX ; bug: assumes not on page boundary
00D0AD  1               ; bug exists on AppleSoft II
00D0AD  1  68                   pla
00D0AE  1  85 72                sta     INDEX+1
00D0B0  1  98                   tya
00D0B1  1  48                   pha
00D0B2  1               ; ----------------------------------------------------------------------------
00D0B2  1               ; ENTER HERE FROM "FOR", WITH (INDEX) = STEP,
00D0B2  1               ; TO PUSH INITIAL VALUE OF "FOR" VARIABLE
00D0B2  1               ; ----------------------------------------------------------------------------
00D0B2  1               FRM_STACK3:
00D0B2  1  20 06 DD             jsr     ROUND_FAC
00D0B5  1  A5 AF                lda     FAC+3
00D0B7  1  48                   pha
00D0B8  1  A5 AE                lda     FAC+2
00D0BA  1  48                   pha
00D0BB  1  A5 AD                lda     FAC+1
00D0BD  1  48                   pha
00D0BE  1  A5 AC                lda     FAC
00D0C0  1  48                   pha
00D0C1  1  6C 71 00             jmp     (INDEX)
00D0C4  1               L2D02:
00D0C4  1  A0 FF                ldy     #$FF
00D0C6  1  68                   pla
00D0C7  1               GOEX:
00D0C7  1  F0 20                beq     EXIT
00D0C9  1               ; ----------------------------------------------------------------------------
00D0C9  1               ; PERFORM STACKED OPERATION
00D0C9  1               ;
00D0C9  1               ; (A) = PRECEDENCE BYTE
00D0C9  1               ; STACK:  1 -- CPRMASK
00D0C9  1               ;	5 -- (ARG)
00D0C9  1               ;	2 -- ADDR OF PERFORMER
00D0C9  1               ; ----------------------------------------------------------------------------
00D0C9  1               FRM_PERFORM1:
00D0C9  1  C9 64                cmp     #$64
00D0CB  1  F0 03                beq     L2D0E
00D0CD  1  20 FC CF             jsr     CHKNUM
00D0D0  1               L2D0E:
00D0D0  1  84 99                sty     LASTOP
00D0D2  1               FRM_PERFORM2:
00D0D2  1  68                   pla
00D0D3  1  4A                   lsr     a
00D0D4  1  85 63                sta     CPRMASK
00D0D6  1  68                   pla
00D0D7  1  85 B3                sta     ARG
00D0D9  1  68                   pla
00D0DA  1  85 B4                sta     ARG+1
00D0DC  1  68                   pla
00D0DD  1  85 B5                sta     ARG+2
00D0DF  1  68                   pla
00D0E0  1  85 B6                sta     ARG+3
00D0E2  1  68                   pla
00D0E3  1  85 B7                sta     ARGSIGN
00D0E5  1  45 B0                eor     FACSIGN
00D0E7  1  85 B8                sta     SGNCPR
00D0E9  1               EXIT:
00D0E9  1  A5 AC                lda     FAC
00D0EB  1  60                   rts
00D0EC  1               ; ----------------------------------------------------------------------------
00D0EC  1               ; GET ELEMENT IN EXPRESSION
00D0EC  1               ;
00D0EC  1               ; GET VALUE OF VARIABLE OR NUMBER AT TXTPNT, OR POINT
00D0EC  1               ; TO STRING DESCRIPTOR IF A STRING, AND PUT IN FAC.
00D0EC  1               ; ----------------------------------------------------------------------------
00D0EC  1               FRM_ELEMENT:
00D0EC  1  A9 00                lda     #$00
00D0EE  1  85 5F                sta     VALTYP
00D0F0  1               L2D31:
00D0F0  1  20 D6 00             jsr     CHRGET
00D0F3  1  B0 03                bcs     L2D39
00D0F5  1               L2D36:
00D0F5  1  4C D3 DD             jmp     FIN
00D0F8  1               L2D39:
00D0F8  1  20 CD D2             jsr     ISLETC
00D0FB  1  B0 67                bcs     FRM_VARIABLE
00D0FD  1               CON_PI:
00D0FD  1  C9 2E                cmp     #$2E
00D0FF  1  F0 F4                beq     L2D36
00D101  1  C9 A4                cmp     #TOKEN_MINUS
00D103  1  F0 58                beq     MIN
00D105  1  C9 A3                cmp     #TOKEN_PLUS
00D107  1  F0 E7                beq     L2D31
00D109  1  C9 22                cmp     #$22
00D10B  1  D0 0F                bne     NOT_
00D10D  1               ; ----------------------------------------------------------------------------
00D10D  1               ; STRING CONSTANT ELEMENT
00D10D  1               ;
00D10D  1               ; SET Y,A = (TXTPTR)+CARRY
00D10D  1               ; ----------------------------------------------------------------------------
00D10D  1               STRTXT:
00D10D  1  A5 DD                lda     TXTPTR
00D10F  1  A4 DE                ldy     TXTPTR+1
00D111  1  69 00                adc     #$00
00D113  1  90 01                bcc     L2D57
00D115  1  C8                   iny
00D116  1               L2D57:
00D116  1  20 FA D5             jsr     STRLIT
00D119  1  4C 3F D9             jmp     POINT
00D11C  1               ; ----------------------------------------------------------------------------
00D11C  1               ; "NOT" FUNCTION
00D11C  1               ; IF FAC=0, RETURN FAC=1
00D11C  1               ; IF FAC<>0, RETURN FAC=0
00D11C  1               ; ----------------------------------------------------------------------------
00D11C  1               NOT_:
00D11C  1  C9 A1                cmp     #TOKEN_NOT
00D11E  1  D0 13                bne     L2D74
00D120  1  A0 18                ldy     #$18
00D122  1  D0 3B                bne     EQUL
00D124  1               ; ----------------------------------------------------------------------------
00D124  1               ; COMPARISON FOR EQUALITY (= OPERATOR)
00D124  1               ; ALSO USED TO EVALUATE "NOT" FUNCTION
00D124  1               ; ----------------------------------------------------------------------------
00D124  1               EQUOP:
00D124  1  20 51 D3             jsr     AYINT
00D127  1  A5 AF                lda     FAC_LAST
00D129  1  49 FF                eor     #$FF
00D12B  1  A8                   tay
00D12C  1  A5 AE                lda     FAC_LAST-1
00D12E  1  49 FF                eor     #$FF
00D130  1  4C 0D D5             jmp     GIVAYF
00D133  1               L2D74:
00D133  1  C9 9E                cmp     #TOKEN_FN
00D135  1  D0 03                bne     L2D7B
00D137  1  4C 6A D5             jmp     L31F3
00D13A  1               L2D7B:
00D13A  1  C9 AD                cmp     #TOKEN_SGN
00D13C  1  90 03                bcc     PARCHK
00D13E  1  4C 73 D1             jmp     UNARY
00D141  1               ; ----------------------------------------------------------------------------
00D141  1               ; EVALUATE "(EXPRESSION)"
00D141  1               ; ----------------------------------------------------------------------------
00D141  1               PARCHK:
00D141  1  20 4A D1             jsr     CHKOPN
00D144  1  20 0D D0             jsr     FRMEVL
00D147  1               CHKCLS:
00D147  1  A9 29                lda     #$29
00D149  1  2C                   .byte   $2C
00D14A  1               CHKOPN:
00D14A  1  A9 28                lda     #$28
00D14C  1  2C                   .byte   $2C
00D14D  1               CHKCOM:
00D14D  1  A9 2C                lda     #$2C
00D14F  1               ; ----------------------------------------------------------------------------
00D14F  1               ; UNLESS CHAR AT TXTPTR = (A), SYNTAX ERROR
00D14F  1               ; ----------------------------------------------------------------------------
00D14F  1               SYNCHR:	; XXX all CBM code calls SYNCHR instead of CHKCOM
00D14F  1  A0 00                ldy     #$00
00D151  1  D1 DD                cmp     (TXTPTR),y
00D153  1  D0 03                bne     SYNERR
00D155  1  4C D6 00             jmp     CHRGET
00D158  1               ; ----------------------------------------------------------------------------
00D158  1               SYNERR:
00D158  1  A2 02                ldx     #ERR_SYNTAX
00D15A  1  4C A6 C7             jmp     ERROR
00D15D  1               ; ----------------------------------------------------------------------------
00D15D  1               MIN:
00D15D  1  A0 15                ldy     #$15
00D15F  1               EQUL:
00D15F  1  68                   pla
00D160  1  68                   pla
00D161  1  4C 69 D0             jmp     L2CA4
00D164  1               ; ----------------------------------------------------------------------------
00D164  1               FRM_VARIABLE:
00D164  1  20 57 D2             jsr     PTRGET
00D167  1               FRM_VARIABLE_CALL	= *-1
00D167  1  85 AE                sta     FAC_LAST-1
00D169  1  84 AF                sty     FAC_LAST
00D16B  1  A6 5F                ldx     VALTYP
00D16D  1  F0 01                beq     L2DB1
00D16F  1               ; bugfix?
00D16F  1               ; fixed on AppleSoft II, not on any CBM
00D16F  1  60                   rts
00D170  1               L2DB1:
00D170  1  4C 97 DC             jmp     LOAD_FAC_FROM_YA
00D173  1               ; ----------------------------------------------------------------------------
00D173  1               UNARY:
00D173  1  0A                   asl     a
00D174  1  48                   pha
00D175  1  AA                   tax
00D176  1  20 D6 00             jsr     CHRGET
00D179  1  E0 81                cpx     #<(TOKEN_LEFTSTR*2-1)
00D17B  1  90 20                bcc     L2DEF
00D17D  1  20 4A D1             jsr     CHKOPN
00D180  1  20 0D D0             jsr     FRMEVL
00D183  1  20 4D D1             jsr     CHKCOM
00D186  1  20 FE CF             jsr     CHKSTR
00D189  1  68                   pla
00D18A  1  AA                   tax
00D18B  1  A5 AF                lda     FAC_LAST
00D18D  1  48                   pha
00D18E  1  A5 AE                lda     FAC_LAST-1
00D190  1  48                   pha
00D191  1  8A                   txa
00D192  1  48                   pha
00D193  1  20 FA D8             jsr     GETBYT
00D196  1  68                   pla
00D197  1  A8                   tay
00D198  1  8A                   txa
00D199  1  48                   pha
00D19A  1  4C A2 D1             jmp     L2DF4
00D19D  1               L2DEF:
00D19D  1  20 41 D1             jsr     PARCHK
00D1A0  1  68                   pla
00D1A1  1  A8                   tay
00D1A2  1               L2DF4:
00D1A2  1  B9 DE BF             lda     UNFNC+($80-TOKEN_SGN)*2,y
00D1A5  1  85 A2                sta     JMPADRS+1
00D1A7  1  B9 DF BF             lda     UNFNC+($80-TOKEN_SGN)*2+1,y
00D1AA  1  85 A3                sta     JMPADRS+2
00D1AC  1  20 A1 00             jsr     JMPADRS
00D1AF  1  4C FC CF             jmp     CHKNUM
00D1B2  1               ; ----------------------------------------------------------------------------
00D1B2  1               OR:
00D1B2  1  A0 FF                ldy     #$FF
00D1B4  1  2C                   .byte   $2C
00D1B5  1               ; ----------------------------------------------------------------------------
00D1B5  1               TAND:
00D1B5  1  A0 00                ldy     #$00
00D1B7  1  84 5D                sty     EOLPNTR
00D1B9  1  20 51 D3             jsr     AYINT
00D1BC  1  A5 AE                lda     FAC_LAST-1
00D1BE  1  45 5D                eor     EOLPNTR
00D1C0  1  85 5B                sta     CHARAC
00D1C2  1  A5 AF                lda     FAC_LAST
00D1C4  1  45 5D                eor     EOLPNTR
00D1C6  1  85 5C                sta     ENDCHR
00D1C8  1  20 E7 DC             jsr     COPY_ARG_TO_FAC
00D1CB  1  20 51 D3             jsr     AYINT
00D1CE  1  A5 AF                lda     FAC_LAST
00D1D0  1  45 5D                eor     EOLPNTR
00D1D2  1  25 5C                and     ENDCHR
00D1D4  1  45 5D                eor     EOLPNTR
00D1D6  1  A8                   tay
00D1D7  1  A5 AE                lda     FAC_LAST-1
00D1D9  1  45 5D                eor     EOLPNTR
00D1DB  1  25 5B                and     CHARAC
00D1DD  1  45 5D                eor     EOLPNTR
00D1DF  1  4C 0D D5             jmp     GIVAYF
00D1E2  1               ; ----------------------------------------------------------------------------
00D1E2  1               ; PERFORM RELATIONAL OPERATIONS
00D1E2  1               ; ----------------------------------------------------------------------------
00D1E2  1               RELOPS:
00D1E2  1  20 FF CF             jsr     CHKVAL
00D1E5  1  B0 13                bcs     STRCMP
00D1E7  1  A5 B7                lda     ARGSIGN
00D1E9  1  09 7F                ora     #$7F
00D1EB  1  25 B4                and     ARG+1
00D1ED  1  85 B4                sta     ARG+1
00D1EF  1  A9 B3                lda     #<ARG
00D1F1  1  A0 00                ldy     #$00
00D1F3  1  20 44 DD             jsr     FCOMP
00D1F6  1  AA                   tax
00D1F7  1  4C 2D D2             jmp     NUMCMP
00D1FA  1               ; ----------------------------------------------------------------------------
00D1FA  1               ; STRING COMPARISON
00D1FA  1               ; ----------------------------------------------------------------------------
00D1FA  1               STRCMP:
00D1FA  1  A9 00                lda     #$00
00D1FC  1  85 5F                sta     VALTYP
00D1FE  1  C6 9B                dec     CPRTYP
00D200  1  20 02 D8             jsr     FREFAC
00D203  1  85 AC                sta     FAC
00D205  1  86 AD                stx     FAC+1
00D207  1  84 AE                sty     FAC+2
00D209  1  A5 B5                lda     ARG_LAST-1
00D20B  1  A4 B6                ldy     ARG_LAST
00D20D  1  20 06 D8             jsr     FRETMP
00D210  1  86 B5                stx     ARG_LAST-1
00D212  1  84 B6                sty     ARG_LAST
00D214  1  AA                   tax
00D215  1  38                   sec
00D216  1  E5 AC                sbc     FAC
00D218  1  F0 08                beq     L2E74
00D21A  1  A9 01                lda     #$01
00D21C  1  90 04                bcc     L2E74
00D21E  1  A6 AC                ldx     FAC
00D220  1  A9 FF                lda     #$FF
00D222  1               L2E74:
00D222  1  85 B0                sta     FACSIGN
00D224  1  A0 FF                ldy     #$FF
00D226  1  E8                   inx
00D227  1               STRCMP1:
00D227  1  C8                   iny
00D228  1  CA                   dex
00D229  1  D0 07                bne     L2E84
00D22B  1  A6 B0                ldx     FACSIGN
00D22D  1               NUMCMP:
00D22D  1  30 0F                bmi     CMPDONE
00D22F  1  18                   clc
00D230  1  90 0C                bcc     CMPDONE
00D232  1               L2E84:
00D232  1  B1 B5                lda     (ARG_LAST-1),y
00D234  1  D1 AD                cmp     (FAC+1),y
00D236  1  F0 EF                beq     STRCMP1
00D238  1  A2 FF                ldx     #$FF
00D23A  1  B0 02                bcs     CMPDONE
00D23C  1  A2 01                ldx     #$01
00D23E  1               CMPDONE:
00D23E  1  E8                   inx
00D23F  1  8A                   txa
00D240  1  2A                   rol     a
00D241  1  25 63                and     CPRMASK
00D243  1  F0 02                beq     L2E99
00D245  1  A9 FF                lda     #$FF
00D247  1               L2E99:
00D247  1  4C 27 DD             jmp     FLOAT
00D24A  1               ; ----------------------------------------------------------------------------
00D24A  1               ; "DIM" STATEMENT
00D24A  1               ; ----------------------------------------------------------------------------
00D24A  1               NXDIM:
00D24A  1  20 4D D1             jsr     CHKCOM
00D24D  1               DIM:
00D24D  1  AA                   tax
00D24E  1  20 5C D2             jsr     PTRGET2
00D251  1  20 DC 00             jsr     CHRGOT
00D254  1  D0 F4                bne     NXDIM
00D256  1  60                   rts
00D257  1               ; ----------------------------------------------------------------------------
00D257  1               ; PTRGET -- GENERAL VARIABLE SCAN
00D257  1               ;
00D257  1               ; SCANS VARIABLE NAME AT TXTPTR, AND SEARCHES THE
00D257  1               ; VARTAB AND ARYTAB FOR THE NAME.
00D257  1               ; IF NOT FOUND, CREATE VARIABLE OF APPROPRIATE TYPE.
00D257  1               ; RETURN WITH ADDRESS IN VARPNT AND Y,A
00D257  1               ;
00D257  1               ; ACTUAL ACTIVITY CONTROLLED SOMEWHAT BY TWO FLAGS:
00D257  1               ;	DIMFLG -- NONZERO IF CALLED FROM "DIM"
00D257  1               ;		ELSE = 0
00D257  1               ;
00D257  1               ;	SUBFLG -- = $00
00D257  1               ;		= $40 IF CALLED FROM "GETARYPT"
00D257  1               ; ----------------------------------------------------------------------------
00D257  1               PTRGET:
00D257  1  A2 00                ldx     #$00
00D259  1  20 DC 00             jsr     CHRGOT
00D25C  1               PTRGET2:
00D25C  1  86 5E                stx     DIMFLG
00D25E  1               PTRGET3:
00D25E  1  85 93                sta     VARNAM
00D260  1  20 DC 00             jsr     CHRGOT
00D263  1  20 CD D2             jsr     ISLETC
00D266  1  B0 03                bcs     NAMOK
00D268  1  4C 58 D1             jmp     SYNERR
00D26B  1               NAMOK:
00D26B  1  A2 00                ldx     #$00
00D26D  1  86 5F                stx     VALTYP
00D26F  1  20 D6 00             jsr     CHRGET
00D272  1  90 05                bcc     L2ECD
00D274  1  20 CD D2             jsr     ISLETC
00D277  1  90 0B                bcc     L2ED8
00D279  1               L2ECD:
00D279  1  AA                   tax
00D27A  1               L2ECE:
00D27A  1  20 D6 00             jsr     CHRGET
00D27D  1  90 FB                bcc     L2ECE
00D27F  1  20 CD D2             jsr     ISLETC
00D282  1  B0 F6                bcs     L2ECE
00D284  1               L2ED8:
00D284  1  C9 24                cmp     #$24
00D286  1  D0 0B                bne     L2EF9
00D288  1  A9 FF                lda     #$FF
00D28A  1  85 5F                sta     VALTYP
00D28C  1  8A                   txa
00D28D  1  09 80                ora     #$80
00D28F  1  AA                   tax
00D290  1  20 D6 00             jsr     CHRGET
00D293  1               L2EF9:
00D293  1  86 94                stx     VARNAM+1
00D295  1  38                   sec
00D296  1  05 61                ora     SUBFLG
00D298  1  E9 28                sbc     #$28
00D29A  1  D0 03                bne     L2F05
00D29C  1  4C 63 D3             jmp     ARRAY
00D29F  1               L2F05:
00D29F  1  A9 00                lda     #$00
00D2A1  1  85 61                sta     SUBFLG
00D2A3  1  A5 7B                lda     VARTAB
00D2A5  1  A6 7C                ldx     VARTAB+1
00D2A7  1  A0 00                ldy     #$00
00D2A9  1               L2F0F:
00D2A9  1  86 AB                stx     LOWTR+1
00D2AB  1               L2F11:
00D2AB  1  85 AA                sta     LOWTR
00D2AD  1  E4 7E                cpx     ARYTAB+1
00D2AF  1  D0 04                bne     L2F1B
00D2B1  1  C5 7D                cmp     ARYTAB
00D2B3  1  F0 22                beq     NAMENOTFOUND
00D2B5  1               L2F1B:
00D2B5  1  A5 93                lda     VARNAM
00D2B7  1  D1 AA                cmp     (LOWTR),y
00D2B9  1  D0 08                bne     L2F29
00D2BB  1  A5 94                lda     VARNAM+1
00D2BD  1  C8                   iny
00D2BE  1  D1 AA                cmp     (LOWTR),y
00D2C0  1  F0 61                beq     SET_VARPNT_AND_YA
00D2C2  1  88                   dey
00D2C3  1               L2F29:
00D2C3  1  18                   clc
00D2C4  1  A5 AA                lda     LOWTR
00D2C6  1  69 06                adc     #BYTES_PER_VARIABLE
00D2C8  1  90 E1                bcc     L2F11
00D2CA  1  E8                   inx
00D2CB  1  D0 DC                bne     L2F0F
00D2CD  1               ; ----------------------------------------------------------------------------
00D2CD  1               ; CHECK IF (A) IS ASCII LETTER A-Z
00D2CD  1               ;
00D2CD  1               ; RETURN CARRY = 1 IF A-Z
00D2CD  1               ;	= 0 IF NOT
00D2CD  1               ; ----------------------------------------------------------------------------
00D2CD  1               ISLETC:
00D2CD  1  C9 41                cmp     #$41
00D2CF  1  90 05                bcc     L2F3C
00D2D1  1  E9 5B                sbc     #$5B
00D2D3  1  38                   sec
00D2D4  1  E9 A5                sbc     #$A5
00D2D6  1               L2F3C:
00D2D6  1  60                   rts
00D2D7  1               ; ----------------------------------------------------------------------------
00D2D7  1               ; VARIABLE NOT FOUND, SO MAKE ONE
00D2D7  1               ; ----------------------------------------------------------------------------
00D2D7  1               NAMENOTFOUND:
00D2D7  1  68                   pla
00D2D8  1  48                   pha
00D2D9  1  C9 66                cmp     #<FRM_VARIABLE_CALL
00D2DB  1  D0 07                bne     MAKENEWVARIABLE
00D2DD  1  A9 E2                lda     #<C_ZERO
00D2DF  1  A0 D2                ldy     #>C_ZERO
00D2E1  1  60                   rts
00D2E2  1               ; ----------------------------------------------------------------------------
00D2E2  1               C_ZERO:
00D2E2  1  00 00                .byte   $00,$00
00D2E4  1               ; ----------------------------------------------------------------------------
00D2E4  1               ; MAKE A NEW SIMPLE VARIABLE
00D2E4  1               ;
00D2E4  1               ; MOVE ARRAYS UP 7 BYTES TO MAKE ROOM FOR NEW VARIABLE
00D2E4  1               ; ENTER 7-BYTE VARIABLE DATA IN THE HOLE
00D2E4  1               ; ----------------------------------------------------------------------------
00D2E4  1               MAKENEWVARIABLE:
00D2E4  1  A5 7D                lda     ARYTAB
00D2E6  1  A4 7E                ldy     ARYTAB+1
00D2E8  1  85 AA                sta     LOWTR
00D2EA  1  84 AB                sty     LOWTR+1
00D2EC  1  A5 7F                lda     STREND
00D2EE  1  A4 80                ldy     STREND+1
00D2F0  1  85 A6                sta     HIGHTR
00D2F2  1  84 A7                sty     HIGHTR+1
00D2F4  1  18                   clc
00D2F5  1  69 06                adc     #BYTES_PER_VARIABLE
00D2F7  1  90 01                bcc     L2F68
00D2F9  1  C8                   iny
00D2FA  1               L2F68:
00D2FA  1  85 A4                sta     HIGHDS
00D2FC  1  84 A5                sty     HIGHDS+1
00D2FE  1  20 27 C7             jsr     BLTU
00D301  1  A5 A4                lda     HIGHDS
00D303  1  A4 A5                ldy     HIGHDS+1
00D305  1  C8                   iny
00D306  1  85 7D                sta     ARYTAB
00D308  1  84 7E                sty     ARYTAB+1
00D30A  1  A0 00                ldy     #$00
00D30C  1  A5 93                lda     VARNAM
00D30E  1  91 AA                sta     (LOWTR),y
00D310  1  C8                   iny
00D311  1  A5 94                lda     VARNAM+1
00D313  1  91 AA                sta     (LOWTR),y
00D315  1  A9 00                lda     #$00
00D317  1  C8                   iny
00D318  1  91 AA                sta     (LOWTR),y
00D31A  1  C8                   iny
00D31B  1  91 AA                sta     (LOWTR),y
00D31D  1  C8                   iny
00D31E  1  91 AA                sta     (LOWTR),y
00D320  1  C8                   iny
00D321  1  91 AA                sta     (LOWTR),y
00D323  1               ; ----------------------------------------------------------------------------
00D323  1               ; PUT ADDRESS OF VALUE OF VARIABLE IN VARPNT AND Y,A
00D323  1               ; ----------------------------------------------------------------------------
00D323  1               SET_VARPNT_AND_YA:
00D323  1  A5 AA                lda     LOWTR
00D325  1  18                   clc
00D326  1  69 02                adc     #$02
00D328  1  A4 AB                ldy     LOWTR+1
00D32A  1  90 01                bcc     L2F9E
00D32C  1  C8                   iny
00D32D  1               L2F9E:
00D32D  1  85 95                sta     VARPNT
00D32F  1  84 96                sty     VARPNT+1
00D331  1  60                   rts
00D332  1               ; ----------------------------------------------------------------------------
00D332  1               ; COMPUTE ADDRESS OF FIRST VALUE IN ARRAY
00D332  1               ; ARYPNT = (LOWTR) + #DIMS*2 + 5
00D332  1               ; ----------------------------------------------------------------------------
00D332  1               GETARY:
00D332  1  A5 5D                lda     EOLPNTR
00D334  1  0A                   asl     a
00D335  1  69 05                adc     #$05
00D337  1  65 AA                adc     LOWTR
00D339  1  A4 AB                ldy     LOWTR+1
00D33B  1  90 01                bcc     L2FAF
00D33D  1  C8                   iny
00D33E  1               L2FAF:
00D33E  1  85 A4                sta     HIGHDS
00D340  1  84 A5                sty     HIGHDS+1
00D342  1  60                   rts
00D343  1               ; ----------------------------------------------------------------------------
00D343  1               NEG32768:
00D343  1  90 80 00 00          .byte   $90,$80,$00,$00
00D347  1               ; ----------------------------------------------------------------------------
00D347  1               ; EVALUATE NUMERIC FORMULA AT TXTPTR
00D347  1               ; CONVERTING RESULT TO INTEGER 0 <= X <= 32767
00D347  1               ; IN FAC+3,4
00D347  1               ; ----------------------------------------------------------------------------
00D347  1               MAKINT:
00D347  1  20 D6 00             jsr     CHRGET
00D34A  1  20 F9 CF             jsr     FRMNUM
00D34D  1               ; ----------------------------------------------------------------------------
00D34D  1               ; CONVERT FAC TO INTEGER
00D34D  1               ; MUST BE POSITIVE AND LESS THAN 32768
00D34D  1               ; ----------------------------------------------------------------------------
00D34D  1               MKINT:
00D34D  1  A5 B0                lda     FACSIGN
00D34F  1  30 0D                bmi     MI1
00D351  1               ; ----------------------------------------------------------------------------
00D351  1               ; CONVERT FAC TO INTEGER
00D351  1               ; MUST BE -32767 <= FAC <= 32767
00D351  1               ; ----------------------------------------------------------------------------
00D351  1               AYINT:
00D351  1  A5 AC                lda     FAC
00D353  1  C9 90                cmp     #$90
00D355  1  90 09                bcc     MI2
00D357  1  A9 43                lda     #<NEG32768
00D359  1  A0 D3                ldy     #>NEG32768
00D35B  1  20 44 DD             jsr     FCOMP
00D35E  1               MI1:
00D35E  1  D0 74                bne     IQERR
00D360  1               MI2:
00D360  1  4C 7D DD             jmp     QINT
00D363  1               ; ----------------------------------------------------------------------------
00D363  1               ; LOCATE ARRAY ELEMENT OR CREATE AN ARRAY
00D363  1               ; ----------------------------------------------------------------------------
00D363  1               ARRAY:
00D363  1  A5 5E                lda     DIMFLG
00D365  1  48                   pha
00D366  1  A5 5F                lda     VALTYP
00D368  1  48                   pha
00D369  1  A0 00                ldy     #$00
00D36B  1               L2FDE:
00D36B  1  98                   tya
00D36C  1  48                   pha
00D36D  1  A5 94                lda     VARNAM+1
00D36F  1  48                   pha
00D370  1  A5 93                lda     VARNAM
00D372  1  48                   pha
00D373  1  20 47 D3             jsr     MAKINT
00D376  1  68                   pla
00D377  1  85 93                sta     VARNAM
00D379  1  68                   pla
00D37A  1  85 94                sta     VARNAM+1
00D37C  1  68                   pla
00D37D  1  A8                   tay
00D37E  1  BA                   tsx
00D37F  1  BD 02 01             lda     STACK+2,x
00D382  1  48                   pha
00D383  1  BD 01 01             lda     STACK+1,x
00D386  1  48                   pha
00D387  1  A5 AE                lda     FAC_LAST-1
00D389  1  9D 02 01             sta     STACK+2,x
00D38C  1  A5 AF                lda     FAC_LAST
00D38E  1  9D 01 01             sta     STACK+1,x
00D391  1  C8                   iny
00D392  1  20 DC 00             jsr     CHRGOT
00D395  1  C9 2C                cmp     #$2C
00D397  1  F0 D2                beq     L2FDE
00D399  1  84 5D                sty     EOLPNTR
00D39B  1  20 47 D1             jsr     CHKCLS
00D39E  1  68                   pla
00D39F  1  85 5F                sta     VALTYP
00D3A1  1  68                   pla
00D3A2  1  85 5E                sta     DIMFLG
00D3A4  1               ; ----------------------------------------------------------------------------
00D3A4  1               ; SEARCH ARRAY TABLE FOR THIS ARRAY NAME
00D3A4  1               ; ----------------------------------------------------------------------------
00D3A4  1  A6 7D                ldx     ARYTAB
00D3A6  1  A5 7E                lda     ARYTAB+1
00D3A8  1               L301F:
00D3A8  1  86 AA                stx     LOWTR
00D3AA  1  85 AB                sta     LOWTR+1
00D3AC  1  C5 80                cmp     STREND+1
00D3AE  1  D0 04                bne     L302B
00D3B0  1  E4 7F                cpx     STREND
00D3B2  1  F0 39                beq     MAKE_NEW_ARRAY
00D3B4  1               L302B:
00D3B4  1  A0 00                ldy     #$00
00D3B6  1  B1 AA                lda     (LOWTR),y
00D3B8  1  C8                   iny
00D3B9  1  C5 93                cmp     VARNAM
00D3BB  1  D0 06                bne     L303A
00D3BD  1  A5 94                lda     VARNAM+1
00D3BF  1  D1 AA                cmp     (LOWTR),y
00D3C1  1  F0 16                beq     USE_OLD_ARRAY
00D3C3  1               L303A:
00D3C3  1  C8                   iny
00D3C4  1  B1 AA                lda     (LOWTR),y
00D3C6  1  18                   clc
00D3C7  1  65 AA                adc     LOWTR
00D3C9  1  AA                   tax
00D3CA  1  C8                   iny
00D3CB  1  B1 AA                lda     (LOWTR),y
00D3CD  1  65 AB                adc     LOWTR+1
00D3CF  1  90 D7                bcc     L301F
00D3D1  1               ; ----------------------------------------------------------------------------
00D3D1  1               ; ERROR:  BAD SUBSCRIPTS
00D3D1  1               ; ----------------------------------------------------------------------------
00D3D1  1               SUBERR:
00D3D1  1  A2 10                ldx     #ERR_BADSUBS
00D3D3  1  2C                   .byte   $2C
00D3D4  1               ; ----------------------------------------------------------------------------
00D3D4  1               ; ERROR:  ILLEGAL QUANTITY
00D3D4  1               ; ----------------------------------------------------------------------------
00D3D4  1               IQERR:
00D3D4  1  A2 08                ldx     #ERR_ILLQTY
00D3D6  1               JER:
00D3D6  1  4C A6 C7             jmp     ERROR
00D3D9  1               ; ----------------------------------------------------------------------------
00D3D9  1               ; FOUND THE ARRAY
00D3D9  1               ; ----------------------------------------------------------------------------
00D3D9  1               USE_OLD_ARRAY:
00D3D9  1  A2 12                ldx     #ERR_REDIMD
00D3DB  1  A5 5E                lda     DIMFLG
00D3DD  1  D0 F7                bne     JER
00D3DF  1  20 32 D3             jsr     GETARY
00D3E2  1  A5 5D                lda     EOLPNTR
00D3E4  1  A0 04                ldy     #$04
00D3E6  1  D1 AA                cmp     (LOWTR),y
00D3E8  1  D0 E7                bne     SUBERR
00D3EA  1  4C 70 D4             jmp     FIND_ARRAY_ELEMENT
00D3ED  1               ; ----------------------------------------------------------------------------
00D3ED  1               ; CREATE A NEW ARRAY, UNLESS CALLED FROM GETARYPT
00D3ED  1               ; ----------------------------------------------------------------------------
00D3ED  1               MAKE_NEW_ARRAY:
00D3ED  1  20 32 D3             jsr     GETARY
00D3F0  1  20 77 C7             jsr     REASON
00D3F3  1  A9 00                lda     #$00
00D3F5  1  A8                   tay
00D3F6  1  85 BB                sta     STRNG2+1
00D3F8  1  A2 04                ldx     #BYTES_PER_ELEMENT
00D3FA  1  86 BA                stx     STRNG2
00D3FC  1  A5 93                lda     VARNAM
00D3FE  1  91 AA                sta     (LOWTR),y
00D400  1  C8                   iny
00D401  1  A5 94                lda     VARNAM+1
00D403  1  91 AA                sta     (LOWTR),y
00D405  1  A5 5D                lda     EOLPNTR
00D407  1  C8                   iny
00D408  1  C8                   iny
00D409  1  C8                   iny
00D40A  1  91 AA                sta     (LOWTR),y
00D40C  1               L308A:
00D40C  1  A2 0B                ldx     #$0B
00D40E  1  A9 00                lda     #$00
00D410  1  24 5E                bit     DIMFLG
00D412  1  50 08                bvc     L309A
00D414  1  68                   pla
00D415  1  18                   clc
00D416  1  69 01                adc     #$01
00D418  1  AA                   tax
00D419  1  68                   pla
00D41A  1  69 00                adc     #$00
00D41C  1               L309A:
00D41C  1  C8                   iny
00D41D  1  91 AA                sta     (LOWTR),y
00D41F  1  C8                   iny
00D420  1  8A                   txa
00D421  1  91 AA                sta     (LOWTR),y
00D423  1  20 C8 D4             jsr     MULTIPLY_SUBSCRIPT
00D426  1  86 BA                stx     STRNG2
00D428  1  85 BB                sta     STRNG2+1
00D42A  1  A4 71                ldy     INDEX
00D42C  1  C6 5D                dec     EOLPNTR
00D42E  1  D0 DC                bne     L308A
00D430  1  65 A5                adc     HIGHDS+1
00D432  1  B0 5D                bcs     GME
00D434  1  85 A5                sta     HIGHDS+1
00D436  1  A8                   tay
00D437  1  8A                   txa
00D438  1  65 A4                adc     HIGHDS
00D43A  1  90 03                bcc     L30BD
00D43C  1  C8                   iny
00D43D  1  F0 52                beq     GME
00D43F  1               L30BD:
00D43F  1  20 77 C7             jsr     REASON
00D442  1  85 7F                sta     STREND
00D444  1  84 80                sty     STREND+1
00D446  1  A9 00                lda     #$00
00D448  1  E6 BB                inc     STRNG2+1
00D44A  1  A4 BA                ldy     STRNG2
00D44C  1  F0 05                beq     L30D1
00D44E  1               L30CC:
00D44E  1  88                   dey
00D44F  1  91 A4                sta     (HIGHDS),y
00D451  1  D0 FB                bne     L30CC
00D453  1               L30D1:
00D453  1  C6 A5                dec     HIGHDS+1
00D455  1  C6 BB                dec     STRNG2+1
00D457  1  D0 F5                bne     L30CC
00D459  1  E6 A5                inc     HIGHDS+1
00D45B  1  38                   sec
00D45C  1  A5 7F                lda     STREND
00D45E  1  E5 AA                sbc     LOWTR
00D460  1  A0 02                ldy     #$02
00D462  1  91 AA                sta     (LOWTR),y
00D464  1  A5 80                lda     STREND+1
00D466  1  C8                   iny
00D467  1  E5 AB                sbc     LOWTR+1
00D469  1  91 AA                sta     (LOWTR),y
00D46B  1  A5 5E                lda     DIMFLG
00D46D  1  D0 58                bne     RTS9
00D46F  1  C8                   iny
00D470  1               ; ----------------------------------------------------------------------------
00D470  1               ; FIND SPECIFIED ARRAY ELEMENT
00D470  1               ;
00D470  1               ; (LOWTR),Y POINTS AT # OF DIMS IN ARRAY DESCRIPTOR
00D470  1               ; THE SUBSCRIPTS ARE ALL ON THE STACK AS INTEGERS
00D470  1               ; ----------------------------------------------------------------------------
00D470  1               FIND_ARRAY_ELEMENT:
00D470  1  B1 AA                lda     (LOWTR),y
00D472  1  85 5D                sta     EOLPNTR
00D474  1  A9 00                lda     #$00
00D476  1  85 BA                sta     STRNG2
00D478  1               L30F6:
00D478  1  85 BB                sta     STRNG2+1
00D47A  1  C8                   iny
00D47B  1  68                   pla
00D47C  1  AA                   tax
00D47D  1  85 AE                sta     FAC_LAST-1
00D47F  1  68                   pla
00D480  1  85 AF                sta     FAC_LAST
00D482  1  D1 AA                cmp     (LOWTR),y
00D484  1  90 0E                bcc     FAE2
00D486  1  D0 06                bne     GSE
00D488  1  C8                   iny
00D489  1  8A                   txa
00D48A  1  D1 AA                cmp     (LOWTR),y
00D48C  1  90 07                bcc     FAE3
00D48E  1               ; ----------------------------------------------------------------------------
00D48E  1               GSE:
00D48E  1  4C D1 D3             jmp     SUBERR
00D491  1               GME:
00D491  1  4C A4 C7             jmp     MEMERR
00D494  1               ; ----------------------------------------------------------------------------
00D494  1               FAE2:
00D494  1  C8                   iny
00D495  1               FAE3:
00D495  1  A5 BB                lda     STRNG2+1
00D497  1  05 BA                ora     STRNG2
00D499  1  18                   clc
00D49A  1  F0 0A                beq     L3124
00D49C  1  20 C8 D4             jsr     MULTIPLY_SUBSCRIPT
00D49F  1  8A                   txa
00D4A0  1  65 AE                adc     FAC_LAST-1
00D4A2  1  AA                   tax
00D4A3  1  98                   tya
00D4A4  1  A4 71                ldy     INDEX
00D4A6  1               L3124:
00D4A6  1  65 AF                adc     FAC_LAST
00D4A8  1  86 BA                stx     STRNG2
00D4AA  1  C6 5D                dec     EOLPNTR
00D4AC  1  D0 CA                bne     L30F6
00D4AE  1  06 BA                asl     STRNG2
00D4B0  1  2A                   rol     a
00D4B1  1  B0 DB                bcs     GSE
00D4B3  1  06 BA                asl     STRNG2
00D4B5  1  2A                   rol     a
00D4B6  1  B0 D6                bcs     GSE
00D4B8  1  A8                   tay
00D4B9  1  A5 BA                lda     STRNG2
00D4BB  1  65 A4                adc     HIGHDS
00D4BD  1  85 95                sta     VARPNT
00D4BF  1  98                   tya
00D4C0  1  65 A5                adc     HIGHDS+1
00D4C2  1  85 96                sta     VARPNT+1
00D4C4  1  A8                   tay
00D4C5  1  A5 95                lda     VARPNT
00D4C7  1               RTS9:
00D4C7  1  60                   rts
00D4C8  1               ; ----------------------------------------------------------------------------
00D4C8  1               ; MULTIPLY (STRNG2) BY ((LOWTR),Y)
00D4C8  1               ; LEAVING PRODUCT IN A,X.  (HI-BYTE ALSO IN Y.)
00D4C8  1               ; USED ONLY BY ARRAY SUBSCRIPT ROUTINES
00D4C8  1               ; ----------------------------------------------------------------------------
00D4C8  1               MULTIPLY_SUBSCRIPT:
00D4C8  1  84 71                sty     INDEX
00D4CA  1  B1 AA                lda     (LOWTR),y
00D4CC  1  85 76                sta     RESULT_LAST-2
00D4CE  1  88                   dey
00D4CF  1  B1 AA                lda     (LOWTR),y
00D4D1  1  85 77                sta     RESULT_LAST-1
00D4D3  1  A9 10                lda     #$10
00D4D5  1  85 A8                sta     INDX
00D4D7  1  A2 00                ldx     #$00
00D4D9  1  A0 00                ldy     #$00
00D4DB  1               L3163:
00D4DB  1  8A                   txa
00D4DC  1  0A                   asl     a
00D4DD  1  AA                   tax
00D4DE  1  98                   tya
00D4DF  1  2A                   rol     a
00D4E0  1  A8                   tay
00D4E1  1  B0 AE                bcs     GME
00D4E3  1  06 BA                asl     STRNG2
00D4E5  1  26 BB                rol     STRNG2+1
00D4E7  1  90 0B                bcc     L317C
00D4E9  1  18                   clc
00D4EA  1  8A                   txa
00D4EB  1  65 76                adc     RESULT_LAST-2
00D4ED  1  AA                   tax
00D4EE  1  98                   tya
00D4EF  1  65 77                adc     RESULT_LAST-1
00D4F1  1  A8                   tay
00D4F2  1  B0 9D                bcs     GME
00D4F4  1               L317C:
00D4F4  1  C6 A8                dec     INDX
00D4F6  1  D0 E3                bne     L3163
00D4F8  1  60                   rts
00D4F9  1               ; ----------------------------------------------------------------------------
00D4F9  1               ; "FRE" FUNCTION
00D4F9  1               ;
00D4F9  1               ; COLLECTS GARBAGE AND RETURNS # BYTES OF MEMORY LEFT
00D4F9  1               ; ----------------------------------------------------------------------------
00D4F9  1               FRE:
00D4F9  1  A5 5F                lda     VALTYP
00D4FB  1  F0 03                beq     L3188
00D4FD  1  20 02 D8             jsr     FREFAC
00D500  1               L3188:
00D500  1  20 93 D6             jsr     GARBAG
00D503  1  38                   sec
00D504  1  A5 81                lda     FRETOP
00D506  1  E5 7F                sbc     STREND
00D508  1  A8                   tay
00D509  1  A5 82                lda     FRETOP+1
00D50B  1  E5 80                sbc     STREND+1
00D50D  1               ; FALL INTO GIVAYF TO FLOAT THE VALUE
00D50D  1               ; NOTE THAT VALUES OVER 32767 WILL RETURN AS NEGATIVE
00D50D  1               ; ----------------------------------------------------------------------------
00D50D  1               ; FLOAT THE SIGNED INTEGER IN A,Y
00D50D  1               ; ----------------------------------------------------------------------------
00D50D  1               GIVAYF:
00D50D  1  A2 00                ldx     #$00
00D50F  1  86 5F                stx     VALTYP
00D511  1  85 AD                sta     FAC+1
00D513  1  84 AE                sty     FAC+2
00D515  1  A2 90                ldx     #$90
00D517  1  4C 2F DD             jmp     FLOAT1
00D51A  1               POS:
00D51A  1  A4 0E                ldy     POSX
00D51C  1               ; ----------------------------------------------------------------------------
00D51C  1               ; FLOAT (Y) INTO FAC, GIVING VALUE 0-255
00D51C  1               ; ----------------------------------------------------------------------------
00D51C  1               SNGFLT:
00D51C  1  A9 00                lda     #$00
00D51E  1  F0 ED                beq     GIVAYF
00D520  1               ; ----------------------------------------------------------------------------
00D520  1               ; CHECK FOR DIRECT OR RUNNING MODE
00D520  1               ; GIVING ERROR IF DIRECT MODE
00D520  1               ; ----------------------------------------------------------------------------
00D520  1               ERRDIR:
00D520  1  A6 88                ldx     CURLIN+1
00D522  1  E8                   inx
00D523  1  D0 A2                bne     RTS9
00D525  1  A2 16                ldx     #ERR_ILLDIR
00D527  1               L31AF:
00D527  1  4C A6 C7             jmp     ERROR
00D52A  1               DEF:
00D52A  1  20 57 D5             jsr     FNC
00D52D  1  20 20 D5             jsr     ERRDIR
00D530  1  20 4A D1             jsr     CHKOPN
00D533  1  A9 80                lda     #$80
00D535  1  85 61                sta     SUBFLG
00D537  1  20 57 D2             jsr     PTRGET
00D53A  1  20 FC CF             jsr     CHKNUM
00D53D  1  20 47 D1             jsr     CHKCLS
00D540  1  A9 AB                lda     #TOKEN_EQUAL
00D542  1  20 4F D1             jsr     SYNCHR
00D545  1  A5 96                lda     VARPNT+1
00D547  1  48                   pha
00D548  1  A5 95                lda     VARPNT
00D54A  1  48                   pha
00D54B  1  A5 DE                lda     TXTPTR+1
00D54D  1  48                   pha
00D54E  1  A5 DD                lda     TXTPTR
00D550  1  48                   pha
00D551  1  20 58 CC             jsr     DATA
00D554  1  4C C6 D5             jmp     L3250
00D557  1               FNC:
00D557  1  A9 9E                lda     #TOKEN_FN
00D559  1  20 4F D1             jsr     SYNCHR
00D55C  1  09 80                ora     #$80
00D55E  1  85 61                sta     SUBFLG
00D560  1  20 5E D2             jsr     PTRGET3
00D563  1  85 9C                sta     FNCNAM
00D565  1  84 9D                sty     FNCNAM+1
00D567  1  4C FC CF             jmp     CHKNUM
00D56A  1               L31F3:
00D56A  1  20 57 D5             jsr     FNC
00D56D  1  A5 9D                lda     FNCNAM+1
00D56F  1  48                   pha
00D570  1  A5 9C                lda     FNCNAM
00D572  1  48                   pha
00D573  1  20 41 D1             jsr     PARCHK
00D576  1  20 FC CF             jsr     CHKNUM
00D579  1  68                   pla
00D57A  1  85 9C                sta     FNCNAM
00D57C  1  68                   pla
00D57D  1  85 9D                sta     FNCNAM+1
00D57F  1  A0 02                ldy     #$02
00D581  1  A2 20                ldx     #ERR_UNDEFFN
00D583  1  B1 9C                lda     (FNCNAM),y
00D585  1  F0 A0                beq     L31AF
00D587  1  85 95                sta     VARPNT
00D589  1  AA                   tax
00D58A  1  C8                   iny
00D58B  1  B1 9C                lda     (FNCNAM),y
00D58D  1  85 96                sta     VARPNT+1
00D58F  1               L3219:
00D58F  1  B1 95                lda     (VARPNT),y
00D591  1  48                   pha
00D592  1  88                   dey
00D593  1  10 FA                bpl     L3219
00D595  1  A4 96                ldy     VARPNT+1
00D597  1  20 C4 DC             jsr     STORE_FAC_AT_YX_ROUNDED
00D59A  1  A5 DE                lda     TXTPTR+1
00D59C  1  48                   pha
00D59D  1  A5 DD                lda     TXTPTR
00D59F  1  48                   pha
00D5A0  1  B1 9C                lda     (FNCNAM),y
00D5A2  1  85 DD                sta     TXTPTR
00D5A4  1  C8                   iny
00D5A5  1  B1 9C                lda     (FNCNAM),y
00D5A7  1  85 DE                sta     TXTPTR+1
00D5A9  1  A5 96                lda     VARPNT+1
00D5AB  1  48                   pha
00D5AC  1  A5 95                lda     VARPNT
00D5AE  1  48                   pha
00D5AF  1  20 F9 CF             jsr     FRMNUM
00D5B2  1  68                   pla
00D5B3  1  85 9C                sta     FNCNAM
00D5B5  1  68                   pla
00D5B6  1  85 9D                sta     FNCNAM+1
00D5B8  1  20 DC 00             jsr     CHRGOT
00D5BB  1  F0 03                beq     L324A
00D5BD  1  4C 58 D1             jmp     SYNERR
00D5C0  1               L324A:
00D5C0  1  68                   pla
00D5C1  1  85 DD                sta     TXTPTR
00D5C3  1  68                   pla
00D5C4  1  85 DE                sta     TXTPTR+1
00D5C6  1               L3250:
00D5C6  1  A0 00                ldy     #$00
00D5C8  1  68                   pla
00D5C9  1  91 9C                sta     (FNCNAM),y
00D5CB  1  68                   pla
00D5CC  1  C8                   iny
00D5CD  1  91 9C                sta     (FNCNAM),y
00D5CF  1  68                   pla
00D5D0  1  C8                   iny
00D5D1  1  91 9C                sta     (FNCNAM),y
00D5D3  1  68                   pla
00D5D4  1  C8                   iny
00D5D5  1  91 9C                sta     (FNCNAM),y
00D5D7  1  60                   rts
00D5D8  1               ; ----------------------------------------------------------------------------
00D5D8  1               ; "STR$" FUNCTION
00D5D8  1               ; ----------------------------------------------------------------------------
00D5D8  1               STR:
00D5D8  1  20 FC CF             jsr     CHKNUM
00D5DB  1  A0 00                ldy     #$00
00D5DD  1  20 BC DE             jsr     FOUT1
00D5E0  1  68                   pla
00D5E1  1  68                   pla
00D5E2  1  A9 FF                lda     #$FF
00D5E4  1  A0 00                ldy     #$00
00D5E6  1  F0 12                beq     STRLIT
00D5E8  1               ; ----------------------------------------------------------------------------
00D5E8  1               ; GET SPACE AND MAKE DESCRIPTOR FOR STRING WHOSE
00D5E8  1               ; ADDRESS IS IN FAC+3,4 AND WHOSE LENGTH IS IN A-REG
00D5E8  1               ; ----------------------------------------------------------------------------
00D5E8  1               STRINI:
00D5E8  1  A6 AE                ldx     FAC_LAST-1
00D5EA  1  A4 AF                ldy     FAC_LAST
00D5EC  1  86 9E                stx     DSCPTR
00D5EE  1  84 9F                sty     DSCPTR+1
00D5F0  1               ; ----------------------------------------------------------------------------
00D5F0  1               ; GET SPACE AND MAKE DESCRIPTOR FOR STRING WHOSE
00D5F0  1               ; ADDRESS IS IN Y,X AND WHOSE LENGTH IS IN A-REG
00D5F0  1               ; ----------------------------------------------------------------------------
00D5F0  1               STRSPA:
00D5F0  1  20 61 D6             jsr     GETSPA
00D5F3  1  86 AD                stx     FAC+1
00D5F5  1  84 AE                sty     FAC+2
00D5F7  1  85 AC                sta     FAC
00D5F9  1  60                   rts
00D5FA  1               ; ----------------------------------------------------------------------------
00D5FA  1               ; BUILD A DESCRIPTOR FOR STRING STARTING AT Y,A
00D5FA  1               ; AND TERMINATED BY $00 OR QUOTATION MARK
00D5FA  1               ; RETURN WITH DESCRIPTOR IN A TEMPORARY
00D5FA  1               ; AND ADDRESS OF DESCRIPTOR IN FAC+3,4
00D5FA  1               ; ----------------------------------------------------------------------------
00D5FA  1               STRLIT:
00D5FA  1  A2 22                ldx     #$22
00D5FC  1  86 5B                stx     CHARAC
00D5FE  1  86 5C                stx     ENDCHR
00D600  1               ; ----------------------------------------------------------------------------
00D600  1               ; BUILD A DESCRIPTOR FOR STRING STARTING AT Y,A
00D600  1               ; AND TERMINATED BY $00, (CHARAC), OR (ENDCHR)
00D600  1               ;
00D600  1               ; RETURN WITH DESCRIPTOR IN A TEMPORARY
00D600  1               ; AND ADDRESS OF DESCRIPTOR IN FAC+3,4
00D600  1               ; ----------------------------------------------------------------------------
00D600  1               STRLT2:
00D600  1  85 B8                sta     STRNG1
00D602  1  84 B9                sty     STRNG1+1
00D604  1  85 AD                sta     FAC+1
00D606  1  84 AE                sty     FAC+2
00D608  1  A0 FF                ldy     #$FF
00D60A  1               L3298:
00D60A  1  C8                   iny
00D60B  1  B1 B8                lda     (STRNG1),y
00D60D  1  F0 0C                beq     L32A9
00D60F  1  C5 5B                cmp     CHARAC
00D611  1  F0 04                beq     L32A5
00D613  1  C5 5C                cmp     ENDCHR
00D615  1  D0 F3                bne     L3298
00D617  1               L32A5:
00D617  1  C9 22                cmp     #$22
00D619  1  F0 01                beq     L32AA
00D61B  1               L32A9:
00D61B  1  18                   clc
00D61C  1               L32AA:
00D61C  1  84 AC                sty     FAC
00D61E  1  98                   tya
00D61F  1  65 B8                adc     STRNG1
00D621  1  85 BA                sta     STRNG2
00D623  1  A6 B9                ldx     STRNG1+1
00D625  1  90 01                bcc     L32B6
00D627  1  E8                   inx
00D628  1               L32B6:
00D628  1  86 BB                stx     STRNG2+1
00D62A  1  A5 B9                lda     STRNG1+1
00D62C  1  D0 0B                bne     PUTNEW
00D62E  1  98                   tya
00D62F  1  20 E8 D5             jsr     STRINI
00D632  1  A6 B8                ldx     STRNG1
00D634  1  A4 B9                ldy     STRNG1+1
00D636  1  20 E4 D7             jsr     MOVSTR
00D639  1               ; ----------------------------------------------------------------------------
00D639  1               ; STORE DESCRIPTOR IN TEMPORARY DESCRIPTOR STACK
00D639  1               ;
00D639  1               ; THE DESCRIPTOR IS NOW IN FAC, FAC+1, FAC+2
00D639  1               ; PUT ADDRESS OF TEMP DESCRIPTOR IN FAC+3,4
00D639  1               ; ----------------------------------------------------------------------------
00D639  1               PUTNEW:
00D639  1  A6 65                ldx     TEMPPT
00D63B  1  E0 71                cpx     #TEMPST+9
00D63D  1  D0 05                bne     PUTEMP
00D63F  1  A2 1C                ldx     #ERR_FRMCPX
00D641  1               JERR:
00D641  1  4C A6 C7             jmp     ERROR
00D644  1               PUTEMP:
00D644  1  A5 AC                lda     FAC
00D646  1  95 00                sta     0,x
00D648  1  A5 AD                lda     FAC+1
00D64A  1  95 01                sta     1,x
00D64C  1  A5 AE                lda     FAC+2
00D64E  1  95 02                sta     2,x
00D650  1  A0 00                ldy     #$00
00D652  1  86 AE                stx     FAC_LAST-1
00D654  1  84 AF                sty     FAC_LAST
00D656  1  88                   dey
00D657  1  84 5F                sty     VALTYP
00D659  1  86 66                stx     LASTPT
00D65B  1  E8                   inx
00D65C  1  E8                   inx
00D65D  1  E8                   inx
00D65E  1  86 65                stx     TEMPPT
00D660  1  60                   rts
00D661  1               ; ----------------------------------------------------------------------------
00D661  1               ; MAKE SPACE FOR STRING AT BOTTOM OF STRING SPACE
00D661  1               ; (A)=# BYTES SPACE TO MAKE
00D661  1               ;
00D661  1               ; RETURN WITH (A) SAME,
00D661  1               ;	AND Y,X = ADDRESS OF SPACE ALLOCATED
00D661  1               ; ----------------------------------------------------------------------------
00D661  1               GETSPA:
00D661  1  46 60                lsr     DATAFLG
00D663  1               L32F1:
00D663  1  48                   pha
00D664  1  49 FF                eor     #$FF
00D666  1  38                   sec
00D667  1  65 81                adc     FRETOP
00D669  1  A4 82                ldy     FRETOP+1
00D66B  1  B0 01                bcs     L32FC
00D66D  1  88                   dey
00D66E  1               L32FC:
00D66E  1  C4 80                cpy     STREND+1
00D670  1  90 11                bcc     L3311
00D672  1  D0 04                bne     L3306
00D674  1  C5 7F                cmp     STREND
00D676  1  90 0B                bcc     L3311
00D678  1               L3306:
00D678  1  85 81                sta     FRETOP
00D67A  1  84 82                sty     FRETOP+1
00D67C  1  85 83                sta     FRESPC
00D67E  1  84 84                sty     FRESPC+1
00D680  1  AA                   tax
00D681  1  68                   pla
00D682  1  60                   rts
00D683  1               L3311:
00D683  1  A2 0C                ldx     #ERR_MEMFULL
00D685  1  A5 60                lda     DATAFLG
00D687  1  30 B8                bmi     JERR
00D689  1  20 93 D6             jsr     GARBAG
00D68C  1  A9 80                lda     #$80
00D68E  1  85 60                sta     DATAFLG
00D690  1  68                   pla
00D691  1  D0 D0                bne     L32F1
00D693  1               ; ----------------------------------------------------------------------------
00D693  1               ; SHOVE ALL REFERENCED STRINGS AS HIGH AS POSSIBLE
00D693  1               ; IN MEMORY (AGAINST HIMEM), FREEING UP SPACE
00D693  1               ; BELOW STRING AREA DOWN TO STREND.
00D693  1               ; ----------------------------------------------------------------------------
00D693  1               GARBAG:
00D693  1  A6 85                ldx     MEMSIZ
00D695  1  A5 86                lda     MEMSIZ+1
00D697  1               FINDHIGHESTSTRING:
00D697  1  86 81                stx     FRETOP
00D699  1  85 82                sta     FRETOP+1
00D69B  1  A0 00                ldy     #$00
00D69D  1  84 9D                sty     FNCNAM+1
00D69F  1  A5 7F                lda     STREND
00D6A1  1  A6 80                ldx     STREND+1
00D6A3  1  85 AA                sta     LOWTR
00D6A5  1  86 AB                stx     LOWTR+1
00D6A7  1  A9 68                lda     #TEMPST
00D6A9  1  A2 00                ldx     #$00
00D6AB  1  85 71                sta     INDEX
00D6AD  1  86 72                stx     INDEX+1
00D6AF  1               L333D:
00D6AF  1  C5 65                cmp     TEMPPT
00D6B1  1  F0 05                beq     L3346
00D6B3  1  20 25 D7             jsr     CHECK_VARIABLE
00D6B6  1  F0 F7                beq     L333D
00D6B8  1               L3346:
00D6B8  1  A9 06                lda     #BYTES_PER_VARIABLE
00D6BA  1  85 A0                sta     DSCLEN
00D6BC  1  A5 7B                lda     VARTAB
00D6BE  1  A6 7C                ldx     VARTAB+1
00D6C0  1  85 71                sta     INDEX
00D6C2  1  86 72                stx     INDEX+1
00D6C4  1               L3352:
00D6C4  1  E4 7E                cpx     ARYTAB+1
00D6C6  1  D0 04                bne     L335A
00D6C8  1  C5 7D                cmp     ARYTAB
00D6CA  1  F0 05                beq     L335F
00D6CC  1               L335A:
00D6CC  1  20 1F D7             jsr     CHECK_SIMPLE_VARIABLE
00D6CF  1  F0 F3                beq     L3352
00D6D1  1               L335F:
00D6D1  1  85 A4                sta     HIGHDS
00D6D3  1  86 A5                stx     HIGHDS+1
00D6D5  1  A9 03                lda     #$03	; OSI GC bugfix -> $04 ???
00D6D7  1  85 A0                sta     DSCLEN
00D6D9  1               L3367:
00D6D9  1  A5 A4                lda     HIGHDS
00D6DB  1  A6 A5                ldx     HIGHDS+1
00D6DD  1               L336B:
00D6DD  1  E4 80                cpx     STREND+1
00D6DF  1  D0 07                bne     L3376
00D6E1  1  C5 7F                cmp     STREND
00D6E3  1  D0 03                bne     L3376
00D6E5  1  4C 64 D7             jmp     MOVE_HIGHEST_STRING_TO_TOP
00D6E8  1               L3376:
00D6E8  1  85 71                sta     INDEX
00D6EA  1  86 72                stx     INDEX+1
00D6EC  1  A0 01                ldy     #$01
00D6EE  1  B1 71                lda     (INDEX),y
00D6F0  1  08                   php
00D6F1  1  C8                   iny
00D6F2  1  B1 71                lda     (INDEX),y
00D6F4  1  65 A4                adc     HIGHDS
00D6F6  1  85 A4                sta     HIGHDS
00D6F8  1  C8                   iny
00D6F9  1  B1 71                lda     (INDEX),y
00D6FB  1  65 A5                adc     HIGHDS+1
00D6FD  1  85 A5                sta     HIGHDS+1
00D6FF  1  28                   plp
00D700  1  10 D7                bpl     L3367
00D702  1  C8                   iny
00D703  1  B1 71                lda     (INDEX),y
00D705  1  0A                   asl     a
00D706  1  69 05                adc     #$05
00D708  1  65 71                adc     INDEX
00D70A  1  85 71                sta     INDEX
00D70C  1  90 02                bcc     L33A7
00D70E  1  E6 72                inc     INDEX+1
00D710  1               L33A7:
00D710  1  A6 72                ldx     INDEX+1
00D712  1               L33A9:
00D712  1  E4 A5                cpx     HIGHDS+1
00D714  1  D0 04                bne     L33B1
00D716  1  C5 A4                cmp     HIGHDS
00D718  1  F0 C3                beq     L336B
00D71A  1               L33B1:
00D71A  1  20 25 D7             jsr     CHECK_VARIABLE
00D71D  1  F0 F3                beq     L33A9
00D71F  1               ; ----------------------------------------------------------------------------
00D71F  1               ; PROCESS A SIMPLE VARIABLE
00D71F  1               ; ----------------------------------------------------------------------------
00D71F  1               CHECK_SIMPLE_VARIABLE:
00D71F  1  C8                   iny
00D720  1  B1 71                lda     (INDEX),y
00D722  1  10 30                bpl     CHECK_BUMP
00D724  1  C8                   iny
00D725  1               ; ----------------------------------------------------------------------------
00D725  1               ; IF STRING IS NOT EMPTY, CHECK IF IT IS HIGHEST
00D725  1               ; ----------------------------------------------------------------------------
00D725  1               CHECK_VARIABLE:
00D725  1  B1 71                lda     (INDEX),y
00D727  1  F0 2B                beq     CHECK_BUMP
00D729  1  C8                   iny
00D72A  1  B1 71                lda     (INDEX),y
00D72C  1  AA                   tax
00D72D  1  C8                   iny
00D72E  1  B1 71                lda     (INDEX),y
00D730  1  C5 82                cmp     FRETOP+1
00D732  1  90 06                bcc     L33D5
00D734  1  D0 1E                bne     CHECK_BUMP
00D736  1  E4 81                cpx     FRETOP
00D738  1  B0 1A                bcs     CHECK_BUMP
00D73A  1               L33D5:
00D73A  1  C5 AB                cmp     LOWTR+1
00D73C  1  90 16                bcc     CHECK_BUMP
00D73E  1  D0 04                bne     L33DF
00D740  1  E4 AA                cpx     LOWTR
00D742  1  90 10                bcc     CHECK_BUMP
00D744  1               L33DF:
00D744  1  86 AA                stx     LOWTR
00D746  1  85 AB                sta     LOWTR+1
00D748  1  A5 71                lda     INDEX
00D74A  1  A6 72                ldx     INDEX+1
00D74C  1  85 9C                sta     FNCNAM
00D74E  1  86 9D                stx     FNCNAM+1
00D750  1  A5 A0                lda     DSCLEN
00D752  1  85 A2                sta     Z52
00D754  1               ; ----------------------------------------------------------------------------
00D754  1               ; ADD (DSCLEN) TO PNTR IN INDEX
00D754  1               ; RETURN WITH Y=0, PNTR ALSO IN X,A
00D754  1               ; ----------------------------------------------------------------------------
00D754  1               CHECK_BUMP:
00D754  1  A5 A0                lda     DSCLEN
00D756  1  18                   clc
00D757  1  65 71                adc     INDEX
00D759  1  85 71                sta     INDEX
00D75B  1  90 02                bcc     L33FA
00D75D  1  E6 72                inc     INDEX+1
00D75F  1               L33FA:
00D75F  1  A6 72                ldx     INDEX+1
00D761  1  A0 00                ldy     #$00
00D763  1  60                   rts
00D764  1               ; ----------------------------------------------------------------------------
00D764  1               ; FOUND HIGHEST NON-EMPTY STRING, SO MOVE IT
00D764  1               ; TO TOP AND GO BACK FOR ANOTHER
00D764  1               ; ----------------------------------------------------------------------------
00D764  1               MOVE_HIGHEST_STRING_TO_TOP:
00D764  1  A6 9D                ldx     FNCNAM+1
00D766  1  F0 F7                beq     L33FA
00D768  1  A5 A2                lda     Z52
00D76A  1  29 04                and     #$04
00D76C  1  4A                   lsr     a
00D76D  1  A8                   tay
00D76E  1  85 A2                sta     Z52
00D770  1  B1 9C                lda     (FNCNAM),y
00D772  1  65 AA                adc     LOWTR
00D774  1  85 A6                sta     HIGHTR
00D776  1  A5 AB                lda     LOWTR+1
00D778  1  69 00                adc     #$00
00D77A  1  85 A7                sta     HIGHTR+1
00D77C  1  A5 81                lda     FRETOP
00D77E  1  A6 82                ldx     FRETOP+1
00D780  1  85 A4                sta     HIGHDS
00D782  1  86 A5                stx     HIGHDS+1
00D784  1  20 2E C7             jsr     BLTU2
00D787  1  A4 A2                ldy     Z52
00D789  1  C8                   iny
00D78A  1  A5 A4                lda     HIGHDS
00D78C  1  91 9C                sta     (FNCNAM),y
00D78E  1  AA                   tax
00D78F  1  E6 A5                inc     HIGHDS+1
00D791  1  A5 A5                lda     HIGHDS+1
00D793  1  C8                   iny
00D794  1  91 9C                sta     (FNCNAM),y
00D796  1  4C 97 D6             jmp     FINDHIGHESTSTRING
00D799  1               ; ----------------------------------------------------------------------------
00D799  1               ; CONCATENATE TWO STRINGS
00D799  1               ; ----------------------------------------------------------------------------
00D799  1               CAT:
00D799  1  A5 AF                lda     FAC_LAST
00D79B  1  48                   pha
00D79C  1  A5 AE                lda     FAC_LAST-1
00D79E  1  48                   pha
00D79F  1  20 EC D0             jsr     FRM_ELEMENT
00D7A2  1  20 FE CF             jsr     CHKSTR
00D7A5  1  68                   pla
00D7A6  1  85 B8                sta     STRNG1
00D7A8  1  68                   pla
00D7A9  1  85 B9                sta     STRNG1+1
00D7AB  1  A0 00                ldy     #$00
00D7AD  1  B1 B8                lda     (STRNG1),y
00D7AF  1  18                   clc
00D7B0  1  71 AE                adc     (FAC_LAST-1),y
00D7B2  1  90 05                bcc     L3454
00D7B4  1  A2 1A                ldx     #ERR_STRLONG
00D7B6  1  4C A6 C7             jmp     ERROR
00D7B9  1               L3454:
00D7B9  1  20 E8 D5             jsr     STRINI
00D7BC  1  20 D6 D7             jsr     MOVINS
00D7BF  1  A5 9E                lda     DSCPTR
00D7C1  1  A4 9F                ldy     DSCPTR+1
00D7C3  1  20 06 D8             jsr     FRETMP
00D7C6  1  20 E8 D7             jsr     MOVSTR1
00D7C9  1  A5 B8                lda     STRNG1
00D7CB  1  A4 B9                ldy     STRNG1+1
00D7CD  1  20 06 D8             jsr     FRETMP
00D7D0  1  20 39 D6             jsr     PUTNEW
00D7D3  1  4C 27 D0             jmp     FRMEVL2
00D7D6  1               ; ----------------------------------------------------------------------------
00D7D6  1               ; GET STRING DESCRIPTOR POINTED AT BY (STRNG1)
00D7D6  1               ; AND MOVE DESCRIBED STRING TO (FRESPC)
00D7D6  1               ; ----------------------------------------------------------------------------
00D7D6  1               MOVINS:
00D7D6  1  A0 00                ldy     #$00
00D7D8  1  B1 B8                lda     (STRNG1),y
00D7DA  1  48                   pha
00D7DB  1  C8                   iny
00D7DC  1  B1 B8                lda     (STRNG1),y
00D7DE  1  AA                   tax
00D7DF  1  C8                   iny
00D7E0  1  B1 B8                lda     (STRNG1),y
00D7E2  1  A8                   tay
00D7E3  1  68                   pla
00D7E4  1               ; ----------------------------------------------------------------------------
00D7E4  1               ; MOVE STRING AT (Y,X) WITH LENGTH (A)
00D7E4  1               ; TO DESTINATION WHOSE ADDRESS IS IN FRESPC,FRESPC+1
00D7E4  1               ; ----------------------------------------------------------------------------
00D7E4  1               MOVSTR:
00D7E4  1  86 71                stx     INDEX
00D7E6  1  84 72                sty     INDEX+1
00D7E8  1               MOVSTR1:
00D7E8  1  A8                   tay
00D7E9  1  F0 0A                beq     L3490
00D7EB  1  48                   pha
00D7EC  1               L3487:
00D7EC  1  88                   dey
00D7ED  1  B1 71                lda     (INDEX),y
00D7EF  1  91 83                sta     (FRESPC),y
00D7F1  1  98                   tya
00D7F2  1  D0 F8                bne     L3487
00D7F4  1  68                   pla
00D7F5  1               L3490:
00D7F5  1  18                   clc
00D7F6  1  65 83                adc     FRESPC
00D7F8  1  85 83                sta     FRESPC
00D7FA  1  90 02                bcc     L3499
00D7FC  1  E6 84                inc     FRESPC+1
00D7FE  1               L3499:
00D7FE  1  60                   rts
00D7FF  1               ; ----------------------------------------------------------------------------
00D7FF  1               ; IF (FAC) IS A TEMPORARY STRING, RELEASE DESCRIPTOR
00D7FF  1               ; ----------------------------------------------------------------------------
00D7FF  1               FRESTR:
00D7FF  1  20 FE CF             jsr     CHKSTR
00D802  1               ; ----------------------------------------------------------------------------
00D802  1               ; IF STRING DESCRIPTOR POINTED TO BY FAC+3,4 IS
00D802  1               ; A TEMPORARY STRING, RELEASE IT.
00D802  1               ; ----------------------------------------------------------------------------
00D802  1               FREFAC:
00D802  1  A5 AE                lda     FAC_LAST-1
00D804  1  A4 AF                ldy     FAC_LAST
00D806  1               ; ----------------------------------------------------------------------------
00D806  1               ; IF STRING DESCRIPTOR WHOSE ADDRESS IS IN Y,A IS
00D806  1               ; A TEMPORARY STRING, RELEASE IT.
00D806  1               ; ----------------------------------------------------------------------------
00D806  1               FRETMP:
00D806  1  85 71                sta     INDEX
00D808  1  84 72                sty     INDEX+1
00D80A  1  20 37 D8             jsr     FRETMS
00D80D  1  08                   php
00D80E  1  A0 00                ldy     #$00
00D810  1  B1 71                lda     (INDEX),y
00D812  1  48                   pha
00D813  1  C8                   iny
00D814  1  B1 71                lda     (INDEX),y
00D816  1  AA                   tax
00D817  1  C8                   iny
00D818  1  B1 71                lda     (INDEX),y
00D81A  1  A8                   tay
00D81B  1  68                   pla
00D81C  1  28                   plp
00D81D  1  D0 13                bne     L34CD
00D81F  1  C4 82                cpy     FRETOP+1
00D821  1  D0 0F                bne     L34CD
00D823  1  E4 81                cpx     FRETOP
00D825  1  D0 0B                bne     L34CD
00D827  1  48                   pha
00D828  1  18                   clc
00D829  1  65 81                adc     FRETOP
00D82B  1  85 81                sta     FRETOP
00D82D  1  90 02                bcc     L34CC
00D82F  1  E6 82                inc     FRETOP+1
00D831  1               L34CC:
00D831  1  68                   pla
00D832  1               L34CD:
00D832  1  86 71                stx     INDEX
00D834  1  84 72                sty     INDEX+1
00D836  1  60                   rts
00D837  1               ; ----------------------------------------------------------------------------
00D837  1               ; RELEASE TEMPORARY DESCRIPTOR IF Y,A = LASTPT
00D837  1               ; ----------------------------------------------------------------------------
00D837  1               FRETMS:
00D837  1  C4 67                cpy     LASTPT+1
00D839  1  D0 0C                bne     L34E2
00D83B  1  C5 66                cmp     LASTPT
00D83D  1  D0 08                bne     L34E2
00D83F  1  85 65                sta     TEMPPT
00D841  1  E9 03                sbc     #$03
00D843  1  85 66                sta     LASTPT
00D845  1  A0 00                ldy     #$00
00D847  1               L34E2:
00D847  1  60                   rts
00D848  1               ; ----------------------------------------------------------------------------
00D848  1               ; "CHR$" FUNCTION
00D848  1               ; ----------------------------------------------------------------------------
00D848  1               CHRSTR:
00D848  1  20 FD D8             jsr     CONINT
00D84B  1  8A                   txa
00D84C  1  48                   pha
00D84D  1  A9 01                lda     #$01
00D84F  1  20 F0 D5             jsr     STRSPA
00D852  1  68                   pla
00D853  1  A0 00                ldy     #$00
00D855  1  91 AD                sta     (FAC+1),y
00D857  1  68                   pla
00D858  1  68                   pla
00D859  1  4C 39 D6             jmp     PUTNEW
00D85C  1               ; ----------------------------------------------------------------------------
00D85C  1               ; "LEFT$" FUNCTION
00D85C  1               ; ----------------------------------------------------------------------------
00D85C  1               LEFTSTR:
00D85C  1  20 BB D8             jsr     SUBSTRING_SETUP
00D85F  1  D1 9E                cmp     (DSCPTR),y
00D861  1  98                   tya
00D862  1               SUBSTRING1:
00D862  1  90 04                bcc     L3503
00D864  1  B1 9E                lda     (DSCPTR),y
00D866  1  AA                   tax
00D867  1  98                   tya
00D868  1               L3503:
00D868  1  48                   pha
00D869  1               SUBSTRING2:
00D869  1  8A                   txa
00D86A  1               SUBSTRING3:
00D86A  1  48                   pha
00D86B  1  20 F0 D5             jsr     STRSPA
00D86E  1  A5 9E                lda     DSCPTR
00D870  1  A4 9F                ldy     DSCPTR+1
00D872  1  20 06 D8             jsr     FRETMP
00D875  1  68                   pla
00D876  1  A8                   tay
00D877  1  68                   pla
00D878  1  18                   clc
00D879  1  65 71                adc     INDEX
00D87B  1  85 71                sta     INDEX
00D87D  1  90 02                bcc     L351C
00D87F  1  E6 72                inc     INDEX+1
00D881  1               L351C:
00D881  1  98                   tya
00D882  1  20 E8 D7             jsr     MOVSTR1
00D885  1  4C 39 D6             jmp     PUTNEW
00D888  1               ; ----------------------------------------------------------------------------
00D888  1               ; "RIGHT$" FUNCTION
00D888  1               ; ----------------------------------------------------------------------------
00D888  1               RIGHTSTR:
00D888  1  20 BB D8             jsr     SUBSTRING_SETUP
00D88B  1  18                   clc
00D88C  1  F1 9E                sbc     (DSCPTR),y
00D88E  1  49 FF                eor     #$FF
00D890  1  4C 62 D8             jmp     SUBSTRING1
00D893  1               ; ----------------------------------------------------------------------------
00D893  1               ; "MID$" FUNCTION
00D893  1               ; ----------------------------------------------------------------------------
00D893  1               MIDSTR:
00D893  1  A9 FF                lda     #$FF
00D895  1  85 AF                sta     FAC_LAST
00D897  1  20 DC 00             jsr     CHRGOT
00D89A  1  C9 29                cmp     #$29
00D89C  1  F0 06                beq     L353F
00D89E  1  20 4D D1             jsr     CHKCOM
00D8A1  1  20 FA D8             jsr     GETBYT
00D8A4  1               L353F:
00D8A4  1  20 BB D8             jsr     SUBSTRING_SETUP
00D8A7  1  CA                   dex
00D8A8  1  8A                   txa
00D8A9  1  48                   pha
00D8AA  1  18                   clc
00D8AB  1  A2 00                ldx     #$00
00D8AD  1  F1 9E                sbc     (DSCPTR),y
00D8AF  1  B0 B8                bcs     SUBSTRING2
00D8B1  1  49 FF                eor     #$FF
00D8B3  1  C5 AF                cmp     FAC_LAST
00D8B5  1  90 B3                bcc     SUBSTRING3
00D8B7  1  A5 AF                lda     FAC_LAST
00D8B9  1  B0 AF                bcs     SUBSTRING3
00D8BB  1               ; ----------------------------------------------------------------------------
00D8BB  1               ; COMMON SETUP ROUTINE FOR LEFT$, RIGHT$, MID$:
00D8BB  1               ; REQUIRE ")"; POP RETURN ADRS, GET DESCRIPTOR
00D8BB  1               ; ADDRESS, GET 1ST PARAMETER OF COMMAND
00D8BB  1               ; ----------------------------------------------------------------------------
00D8BB  1               SUBSTRING_SETUP:
00D8BB  1  20 47 D1             jsr     CHKCLS
00D8BE  1  68                   pla
00D8BF  1  85 A2                sta     JMPADRS+1
00D8C1  1  68                   pla
00D8C2  1  85 A3                sta     JMPADRS+2
00D8C4  1  68                   pla
00D8C5  1  68                   pla
00D8C6  1  68                   pla
00D8C7  1  AA                   tax
00D8C8  1  68                   pla
00D8C9  1  85 9E                sta     DSCPTR
00D8CB  1  68                   pla
00D8CC  1  85 9F                sta     DSCPTR+1
00D8CE  1  A0 00                ldy     #$00
00D8D0  1  8A                   txa
00D8D1  1  F0 21                beq     GOIQ
00D8D3  1  E6 A2                inc     JMPADRS+1
00D8D5  1  6C A2 00             jmp     (JMPADRS+1)
00D8D8  1               ; ----------------------------------------------------------------------------
00D8D8  1               ; "LEN" FUNCTION
00D8D8  1               ; ----------------------------------------------------------------------------
00D8D8  1               LEN:
00D8D8  1  20 DE D8             jsr     GETSTR
00D8DB  1               SNGFLT1:
00D8DB  1  4C 1C D5             jmp     SNGFLT
00D8DE  1               ; ----------------------------------------------------------------------------
00D8DE  1               ; IF LAST RESULT IS A TEMPORARY STRING, FREE IT
00D8DE  1               ; MAKE VALTYP NUMERIC, RETURN LENGTH IN Y-REG
00D8DE  1               ; ----------------------------------------------------------------------------
00D8DE  1               GETSTR:
00D8DE  1  20 FF D7             jsr     FRESTR
00D8E1  1  A2 00                ldx     #$00
00D8E3  1  86 5F                stx     VALTYP
00D8E5  1  A8                   tay
00D8E6  1  60                   rts
00D8E7  1               ; ----------------------------------------------------------------------------
00D8E7  1               ; "ASC" FUNCTION
00D8E7  1               ; ----------------------------------------------------------------------------
00D8E7  1               ASC:
00D8E7  1  20 DE D8             jsr     GETSTR
00D8EA  1  F0 08                beq     GOIQ
00D8EC  1  A0 00                ldy     #$00
00D8EE  1  B1 71                lda     (INDEX),y
00D8F0  1  A8                   tay
00D8F1  1  4C DB D8             jmp     SNGFLT1
00D8F4  1               ; ----------------------------------------------------------------------------
00D8F4  1               GOIQ:
00D8F4  1  4C D4 D3             jmp     IQERR
00D8F7  1               ; ----------------------------------------------------------------------------
00D8F7  1               ; SCAN TO NEXT CHARACTER AND CONVERT EXPRESSION
00D8F7  1               ; TO SINGLE BYTE IN X-REG
00D8F7  1               ; ----------------------------------------------------------------------------
00D8F7  1               GTBYTC:
00D8F7  1  20 D6 00             jsr     CHRGET
00D8FA  1               ; ----------------------------------------------------------------------------
00D8FA  1               ; EVALUATE EXPRESSION AT TXTPTR, AND
00D8FA  1               ; CONVERT IT TO SINGLE BYTE IN X-REG
00D8FA  1               ; ----------------------------------------------------------------------------
00D8FA  1               GETBYT:
00D8FA  1  20 F9 CF             jsr     FRMNUM
00D8FD  1               ; ----------------------------------------------------------------------------
00D8FD  1               ; CONVERT (FAC) TO SINGLE BYTE INTEGER IN X-REG
00D8FD  1               ; ----------------------------------------------------------------------------
00D8FD  1               CONINT:
00D8FD  1  20 4D D3             jsr     MKINT
00D900  1  A6 AE                ldx     FAC_LAST-1
00D902  1  D0 F0                bne     GOIQ
00D904  1  A6 AF                ldx     FAC_LAST
00D906  1  4C DC 00             jmp     CHRGOT
00D909  1               ; ----------------------------------------------------------------------------
00D909  1               ; "VAL" FUNCTION
00D909  1               ; ----------------------------------------------------------------------------
00D909  1               VAL:
00D909  1  20 DE D8             jsr     GETSTR
00D90C  1  D0 03                bne     L35AC
00D90E  1  4C 3D DA             jmp     ZERO_FAC
00D911  1               L35AC:
00D911  1  A6 DD                ldx     TXTPTR
00D913  1  A4 DE                ldy     TXTPTR+1
00D915  1  86 BA                stx     STRNG2
00D917  1  84 BB                sty     STRNG2+1
00D919  1  A6 71                ldx     INDEX
00D91B  1  86 DD                stx     TXTPTR
00D91D  1  18                   clc
00D91E  1  65 71                adc     INDEX
00D920  1  85 73                sta     DEST
00D922  1  A6 72                ldx     INDEX+1
00D924  1  86 DE                stx     TXTPTR+1
00D926  1  90 01                bcc     L35C4
00D928  1  E8                   inx
00D929  1               L35C4:
00D929  1  86 74                stx     DEST+1
00D92B  1  A0 00                ldy     #$00
00D92D  1  B1 73                lda     (DEST),y
00D92F  1  48                   pha
00D930  1  A9 00                lda     #$00
00D932  1  91 73                sta     (DEST),y
00D934  1  20 DC 00             jsr     CHRGOT
00D937  1  20 D3 DD             jsr     FIN
00D93A  1  68                   pla
00D93B  1  A0 00                ldy     #$00
00D93D  1  91 73                sta     (DEST),y
00D93F  1               ; ----------------------------------------------------------------------------
00D93F  1               ; COPY STRNG2 INTO TXTPTR
00D93F  1               ; ----------------------------------------------------------------------------
00D93F  1               POINT:
00D93F  1  A6 BA                ldx     STRNG2
00D941  1  A4 BB                ldy     STRNG2+1
00D943  1  86 DD                stx     TXTPTR
00D945  1  84 DE                sty     TXTPTR+1
00D947  1  60                   rts
00D948  1               ; ----------------------------------------------------------------------------
00D948  1               ; EVALUATE "EXP1,EXP2"
00D948  1               ;
00D948  1               ; CONVERT EXP1 TO 16-BIT NUMBER IN LINNUM
00D948  1               ; CONVERT EXP2 TO 8-BIT NUMBER IN X-REG
00D948  1               ; ----------------------------------------------------------------------------
00D948  1               GTNUM:
00D948  1  20 F9 CF             jsr     FRMNUM
00D94B  1  20 54 D9             jsr     GETADR
00D94E  1               ; ----------------------------------------------------------------------------
00D94E  1               ; EVALUATE ",EXPRESSION"
00D94E  1               ; CONVERT EXPRESSION TO SINGLE BYTE IN X-REG
00D94E  1               ; ----------------------------------------------------------------------------
00D94E  1               COMBYTE:
00D94E  1  20 4D D1             jsr     CHKCOM
00D951  1  4C FA D8             jmp     GETBYT
00D954  1               ; ----------------------------------------------------------------------------
00D954  1               ; CONVERT (FAC) TO A 16-BIT VALUE IN LINNUM
00D954  1               ; ----------------------------------------------------------------------------
00D954  1               GETADR:
00D954  1  A5 B0                lda     FACSIGN
00D956  1  30 9C                bmi     GOIQ
00D958  1  A5 AC                lda     FAC
00D95A  1  C9 91                cmp     #$91
00D95C  1  B0 96                bcs     GOIQ
00D95E  1  20 7D DD             jsr     QINT
00D961  1  A5 AE                lda     FAC_LAST-1
00D963  1  A4 AF                ldy     FAC_LAST
00D965  1  84 11                sty     LINNUM
00D967  1  85 12                sta     LINNUM+1
00D969  1  60                   rts
00D96A  1               ; ----------------------------------------------------------------------------
00D96A  1               ; "PEEK" FUNCTION
00D96A  1               ; ----------------------------------------------------------------------------
00D96A  1               PEEK:
00D96A  1  20 54 D9             jsr     GETADR
00D96D  1  A0 00                ldy     #$00
00D96F  1               ; disallow PEEK between $C000 and $DFFF
00D96F  1  B1 11                lda     (LINNUM),y
00D971  1  A8                   tay
00D972  1  4C 1C D5             jmp     SNGFLT
00D975  1               ; ----------------------------------------------------------------------------
00D975  1               ; "POKE" STATEMENT
00D975  1               ; ----------------------------------------------------------------------------
00D975  1               POKE:
00D975  1  20 48 D9             jsr     GTNUM
00D978  1  8A                   txa
00D979  1  A0 00                ldy     #$00
00D97B  1  91 11                sta     (LINNUM),y
00D97D  1  60                   rts
00D97E  1               ; ----------------------------------------------------------------------------
00D97E  1               ; "WAIT" STATEMENT
00D97E  1               ; ----------------------------------------------------------------------------
00D97E  1               WAIT:
00D97E  1  20 48 D9             jsr     GTNUM
00D981  1  86 97                stx     FORPNT
00D983  1  A2 00                ldx     #$00
00D985  1  20 DC 00             jsr     CHRGOT
00D988  1  F0 03                beq     L3628
00D98A  1  20 4E D9             jsr     COMBYTE
00D98D  1               L3628:
00D98D  1  86 98                stx     FORPNT+1
00D98F  1  A0 00                ldy     #$00
00D991  1               L362C:
00D991  1  B1 11                lda     (LINNUM),y
00D993  1  45 98                eor     FORPNT+1
00D995  1  25 97                and     FORPNT
00D997  1  F0 F8                beq     L362C
00D999  1               RTS3:
00D999  1  60                   rts
00D99A  1               TEMP1X = TEMP1+(5-BYTES_FP)
00D99A  1               ; ----------------------------------------------------------------------------
00D99A  1               ; ADD 0.5 TO FAC
00D99A  1               ; ----------------------------------------------------------------------------
00D99A  1               FADDH:
00D99A  1  A9 E2                lda     #<CON_HALF
00D99C  1  A0 DF                ldy     #>CON_HALF
00D99E  1  4C B8 D9             jmp     FADD
00D9A1  1               ; ----------------------------------------------------------------------------
00D9A1  1               ; FAC = (Y,A) - FAC
00D9A1  1               ; ----------------------------------------------------------------------------
00D9A1  1               FSUB:
00D9A1  1  20 99 DB             jsr     LOAD_ARG_FROM_YA
00D9A4  1               ; ----------------------------------------------------------------------------
00D9A4  1               ; FAC = ARG - FAC
00D9A4  1               ; ----------------------------------------------------------------------------
00D9A4  1               FSUBT:
00D9A4  1  A5 B0                lda     FACSIGN
00D9A6  1  49 FF                eor     #$FF
00D9A8  1  85 B0                sta     FACSIGN
00D9AA  1  45 B7                eor     ARGSIGN
00D9AC  1  85 B8                sta     SGNCPR
00D9AE  1  A5 AC                lda     FAC
00D9B0  1  4C BB D9             jmp     FADDT
00D9B3  1               ; ----------------------------------------------------------------------------
00D9B3  1               ; Commodore BASIC V2 Easter Egg
00D9B3  1               ; ----------------------------------------------------------------------------
00D9B3  1               ; ----------------------------------------------------------------------------
00D9B3  1               ; SHIFT SMALLER ARGUMENT MORE THAN 7 BITS
00D9B3  1               ; ----------------------------------------------------------------------------
00D9B3  1               FADD1:
00D9B3  1  20 C7 DA             jsr     SHIFT_RIGHT
00D9B6  1  90 3C                bcc     FADD3
00D9B8  1               ; ----------------------------------------------------------------------------
00D9B8  1               ; FAC = (Y,A) + FAC
00D9B8  1               ; ----------------------------------------------------------------------------
00D9B8  1               FADD:
00D9B8  1  20 99 DB             jsr     LOAD_ARG_FROM_YA
00D9BB  1               ; ----------------------------------------------------------------------------
00D9BB  1               ; FAC = ARG + FAC
00D9BB  1               ; ----------------------------------------------------------------------------
00D9BB  1               FADDT:
00D9BB  1  D0 03                bne     L365B
00D9BD  1  4C E7 DC             jmp     COPY_ARG_TO_FAC
00D9C0  1               L365B:
00D9C0  1  A6 B9                ldx     FACEXTENSION
00D9C2  1  86 A3                stx     ARGEXTENSION
00D9C4  1  A2 B3                ldx     #ARG
00D9C6  1  A5 B3                lda     ARG
00D9C8  1               FADD2:
00D9C8  1  A8                   tay
00D9C9  1  F0 CE                beq     RTS3
00D9CB  1  38                   sec
00D9CC  1  E5 AC                sbc     FAC
00D9CE  1  F0 24                beq     FADD3
00D9D0  1  90 12                bcc     L367F
00D9D2  1  84 AC                sty     FAC
00D9D4  1  A4 B7                ldy     ARGSIGN
00D9D6  1  84 B0                sty     FACSIGN
00D9D8  1  49 FF                eor     #$FF
00D9DA  1  69 00                adc     #$00
00D9DC  1  A0 00                ldy     #$00
00D9DE  1  84 A3                sty     ARGEXTENSION
00D9E0  1  A2 AC                ldx     #FAC
00D9E2  1  D0 04                bne     L3683
00D9E4  1               L367F:
00D9E4  1  A0 00                ldy     #$00
00D9E6  1  84 B9                sty     FACEXTENSION
00D9E8  1               L3683:
00D9E8  1  C9 F9                cmp     #$F9
00D9EA  1  30 C7                bmi     FADD1
00D9EC  1  A8                   tay
00D9ED  1  A5 B9                lda     FACEXTENSION
00D9EF  1  56 01                lsr     1,x
00D9F1  1  20 DE DA             jsr     SHIFT_RIGHT4
00D9F4  1               FADD3:
00D9F4  1  24 B8                bit     SGNCPR
00D9F6  1  10 4C                bpl     FADD4
00D9F8  1  A0 AC                ldy     #FAC
00D9FA  1  E0 B3                cpx     #ARG
00D9FC  1  F0 02                beq     L369B
00D9FE  1  A0 B3                ldy     #ARG
00DA00  1               L369B:
00DA00  1  38                   sec
00DA01  1  49 FF                eor     #$FF
00DA03  1  65 A3                adc     ARGEXTENSION
00DA05  1  85 B9                sta     FACEXTENSION
00DA07  1  B9 03 00             lda     3,y
00DA0A  1  F5 03                sbc     3,x
00DA0C  1  85 AF                sta     FAC+3
00DA0E  1  B9 02 00             lda     2,y
00DA11  1  F5 02                sbc     2,x
00DA13  1  85 AE                sta     FAC+2
00DA15  1  B9 01 00             lda     1,y
00DA18  1  F5 01                sbc     1,x
00DA1A  1  85 AD                sta     FAC+1
00DA1C  1               ; ----------------------------------------------------------------------------
00DA1C  1               ; NORMALIZE VALUE IN FAC
00DA1C  1               ; ----------------------------------------------------------------------------
00DA1C  1               NORMALIZE_FAC1:
00DA1C  1  B0 03                bcs     NORMALIZE_FAC2
00DA1E  1  20 83 DA             jsr     COMPLEMENT_FAC
00DA21  1               NORMALIZE_FAC2:
00DA21  1  A0 00                ldy     #$00
00DA23  1  98                   tya
00DA24  1  18                   clc
00DA25  1               L36C7:
00DA25  1  A6 AD                ldx     FAC+1
00DA27  1  D0 3E                bne     NORMALIZE_FAC4
00DA29  1  A6 AE                ldx     FAC+2
00DA2B  1  86 AD                stx     FAC+1
00DA2D  1  A6 AF                ldx     FAC+3
00DA2F  1  86 AE                stx     FAC+2
00DA31  1  A6 B9                ldx     FACEXTENSION
00DA33  1  86 AF                stx     FAC+3
00DA35  1  84 B9                sty     FACEXTENSION
00DA37  1  69 08                adc     #$08
00DA39  1               ; bugfix?
00DA39  1               ; fix does not exist on AppleSoft 2
00DA39  1  C9 18                cmp     #MANTISSA_BYTES*8
00DA3B  1  D0 E8                bne     L36C7
00DA3D  1               ; ----------------------------------------------------------------------------
00DA3D  1               ; SET FAC = 0
00DA3D  1               ; (ONLY NECESSARY TO ZERO EXPONENT AND SIGN CELLS)
00DA3D  1               ; ----------------------------------------------------------------------------
00DA3D  1               ZERO_FAC:
00DA3D  1  A9 00                lda     #$00
00DA3F  1               STA_IN_FAC_SIGN_AND_EXP:
00DA3F  1  85 AC                sta     FAC
00DA41  1               STA_IN_FAC_SIGN:
00DA41  1  85 B0                sta     FACSIGN
00DA43  1  60                   rts
00DA44  1               ; ----------------------------------------------------------------------------
00DA44  1               ; ADD MANTISSAS OF FAC AND ARG INTO FAC
00DA44  1               ; ----------------------------------------------------------------------------
00DA44  1               FADD4:
00DA44  1  65 A3                adc     ARGEXTENSION
00DA46  1  85 B9                sta     FACEXTENSION
00DA48  1  A5 AF                lda     FAC+3
00DA4A  1  65 B6                adc     ARG+3
00DA4C  1  85 AF                sta     FAC+3
00DA4E  1  A5 AE                lda     FAC+2
00DA50  1  65 B5                adc     ARG+2
00DA52  1  85 AE                sta     FAC+2
00DA54  1  A5 AD                lda     FAC+1
00DA56  1  65 B4                adc     ARG+1
00DA58  1  85 AD                sta     FAC+1
00DA5A  1  4C 74 DA             jmp     NORMALIZE_FAC5
00DA5D  1               ; ----------------------------------------------------------------------------
00DA5D  1               ; FINISH NORMALIZING FAC
00DA5D  1               ; ----------------------------------------------------------------------------
00DA5D  1               NORMALIZE_FAC3:
00DA5D  1  69 01                adc     #$01
00DA5F  1  06 B9                asl     FACEXTENSION
00DA61  1  26 AF                rol     FAC+3
00DA63  1  26 AE                rol     FAC+2
00DA65  1  26 AD                rol     FAC+1
00DA67  1               NORMALIZE_FAC4:
00DA67  1  10 F4                bpl     NORMALIZE_FAC3
00DA69  1  38                   sec
00DA6A  1  E5 AC                sbc     FAC
00DA6C  1  B0 CF                bcs     ZERO_FAC
00DA6E  1  49 FF                eor     #$FF
00DA70  1  69 01                adc     #$01
00DA72  1  85 AC                sta     FAC
00DA74  1               NORMALIZE_FAC5:
00DA74  1  90 0C                bcc     L3764
00DA76  1               NORMALIZE_FAC6:
00DA76  1  E6 AC                inc     FAC
00DA78  1  F0 36                beq     OVERFLOW
00DA7A  1  66 AD                ror     FAC+1
00DA7C  1  66 AE                ror     FAC+2
00DA7E  1  66 AF                ror     FAC+3
00DA80  1  66 B9                ror     FACEXTENSION
00DA82  1               L3764:
00DA82  1  60                   rts
00DA83  1               ; ----------------------------------------------------------------------------
00DA83  1               ; 2'S COMPLEMENT OF FAC
00DA83  1               ; ----------------------------------------------------------------------------
00DA83  1               COMPLEMENT_FAC:
00DA83  1  A5 B0                lda     FACSIGN
00DA85  1  49 FF                eor     #$FF
00DA87  1  85 B0                sta     FACSIGN
00DA89  1               ; ----------------------------------------------------------------------------
00DA89  1               ; 2'S COMPLEMENT OF FAC MANTISSA ONLY
00DA89  1               ; ----------------------------------------------------------------------------
00DA89  1               COMPLEMENT_FAC_MANTISSA:
00DA89  1  A5 AD                lda     FAC+1
00DA8B  1  49 FF                eor     #$FF
00DA8D  1  85 AD                sta     FAC+1
00DA8F  1  A5 AE                lda     FAC+2
00DA91  1  49 FF                eor     #$FF
00DA93  1  85 AE                sta     FAC+2
00DA95  1  A5 AF                lda     FAC+3
00DA97  1  49 FF                eor     #$FF
00DA99  1  85 AF                sta     FAC+3
00DA9B  1  A5 B9                lda     FACEXTENSION
00DA9D  1  49 FF                eor     #$FF
00DA9F  1  85 B9                sta     FACEXTENSION
00DAA1  1  E6 B9                inc     FACEXTENSION
00DAA3  1  D0 0A                bne     RTS12
00DAA5  1               ; ----------------------------------------------------------------------------
00DAA5  1               ; INCREMENT FAC MANTISSA
00DAA5  1               ; ----------------------------------------------------------------------------
00DAA5  1               INCREMENT_FAC_MANTISSA:
00DAA5  1  E6 AF                inc     FAC+3
00DAA7  1  D0 06                bne     RTS12
00DAA9  1  E6 AE                inc     FAC+2
00DAAB  1  D0 02                bne     RTS12
00DAAD  1  E6 AD                inc     FAC+1
00DAAF  1               RTS12:
00DAAF  1  60                   rts
00DAB0  1               OVERFLOW:
00DAB0  1  A2 0A                ldx     #ERR_OVERFLOW
00DAB2  1  4C A6 C7             jmp     ERROR
00DAB5  1               ; ----------------------------------------------------------------------------
00DAB5  1               ; SHIFT 1,X THRU 5,X RIGHT
00DAB5  1               ; (A) = NEGATIVE OF SHIFT COUNT
00DAB5  1               ; (X) = POINTER TO BYTES TO BE SHIFTED
00DAB5  1               ;
00DAB5  1               ; RETURN WITH (Y)=0, CARRY=0, EXTENSION BITS IN A-REG
00DAB5  1               ; ----------------------------------------------------------------------------
00DAB5  1               SHIFT_RIGHT1:
00DAB5  1  A2 74                ldx     #RESULT-1
00DAB7  1               SHIFT_RIGHT2:
00DAB7  1  B4 03                ldy     3,x
00DAB9  1  84 B9                sty     FACEXTENSION
00DABB  1  B4 02                ldy     2,x
00DABD  1  94 03                sty     3,x
00DABF  1  B4 01                ldy     1,x
00DAC1  1  94 02                sty     2,x
00DAC3  1  A4 B2                ldy     SHIFTSIGNEXT
00DAC5  1  94 01                sty     1,x
00DAC7  1               ; ----------------------------------------------------------------------------
00DAC7  1               ; MAIN ENTRY TO RIGHT SHIFT SUBROUTINE
00DAC7  1               ; ----------------------------------------------------------------------------
00DAC7  1               SHIFT_RIGHT:
00DAC7  1  69 08                adc     #$08
00DAC9  1  30 EC                bmi     SHIFT_RIGHT2
00DACB  1  F0 EA                beq     SHIFT_RIGHT2
00DACD  1  E9 08                sbc     #$08
00DACF  1  A8                   tay
00DAD0  1  A5 B9                lda     FACEXTENSION
00DAD2  1  B0 12                bcs     SHIFT_RIGHT5
00DAD4  1               LB588:
00DAD4  1  16 01                asl     1,x
00DAD6  1  90 02                bcc     LB58E
00DAD8  1  F6 01                inc     1,x
00DADA  1               LB58E:
00DADA  1  76 01                ror     1,x
00DADC  1  76 01                ror     1,x
00DADE  1               ; ----------------------------------------------------------------------------
00DADE  1               ; ENTER HERE FOR SHORT SHIFTS WITH NO SIGN EXTENSION
00DADE  1               ; ----------------------------------------------------------------------------
00DADE  1               SHIFT_RIGHT4:
00DADE  1  76 02                ror     2,x
00DAE0  1  76 03                ror     3,x
00DAE2  1  6A                   ror     a
00DAE3  1  C8                   iny
00DAE4  1  D0 EE                bne     LB588
00DAE6  1               SHIFT_RIGHT5:
00DAE6  1  18                   clc
00DAE7  1  60                   rts
00DAE8  1               ; ----------------------------------------------------------------------------
00DAE8  1               CON_ONE:
00DAE8  1  81 00 00 00          .byte   $81,$00,$00,$00
00DAEC  1               POLY_LOG:
00DAEC  1  02           		.byte	$02
00DAED  1  80 19 56 62  		.byte   $80,$19,$56,$62
00DAF1  1  80 76 22 F3  		.byte   $80,$76,$22,$F3
00DAF5  1  82 38 AA 40  		.byte   $82,$38,$AA,$40
00DAF9  1               CON_SQR_HALF:
00DAF9  1  80 35 04 F3  		.byte   $80,$35,$04,$F3
00DAFD  1               CON_SQR_TWO:
00DAFD  1  81 35 04 F3  		.byte   $81,$35,$04,$F3
00DB01  1               CON_NEG_HALF:
00DB01  1  80 80 00 00  		.byte   $80,$80,$00,$00
00DB05  1               CON_LOG_TWO:
00DB05  1  80 31 72 18  		.byte   $80,$31,$72,$18
00DB09  1               ; ----------------------------------------------------------------------------
00DB09  1               ; "LOG" FUNCTION
00DB09  1               ; ----------------------------------------------------------------------------
00DB09  1               LOG:
00DB09  1  20 16 DD             jsr     SIGN
00DB0C  1  F0 02                beq     GIQ
00DB0E  1  10 03                bpl     LOG2
00DB10  1               GIQ:
00DB10  1  4C D4 D3             jmp     IQERR
00DB13  1               LOG2:
00DB13  1  A5 AC                lda     FAC
00DB15  1  E9 7F                sbc     #$7F
00DB17  1  48                   pha
00DB18  1  A9 80                lda     #$80
00DB1A  1  85 AC                sta     FAC
00DB1C  1  A9 F9                lda     #<CON_SQR_HALF
00DB1E  1  A0 DA                ldy     #>CON_SQR_HALF
00DB20  1  20 B8 D9             jsr     FADD
00DB23  1  A9 FD                lda     #<CON_SQR_TWO
00DB25  1  A0 DA                ldy     #>CON_SQR_TWO
00DB27  1  20 16 DC             jsr     FDIV
00DB2A  1  A9 E8                lda     #<CON_ONE
00DB2C  1  A0 DA                ldy     #>CON_ONE
00DB2E  1  20 A1 D9             jsr     FSUB
00DB31  1  A9 EC                lda     #<POLY_LOG
00DB33  1  A0 DA                ldy     #>POLY_LOG
00DB35  1  20 BA E0             jsr     POLYNOMIAL_ODD
00DB38  1  A9 01                lda     #<CON_NEG_HALF
00DB3A  1  A0 DB                ldy     #>CON_NEG_HALF
00DB3C  1  20 B8 D9             jsr     FADD
00DB3F  1  68                   pla
00DB40  1  20 5E DE             jsr     ADDACC
00DB43  1  A9 05                lda     #<CON_LOG_TWO
00DB45  1  A0 DB                ldy     #>CON_LOG_TWO
00DB47  1               ; ----------------------------------------------------------------------------
00DB47  1               ; FAC = (Y,A) * FAC
00DB47  1               ; ----------------------------------------------------------------------------
00DB47  1               FMULT:
00DB47  1  20 99 DB             jsr     LOAD_ARG_FROM_YA
00DB4A  1               ; ----------------------------------------------------------------------------
00DB4A  1               ; FAC = ARG * FAC
00DB4A  1               ; ----------------------------------------------------------------------------
00DB4A  1               FMULTT:
00DB4A  1  F0 4C                beq     L3903
00DB4C  1  20 BF DB             jsr     ADD_EXPONENTS
00DB4F  1  A9 00                lda     #$00
00DB51  1  85 75                sta     RESULT
00DB53  1  85 76                sta     RESULT+1
00DB55  1  85 77                sta     RESULT+2
00DB57  1  A5 B9                lda     FACEXTENSION
00DB59  1  20 6E DB             jsr     MULTIPLY1
00DB5C  1  A5 AF                lda     FAC+3
00DB5E  1  20 6E DB             jsr     MULTIPLY1
00DB61  1  A5 AE                lda     FAC+2
00DB63  1  20 6E DB             jsr     MULTIPLY1
00DB66  1  A5 AD                lda     FAC+1
00DB68  1  20 73 DB             jsr     MULTIPLY2
00DB6B  1  4C 88 DC             jmp     COPY_RESULT_INTO_FAC
00DB6E  1               ; ----------------------------------------------------------------------------
00DB6E  1               ; MULTIPLY ARG BY (A) INTO RESULT
00DB6E  1               ; ----------------------------------------------------------------------------
00DB6E  1               MULTIPLY1:
00DB6E  1  D0 03                bne     MULTIPLY2
00DB70  1  4C B5 DA             jmp     SHIFT_RIGHT1
00DB73  1               MULTIPLY2:
00DB73  1  4A                   lsr     a
00DB74  1  09 80                ora     #$80
00DB76  1               L38A7:
00DB76  1  A8                   tay
00DB77  1  90 13                bcc     L38C3
00DB79  1  18                   clc
00DB7A  1  A5 77                lda     RESULT+2
00DB7C  1  65 B6                adc     ARG+3
00DB7E  1  85 77                sta     RESULT+2
00DB80  1  A5 76                lda     RESULT+1
00DB82  1  65 B5                adc     ARG+2
00DB84  1  85 76                sta     RESULT+1
00DB86  1  A5 75                lda     RESULT
00DB88  1  65 B4                adc     ARG+1
00DB8A  1  85 75                sta     RESULT
00DB8C  1               L38C3:
00DB8C  1  66 75                ror     RESULT
00DB8E  1  66 76                ror     RESULT+1
00DB90  1               ; this seems to be a bad byte in the dump
00DB90  1  66 77                ror     RESULT+2
00DB92  1  66 B9                ror     FACEXTENSION
00DB94  1  98                   tya
00DB95  1  4A                   lsr     a
00DB96  1  D0 DE                bne     L38A7
00DB98  1               L3903:
00DB98  1  60                   rts
00DB99  1               ; ----------------------------------------------------------------------------
00DB99  1               ; UNPACK NUMBER AT (Y,A) INTO ARG
00DB99  1               ; ----------------------------------------------------------------------------
00DB99  1               LOAD_ARG_FROM_YA:
00DB99  1  85 71                sta     INDEX
00DB9B  1  84 72                sty     INDEX+1
00DB9D  1  A0 03                ldy     #BYTES_FP-1
00DB9F  1  B1 71                lda     (INDEX),y
00DBA1  1  85 B6                sta     ARG+3
00DBA3  1  88                   dey
00DBA4  1  B1 71                lda     (INDEX),y
00DBA6  1  85 B5                sta     ARG+2
00DBA8  1  88                   dey
00DBA9  1  B1 71                lda     (INDEX),y
00DBAB  1  85 B7                sta     ARGSIGN
00DBAD  1  45 B0                eor     FACSIGN
00DBAF  1  85 B8                sta     SGNCPR
00DBB1  1  A5 B7                lda     ARGSIGN
00DBB3  1  09 80                ora     #$80
00DBB5  1  85 B4                sta     ARG+1
00DBB7  1  88                   dey
00DBB8  1  B1 71                lda     (INDEX),y
00DBBA  1  85 B3                sta     ARG
00DBBC  1  A5 AC                lda     FAC
00DBBE  1  60                   rts
00DBBF  1               ; ----------------------------------------------------------------------------
00DBBF  1               ; ADD EXPONENTS OF ARG AND FAC
00DBBF  1               ; (CALLED BY FMULT AND FDIV)
00DBBF  1               ;
00DBBF  1               ; ALSO CHECK FOR OVERFLOW, AND SET RESULT SIGN
00DBBF  1               ; ----------------------------------------------------------------------------
00DBBF  1               ADD_EXPONENTS:
00DBBF  1  A5 B3                lda     ARG
00DBC1  1               ADD_EXPONENTS1:
00DBC1  1  F0 1F                beq     ZERO
00DBC3  1  18                   clc
00DBC4  1  65 AC                adc     FAC
00DBC6  1  90 04                bcc     L393C
00DBC8  1  30 1D                bmi     JOV
00DBCA  1  18                   clc
00DBCB  1  2C                   .byte   $2C
00DBCC  1               L393C:
00DBCC  1  10 14                bpl     ZERO
00DBCE  1  69 80                adc     #$80
00DBD0  1  85 AC                sta     FAC
00DBD2  1  D0 03                bne     L3947
00DBD4  1  4C 41 DA             jmp     STA_IN_FAC_SIGN
00DBD7  1               L3947:
00DBD7  1  A5 B8                lda     SGNCPR
00DBD9  1  85 B0                sta     FACSIGN
00DBDB  1  60                   rts
00DBDC  1               ; ----------------------------------------------------------------------------
00DBDC  1               ; IF (FAC) IS POSITIVE, GIVE "OVERFLOW" ERROR
00DBDC  1               ; IF (FAC) IS NEGATIVE, SET FAC=0, POP ONE RETURN, AND RTS
00DBDC  1               ; CALLED FROM "EXP" FUNCTION
00DBDC  1               ; ----------------------------------------------------------------------------
00DBDC  1               OUTOFRNG:
00DBDC  1  A5 B0                lda     FACSIGN
00DBDE  1  49 FF                eor     #$FF
00DBE0  1  30 05                bmi     JOV
00DBE2  1               ; ----------------------------------------------------------------------------
00DBE2  1               ; POP RETURN ADDRESS AND SET FAC=0
00DBE2  1               ; ----------------------------------------------------------------------------
00DBE2  1               ZERO:
00DBE2  1  68                   pla
00DBE3  1  68                   pla
00DBE4  1  4C 3D DA             jmp     ZERO_FAC
00DBE7  1               JOV:
00DBE7  1  4C B0 DA             jmp     OVERFLOW
00DBEA  1               ; ----------------------------------------------------------------------------
00DBEA  1               ; MULTIPLY FAC BY 10
00DBEA  1               ; ----------------------------------------------------------------------------
00DBEA  1               MUL10:
00DBEA  1  20 F7 DC             jsr     COPY_FAC_TO_ARG_ROUNDED
00DBED  1  AA                   tax
00DBEE  1  F0 10                beq     L3970
00DBF0  1  18                   clc
00DBF1  1  69 02                adc     #$02
00DBF3  1  B0 F2                bcs     JOV
00DBF5  1  A2 00                ldx     #$00
00DBF7  1  86 B8                stx     SGNCPR
00DBF9  1  20 C8 D9             jsr     FADD2
00DBFC  1  E6 AC                inc     FAC
00DBFE  1  F0 E7                beq     JOV
00DC00  1               L3970:
00DC00  1  60                   rts
00DC01  1               ; ----------------------------------------------------------------------------
00DC01  1               CONTEN:
00DC01  1  84 20 00 00          .byte   $84,$20,$00,$00
00DC05  1               ; ----------------------------------------------------------------------------
00DC05  1               ; DIVIDE FAC BY 10
00DC05  1               ; ----------------------------------------------------------------------------
00DC05  1               DIV10:
00DC05  1  20 F7 DC             jsr     COPY_FAC_TO_ARG_ROUNDED
00DC08  1  A9 01                lda     #<CONTEN
00DC0A  1  A0 DC                ldy     #>CONTEN
00DC0C  1  A2 00                ldx     #$00
00DC0E  1               ; ----------------------------------------------------------------------------
00DC0E  1               ; FAC = ARG / (Y,A)
00DC0E  1               ; ----------------------------------------------------------------------------
00DC0E  1               DIV:
00DC0E  1  86 B8                stx     SGNCPR
00DC10  1  20 97 DC             jsr     LOAD_FAC_FROM_YA
00DC13  1  4C 19 DC             jmp     FDIVT
00DC16  1               ; ----------------------------------------------------------------------------
00DC16  1               ; FAC = (Y,A) / FAC
00DC16  1               ; ----------------------------------------------------------------------------
00DC16  1               FDIV:
00DC16  1  20 99 DB             jsr     LOAD_ARG_FROM_YA
00DC19  1               ; ----------------------------------------------------------------------------
00DC19  1               ; FAC = ARG / FAC
00DC19  1               ; ----------------------------------------------------------------------------
00DC19  1               FDIVT:
00DC19  1  F0 68                beq     L3A02
00DC1B  1  20 06 DD             jsr     ROUND_FAC
00DC1E  1  A9 00                lda     #$00
00DC20  1  38                   sec
00DC21  1  E5 AC                sbc     FAC
00DC23  1  85 AC                sta     FAC
00DC25  1  20 BF DB             jsr     ADD_EXPONENTS
00DC28  1  E6 AC                inc     FAC
00DC2A  1  F0 BB                beq     JOV
00DC2C  1  A2 FD                ldx     #-MANTISSA_BYTES+256
00DC2E  1  A9 01                lda     #$01
00DC30  1               L39A1:
00DC30  1  A4 B4                ldy     ARG+1
00DC32  1  C4 AD                cpy     FAC+1
00DC34  1  D0 0A                bne     L39B7
00DC36  1  A4 B5                ldy     ARG+2
00DC38  1  C4 AE                cpy     FAC+2
00DC3A  1  D0 04                bne     L39B7
00DC3C  1  A4 B6                ldy     ARG+3
00DC3E  1  C4 AF                cpy     FAC+3
00DC40  1               L39B7:
00DC40  1  08                   php
00DC41  1  2A                   rol     a
00DC42  1  90 09                bcc     L39C4
00DC44  1  E8                   inx
00DC45  1  95 77                sta     RESULT_LAST-1,x
00DC47  1  F0 2A                beq     L39F2
00DC49  1  10 2C                bpl     L39F6
00DC4B  1  A9 01                lda     #$01
00DC4D  1               L39C4:
00DC4D  1  28                   plp
00DC4E  1  B0 0C                bcs     L39D5
00DC50  1               L39C7:
00DC50  1  06 B6                asl     ARG_LAST
00DC52  1  26 B5                rol     ARG+2
00DC54  1  26 B4                rol     ARG+1
00DC56  1  B0 E8                bcs     L39B7
00DC58  1  30 D6                bmi     L39A1
00DC5A  1  10 E4                bpl     L39B7
00DC5C  1               L39D5:
00DC5C  1  A8                   tay
00DC5D  1  A5 B6                lda     ARG+3
00DC5F  1  E5 AF                sbc     FAC+3
00DC61  1  85 B6                sta     ARG+3
00DC63  1  A5 B5                lda     ARG+2
00DC65  1  E5 AE                sbc     FAC+2
00DC67  1  85 B5                sta     ARG+2
00DC69  1  A5 B4                lda     ARG+1
00DC6B  1  E5 AD                sbc     FAC+1
00DC6D  1  85 B4                sta     ARG+1
00DC6F  1  98                   tya
00DC70  1  4C 50 DC             jmp     L39C7
00DC73  1               L39F2:
00DC73  1  A9 40                lda     #$40
00DC75  1  D0 D6                bne     L39C4
00DC77  1               L39F6:
00DC77  1  0A                   asl     a
00DC78  1  0A                   asl     a
00DC79  1  0A                   asl     a
00DC7A  1  0A                   asl     a
00DC7B  1  0A                   asl     a
00DC7C  1  0A                   asl     a
00DC7D  1  85 B9                sta     FACEXTENSION
00DC7F  1  28                   plp
00DC80  1  4C 88 DC             jmp     COPY_RESULT_INTO_FAC
00DC83  1               L3A02:
00DC83  1  A2 14                ldx     #ERR_ZERODIV
00DC85  1  4C A6 C7             jmp     ERROR
00DC88  1               ; ----------------------------------------------------------------------------
00DC88  1               ; COPY RESULT INTO FAC MANTISSA, AND NORMALIZE
00DC88  1               ; ----------------------------------------------------------------------------
00DC88  1               COPY_RESULT_INTO_FAC:
00DC88  1  A5 75                lda     RESULT
00DC8A  1  85 AD                sta     FAC+1
00DC8C  1  A5 76                lda     RESULT+1
00DC8E  1  85 AE                sta     FAC+2
00DC90  1  A5 77                lda     RESULT+2
00DC92  1  85 AF                sta     FAC+3
00DC94  1  4C 21 DA             jmp     NORMALIZE_FAC2
00DC97  1               ; ----------------------------------------------------------------------------
00DC97  1               ; UNPACK (Y,A) INTO FAC
00DC97  1               ; ----------------------------------------------------------------------------
00DC97  1               LOAD_FAC_FROM_YA:
00DC97  1  85 71                sta     INDEX
00DC99  1  84 72                sty     INDEX+1
00DC9B  1  A0 03                ldy     #MANTISSA_BYTES
00DC9D  1  B1 71                lda     (INDEX),y
00DC9F  1  85 AF                sta     FAC+3
00DCA1  1  88                   dey
00DCA2  1  B1 71                lda     (INDEX),y
00DCA4  1  85 AE                sta     FAC+2
00DCA6  1  88                   dey
00DCA7  1  B1 71                lda     (INDEX),y
00DCA9  1  85 B0                sta     FACSIGN
00DCAB  1  09 80                ora     #$80
00DCAD  1  85 AD                sta     FAC+1
00DCAF  1  88                   dey
00DCB0  1  B1 71                lda     (INDEX),y
00DCB2  1  85 AC                sta     FAC
00DCB4  1  84 B9                sty     FACEXTENSION
00DCB6  1  60                   rts
00DCB7  1               ; ----------------------------------------------------------------------------
00DCB7  1               ; ROUND FAC, STORE IN TEMP2
00DCB7  1               ; ----------------------------------------------------------------------------
00DCB7  1               STORE_FAC_IN_TEMP2_ROUNDED:
00DCB7  1  A2 A8                ldx     #TEMP2
00DCB9  1  2C                   .byte   $2C
00DCBA  1               ; ----------------------------------------------------------------------------
00DCBA  1               ; ROUND FAC, STORE IN TEMP1
00DCBA  1               ; ----------------------------------------------------------------------------
00DCBA  1               STORE_FAC_IN_TEMP1_ROUNDED:
00DCBA  1  A2 A4                ldx     #TEMP1X
00DCBC  1  A0 00                ldy     #$00
00DCBE  1  F0 04                beq     STORE_FAC_AT_YX_ROUNDED
00DCC0  1               ; ----------------------------------------------------------------------------
00DCC0  1               ; ROUND FAC, AND STORE WHERE FORPNT POINTS
00DCC0  1               ; ----------------------------------------------------------------------------
00DCC0  1               SETFOR:
00DCC0  1  A6 97                ldx     FORPNT
00DCC2  1  A4 98                ldy     FORPNT+1
00DCC4  1               ; ----------------------------------------------------------------------------
00DCC4  1               ; ROUND FAC, AND STORE AT (Y,X)
00DCC4  1               ; ----------------------------------------------------------------------------
00DCC4  1               STORE_FAC_AT_YX_ROUNDED:
00DCC4  1  20 06 DD             jsr     ROUND_FAC
00DCC7  1  86 71                stx     INDEX
00DCC9  1  84 72                sty     INDEX+1
00DCCB  1  A0 03                ldy     #MANTISSA_BYTES
00DCCD  1  A5 AF                lda     FAC+3
00DCCF  1  91 71                sta     (INDEX),y
00DCD1  1  88                   dey
00DCD2  1  A5 AE                lda     FAC+2
00DCD4  1  91 71                sta     (INDEX),y
00DCD6  1  88                   dey
00DCD7  1  A5 B0                lda     FACSIGN
00DCD9  1  09 7F                ora     #$7F
00DCDB  1  25 AD                and     FAC+1
00DCDD  1  91 71                sta     (INDEX),y
00DCDF  1  88                   dey
00DCE0  1  A5 AC                lda     FAC
00DCE2  1  91 71                sta     (INDEX),y
00DCE4  1  84 B9                sty     FACEXTENSION
00DCE6  1  60                   rts
00DCE7  1               ; ----------------------------------------------------------------------------
00DCE7  1               ; COPY ARG INTO FAC
00DCE7  1               ; ----------------------------------------------------------------------------
00DCE7  1               COPY_ARG_TO_FAC:
00DCE7  1  A5 B7                lda     ARGSIGN
00DCE9  1               MFA:
00DCE9  1  85 B0                sta     FACSIGN
00DCEB  1  A2 04                ldx     #BYTES_FP
00DCED  1               L3A7A:
00DCED  1  B5 B2                lda     SHIFTSIGNEXT,x
00DCEF  1  95 AB                sta     EXPSGN,x
00DCF1  1  CA                   dex
00DCF2  1  D0 F9                bne     L3A7A
00DCF4  1  86 B9                stx     FACEXTENSION
00DCF6  1  60                   rts
00DCF7  1               ; ----------------------------------------------------------------------------
00DCF7  1               ; ROUND FAC AND COPY TO ARG
00DCF7  1               ; ----------------------------------------------------------------------------
00DCF7  1               COPY_FAC_TO_ARG_ROUNDED:
00DCF7  1  20 06 DD             jsr     ROUND_FAC
00DCFA  1               MAF:
00DCFA  1  A2 05                ldx     #BYTES_FP+1
00DCFC  1               L3A89:
00DCFC  1  B5 AB                lda     EXPSGN,x
00DCFE  1  95 B2                sta     SHIFTSIGNEXT,x
00DD00  1  CA                   dex
00DD01  1  D0 F9                bne     L3A89
00DD03  1  86 B9                stx     FACEXTENSION
00DD05  1               RTS14:
00DD05  1  60                   rts
00DD06  1               ; ----------------------------------------------------------------------------
00DD06  1               ; ROUND FAC USING EXTENSION BYTE
00DD06  1               ; ----------------------------------------------------------------------------
00DD06  1               ROUND_FAC:
00DD06  1  A5 AC                lda     FAC
00DD08  1  F0 FB                beq     RTS14
00DD0A  1  06 B9                asl     FACEXTENSION
00DD0C  1  90 F7                bcc     RTS14
00DD0E  1               ; ----------------------------------------------------------------------------
00DD0E  1               ; INCREMENT MANTISSA AND RE-NORMALIZE IF CARRY
00DD0E  1               ; ----------------------------------------------------------------------------
00DD0E  1               INCREMENT_MANTISSA:
00DD0E  1  20 A5 DA             jsr     INCREMENT_FAC_MANTISSA
00DD11  1  D0 F2                bne     RTS14
00DD13  1  4C 76 DA             jmp     NORMALIZE_FAC6
00DD16  1               ; ----------------------------------------------------------------------------
00DD16  1               ; TEST FAC FOR ZERO AND SIGN
00DD16  1               ;
00DD16  1               ; FAC > 0, RETURN +1
00DD16  1               ; FAC = 0, RETURN  0
00DD16  1               ; FAC < 0, RETURN -1
00DD16  1               ; ----------------------------------------------------------------------------
00DD16  1               SIGN:
00DD16  1  A5 AC                lda     FAC
00DD18  1  F0 09                beq     RTS15
00DD1A  1               L3AA7:
00DD1A  1  A5 B0                lda     FACSIGN
00DD1C  1               SIGN2:
00DD1C  1  2A                   rol     a
00DD1D  1  A9 FF                lda     #$FF
00DD1F  1  B0 02                bcs     RTS15
00DD21  1  A9 01                lda     #$01
00DD23  1               RTS15:
00DD23  1  60                   rts
00DD24  1               ; ----------------------------------------------------------------------------
00DD24  1               ; "SGN" FUNCTION
00DD24  1               ; ----------------------------------------------------------------------------
00DD24  1               SGN:
00DD24  1  20 16 DD             jsr     SIGN
00DD27  1               ; ----------------------------------------------------------------------------
00DD27  1               ; CONVERT (A) INTO FAC, AS SIGNED VALUE -128 TO +127
00DD27  1               ; ----------------------------------------------------------------------------
00DD27  1               FLOAT:
00DD27  1  85 AD                sta     FAC+1
00DD29  1  A9 00                lda     #$00
00DD2B  1  85 AE                sta     FAC+2
00DD2D  1  A2 88                ldx     #$88
00DD2F  1               ; ----------------------------------------------------------------------------
00DD2F  1               ; FLOAT UNSIGNED VALUE IN FAC+1,2
00DD2F  1               ; (X) = EXPONENT
00DD2F  1               ; ----------------------------------------------------------------------------
00DD2F  1               FLOAT1:
00DD2F  1  A5 AD                lda     FAC+1
00DD31  1  49 FF                eor     #$FF
00DD33  1  2A                   rol     a
00DD34  1               ; ----------------------------------------------------------------------------
00DD34  1               ; FLOAT UNSIGNED VALUE IN FAC+1,2
00DD34  1               ; (X) = EXPONENT
00DD34  1               ; C=0 TO MAKE VALUE NEGATIVE
00DD34  1               ; C=1 TO MAKE VALUE POSITIVE
00DD34  1               ; ----------------------------------------------------------------------------
00DD34  1               FLOAT2:
00DD34  1  A9 00                lda     #$00
00DD36  1  85 AF                sta     FAC+3
00DD38  1  86 AC                stx     FAC
00DD3A  1  85 B9                sta     FACEXTENSION
00DD3C  1  85 B0                sta     FACSIGN
00DD3E  1  4C 1C DA             jmp     NORMALIZE_FAC1
00DD41  1               ; ----------------------------------------------------------------------------
00DD41  1               ; "ABS" FUNCTION
00DD41  1               ; ----------------------------------------------------------------------------
00DD41  1               ABS:
00DD41  1  46 B0                lsr     FACSIGN
00DD43  1  60                   rts
00DD44  1               ; ----------------------------------------------------------------------------
00DD44  1               ; COMPARE FAC WITH PACKED # AT (Y,A)
00DD44  1               ; RETURN A=1,0,-1 AS (Y,A) IS <,=,> FAC
00DD44  1               ; ----------------------------------------------------------------------------
00DD44  1               FCOMP:
00DD44  1  85 73                sta     DEST
00DD46  1               ; ----------------------------------------------------------------------------
00DD46  1               ; SPECIAL ENTRY FROM "NEXT" PROCESSOR
00DD46  1               ; "DEST" ALREADY SET UP
00DD46  1               ; ----------------------------------------------------------------------------
00DD46  1               FCOMP2:
00DD46  1  84 74                sty     DEST+1
00DD48  1  A0 00                ldy     #$00
00DD4A  1  B1 73                lda     (DEST),y
00DD4C  1  C8                   iny
00DD4D  1  AA                   tax
00DD4E  1  F0 C6                beq     SIGN
00DD50  1  B1 73                lda     (DEST),y
00DD52  1  45 B0                eor     FACSIGN
00DD54  1  30 C4                bmi     L3AA7
00DD56  1  E4 AC                cpx     FAC
00DD58  1  D0 1A                bne     L3B0A
00DD5A  1  B1 73                lda     (DEST),y
00DD5C  1  09 80                ora     #$80
00DD5E  1  C5 AD                cmp     FAC+1
00DD60  1  D0 12                bne     L3B0A
00DD62  1  C8                   iny
00DD63  1  B1 73                lda     (DEST),y
00DD65  1  C5 AE                cmp     FAC+2
00DD67  1  D0 0B                bne     L3B0A
00DD69  1  C8                   iny
00DD6A  1  A9 7F                lda     #$7F
00DD6C  1  C5 B9                cmp     FACEXTENSION
00DD6E  1  B1 73                lda     (DEST),y
00DD70  1  E5 AF                sbc     FAC_LAST
00DD72  1  F0 28                beq     L3B32
00DD74  1               L3B0A:
00DD74  1  A5 B0                lda     FACSIGN
00DD76  1  90 02                bcc     L3B10
00DD78  1  49 FF                eor     #$FF
00DD7A  1               L3B10:
00DD7A  1  4C 1C DD             jmp     SIGN2
00DD7D  1               ; ----------------------------------------------------------------------------
00DD7D  1               ; QUICK INTEGER FUNCTION
00DD7D  1               ;
00DD7D  1               ; CONVERTS FP VALUE IN FAC TO INTEGER VALUE
00DD7D  1               ; IN FAC+1...FAC+4, BY SHIFTING RIGHT WITH SIGN
00DD7D  1               ; EXTENSION UNTIL FRACTIONAL BITS ARE OUT.
00DD7D  1               ;
00DD7D  1               ; THIS SUBROUTINE ASSUMES THE EXPONENT < 32.
00DD7D  1               ; ----------------------------------------------------------------------------
00DD7D  1               QINT:
00DD7D  1  A5 AC                lda     FAC
00DD7F  1  F0 4A                beq     QINT3
00DD81  1  38                   sec
00DD82  1  E9 98                sbc     #120+8*BYTES_FP
00DD84  1  24 B0                bit     FACSIGN
00DD86  1  10 09                bpl     L3B27
00DD88  1  AA                   tax
00DD89  1  A9 FF                lda     #$FF
00DD8B  1  85 B2                sta     SHIFTSIGNEXT
00DD8D  1  20 89 DA             jsr     COMPLEMENT_FAC_MANTISSA
00DD90  1  8A                   txa
00DD91  1               L3B27:
00DD91  1  A2 AC                ldx     #FAC
00DD93  1  C9 F9                cmp     #$F9
00DD95  1  10 06                bpl     QINT2
00DD97  1  20 C7 DA             jsr     SHIFT_RIGHT
00DD9A  1  84 B2                sty     SHIFTSIGNEXT
00DD9C  1               L3B32:
00DD9C  1  60                   rts
00DD9D  1               QINT2:
00DD9D  1  A8                   tay
00DD9E  1  A5 B0                lda     FACSIGN
00DDA0  1  29 80                and     #$80
00DDA2  1  46 AD                lsr     FAC+1
00DDA4  1  05 AD                ora     FAC+1
00DDA6  1  85 AD                sta     FAC+1
00DDA8  1  20 DE DA             jsr     SHIFT_RIGHT4
00DDAB  1  84 B2                sty     SHIFTSIGNEXT
00DDAD  1  60                   rts
00DDAE  1               ; ----------------------------------------------------------------------------
00DDAE  1               ; "INT" FUNCTION
00DDAE  1               ;
00DDAE  1               ; USES QINT TO CONVERT (FAC) TO INTEGER FORM,
00DDAE  1               ; AND THEN REFLOATS THE INTEGER.
00DDAE  1               ; ----------------------------------------------------------------------------
00DDAE  1               INT:
00DDAE  1  A5 AC                lda     FAC
00DDB0  1  C9 98                cmp     #120+8*BYTES_FP
00DDB2  1  B0 1E                bcs     RTS17
00DDB4  1  20 7D DD             jsr     QINT
00DDB7  1  84 B9                sty     FACEXTENSION
00DDB9  1  A5 B0                lda     FACSIGN
00DDBB  1  84 B0                sty     FACSIGN
00DDBD  1  49 80                eor     #$80
00DDBF  1  2A                   rol     a
00DDC0  1  A9 98                lda     #120+8*BYTES_FP
00DDC2  1  85 AC                sta     FAC
00DDC4  1  A5 AF                lda     FAC_LAST
00DDC6  1  85 5B                sta     CHARAC
00DDC8  1  4C 1C DA             jmp     NORMALIZE_FAC1
00DDCB  1               QINT3:
00DDCB  1  85 AD                sta     FAC+1
00DDCD  1  85 AE                sta     FAC+2
00DDCF  1  85 AF                sta     FAC+3
00DDD1  1  A8                   tay
00DDD2  1               RTS17:
00DDD2  1  60                   rts
00DDD3  1               ; ----------------------------------------------------------------------------
00DDD3  1               ; CONVERT STRING TO FP VALUE IN FAC
00DDD3  1               ;
00DDD3  1               ; STRING POINTED TO BY TXTPTR
00DDD3  1               ; FIRST CHAR ALREADY SCANNED BY CHRGET
00DDD3  1               ; (A) = FIRST CHAR, C=0 IF DIGIT.
00DDD3  1               ; ----------------------------------------------------------------------------
00DDD3  1               FIN:
00DDD3  1  A0 00                ldy     #$00
00DDD5  1  A2 09                ldx     #SERLEN-TMPEXP
00DDD7  1               L3B6F:
00DDD7  1  94 A8                sty     TMPEXP,x
00DDD9  1  CA                   dex
00DDDA  1  10 FB                bpl     L3B6F
00DDDC  1  90 0F                bcc     FIN2
00DDDE  1  C9 2D                cmp     #$2D
00DDE0  1  D0 04                bne     L3B7E
00DDE2  1  86 B1                stx     SERLEN
00DDE4  1  F0 04                beq     FIN1
00DDE6  1               L3B7E:
00DDE6  1  C9 2B                cmp     #$2B
00DDE8  1  D0 05                bne     FIN3
00DDEA  1               FIN1:
00DDEA  1  20 D6 00             jsr     CHRGET
00DDED  1               FIN2:
00DDED  1  90 5B                bcc     FIN9
00DDEF  1               FIN3:
00DDEF  1  C9 2E                cmp     #$2E
00DDF1  1  F0 2E                beq     FIN10
00DDF3  1  C9 45                cmp     #$45
00DDF5  1  D0 30                bne     FIN7
00DDF7  1  20 D6 00             jsr     CHRGET
00DDFA  1  90 17                bcc     FIN5
00DDFC  1  C9 A4                cmp     #TOKEN_MINUS
00DDFE  1  F0 0E                beq     L3BA6
00DE00  1  C9 2D                cmp     #$2D
00DE02  1  F0 0A                beq     L3BA6
00DE04  1  C9 A3                cmp     #TOKEN_PLUS
00DE06  1  F0 08                beq     FIN4
00DE08  1  C9 2B                cmp     #$2B
00DE0A  1  F0 04                beq     FIN4
00DE0C  1  D0 07                bne     FIN6
00DE0E  1               L3BA6:
00DE0E  1  66 AB                ror     EXPSGN
00DE10  1               FIN4:
00DE10  1  20 D6 00             jsr     CHRGET
00DE13  1               FIN5:
00DE13  1  90 5C                bcc     GETEXP
00DE15  1               FIN6:
00DE15  1  24 AB                bit     EXPSGN
00DE17  1  10 0E                bpl     FIN7
00DE19  1  A9 00                lda     #$00
00DE1B  1  38                   sec
00DE1C  1  E5 A9                sbc     EXPON
00DE1E  1  4C 29 DE             jmp     FIN8
00DE21  1               ; ----------------------------------------------------------------------------
00DE21  1               ; FOUND A DECIMAL POINT
00DE21  1               ; ----------------------------------------------------------------------------
00DE21  1               FIN10:
00DE21  1  66 AA                ror     LOWTR
00DE23  1  24 AA                bit     LOWTR
00DE25  1  50 C3                bvc     FIN1
00DE27  1               ; ----------------------------------------------------------------------------
00DE27  1               ; NUMBER TERMINATED, ADJUST EXPONENT NOW
00DE27  1               ; ----------------------------------------------------------------------------
00DE27  1               FIN7:
00DE27  1  A5 A9                lda     EXPON
00DE29  1               FIN8:
00DE29  1  38                   sec
00DE2A  1  E5 A8                sbc     INDX
00DE2C  1  85 A9                sta     EXPON
00DE2E  1  F0 12                beq     L3BEE
00DE30  1  10 09                bpl     L3BE7
00DE32  1               L3BDE:
00DE32  1  20 05 DC             jsr     DIV10
00DE35  1  E6 A9                inc     EXPON
00DE37  1  D0 F9                bne     L3BDE
00DE39  1  F0 07                beq     L3BEE
00DE3B  1               L3BE7:
00DE3B  1  20 EA DB             jsr     MUL10
00DE3E  1  C6 A9                dec     EXPON
00DE40  1  D0 F9                bne     L3BE7
00DE42  1               L3BEE:
00DE42  1  A5 B1                lda     SERLEN
00DE44  1  30 01                bmi     L3BF3
00DE46  1  60                   rts
00DE47  1               L3BF3:
00DE47  1  4C 3B E0             jmp     NEGOP
00DE4A  1               ; ----------------------------------------------------------------------------
00DE4A  1               ; ACCUMULATE A DIGIT INTO FAC
00DE4A  1               ; ----------------------------------------------------------------------------
00DE4A  1               FIN9:
00DE4A  1  48                   pha
00DE4B  1  24 AA                bit     LOWTR
00DE4D  1  10 02                bpl     L3BFD
00DE4F  1  E6 A8                inc     INDX
00DE51  1               L3BFD:
00DE51  1  20 EA DB             jsr     MUL10
00DE54  1  68                   pla
00DE55  1  38                   sec
00DE56  1  E9 30                sbc     #$30
00DE58  1  20 5E DE             jsr     ADDACC
00DE5B  1  4C EA DD             jmp     FIN1
00DE5E  1               ; ----------------------------------------------------------------------------
00DE5E  1               ; ADD (A) TO FAC
00DE5E  1               ; ----------------------------------------------------------------------------
00DE5E  1               ADDACC:
00DE5E  1  48                   pha
00DE5F  1  20 F7 DC             jsr     COPY_FAC_TO_ARG_ROUNDED
00DE62  1  68                   pla
00DE63  1  20 27 DD             jsr     FLOAT
00DE66  1  A5 B7                lda     ARGSIGN
00DE68  1  45 B0                eor     FACSIGN
00DE6A  1  85 B8                sta     SGNCPR
00DE6C  1  A6 AC                ldx     FAC
00DE6E  1  4C BB D9             jmp     FADDT
00DE71  1               ; ----------------------------------------------------------------------------
00DE71  1               ; ACCUMULATE DIGIT OF EXPONENT
00DE71  1               ; ----------------------------------------------------------------------------
00DE71  1               GETEXP:
00DE71  1  A5 A9                lda     EXPON
00DE73  1  C9 0A                cmp     #MAX_EXPON
00DE75  1  90 09                bcc     L3C2C
00DE77  1  A9 64                lda     #$64
00DE79  1  24 AB                bit     EXPSGN
00DE7B  1  30 11                bmi     L3C3A
00DE7D  1  4C B0 DA             jmp     OVERFLOW
00DE80  1               L3C2C:
00DE80  1  0A                   asl     a
00DE81  1  0A                   asl     a
00DE82  1  18                   clc
00DE83  1  65 A9                adc     EXPON
00DE85  1  0A                   asl     a
00DE86  1  18                   clc
00DE87  1  A0 00                ldy     #$00
00DE89  1  71 DD                adc     (TXTPTR),y
00DE8B  1  38                   sec
00DE8C  1  E9 30                sbc     #$30
00DE8E  1               L3C3A:
00DE8E  1  85 A9                sta     EXPON
00DE90  1  4C 10 DE             jmp     FIN4
00DE93  1               ; ----------------------------------------------------------------------------
00DE93  1               ; these values are /1000 of what the labels say
00DE93  1               CON_99999999_9:
00DE93  1  91 43 4F F8          .byte   $91,$43,$4F,$F8
00DE97  1               CON_999999999:
00DE97  1  94 74 23 F7  		.byte   $94,$74,$23,$F7
00DE9B  1               CON_BILLION:
00DE9B  1  94 74 24 00          .byte   $94,$74,$24,$00
00DE9F  1               ; ----------------------------------------------------------------------------
00DE9F  1               ; PRINT "IN <LINE #>"
00DE9F  1               ; ----------------------------------------------------------------------------
00DE9F  1               INPRT:
00DE9F  1  A9 8D                lda     #<QT_IN
00DEA1  1  A0 C1                ldy     #>QT_IN
00DEA3  1  20 B7 DE             jsr     GOSTROUT2
00DEA6  1  A5 88                lda     CURLIN+1
00DEA8  1  A6 87                ldx     CURLIN
00DEAA  1               ; ----------------------------------------------------------------------------
00DEAA  1               ; PRINT A,X AS DECIMAL INTEGER
00DEAA  1               ; ----------------------------------------------------------------------------
00DEAA  1               LINPRT:
00DEAA  1  85 AD                sta     FAC+1
00DEAC  1  86 AE                stx     FAC+2
00DEAE  1  A2 90                ldx     #$90
00DEB0  1  38                   sec
00DEB1  1  20 34 DD             jsr     FLOAT2
00DEB4  1  20 BA DE             jsr     FOUT
00DEB7  1               GOSTROUT2:
00DEB7  1  4C 0F CE             jmp     STROUT
00DEBA  1               ; ----------------------------------------------------------------------------
00DEBA  1               ; CONVERT (FAC) TO STRING STARTING AT STACK
00DEBA  1               ; RETURN WITH (Y,A) POINTING AT STRING
00DEBA  1               ; ----------------------------------------------------------------------------
00DEBA  1               FOUT:
00DEBA  1  A0 01                ldy     #$01
00DEBC  1               ; ----------------------------------------------------------------------------
00DEBC  1               ; "STR$" FUNCTION ENTERS HERE, WITH (Y)=0
00DEBC  1               ; SO THAT RESULT STRING STARTS AT STACK-1
00DEBC  1               ; (THIS IS USED AS A FLAG)
00DEBC  1               ; ----------------------------------------------------------------------------
00DEBC  1               FOUT1:
00DEBC  1  A9 20                lda     #$20
00DEBE  1  24 B0                bit     FACSIGN
00DEC0  1  10 02                bpl     L3C73
00DEC2  1  A9 2D                lda     #$2D
00DEC4  1               L3C73:
00DEC4  1  99 FF 00             sta     $FF,y
00DEC7  1  85 B0                sta     FACSIGN
00DEC9  1  84 BA                sty     STRNG2
00DECB  1  C8                   iny
00DECC  1  A9 30                lda     #$30
00DECE  1  A6 AC                ldx     FAC
00DED0  1  D0 03                bne     L3C84
00DED2  1  4C D5 DF             jmp     FOUT4
00DED5  1               L3C84:
00DED5  1  A9 00                lda     #$00
00DED7  1  E0 80                cpx     #$80
00DED9  1  F0 02                beq     L3C8C
00DEDB  1  B0 09                bcs     L3C95
00DEDD  1               L3C8C:
00DEDD  1  A9 9B                lda     #<CON_BILLION
00DEDF  1  A0 DE                ldy     #>CON_BILLION
00DEE1  1  20 47 DB             jsr     FMULT
00DEE4  1  A9 FA                lda     #-6+256 ; exponent adjustment
00DEE6  1               L3C95:
00DEE6  1  85 A8                sta     INDX
00DEE8  1               ; ----------------------------------------------------------------------------
00DEE8  1               ; ADJUST UNTIL 1E8 <= (FAC) <1E9
00DEE8  1               ; ----------------------------------------------------------------------------
00DEE8  1               L3C97:
00DEE8  1  A9 97                lda     #<CON_999999999
00DEEA  1  A0 DE                ldy     #>CON_999999999
00DEEC  1  20 44 DD             jsr     FCOMP
00DEEF  1  F0 1E                beq     L3CBE
00DEF1  1  10 12                bpl     L3CB4
00DEF3  1               L3CA2:
00DEF3  1  A9 93                lda     #<CON_99999999_9
00DEF5  1  A0 DE                ldy     #>CON_99999999_9
00DEF7  1  20 44 DD             jsr     FCOMP
00DEFA  1  F0 02                beq     L3CAD
00DEFC  1  10 0E                bpl     L3CBB
00DEFE  1               L3CAD:
00DEFE  1  20 EA DB             jsr     MUL10
00DF01  1  C6 A8                dec     INDX
00DF03  1  D0 EE                bne     L3CA2
00DF05  1               L3CB4:
00DF05  1  20 05 DC             jsr     DIV10
00DF08  1  E6 A8                inc     INDX
00DF0A  1  D0 DC                bne     L3C97
00DF0C  1               L3CBB:
00DF0C  1  20 9A D9             jsr     FADDH
00DF0F  1               L3CBE:
00DF0F  1  20 7D DD             jsr     QINT
00DF12  1               ; ----------------------------------------------------------------------------
00DF12  1               ; FAC+1...FAC+4 IS NOW IN INTEGER FORM
00DF12  1               ; WITH POWER OF TEN ADJUSTMENT IN TMPEXP
00DF12  1               ;
00DF12  1               ; IF -10 < TMPEXP > 1, PRINT IN DECIMAL FORM
00DF12  1               ; OTHERWISE, PRINT IN EXPONENTIAL FORM
00DF12  1               ; ----------------------------------------------------------------------------
00DF12  1  A2 01                ldx     #$01
00DF14  1  A5 A8                lda     INDX
00DF16  1  18                   clc
00DF17  1  69 07                adc     #3*BYTES_FP-5
00DF19  1  30 09                bmi     L3CD3
00DF1B  1  C9 08                cmp     #3*BYTES_FP-4
00DF1D  1  B0 06                bcs     L3CD4
00DF1F  1  69 FF                adc     #$FF
00DF21  1  AA                   tax
00DF22  1  A9 02                lda     #$02
00DF24  1               L3CD3:
00DF24  1  38                   sec
00DF25  1               L3CD4:
00DF25  1  E9 02                sbc     #$02
00DF27  1  85 A9                sta     EXPON
00DF29  1  86 A8                stx     INDX
00DF2B  1  8A                   txa
00DF2C  1  F0 02                beq     L3CDF
00DF2E  1  10 13                bpl     L3CF2
00DF30  1               L3CDF:
00DF30  1  A4 BA                ldy     STRNG2
00DF32  1  A9 2E                lda     #$2E
00DF34  1  C8                   iny
00DF35  1  99 FF 00             sta     $FF,y
00DF38  1  8A                   txa
00DF39  1  F0 06                beq     L3CF0
00DF3B  1  A9 30                lda     #$30
00DF3D  1  C8                   iny
00DF3E  1  99 FF 00             sta     $FF,y
00DF41  1               L3CF0:
00DF41  1  84 BA                sty     STRNG2
00DF43  1               ; ----------------------------------------------------------------------------
00DF43  1               ; NOW DIVIDE BY POWERS OF TEN TO GET SUCCESSIVE DIGITS
00DF43  1               ; ----------------------------------------------------------------------------
00DF43  1               L3CF2:
00DF43  1  A0 00                ldy     #$00
00DF45  1  A2 80                ldx     #$80
00DF47  1               L3CF6:
00DF47  1  A5 AF                lda     FAC_LAST
00DF49  1  18                   clc
00DF4A  1  79 E8 DF             adc     DECTBL+2,y
00DF4D  1  85 AF                sta     FAC+3
00DF4F  1  A5 AE                lda     FAC+2
00DF51  1  79 E7 DF             adc     DECTBL+1,y
00DF54  1  85 AE                sta     FAC+2
00DF56  1  A5 AD                lda     FAC+1
00DF58  1  79 E6 DF             adc     DECTBL,y
00DF5B  1  85 AD                sta     FAC+1
00DF5D  1  E8                   inx
00DF5E  1  B0 04                bcs     L3D1A
00DF60  1  10 E5                bpl     L3CF6
00DF62  1  30 02                bmi     L3D1C
00DF64  1               L3D1A:
00DF64  1  30 E1                bmi     L3CF6
00DF66  1               L3D1C:
00DF66  1  8A                   txa
00DF67  1  90 04                bcc     L3D23
00DF69  1  49 FF                eor     #$FF
00DF6B  1  69 0A                adc     #$0A
00DF6D  1               L3D23:
00DF6D  1  69 2F                adc     #$2F
00DF6F  1  C8                   iny
00DF70  1  C8                   iny
00DF71  1  C8                   iny
00DF72  1  84 95                sty     VARPNT
00DF74  1  A4 BA                ldy     STRNG2
00DF76  1  C8                   iny
00DF77  1  AA                   tax
00DF78  1  29 7F                and     #$7F
00DF7A  1  99 FF 00             sta     $FF,y
00DF7D  1  C6 A8                dec     INDX
00DF7F  1  D0 06                bne     L3D3E
00DF81  1  A9 2E                lda     #$2E
00DF83  1  C8                   iny
00DF84  1  99 FF 00             sta     $FF,y
00DF87  1               L3D3E:
00DF87  1  84 BA                sty     STRNG2
00DF89  1  A4 95                ldy     VARPNT
00DF8B  1  8A                   txa
00DF8C  1  49 FF                eor     #$FF
00DF8E  1  29 80                and     #$80
00DF90  1  AA                   tax
00DF91  1  C0 12                cpy     #DECTBL_END-DECTBL
00DF93  1  D0 B2                bne     L3CF6
00DF95  1               ; ----------------------------------------------------------------------------
00DF95  1               ; NINE DIGITS HAVE BEEN STORED IN STRING.  NOW LOOK
00DF95  1               ; BACK AND LOP OFF TRAILING ZEROES AND A TRAILING
00DF95  1               ; DECIMAL POINT.
00DF95  1               ; ----------------------------------------------------------------------------
00DF95  1  A4 BA                ldy     STRNG2
00DF97  1               L3D4E:
00DF97  1  B9 FF 00             lda     $FF,y
00DF9A  1  88                   dey
00DF9B  1  C9 30                cmp     #$30
00DF9D  1  F0 F8                beq     L3D4E
00DF9F  1  C9 2E                cmp     #$2E
00DFA1  1  F0 01                beq     L3D5B
00DFA3  1  C8                   iny
00DFA4  1               L3D5B:
00DFA4  1  A9 2B                lda     #$2B
00DFA6  1  A6 A9                ldx     EXPON
00DFA8  1  F0 2E                beq     L3D8F
00DFAA  1  10 08                bpl     L3D6B
00DFAC  1  A9 00                lda     #$00
00DFAE  1  38                   sec
00DFAF  1  E5 A9                sbc     EXPON
00DFB1  1  AA                   tax
00DFB2  1  A9 2D                lda     #$2D
00DFB4  1               L3D6B:
00DFB4  1  99 01 01             sta     STACK+1,y
00DFB7  1  A9 45                lda     #$45
00DFB9  1  99 00 01             sta     STACK,y
00DFBC  1  8A                   txa
00DFBD  1  A2 2F                ldx     #$2F
00DFBF  1  38                   sec
00DFC0  1               L3D77:
00DFC0  1  E8                   inx
00DFC1  1  E9 0A                sbc     #$0A
00DFC3  1  B0 FB                bcs     L3D77
00DFC5  1  69 3A                adc     #$3A
00DFC7  1  99 03 01             sta     STACK+3,y
00DFCA  1  8A                   txa
00DFCB  1  99 02 01             sta     STACK+2,y
00DFCE  1  A9 00                lda     #$00
00DFD0  1  99 04 01             sta     STACK+4,y
00DFD3  1  F0 08                beq     L3D94
00DFD5  1               FOUT4:
00DFD5  1  99 FF 00             sta     $FF,y
00DFD8  1               L3D8F:
00DFD8  1  A9 00                lda     #$00
00DFDA  1  99 00 01             sta     STACK,y
00DFDD  1               L3D94:
00DFDD  1  A9 00                lda     #$00
00DFDF  1  A0 01                ldy     #$01
00DFE1  1  60                   rts
00DFE2  1               ; ----------------------------------------------------------------------------
00DFE2  1               CON_HALF:
00DFE2  1  80 00 00 00          .byte   $80,$00,$00,$00
00DFE6  1               ; ----------------------------------------------------------------------------
00DFE6  1               ; POWERS OF 10 FROM 1E8 DOWN TO 1,
00DFE6  1               ; AS 32-BIT INTEGERS, WITH ALTERNATING SIGNS
00DFE6  1               ; ----------------------------------------------------------------------------
00DFE6  1               DECTBL:
00DFE6  1  FE 79 60             .byte   $FE,$79,$60 ; -100000
00DFE9  1  00 27 10     		.byte	$00,$27,$10 ; 10000
00DFEC  1  FF FC 18     		.byte	$FF,$FC,$18 ; -1000
00DFEF  1  00 00 64     		.byte	$00,$00,$64 ; 100
00DFF2  1  FF FF F6     		.byte	$FF,$FF,$F6 ; -10
00DFF5  1  00 00 01     		.byte	$00,$00,$01 ; 1
00DFF8  1               DECTBL_END:
00DFF8  1               ; ----------------------------------------------------------------------------
00DFF8  1               ; "SQR" FUNCTION
00DFF8  1               ; ----------------------------------------------------------------------------
00DFF8  1               SQR:
00DFF8  1  20 F7 DC             jsr     COPY_FAC_TO_ARG_ROUNDED
00DFFB  1  A9 E2                lda     #<CON_HALF
00DFFD  1  A0 DF                ldy     #>CON_HALF
00DFFF  1  20 97 DC             jsr     LOAD_FAC_FROM_YA
00E002  1               ; ----------------------------------------------------------------------------
00E002  1               ; EXPONENTIATION OPERATION
00E002  1               ;
00E002  1               ; ARG ^ FAC  =  EXP( LOG(ARG) * FAC )
00E002  1               ; ----------------------------------------------------------------------------
00E002  1               FPWRT:
00E002  1  F0 63                beq     EXP
00E004  1  A5 B3                lda     ARG
00E006  1  D0 03                bne     L3DD5
00E008  1  4C 3F DA             jmp     STA_IN_FAC_SIGN_AND_EXP
00E00B  1               L3DD5:
00E00B  1  A2 9C                ldx     #TEMP3
00E00D  1  A0 00                ldy     #$00
00E00F  1  20 C4 DC             jsr     STORE_FAC_AT_YX_ROUNDED
00E012  1  A5 B7                lda     ARGSIGN
00E014  1  10 0F                bpl     L3DEF
00E016  1  20 AE DD             jsr     INT
00E019  1  A9 9C                lda     #TEMP3
00E01B  1  A0 00                ldy     #$00
00E01D  1  20 44 DD             jsr     FCOMP
00E020  1  D0 03                bne     L3DEF
00E022  1  98                   tya
00E023  1  A4 5B                ldy     CHARAC
00E025  1               L3DEF:
00E025  1  20 E9 DC             jsr     MFA
00E028  1  98                   tya
00E029  1  48                   pha
00E02A  1  20 09 DB             jsr     LOG
00E02D  1  A9 9C                lda     #TEMP3
00E02F  1  A0 00                ldy     #$00
00E031  1  20 47 DB             jsr     FMULT
00E034  1  20 67 E0             jsr     EXP
00E037  1  68                   pla
00E038  1  4A                   lsr     a
00E039  1  90 0A                bcc     L3E0F
00E03B  1               ; ----------------------------------------------------------------------------
00E03B  1               ; NEGATE VALUE IN FAC
00E03B  1               ; ----------------------------------------------------------------------------
00E03B  1               NEGOP:
00E03B  1  A5 AC                lda     FAC
00E03D  1  F0 06                beq     L3E0F
00E03F  1  A5 B0                lda     FACSIGN
00E041  1  49 FF                eor     #$FF
00E043  1  85 B0                sta     FACSIGN
00E045  1               L3E0F:
00E045  1  60                   rts
00E046  1               ; ----------------------------------------------------------------------------
00E046  1               CON_LOG_E:
00E046  1  81 38 AA 3B          .byte   $81,$38,$AA,$3B
00E04A  1               POLY_EXP:
00E04A  1  06           		.byte	$06
00E04B  1  74 63 90 8C  		.byte	$74,$63,$90,$8C
00E04F  1  77 23 0C AB  		.byte	$77,$23,$0C,$AB
00E053  1  7A 1E 94 00  		.byte	$7A,$1E,$94,$00
00E057  1  7C 63 42 80  		.byte	$7C,$63,$42,$80
00E05B  1  7E 75 FE D0  		.byte	$7E,$75,$FE,$D0
00E05F  1  80 31 72 15  		.byte	$80,$31,$72,$15
00E063  1  81 00 00 00  		.byte	$81,$00,$00,$00
00E067  1               ; ----------------------------------------------------------------------------
00E067  1               ; "EXP" FUNCTION
00E067  1               ;
00E067  1               ; FAC = E ^ FAC
00E067  1               ; ----------------------------------------------------------------------------
00E067  1               EXP:
00E067  1  A9 46                lda     #<CON_LOG_E
00E069  1  A0 E0                ldy     #>CON_LOG_E
00E06B  1  20 47 DB             jsr     FMULT
00E06E  1  A5 B9                lda     FACEXTENSION
00E070  1  69 50                adc     #$50
00E072  1  90 03                bcc     L3E4E
00E074  1  20 0E DD             jsr     INCREMENT_MANTISSA
00E077  1               L3E4E:
00E077  1  85 A3                sta     ARGEXTENSION
00E079  1  20 FA DC             jsr     MAF
00E07C  1  A5 AC                lda     FAC
00E07E  1  C9 88                cmp     #$88
00E080  1  90 03                bcc     L3E5C
00E082  1               L3E59:
00E082  1  20 DC DB             jsr     OUTOFRNG
00E085  1               L3E5C:
00E085  1  20 AE DD             jsr     INT
00E088  1  A5 5B                lda     CHARAC
00E08A  1  18                   clc
00E08B  1  69 81                adc     #$81
00E08D  1  F0 F3                beq     L3E59
00E08F  1  38                   sec
00E090  1  E9 01                sbc     #$01
00E092  1  48                   pha
00E093  1  A2 04                ldx     #BYTES_FP
00E095  1               L3E6C:
00E095  1  B5 B3                lda     ARG,x
00E097  1  B4 AC                ldy     FAC,x
00E099  1  95 AC                sta     FAC,x
00E09B  1  94 B3                sty     ARG,x
00E09D  1  CA                   dex
00E09E  1  10 F5                bpl     L3E6C
00E0A0  1  A5 A3                lda     ARGEXTENSION
00E0A2  1  85 B9                sta     FACEXTENSION
00E0A4  1  20 A4 D9             jsr     FSUBT
00E0A7  1  20 3B E0             jsr     NEGOP
00E0AA  1  A9 4A                lda     #<POLY_EXP
00E0AC  1  A0 E0                ldy     #>POLY_EXP
00E0AE  1  20 D0 E0             jsr     POLYNOMIAL
00E0B1  1  A9 00                lda     #$00
00E0B3  1  85 B8                sta     SGNCPR
00E0B5  1  68                   pla
00E0B6  1  20 C1 DB             jsr     ADD_EXPONENTS1
00E0B9  1  60                   rts
00E0BA  1               ; ----------------------------------------------------------------------------
00E0BA  1               ; ODD POLYNOMIAL SUBROUTINE
00E0BA  1               ;
00E0BA  1               ; F(X) = X * P(X^2)
00E0BA  1               ;
00E0BA  1               ; WHERE:  X IS VALUE IN FAC
00E0BA  1               ;	Y,A POINTS AT COEFFICIENT TABLE
00E0BA  1               ;	FIRST BYTE OF COEFF. TABLE IS N
00E0BA  1               ;	COEFFICIENTS FOLLOW, HIGHEST POWER FIRST
00E0BA  1               ;
00E0BA  1               ; P(X^2) COMPUTED USING NORMAL POLYNOMIAL SUBROUTINE
00E0BA  1               ; ----------------------------------------------------------------------------
00E0BA  1               POLYNOMIAL_ODD:
00E0BA  1  85 BA                sta     STRNG2
00E0BC  1  84 BB                sty     STRNG2+1
00E0BE  1  20 BA DC             jsr     STORE_FAC_IN_TEMP1_ROUNDED
00E0C1  1  A9 A4                lda     #TEMP1X
00E0C3  1  20 47 DB             jsr     FMULT
00E0C6  1  20 D4 E0             jsr     SERMAIN
00E0C9  1  A9 A4                lda     #TEMP1X
00E0CB  1  A0 00                ldy     #$00
00E0CD  1  4C 47 DB             jmp     FMULT
00E0D0  1               ; ----------------------------------------------------------------------------
00E0D0  1               ; NORMAL POLYNOMIAL SUBROUTINE
00E0D0  1               ;
00E0D0  1               ; P(X) = C(0)*X^N + C(1)*X^(N-1) + ... + C(N)
00E0D0  1               ;
00E0D0  1               ; WHERE:  X IS VALUE IN FAC
00E0D0  1               ;	Y,A POINTS AT COEFFICIENT TABLE
00E0D0  1               ;	FIRST BYTE OF COEFF. TABLE IS N
00E0D0  1               ;	COEFFICIENTS FOLLOW, HIGHEST POWER FIRST
00E0D0  1               ; ----------------------------------------------------------------------------
00E0D0  1               POLYNOMIAL:
00E0D0  1  85 BA                sta     STRNG2
00E0D2  1  84 BB                sty     STRNG2+1
00E0D4  1               SERMAIN:
00E0D4  1  20 B7 DC             jsr     STORE_FAC_IN_TEMP2_ROUNDED
00E0D7  1  B1 BA                lda     (STRNG2),y
00E0D9  1  85 B1                sta     SERLEN
00E0DB  1  A4 BA                ldy     STRNG2
00E0DD  1  C8                   iny
00E0DE  1  98                   tya
00E0DF  1  D0 02                bne     L3EBA
00E0E1  1  E6 BB                inc     STRNG2+1
00E0E3  1               L3EBA:
00E0E3  1  85 BA                sta     STRNG2
00E0E5  1  A4 BB                ldy     STRNG2+1
00E0E7  1               L3EBE:
00E0E7  1  20 47 DB             jsr     FMULT
00E0EA  1  A5 BA                lda     STRNG2
00E0EC  1  A4 BB                ldy     STRNG2+1
00E0EE  1  18                   clc
00E0EF  1  69 04                adc     #BYTES_FP
00E0F1  1  90 01                bcc     L3ECB
00E0F3  1  C8                   iny
00E0F4  1               L3ECB:
00E0F4  1  85 BA                sta     STRNG2
00E0F6  1  84 BB                sty     STRNG2+1
00E0F8  1  20 B8 D9             jsr     FADD
00E0FB  1  A9 A8                lda     #TEMP2
00E0FD  1  A0 00                ldy     #$00
00E0FF  1  C6 B1                dec     SERLEN
00E101  1  D0 E4                bne     L3EBE
00E103  1               RTS19:
00E103  1  60                   rts
00E104  1               ; ----------------------------------------------------------------------------
00E104  1               ; "RND" FUNCTION
00E104  1               ; ----------------------------------------------------------------------------
00E104  1               CONRND1:
00E104  1  98 35 44 7A          .byte   $98,$35,$44,$7A
00E108  1               CONRND2:
00E108  1  68 28 B1 46          .byte   $68,$28,$B1,$46
00E10C  1               RND:
00E10C  1  20 16 DD             jsr     SIGN
00E10F  1  AA                   tax
00E110  1  30 18                bmi     L3F01
00E112  1  A9 EE                lda     #<RNDSEED
00E114  1  A0 00                ldy     #>RNDSEED
00E116  1  20 97 DC             jsr     LOAD_FAC_FROM_YA
00E119  1  8A                   txa
00E11A  1  F0 E7                beq     RTS19
00E11C  1  A9 04                lda     #<CONRND1
00E11E  1  A0 E1                ldy     #>CONRND1
00E120  1  20 47 DB             jsr     FMULT
00E123  1  A9 08                lda     #<CONRND2
00E125  1  A0 E1                ldy     #>CONRND2
00E127  1  20 B8 D9             jsr     FADD
00E12A  1               L3F01:
00E12A  1  A6 AF                ldx     FAC_LAST
00E12C  1  A5 AD                lda     FAC+1
00E12E  1  85 AF                sta     FAC_LAST
00E130  1  86 AD                stx     FAC+1
00E132  1  A9 00                lda     #$00
00E134  1  85 B0                sta     FACSIGN
00E136  1  A5 AC                lda     FAC
00E138  1  85 B9                sta     FACEXTENSION
00E13A  1  A9 80                lda     #$80
00E13C  1  85 AC                sta     FAC
00E13E  1  20 21 DA             jsr     NORMALIZE_FAC2
00E141  1  A2 EE                ldx     #<RNDSEED
00E143  1  A0 00                ldy     #>RNDSEED
00E145  1               GOMOVMF:
00E145  1  4C C4 DC             jmp     STORE_FAC_AT_YX_ROUNDED
00E148  1               ; ----------------------------------------------------------------------------
00E148  1               ; "COS" FUNCTION
00E148  1               ; ----------------------------------------------------------------------------
00E148  1               COS:
00E148  1  A9 C4                lda     #<CON_PI_HALF
00E14A  1  A0 E1                ldy     #>CON_PI_HALF
00E14C  1  20 B8 D9             jsr     FADD
00E14F  1               ; ----------------------------------------------------------------------------
00E14F  1               ; "SIN" FUNCTION
00E14F  1               ; ----------------------------------------------------------------------------
00E14F  1               SIN:
00E14F  1  20 F7 DC             jsr     COPY_FAC_TO_ARG_ROUNDED
00E152  1  A9 C8                lda     #<CON_PI_DOUB
00E154  1  A0 E1                ldy     #>CON_PI_DOUB
00E156  1  A6 B7                ldx     ARGSIGN
00E158  1  20 0E DC             jsr     DIV
00E15B  1  20 F7 DC             jsr     COPY_FAC_TO_ARG_ROUNDED
00E15E  1  20 AE DD             jsr     INT
00E161  1  A9 00                lda     #$00
00E163  1  85 B8                sta     STRNG1
00E165  1  20 A4 D9             jsr     FSUBT
00E168  1               ; ----------------------------------------------------------------------------
00E168  1               ; (FAC) = ANGLE AS A FRACTION OF A FULL CIRCLE
00E168  1               ;
00E168  1               ; NOW FOLD THE RANGE INTO A QUARTER CIRCLE
00E168  1               ;
00E168  1               ; <<< THERE ARE MUCH SIMPLER WAYS TO DO THIS >>>
00E168  1               ; ----------------------------------------------------------------------------
00E168  1  A9 CC                lda     #<QUARTER
00E16A  1  A0 E1                ldy     #>QUARTER
00E16C  1  20 A1 D9             jsr     FSUB
00E16F  1  A5 B0                lda     FACSIGN
00E171  1  48                   pha
00E172  1  10 0D                bpl     SIN1
00E174  1  20 9A D9             jsr     FADDH
00E177  1  A5 B0                lda     FACSIGN
00E179  1  30 09                bmi     L3F5B
00E17B  1  A5 63                lda     CPRMASK
00E17D  1  49 FF                eor     #$FF
00E17F  1  85 63                sta     CPRMASK
00E181  1               ; ----------------------------------------------------------------------------
00E181  1               ; IF FALL THRU, RANGE IS 0...1/2
00E181  1               ; IF BRANCH HERE, RANGE IS 0...1/4
00E181  1               ; ----------------------------------------------------------------------------
00E181  1               SIN1:
00E181  1  20 3B E0             jsr     NEGOP
00E184  1               ; ----------------------------------------------------------------------------
00E184  1               ; IF FALL THRU, RANGE IS -1/2...0
00E184  1               ; IF BRANCH HERE, RANGE IS -1/4...0
00E184  1               ; ----------------------------------------------------------------------------
00E184  1               L3F5B:
00E184  1  A9 CC                lda     #<QUARTER
00E186  1  A0 E1                ldy     #>QUARTER
00E188  1  20 B8 D9             jsr     FADD
00E18B  1  68                   pla
00E18C  1  10 03                bpl     L3F68
00E18E  1  20 3B E0             jsr     NEGOP
00E191  1               L3F68:
00E191  1  A9 D0                lda     #<POLY_SIN
00E193  1  A0 E1                ldy     #>POLY_SIN
00E195  1  4C BA E0             jmp     POLYNOMIAL_ODD
00E198  1               ; ----------------------------------------------------------------------------
00E198  1               ; "TAN" FUNCTION
00E198  1               ;
00E198  1               ; COMPUTE TAN(X) = SIN(X) / COS(X)
00E198  1               ; ----------------------------------------------------------------------------
00E198  1               TAN:
00E198  1  20 BA DC             jsr     STORE_FAC_IN_TEMP1_ROUNDED
00E19B  1  A9 00                lda     #$00
00E19D  1  85 63                sta     CPRMASK
00E19F  1  20 4F E1             jsr     SIN
00E1A2  1  A2 9C                ldx     #TEMP3
00E1A4  1  A0 00                ldy     #$00
00E1A6  1  20 45 E1             jsr     GOMOVMF
00E1A9  1  A9 A4                lda     #TEMP1+(5-BYTES_FP)
00E1AB  1  A0 00                ldy     #$00
00E1AD  1  20 97 DC             jsr     LOAD_FAC_FROM_YA
00E1B0  1  A9 00                lda     #$00
00E1B2  1  85 B0                sta     FACSIGN
00E1B4  1  A5 63                lda     CPRMASK
00E1B6  1  20 C0 E1             jsr     TAN1
00E1B9  1  A9 9C                lda     #TEMP3
00E1BB  1  A0 00                ldy     #$00
00E1BD  1  4C 16 DC             jmp     FDIV
00E1C0  1               TAN1:
00E1C0  1  48                   pha
00E1C1  1  4C 81 E1             jmp     SIN1
00E1C4  1               ; ----------------------------------------------------------------------------
00E1C4  1               CON_PI_HALF:
00E1C4  1  81 49 0F DB          .byte   $81,$49,$0F,$DB
00E1C8  1               CON_PI_DOUB:
00E1C8  1  83 49 0F DB          .byte   $83,$49,$0F,$DB
00E1CC  1               QUARTER:
00E1CC  1  7F 00 00 00          .byte   $7F,$00,$00,$00
00E1D0  1               POLY_SIN:
00E1D0  1  04 86 1E D7          .byte   $04,$86,$1E,$D7,$FB,$87,$99,$26
00E1D4  1  FB 87 99 26  
00E1D8  1  65 87 23 34          .byte   $65,$87,$23,$34,$58,$86,$A5,$5D
00E1DC  1  58 86 A5 5D  
00E1E0  1  E1 83 49 0F          .byte   $E1,$83,$49,$0F,$DB
00E1E4  1  DB           
00E1E5  1               
00E1E5  1               ; ----------------------------------------------------------------------------
00E1E5  1               ; "ATN" FUNCTION
00E1E5  1               ; ----------------------------------------------------------------------------
00E1E5  1               ATN:
00E1E5  1  A5 B0                lda     FACSIGN
00E1E7  1  48                   pha
00E1E8  1  10 03                bpl     L3FDB
00E1EA  1  20 3B E0             jsr     NEGOP
00E1ED  1               L3FDB:
00E1ED  1  A5 AC                lda     FAC
00E1EF  1  48                   pha
00E1F0  1  C9 81                cmp     #$81
00E1F2  1  90 07                bcc     L3FE9
00E1F4  1  A9 E8                lda     #<CON_ONE
00E1F6  1  A0 DA                ldy     #>CON_ONE
00E1F8  1  20 16 DC             jsr     FDIV
00E1FB  1               ; ----------------------------------------------------------------------------
00E1FB  1               ; 0 <= X <= 1
00E1FB  1               ; 0 <= ATN(X) <= PI/8
00E1FB  1               ; ----------------------------------------------------------------------------
00E1FB  1               L3FE9:
00E1FB  1  A9 15                lda     #<POLY_ATN
00E1FD  1  A0 E2                ldy     #>POLY_ATN
00E1FF  1  20 BA E0             jsr     POLYNOMIAL_ODD
00E202  1  68                   pla
00E203  1  C9 81                cmp     #$81
00E205  1  90 07                bcc     L3FFC
00E207  1  A9 C4                lda     #<CON_PI_HALF
00E209  1  A0 E1                ldy     #>CON_PI_HALF
00E20B  1  20 A1 D9             jsr     FSUB
00E20E  1               L3FFC:
00E20E  1  68                   pla
00E20F  1  10 03                bpl     L4002
00E211  1  4C 3B E0             jmp     NEGOP
00E214  1               L4002:
00E214  1  60                   rts
00E215  1               ; ----------------------------------------------------------------------------
00E215  1               POLY_ATN:
00E215  1  08                   .byte   $08
00E216  1  78 3A C5 37  		.byte	$78,$3A,$C5,$37
00E21A  1  7B 83 A2 5C  		.byte	$7B,$83,$A2,$5C
00E21E  1  7C 2E DD 4D  		.byte	$7C,$2E,$DD,$4D
00E222  1  7D 99 B0 1E  		.byte	$7D,$99,$B0,$1E
00E226  1  7D 59 ED 24  		.byte	$7D,$59,$ED,$24
00E22A  1  7E 91 72 00  		.byte	$7E,$91,$72,$00
00E22E  1  7E 4C B9 73  		.byte	$7E,$4C,$B9,$73
00E232  1  7F AA AA 53  		.byte	$7F,$AA,$AA,$53
00E236  1  81 00 00 00  		.byte	$81,$00,$00,$00
00E23A  1               GENERIC_CHRGET:
00E23A  1  E6 DD                inc     TXTPTR
00E23C  1  D0 02                bne     GENERIC_CHRGOT
00E23E  1  E6 DE                inc     TXTPTR+1
00E240  1               GENERIC_CHRGOT:
00E240  1               GENERIC_TXTPTR = GENERIC_CHRGOT + 1
00E240  1  AD 60 EA             lda     $EA60
00E243  1  C9 3A                cmp     #$3A
00E245  1  B0 0A                bcs     L4058
00E247  1               GENERIC_CHRGOT2:
00E247  1  C9 20                cmp     #$20
00E249  1  F0 EF                beq     GENERIC_CHRGET
00E24B  1  38                   sec
00E24C  1  E9 30                sbc     #$30
00E24E  1  38                   sec
00E24F  1  E9 D0                sbc     #$D0
00E251  1               L4058:
00E251  1  60                   rts
00E252  1               GENERIC_RNDSEED:
00E252  1               ; random number seed
00E252  1  80 4F C7 52          .byte   $80,$4F,$C7,$52
00E256  1               GENERIC_CHRGET_END:
00E256  1               ; ----------------------------------------------------------------------------
00E256  1               PR_WRITTEN_BY:
00E256  1  A9 9A                lda     #<QT_WRITTEN_BY
00E258  1  A0 E3                ldy     #>QT_WRITTEN_BY
00E25A  1  20 0F CE             jsr     STROUT
00E25D  1               COLD_START:
00E25D  1  A2 FF                ldx     #$FF
00E25F  1  86 88                stx     CURLIN+1
00E261  1  9A                   txs
00E262  1  A9 5D                lda     #<COLD_START
00E264  1  A0 E2                ldy     #>COLD_START
00E266  1  85 13                sta     GORESTART+1
00E268  1  84 14                sty     GORESTART+2
00E26A  1  85 16                sta     GOSTROUT+1
00E26C  1  84 17                sty     GOSTROUT+2
00E26E  1  A9 51                lda     #<AYINT
00E270  1  A0 D3                ldy     #>AYINT
00E272  1  85 18                sta     GOAYINT
00E274  1  84 19                sty     GOAYINT+1
00E276  1  A9 0D                lda     #<GIVAYF
00E278  1  A0 D5                ldy     #>GIVAYF
00E27A  1  85 1A                sta     GOGIVEAYF
00E27C  1  84 1B                sty     GOGIVEAYF+1
00E27E  1  A9 4C                lda     #$4C
00E280  1  85 12                sta     GORESTART
00E282  1  85 15                sta     GOSTROUT
00E284  1  85 A1                sta     JMPADRS
00E286  1  85 0A                sta     USR
00E288  1  A9 D4                lda     #<IQERR
00E28A  1  A0 D3                ldy     #>IQERR
00E28C  1  85 0B                sta     USR+1
00E28E  1  84 0C                sty     USR+2
00E290  1  A9 48                lda     #WIDTH
00E292  1  85 0F                sta     Z17
00E294  1  A9 38                lda     #WIDTH2
00E296  1  85 10                sta     Z18
00E298  1  A2 1C                ldx     #GENERIC_CHRGET_END-GENERIC_CHRGET
00E29A  1               L4098:
00E29A  1  BD 39 E2             lda     GENERIC_CHRGET-1,x
00E29D  1  95 D5                sta     CHRGET-1,x
00E29F  1  CA                   dex
00E2A0  1  D0 F8                bne     L4098
00E2A2  1  8A                   txa
00E2A3  1  85 B2                sta     SHIFTSIGNEXT
00E2A5  1  85 67                sta     LASTPT+1
00E2A7  1  85 0D                sta     Z15
00E2A9  1  85 0E                sta     POSX
00E2AB  1  48                   pha
00E2AC  1  85 64                sta     Z14
00E2AE  1  A9 03                lda     #$03
00E2B0  1  85 A0                sta     DSCLEN
00E2B2  1  A9 2C                lda     #$2C
00E2B4  1  85 12                sta     LINNUM+1
00E2B6  1  20 B8 CD             jsr     CRDO
00E2B9  1  A2 68                ldx     #TEMPST
00E2BB  1  86 65                stx     TEMPPT
00E2BD  1  A9 BE                lda     #<QT_MEMORY_SIZE
00E2BF  1  A0 E3                ldy     #>QT_MEMORY_SIZE
00E2C1  1  20 0F CE             jsr     STROUT
00E2C4  1  20 92 CE             jsr     NXIN
00E2C7  1  86 DD                stx     TXTPTR
00E2C9  1  84 DE                sty     TXTPTR+1
00E2CB  1  20 D6 00             jsr     CHRGET
00E2CE  1  C9 41                cmp     #$41
00E2D0  1  F0 84                beq     PR_WRITTEN_BY
00E2D2  1  A8                   tay
00E2D3  1  D0 21                bne     L40EE
00E2D5  1  A9 00                lda     #<RAMSTART2
00E2D7  1  A0 06                ldy     #>RAMSTART2
00E2D9  1  85 11                sta     LINNUM
00E2DB  1  84 12                sty     LINNUM+1
00E2DD  1  A0 00                ldy     #$00
00E2DF  1               L40D7:
00E2DF  1  E6 11                inc     LINNUM
00E2E1  1  D0 02                bne     L40DD
00E2E3  1  E6 12                inc     LINNUM+1
00E2E5  1               L40DD:
00E2E5  1  A9 92                lda     #$92 ; 10010010 / 00100100
00E2E7  1  91 11                sta     (LINNUM),y
00E2E9  1  D1 11                cmp     (LINNUM),y
00E2EB  1  D0 15                bne     L40FA
00E2ED  1  0A                   asl     a
00E2EE  1  91 11                sta     (LINNUM),y
00E2F0  1  D1 11                cmp     (LINNUM),y
00E2F2  1  F0 EB                beq     L40D7; old: faster
00E2F4  1  D0 0C                bne     L40FA
00E2F6  1               L40EE:
00E2F6  1  20 DC 00             jsr     CHRGOT
00E2F9  1  20 CB CC             jsr     LINGET
00E2FC  1  A8                   tay
00E2FD  1  F0 03                beq     L40FA
00E2FF  1  4C 58 D1             jmp     SYNERR
00E302  1               L40FA:
00E302  1  A5 11                lda     LINNUM
00E304  1  A4 12                ldy     LINNUM+1
00E306  1  85 85                sta     MEMSIZ
00E308  1  84 86                sty     MEMSIZ+1
00E30A  1  85 81                sta     FRETOP
00E30C  1  84 82                sty     FRETOP+1
00E30E  1               L4106:
00E30E  1  A9 CC                lda     #<QT_TERMINAL_WIDTH
00E310  1  A0 E3                ldy     #>QT_TERMINAL_WIDTH
00E312  1  20 0F CE             jsr     STROUT
00E315  1  20 92 CE             jsr     NXIN
00E318  1  86 DD                stx     TXTPTR
00E31A  1  84 DE                sty     TXTPTR+1
00E31C  1  20 D6 00             jsr     CHRGET
00E31F  1  A8                   tay
00E320  1  F0 1C                beq     L4136
00E322  1  20 CB CC             jsr     LINGET
00E325  1  A5 12                lda     LINNUM+1
00E327  1  D0 E5                bne     L4106
00E329  1  A5 11                lda     LINNUM
00E32B  1  C9 10                cmp     #$10
00E32D  1  90 DF                bcc     L4106
00E32F  1  85 0F                sta     Z17
00E331  1               L4129:
00E331  1  E9 0E                sbc     #$0E
00E333  1  B0 FC                bcs     L4129
00E335  1  49 FF                eor     #$FF
00E337  1  E9 0C                sbc     #$0C
00E339  1  18                   clc
00E33A  1  65 0F                adc     Z17
00E33C  1  85 10                sta     Z18
00E33E  1               L4136:
00E33E  1  A2 00                ldx     #<RAMSTART2
00E340  1  A0 06                ldy     #>RAMSTART2
00E342  1  86 79                stx     TXTTAB
00E344  1  84 7A                sty     TXTTAB+1
00E346  1  A0 00                ldy     #$00
00E348  1  98                   tya
00E349  1  91 79                sta     (TXTTAB),y
00E34B  1  E6 79                inc     TXTTAB
00E34D  1  D0 02                bne     L4192
00E34F  1  E6 7A                inc     TXTTAB+1
00E351  1               L4192:
00E351  1  A5 79                lda     TXTTAB
00E353  1  A4 7A                ldy     TXTTAB+1
00E355  1  20 77 C7             jsr     REASON
00E358  1  20 B8 CD             jsr     CRDO
00E35B  1  A5 85                lda     MEMSIZ
00E35D  1  38                   sec
00E35E  1  E5 79                sbc     TXTTAB
00E360  1  AA                   tax
00E361  1  A5 86                lda     MEMSIZ+1
00E363  1  E5 7A                sbc     TXTTAB+1
00E365  1  20 AA DE             jsr     LINPRT
00E368  1  A9 DB                lda     #<QT_BYTES_FREE
00E36A  1  A0 E3                ldy     #>QT_BYTES_FREE
00E36C  1  20 0F CE             jsr     STROUT
00E36F  1  A9 0F                lda     #<STROUT
00E371  1  A0 CE                ldy     #>STROUT
00E373  1  85 16                sta     GOSTROUT+1
00E375  1  84 17                sty     GOSTROUT+2
00E377  1  20 BB C9             jsr     SCRTCH
00E37A  1  A9 CC                lda     #<RESTART
00E37C  1  A0 C7                ldy     #>RESTART
00E37E  1  85 13                sta     GORESTART+1
00E380  1  84 14                sty     GORESTART+2
00E382  1  6C 13 00             jmp     (GORESTART+1)
00E385  1               
00E385  1               ; OSI is compiled for ROM, but includes
00E385  1               ; this unused string
00E385  1  57 41 4E 54          .byte   "WANT SIN-COS-TAN-ATN"
00E389  1  20 53 49 4E  
00E38D  1  2D 43 4F 53  
00E399  1  00                   .byte   0
00E39A  1               QT_WRITTEN_BY:
00E39A  1  0D 0A 0C             .byte   CR,LF,$0C ; FORM FEED
00E39D  1  57 52 49 54          .byte   "WRITTEN BY RICHARD W. WEILAND."
00E3A1  1  54 45 4E 20  
00E3A5  1  42 59 20 52  
00E3BB  1  0D 0A 00             .byte   CR,LF,0
00E3BE  1               QT_MEMORY_SIZE:
00E3BE  1  02 5F 4D 45          .byte   $02,"_MEMORY SIZE"
00E3C2  1  4D 4F 52 59  
00E3C6  1  20 53 49 5A  
00E3CB  1  00                   .byte   0
00E3CC  1               QT_TERMINAL_WIDTH:
00E3CC  1  54 45 52 4D          .byte   "TERMINAL WIDTH"
00E3D0  1  49 4E 41 4C  
00E3D4  1  20 57 49 44  
00E3DA  1  00                   .byte   0
00E3DB  1               QT_BYTES_FREE:
00E3DB  1  20 42 59 54          .byte   " BYTES FREE"
00E3DF  1  45 53 20 46  
00E3E3  1  52 45 45     
00E3E6  1  0D 0A 0D 0A          .byte   CR,LF,CR,LF
00E3EA  1  4F 53 49 20          .byte   "OSI 6502 BASIC VERSION 1.0 REV 3.2"
00E3EE  1  36 35 30 32  
00E3F2  1  20 42 41 53  
00E40C  1  0D 0A                .byte   CR,LF
00E40E  1  43 4F 50 59          .byte   "COPYRIGHT 1977 BY MICROSOFT CO."
00E412  1  52 49 47 48  
00E416  1  54 20 31 39  
00E42D  1  0D 0A 00             .byte   CR,LF,0
00E430  1               
00E430  1               XPL:
00E430  1  0C 1B 5B 31  	.byte	$0C, $1B, "[12;26H"
00E434  1  32 3B 32 36  
00E438  1  48           
00E439  1  20 58 58 20  	.byte	    " XX     XX  PPPP   LL     ",CR,LF
00E43D  1  20 20 20 20  
00E441  1  58 58 20 20  
00E455  1  1B 5B 31 33  	.byte	$1B, "[13;26H"
00E459  1  3B 32 36 48  
00E45D  1  20 20 58 58  	.byte	    "  XX   XX   PP PP  LL     ",CR,LF
00E461  1  20 20 20 58  
00E465  1  58 20 20 20  
00E479  1  1B 5B 31 34  	.byte	$1B, "[14;26H"
00E47D  1  3B 32 36 48  
00E481  1  20 20 20 58  	.byte	    "   XXXXX    PPPPP  LL     ",CR,LF
00E485  1  58 58 58 58  
00E489  1  20 20 20 20  
00E49D  1  1B 5B 31 35  	.byte	$1B, "[15;26H"
00E4A1  1  3B 32 36 48  
00E4A5  1  20 20 58 58  	.byte	    "  XX   XX   PP     LL  32 ",CR,LF
00E4A9  1  20 20 20 58  
00E4AD  1  58 20 20 20  
00E4C1  1  1B 5B 31 36  	.byte	$1B, "[16;26H"
00E4C5  1  3B 32 36 48  
00E4C9  1  20 58 58 20  	.byte	    " XX     XX  PP     LLLLLLL",CR,LF
00E4CD  1  20 20 20 20  
00E4D1  1  58 58 20 20  
00E4E5  1  00           	.byte	$00
00E4E6  1               
00E4E6  1               ; XPL-32 LOAD/SAVE ROUTINES =================================================================
00E4E6  1               ; BY L. OPPENHEIMER 2021/2022 ===============================================================
00E4E6  1               
00E4E6  1               SMCHECK:
00E4E6  1  20 5B C6     	JSR	rxpoll
00E4E9  1  AD 00 80     	LDA	ACIAData
00E4EC  1  85 BC        	STA	XYLODSAV2	; save to tmp var
00E4EE  1  C9 53        	cmp	#'S'		; If "s" is pressed
00E4F0  1  F0 09        	BEQ	SDET		; then use serial
00E4F2  1  A5 BC        	LDA	XYLODSAV2	; load tmp var
00E4F4  1  C9 4D        	cmp	#'M'		; If "m" is pressed
00E4F6  1  F0 05        	BEQ	MDET		; then use a memory card
00E4F8  1  4C E6 E4     	JMP	SMCHECK
00E4FB  1               SDET:
00E4FB  1  38           	sec
00E4FC  1  60           	rts
00E4FD  1               MDET:
00E4FD  1  18           	clc
00E4FE  1  60           	rts
00E4FF  1               
00E4FF  1               LOAD:
00E4FF  1  48           	pha
00E500  1  8A           	txa
00E501  1  48           	pha 	; save registers
00E502  1  98           	tya
00E503  1  48           	pha
00E504  1  20 2F E6     	jsr 	WRITE_TRANSFER_MSG
00E507  1  20 E6 E4     	jsr	SMCHECK
00E50A  1  B0 03        	bcs	SERIAL_LOAD
00E50C  1  4C 59 E5     	jmp 	MEMORY_LOAD
00E50F  1               SERIAL_LOAD:
00E50F  1  A2 BE        	ldx	#<SERIAL_MSG
00E511  1  A0 E6        	ldy	#>SERIAL_MSG
00E513  1  20 77 C6     	jsr	w_acia_full
00E516  1  20 5B C6     	jsr	rxpoll
00E519  1               receive_serial:
00E519  1  A2 00          	ldx 	#0
00E51B  1               rcloopadd:
00E51B  1  A9 01          	lda 	#$01
00E51D  1  85 BC          	sta 	XYLODSAV2
00E51F  1  A9 06        	lda	#$06
00E521  1  85 BD        	sta	XYLODSAV2+1
00E523  1  A0 00          	ldy 	#0
00E525  1               rsl:
00E525  1  20 5B C6       	jsr 	rxpoll
00E528  1  AD 00 80       	lda 	ACIAData
00E52B  1  91 BC          	sta 	(XYLODSAV2),Y
00E52D  1  F0 0B        	beq	rseof
00E52F  1                 	;lda 	#$2e
00E52F  1                 	;jsr 	MONCOUT
00E52F  1  E6 BC        	inc	XYLODSAV2
00E531  1  A5 BC        	lda	XYLODSAV2
00E533  1  F0 02        	beq	ssl
00E535  1  E6 BD        	inc	XYLODSAV2+1
00E537  1               ssl:
00E537  1  4C 25 E5     	jmp rsl
00E53A  1               rseof:
00E53A  1  A0 01        	ldy	#1
00E53C  1  20 5B C6     	jsr	rxpoll
00E53F  1  91 BC        	sta	(XYLODSAV2),Y
00E541  1  D0 F4        	bne	ssl
00E543  1  A0 02        	ldy	#2
00E545  1  20 5B C6     	jsr	rxpoll
00E548  1  91 BC        	sta	(XYLODSAV2),Y
00E54A  1  D0 EB        	bne	ssl
00E54C  1               
00E54C  1               sdone:
00E54C  1  A2 D8          	ldx	#<LOAD_DONE
00E54E  1  A0 E6        	ldy	#>LOAD_DONE
00E550  1  20 77 C6     	jsr	w_acia_full
00E553  1               stop_sl:
00E553  1  68             	pla
00E554  1  A8           	tay
00E555  1  68             	pla
00E556  1  AA           	tax
00E557  1  68             	pla
00E558  1  60             	rts
00E559  1               
00E559  1               MEMORY_LOAD:
00E559  1  A2 00        	ldx	#0
00E55B  1               lodbufloop:
00E55B  1  BD 25 E7     	lda	loadbuf,x
00E55E  1  95 01        	sta	sdbuffer,x
00E560  1  E8           	inx
00E561  1  E0 0C        	cpx	#12
00E563  1  D0 F6        	bne	lodbufloop
00E565  1  20 C6 E5     	jsr	rootsetup
00E568  1  20 F0 E5     	jsr	list
00E56B  1               
00E56B  1               type:			; typing a filename
00E56B  1  A2 18          ldx #<typemsg		; Filename:_
00E56D  1  A0 E7          ldy #>typemsg
00E56F  1  20 77 C6       jsr w_acia_full
00E572  1  A2 00          ldx #0
00E574  1  A9 20          lda #' '
00E576  1  85 00          sta charbuffer
00E578  1               
00E578  1                typeloop:		; loop to type filenames
00E578  1  20 5B C6       jsr rxpoll		; read a charactor
00E57B  1  AD 00 80       lda ACIAData
00E57E  1  85 00          sta charbuffer
00E580  1  C9 0D          cmp #$0d		; enter?
00E582  1  F0 0E          beq exitloop		; if so, load
00E584  1  A5 00          lda charbuffer	; echo back
00E586  1  8D 00 80       sta ACIAData
00E589  1  A5 00          lda charbuffer	; and store it in the filename buffer
00E58B  1  95 01          sta sdbuffer,x
00E58D  1  E8             inx
00E58E  1  E0 08          cpx #8
00E590  1  D0 E6          bne typeloop
00E592  1               exitloop:
00E592  1  20 33 C6       jsr crlf
00E595  1  20 C6 E5       jsr rootsetup
00E598  1  A0 00          ldy #>sdbuffer
00E59A  1  A2 01          ldx #<sdbuffer
00E59C  1  20 8F C5       jsr fat32_finddirent
00E59F  1  90 03          bcc foundfile
00E5A1  1                 ; File not found
00E5A1  1  4C D9 E5       jmp transfer_error
00E5A4  1               foundfile:
00E5A4  1                 ; Open file
00E5A4  1  20 26 C5       jsr fat32_opendirent
00E5A7  1  A2 09          ldx #<lodmsg
00E5A9  1  A0 E7          ldy #>lodmsg
00E5AB  1  20 77 C6       jsr w_acia_full
00E5AE  1  A9 00          lda #$00
00E5B0  1  85 CC          sta fat32_address
00E5B2  1  A9 06          lda #$06
00E5B4  1  85 CD          sta fat32_address+1
00E5B6  1  20 EF C5       jsr fat32_file_read  ; Yes. It is finally time to read the file.
00E5B9  1               end:
00E5B9  1  A2 D8          ldx #<LOAD_DONE
00E5BB  1  A0 E6          ldy #>LOAD_DONE
00E5BD  1  20 77 C6       jsr w_acia_full
00E5C0  1  68             pla
00E5C1  1  A8             tay
00E5C2  1  68             pla
00E5C3  1  AA             tax
00E5C4  1  68             pla
00E5C5  1  60             rts
00E5C6  1               
00E5C6  1               rootsetup:		; setup <ROOT>
00E5C6  1               
00E5C6  1                 ; Open root directory
00E5C6  1  20 0E C5       jsr fat32_openroot
00E5C9  1               
00E5C9  1                 ; Find the subdirectory by name
00E5C9  1  A2 E2          ldx #<dirname
00E5CB  1  A0 C6          ldy #>dirname
00E5CD  1  20 8F C5       jsr fat32_finddirent
00E5D0  1  90 03          bcc foundsub
00E5D2  1               
00E5D2  1                 ; Subdirectory not found
00E5D2  1  4C D9 E5       jmp transfer_error
00E5D5  1               
00E5D5  1               foundsub:
00E5D5  1               
00E5D5  1                 ; Open subdirectory
00E5D5  1  20 26 C5       jsr fat32_opendirent	; open folder
00E5D8  1               
00E5D8  1  60             rts			; done
00E5D9  1               
00E5D9  1               transfer_error:
00E5D9  1  A0 C6          ldy #>errormsg
00E5DB  1  A2 EE          ldx #<errormsg
00E5DD  1  20 77 C6       jsr w_acia_full
00E5E0  1  20 9A C6       jsr error_sound
00E5E3  1  4C 53 E5       jmp stop_sl
00E5E6  1               
00E5E6  1               other:
00E5E6  1  20 53 C6       jsr txpoll		; Write a letter of the filename currently being read
00E5E9  1  B1 0C          lda (zp_sd_address),y
00E5EB  1  8D 00 80       sta ACIAData
00E5EE  1  C8             iny
00E5EF  1  60             rts
00E5F0  1               
00E5F0  1               list:			; list file dir
00E5F0  1  20 59 C5       jsr fat32_readdirent	; files?
00E5F3  1  B0 36          bcs nofiles
00E5F5  1  29 40          and #$40
00E5F7  1  F0 05          beq arc
00E5F9  1               dir:
00E5F9  1  A9 44          lda #'D'		; directorys show up as
00E5FB  1  4C 00 E6       jmp ebut		; D YOURFILENAME     D TEST      D FOLDER  ...Etc
00E5FE  1               arc:
00E5FE  1  A9 46          lda #'F'		; files show up as
00E600  1               ebut:			; F TEST.XPL         F MUSIC.XPL        F FILE.BIN  ...Etc
00E600  1  20 63 C6       jsr print_chara	; f or d
00E603  1  A9 20          lda #$20		; space
00E605  1  20 63 C6       jsr print_chara
00E608  1                 ; At this point, we know that there are no files, files, or a suddir
00E608  1                 ; Now for the name
00E608  1  A0 00          ldy #0
00E60A  1               nameloop:
00E60A  1  C0 08          cpy #8
00E60C  1  F0 06          beq dot
00E60E  1  20 E6 E5       jsr other
00E611  1  4C 0A E6       jmp nameloop
00E614  1               dot:
00E614  1  A9 2E          lda #'.'		; shows a file extention
00E616  1  20 63 C6       jsr print_chara
00E619  1               lopii:
00E619  1  C0 0B          cpy #11
00E61B  1  F0 06          beq endthat		; print 3-letter file extention
00E61D  1  20 E6 E5       jsr other
00E620  1  4C 19 E6       jmp lopii
00E623  1               endthat:
00E623  1  A9 09          lda #$09 ; Tab
00E625  1  20 63 C6       jsr print_chara	; tab
00E628  1  4C F0 E5       jmp list ; go again	; next file if there are any left
00E62B  1               nofiles:		; if not,
00E62B  1               endlist:		; exit listing code
00E62B  1  20 33 C6       jsr crlf
00E62E  1  60             rts
00E62F  1               
00E62F  1               WRITE_TRANSFER_MSG:
00E62F  1  A2 94          	LDX 	#<TRANSFER_MSG
00E631  1  A0 E6        	LDY	#>TRANSFER_MSG
00E633  1  20 77 C6     	JSR	w_acia_full
00E636  1  60             	RTS
00E637  1               
00E637  1               SAVE:				; BUG save dont work
00E637  1  48           	PHA
00E638  1  8A           	TXA
00E639  1  48           	PHA			; Push registers on the stack
00E63A  1  98           	TYA
00E63B  1  48           	PHA
00E63C  1  20 2F E6     	JSR	WRITE_TRANSFER_MSG
00E63F  1  20 E6 E4     	JSR	SMCHECK
00E642  1  B0 03        	bcs	SERIAL_SAVE
00E644  1  4C 8E E6     	jmp	MEMORY_SAVE
00E647  1               SERIAL_SAVE:
00E647  1  A2 BE        	LDX	#<SERIAL_MSG
00E649  1  A0 E6        	LDY	#>SERIAL_MSG
00E64B  1  20 77 C6     	jsr	w_acia_full
00E64E  1  20 5B C6     	jsr	rxpoll
00E651  1  A2 00        	LDX	#0
00E653  1  A0 00        	LDY	#0
00E655  1  A9 01        	LDA	#$01
00E657  1  85 BC        	STA	XYLODSAV2	; set to start of RAM
00E659  1  A9 06        	LDA	#$06
00E65B  1  85 BD        	STA	XYLODSAV2+1
00E65D  1               	; now for the loop
00E65D  1               SAVELOOP:
00E65D  1  B1 BC        	LDA	(XYLODSAV2),Y	; save out a byte
00E65F  1  48           	PHA
00E660  1  20 65 FF     	JSR	MONCOUT
00E663  1  68           	PLA
00E664  1  F0 0B        	BEQ	SAVE_EOF_CHECK
00E666  1  E6 BC        	INC	XYLODSAV2
00E668  1  F0 02        	BEQ	SAVE_NOT16BIT
00E66A  1  E6 BD        	INC	XYLODSAV2+1
00E66C  1               SAVE_NOT16BIT:
00E66C  1  20 84 FF     	JSR	MONISCNTC	; check if control+c is pressed.
00E66F  1  90 EC        	BCC	SAVELOOP	; if not, then send the next byte
00E671  1               SAVE_EOF_CHECK:			; if so, then send break error message
00E671  1  A0 01        	ldy	#1
00E673  1  B1 BC        	lda	(XYLODSAV2),Y	; End Of File? (NULL followed by another NULL)
00E675  1  F0 0A        	beq	SAVE_END_WRITE
00E677  1               SAVE_CUT:
00E677  1  A2 FC        	ldx	#<ABORT_MSG
00E679  1  A0 E6        	ldy	#>ABORT_MSG
00E67B  1  20 77 C6     	jsr	w_acia_full
00E67E  1  4C 88 E6     	jmp	END_SERIAL_SAVE
00E681  1               SAVE_END_WRITE:
00E681  1  A2 E9        	ldx	#<SAVE_DONE
00E683  1  A0 E6        	ldy	#>SAVE_DONE
00E685  1  20 77 C6     	jsr	w_acia_full
00E688  1               END_SERIAL_SAVE:
00E688  1  68           	PLA
00E689  1  A8           	TAY
00E68A  1  68           	PLA
00E68B  1  AA           	TAX			; pull registers off stack
00E68C  1  68           	PLA
00E68D  1  60           	RTS
00E68E  1               
00E68E  1               MEMORY_SAVE:
00E68E  1               	; BUG oh darn i need to make this too
00E68E  1               	; same as the other one but it will save instead...
00E68E  1               	;
00E68E  1               	; e
00E68E  1               	;
00E68E  1  68           	PLA
00E68F  1  A8           	TAY
00E690  1  68           	PLA
00E691  1  AA           	TAX
00E692  1  68           	PLA
00E693  1  60           	RTS
00E694  1               
00E694  1               TRANSFER_MSG:
00E694  1  53 65 72 69    .byte	"Serial [S] or Memory Card [M] Transfer?",CR,LF,$00
00E698  1  61 6C 20 5B  
00E69C  1  53 5D 20 6F  
00E6BE  1               SERIAL_MSG:
00E6BE  1  50 72 65 73    .byte	"Press Any Key To Begin.",CR,LF,$00
00E6C2  1  73 20 41 6E  
00E6C6  1  79 20 4B 65  
00E6D8  1               LOAD_DONE:
00E6D8  1  4C 6F 61 64    .byte	"Load Complete.",CR,LF,$00
00E6DC  1  20 43 6F 6D  
00E6E0  1  70 6C 65 74  
00E6E9  1               SAVE_DONE:
00E6E9  1  0D 0A 53 61    .byte	CR,LF,"Save Complete.",CR,LF,$00
00E6ED  1  76 65 20 43  
00E6F1  1  6F 6D 70 6C  
00E6FC  1               ABORT_MSG:
00E6FC  1  0D 0A 41 62    .byte	CR,LF,"Aborted.",CR,LF,0
00E700  1  6F 72 74 65  
00E704  1  64 2E 0D 0A  
00E709  1               lodmsg:
00E709  1  0D 0A 4C 6F    .byte $0d, $0a, "Loading...", $0d, $0a, $00
00E70D  1  61 64 69 6E  
00E711  1  67 2E 2E 2E  
00E718  1               typemsg:
00E718  1  46 69 6C 65    .byte "Filename: ", $02, "_", $00
00E71C  1  6E 61 6D 65  
00E720  1  3A 20 02 5F  
00E725  1               loadbuf:
00E725  1  20 20 20 20    .byte $20, $20, $20, $20, $20, $20, $20, $20
00E729  1  20 20 20 20  
00E72D  1  42 41 53       .byte "BAS"
00E730  1               fat_error:
00E730  1  46 41 54 33    .byte "FAT32 Initialization Failed at Stage"
00E734  1  32 20 49 6E  
00E738  1  69 74 69 61  
00E754  1               sd_msg:
00E754  1  0E 14 0F 12    .byte	$0e, 20, $0f, 18
00E758  1  02 20          .byte $02, $20
00E75A  1  49 6E 69 74    .byte "Initializing SD Card...",0
00E75E  1  69 61 6C 69  
00E762  1  7A 69 6E 67  
00E772  1               
00E772  1               
00E772  1               ; STARTUP AND SERIAL I/O ROUTINES ===========================================================
00E772  1               ; BY G. SEARLE 2013 =========================================================================
00E772  1               ACIA := $8000
00E772  1               ACIAControl := ACIA+3
00E772  1               ACIACommand := ACIA+2
00E772  1               ACIAStatus := ACIA+1
00E772  1               ACIAData := ACIA+0
00E772  1               
00E772  1               .segment "IOHANDLER"
000000r 1               .org $FF00
00FF00  1               Reset:
00FF00  1  A2 FC        	LDX     #STACK_TOP
00FF02  1  9A           	TXS
00FF03  1               
00FF03  1  A9 0B        	LDA	#$0B
00FF05  1  8D 02 80     	STA	ACIACommand
00FF08  1  A9 1F        	LDA 	#$1F		; Set ACIA baud rate, word size and Rx interrupt (to control RTS)
00FF0A  1  8D 03 80     	STA	ACIAControl
00FF0D  1               
00FF0D  1  A2 30        	LDX	#<XPL
00FF0F  1  A0 E4        	LDY	#>XPL
00FF11  1  20 77 C6     	JSR	w_acia_full
00FF14  1               
00FF14  1               ;NextStart:
00FF14  1               ;	LDY	#$FF
00FF14  1               ;InnerDelayLoop:
00FF14  1               ;	LDX	#$FF
00FF14  1               ;Wee:
00FF14  1               ;	NOP
00FF14  1               ;	NOP
00FF14  1               ;	NOP
00FF14  1               ;	NOP
00FF14  1               ;	NOP
00FF14  1               ;	NOP
00FF14  1               ;	DEX
00FF14  1               ;	BNE Wee
00FF14  1               ;
00FF14  1               ;	DEY
00FF14  1               ;	BNE InnerDelayLoop
00FF14  1               
00FF14  1  A2 54        	ldx #<sd_msg
00FF16  1  A0 E7        	ldy #>sd_msg
00FF18  1  20 77 C6     	jsr w_acia_full
00FF1B  1               
00FF1B  1  20 A1 C1      	jsr via_init
00FF1E  1  20 B6 C1     	jsr sd_init
00FF21  1  20 36 C3     	jsr fat32_init
00FF24  1  90 1D        	bcc dispstart
00FF26  1               
00FF26  1               	; Error during FAT32 initialization
00FF26  1               
00FF26  1  20 48 C6     	jsr cleardisplay
00FF29  1  A0 E7        	ldy #>fat_error
00FF2B  1  A2 30        	ldx #<fat_error
00FF2D  1  20 77 C6     	jsr w_acia_full
00FF30  1  A5 D2        	lda fat32_errorstage
00FF32  1  20 1C C6     	jsr print_hex_acia
00FF35  1  A9 21        	lda #'!'
00FF37  1  20 63 C6     	jsr print_chara
00FF3A  1  20 33 C6     	jsr crlf
00FF3D  1  4C 43 FF     	jmp dispstart
00FF40  1               JMPToReset:
00FF40  1  4C 00 FF     	jmp	Reset
00FF43  1               dispstart:
00FF43  1               ; Display startup message
00FF43  1  A0 00        	LDY #0
00FF45  1               ShowStartMsg:
00FF45  1  B9 91 FF     	LDA	StartupMessage,Y
00FF48  1  F0 06        	BEQ	WaitForKeypress
00FF4A  1  20 65 FF     	JSR	MONCOUT
00FF4D  1  C8           	INY
00FF4E  1  D0 F5        	BNE	ShowStartMsg
00FF50  1               
00FF50  1               ; Wait for a cold/warm start selection
00FF50  1               WaitForKeypress:
00FF50  1  20 74 FF     	JSR	MONRDKEY
00FF53  1  90 FB        	BCC	WaitForKeypress
00FF55  1               
00FF55  1  29 DF        	AND	#$DF			; Make upper case
00FF57  1  C9 57        	CMP	#'W'			; compare with [W]arm start
00FF59  1  F0 07        	BEQ	WarmStart
00FF5B  1               
00FF5B  1  C9 43        	CMP	#'C'			; compare with [C]old start
00FF5D  1  D0 E1        	BNE	JMPToReset
00FF5F  1               
00FF5F  1  4C 5D E2     	JMP	COLD_START	; BASIC cold start
00FF62  1               
00FF62  1               WarmStart:
00FF62  1  4C CC C7     	JMP	RESTART		; BASIC warm start
00FF65  1               
00FF65  1               MONCOUT:
00FF65  1  48           	PHA
00FF66  1               SerialOutWait:
00FF66  1  AD 01 80     	LDA	ACIAStatus
00FF69  1  29 10        	AND	#$10
00FF6B  1  C9 10        	CMP	#$10
00FF6D  1  D0 F7        	BNE	SerialOutWait
00FF6F  1  68           	PLA
00FF70  1  8D 00 80     	STA	ACIAData
00FF73  1  60           	RTS
00FF74  1               
00FF74  1               MONRDKEY:
00FF74  1  AD 01 80     	LDA	ACIAStatus
00FF77  1  29 08        	AND	#$08
00FF79  1  C9 08        	CMP	#$08
00FF7B  1  D0 05        	BNE	NoDataIn
00FF7D  1  AD 00 80     	LDA	ACIAData
00FF80  1  38           	SEC		; Carry set if key available
00FF81  1  60           	RTS
00FF82  1               NoDataIn:
00FF82  1  18           	CLC		; Carry clear if no key pressed
00FF83  1  60           	RTS
00FF84  1               
00FF84  1               MONISCNTC:
00FF84  1  20 74 FF     	JSR	MONRDKEY
00FF87  1  90 06        	BCC	NotCTRLC ; If no key pressed then exit
00FF89  1  C9 03        	CMP	#3
00FF8B  1  D0 02        	BNE	NotCTRLC ; if CTRL-C not pressed then exit
00FF8D  1  38           	SEC		; Carry set if control C pressed
00FF8E  1  60           	RTS
00FF8F  1               NotCTRLC:
00FF8F  1  18           	CLC		; Carry clear if control C not pressed
00FF90  1  60           	RTS
00FF91  1               
00FF91  1               StartupMessage:
00FF91  1  0C 43 6F 6C  	.byte	$0C,"Cold [C] or warm [W] start?",$0D,$0A,$00
00FF95  1  64 20 5B 43  
00FF99  1  5D 20 6F 72  
00FFB0  1               
00FFB0  1               .segment "VECTS"
000000r 1               .org $FFFA
00FFFA  1  00 FF        	.word	Reset		; NMI
00FFFC  1  00 FF        	.word	Reset		; RESET
00FFFE  1  00 FF        	.word	Reset		; IRQ
010000  1               
010000  1               
