ca65 V2.17 - Raspbian 2.17-1
Main file   : osi_bas.s
Current file: osi_bas.s

000000r 1               ; Microsoft BASIC for 6502 (OSI VERSION)
000000r 1               ;
000000r 1               ; ==================================================================================
000000r 1               ; MODIFIED FROM THE ORIGINAL FILES AT http://www.pagetable.com/?p=46
000000r 1               ; MERGED INTO ONE FILE AND MACROS AND CONDITIONAL STATEMENTS REMOVED
000000r 1               ; BY G. SEARLE 2013
000000r 1               ;
000000r 1               ; I/O and dummy load/saves added to the end of this code
000000r 1               ;
000000r 1               ; This then assembles to the OSI version with the following
000000r 1               ; minor changes to the original BASIC code:
000000r 1               ; 1. Control-C call changed
000000r 1               ; 2. Load/save calls changed
000000r 1               ; 3. RAM start set to $0200 instead of $0300
000000r 1               ; 4. ROM start set to $C000
000000r 1               ; 5. Second letter of error messages back to ASCII value (instead of $80+val)
000000r 1               ; ==================================================================================
000000r 1               ;
000000r 1               ; Extract of original header comments follows:
000000r 1               ;
000000r 1               ; (first revision of this distribution, 20 Oct 2008, Michael Steil www.pagetable.com)
000000r 1               ;
000000r 1               ;
000000r 1               ; Name                 Release   MS Version    ROM   9digit  INPUTBUFFER   extensions
000000r 1               ;---------------------------------------------------------------------------------------------------
000000r 1               ; OSI BASIC             1977     1.0 REV 3.2    Y      N          ZP            -
000000r 1               ;
000000r 1               ; Credits:
000000r 1               ; * main work by Michael Steil
000000r 1               ; * function names and all uppercase comments taken from Bob Sander-Cederlof's excellent AppleSoft II disassembly:
000000r 1               ;   http://www.txbobsc.com/scsc/scdocumentor/
000000r 1               ; * Applesoft lite by Tom Greene http://cowgod.org/replica1/applesoft/ helped a lot, too.
000000r 1               ; * Thanks to Joe Zbicak for help with Intellision Keyboard BASIC
000000r 1               ; * This work is dedicated to the memory of my dear hacking pal Michael "acidity" Kollmann.
000000r 1               
000000r 1               fat32_workspace = $200      ; two pages
000000r 1               
000000r 1               buffer = $400               ; 512 bytes
000000r 1               endbuf = $600
000000r 1               
000000r 1               .debuginfo +
000000r 1               
000000r 1               .setcpu "6502"
000000r 1               .macpack longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               
000000r 1               ; zero page
000000r 1               ZP_START1 = $00
000000r 1               ZP_START2 = $0D
000000r 1               ZP_START3 = $5B
000000r 1               ZP_START4 = $65
000000r 1               
000000r 1               ;extra ZP variables
000000r 1               USR             := $000A
000000r 1               
000000r 1               ; constants
000000r 1               STACK_TOP		:= $FC
000000r 1               SPACE_FOR_GOSUB := $33
000000r 1               NULL_MAX		:= $0A
000000r 1               WIDTH			:= 72
000000r 1               WIDTH2			:= 56
000000r 1               
000000r 1               ; memory layout
000000r 1               RAMSTART2		:= $0600
000000r 1               BYTES_FP		:= 4
000000r 1               BYTES_PER_ELEMENT := BYTES_FP
000000r 1               BYTES_PER_VARIABLE := BYTES_FP+2
000000r 1               MANTISSA_BYTES	:= BYTES_FP-1
000000r 1               BYTES_PER_FRAME := 2*BYTES_FP+8
000000r 1               FOR_STACK1		:= 2*BYTES_FP+5
000000r 1               FOR_STACK2		:= BYTES_FP+4
000000r 1               MAX_EXPON = 10
000000r 1               STACK           := $0100
000000r 1               
000000r 1               INPUTBUFFERX = INPUTBUFFER & $FF00
000000r 1               
000000r 1               CR=13
000000r 1               LF=10
000000r 1               
000000r 1               CRLF_1 := CR
000000r 1               CRLF_2 := LF
000000r 1               
000000r 1               .feature org_per_seg
000000r 1               .zeropage
000000r 1               .org $0000
000000  1               .org ZP_START1
000000  1               charbuffer:
000000  1  xx           	.res 1
000001  1               zp_sd_address:
000001  1  xx xx        	.res 2
000003  1               zp_sd_currentsector:
000003  1  xx xx xx xx  	.res 4
000007  1               GORESTART:
000007  1  xx xx xx     	.res 3
00000A  1               GOSTROUT:
00000A  1  xx xx xx     	.res 3
00000D  1               GOAYINT:
00000D  1  xx xx        	.res 2
00000F  1               GOGIVEAYF:
00000F  1  xx xx        	.res 2
000011  1               
000011  1               .org ZP_START2
00000D  1               Z15:
00000D  1  xx           	.res 1
00000E  1               POSX:
00000E  1  xx           	.res 1
00000F  1               Z17:
00000F  1  xx           	.res 1
000010  1               Z18:
000010  1  xx           	.res 1
000011  1               LINNUM:
000011  1               TXPSV:
000011  1  xx xx        	.res 2
000013  1               INPUTBUFFER:
000013  1               
000013  1               .org ZP_START3
00005B  1               CHARAC:
00005B  1  xx           	.res 1
00005C  1               ENDCHR:
00005C  1  xx           	.res 1
00005D  1               EOLPNTR:
00005D  1  xx           	.res 1
00005E  1               DIMFLG:
00005E  1  xx           	.res 1
00005F  1               VALTYP:
00005F  1  xx           	.res 1
000060  1               DATAFLG:
000060  1  xx           	.res 1
000061  1               SUBFLG:
000061  1  xx           	.res 1
000062  1               INPUTFLG:
000062  1  xx           	.res 1
000063  1               CPRMASK:
000063  1  xx           	.res 1
000064  1               Z14:
000064  1  xx           	.res 1
000065  1               
000065  1               .org ZP_START4
000065  1               TEMPPT:
000065  1  xx           	.res 1
000066  1               LASTPT:
000066  1  xx xx        	.res 2
000068  1               TEMPST:
000068  1  xx xx xx xx  	.res 9
00006C  1  xx xx xx xx  
000070  1  xx           
000071  1               INDEX:
000071  1  xx xx        	.res 2
000073  1               DEST:
000073  1  xx xx        	.res 2
000075  1               RESULT:
000075  1  xx xx xx xx  	.res BYTES_FP
000079  1               RESULT_LAST = RESULT + BYTES_FP-1
000079  1               TXTTAB:
000079  1  xx xx        	.res 2
00007B  1               VARTAB:
00007B  1  xx xx        	.res 2
00007D  1               ARYTAB:
00007D  1  xx xx        	.res 2
00007F  1               STREND:
00007F  1  xx xx        	.res 2
000081  1               FRETOP:
000081  1  xx xx        	.res 2
000083  1               FRESPC:
000083  1  xx xx        	.res 2
000085  1               MEMSIZ:
000085  1  xx xx        	.res 2
000087  1               CURLIN:
000087  1  xx xx        	.res 2
000089  1               OLDLIN:
000089  1  xx xx        	.res 2
00008B  1               OLDTEXT:
00008B  1  xx xx        	.res 2
00008D  1               Z8C:
00008D  1  xx xx        	.res 2
00008F  1               DATPTR:
00008F  1  xx xx        	.res 2
000091  1               INPTR:
000091  1  xx xx        	.res 2
000093  1               VARNAM:
000093  1  xx xx        	.res 2
000095  1               VARPNT:
000095  1  xx xx        	.res 2
000097  1               FORPNT:
000097  1  xx xx        	.res 2
000099  1               LASTOP:
000099  1  xx xx        	.res 2
00009B  1               CPRTYP:
00009B  1  xx           	.res 1
00009C  1               FNCNAM:
00009C  1               TEMP3:
00009C  1  xx xx        	.res 2
00009E  1               DSCPTR:
00009E  1  xx xx        	.res 2
0000A0  1               DSCLEN:
0000A0  1  xx xx        	.res 2
0000A2  1               JMPADRS	:= DSCLEN + 1
0000A2  1               
0000A2  1               Z52:
0000A2  1  xx           	.res 1
0000A3  1               ARGEXTENSION:
0000A3  1               TEMP1:
0000A3  1  xx           	.res 1
0000A4  1               HIGHDS:
0000A4  1  xx xx        	.res 2
0000A6  1               HIGHTR:
0000A6  1  xx xx        	.res 2
0000A8  1               INDX:
0000A8  1               TMPEXP:
0000A8  1               TEMP2:
0000A8  1  xx           	.res 1
0000A9  1               EXPON:
0000A9  1  xx           	.res 1
0000AA  1               LOWTR:
0000AA  1               LOWTRX:
0000AA  1  xx           	.res 1
0000AB  1               EXPSGN:
0000AB  1  xx           	.res 1
0000AC  1               FAC:
0000AC  1  xx xx xx xx  	.res BYTES_FP
0000B0  1               FAC_LAST = FAC + BYTES_FP-1
0000B0  1               FACSIGN:
0000B0  1  xx           	.res 1
0000B1  1               SERLEN:
0000B1  1  xx           	.res 1
0000B2  1               SHIFTSIGNEXT:
0000B2  1  xx           	.res 1
0000B3  1               ARG:
0000B3  1  xx xx xx xx  	.res BYTES_FP
0000B7  1               ARG_LAST = ARG + BYTES_FP-1
0000B7  1               ARGSIGN:
0000B7  1  xx           	.res 1
0000B8  1               STRNG1:
0000B8  1  xx xx        	.res 2
0000BA  1               SGNCPR = STRNG1
0000BA  1               FACEXTENSION = STRNG1+1
0000BA  1               STRNG2:
0000BA  1  xx xx        	.res 2
0000BC  1               XYLODSAV2:
0000BC  1  xx xx        	.res 2
0000BE  1               zp_fat32_variables:
0000BE  1  xx xx xx xx  	.res 24
0000C2  1  xx xx xx xx  
0000C6  1  xx xx xx xx  
0000D6  1               CHRGET:
0000D6  1               TXTPTR = <(GENERIC_TXTPTR-GENERIC_CHRGET + CHRGET)
0000D6  1               CHRGOT = <(GENERIC_CHRGOT-GENERIC_CHRGET + CHRGET)
0000D6  1               CHRGOT2 = <(GENERIC_CHRGOT2-GENERIC_CHRGET + CHRGET)
0000D6  1               RNDSEED = <(GENERIC_RNDSEED-GENERIC_CHRGET + CHRGET)
0000D6  1               
0000D6  1               .segment "CODE"
000000r 1               .org $C000
00C000  1               TOKEN_ADDRESS_TABLE:
00C000  1  76 CB        		.word END-1
00C002  1  9E CA        		.word FOR-1
00C004  1  7C CF        		.word NEXT-1
00C006  1  48 CC        		.word DATA-1
00C008  1  5F CE        		.word INPUT-1
00C00A  1  3D D2        		.word DIM-1
00C00C  1  8B CE        		.word READ-1
00C00E  1  F5 CC        		.word LET-1
00C010  1               TOKEN_GOTO=$80+(*-TOKEN_ADDRESS_TABLE)/2
00C010  1  F5 CB        		.word GOTO-1
00C012  1  CD CB        		.word RUN-1
00C014  1  78 CC        		.word IF-1
00C016  1  62 CB        		.word RESTORE-1
00C018  1               TOKEN_GOSUB=$80+(*-TOKEN_ADDRESS_TABLE)/2
00C018  1  D8 CB        		.word GOSUB-1
00C01A  1  22 CC        		.word POP-1
00C01C  1               TOKEN_REM=$80+(*-TOKEN_ADDRESS_TABLE)/2
00C01C  1  8B CC        		.word REM-1
00C01E  1  74 CB        		.word STOP-1
00C020  1  9B CC        		.word ON-1
00C022  1  B7 CB        		.word NULL-1
00C024  1  6E D9        		.word WAIT-1
00C026  1  EF E4        		.word LOAD-1
00C028  1  12 E6        		.word SAVE-1
00C02A  1  1A D5        		.word DEF-1
00C02C  1  65 D9        		.word POKE-1
00C02E  1               TOKEN_PRINT=$80+(*-TOKEN_ADDRESS_TABLE)/2
00C02E  1  6B CD        		.word PRINT-1
00C030  1  9D CB        		.word CONT-1
00C032  1  FD C9        		.word LIST-1
00C034  1  C8 CB        		.word CLEAR-1
00C036  1  A9 C9        		.word NEW-1
00C038  1               TOKEN_TAB=$00+$80+(*-TOKEN_ADDRESS_TABLE)/2
00C038  1               TOKEN_TO=$01+$80+(*-TOKEN_ADDRESS_TABLE)/2
00C038  1               TOKEN_FN=$02+$80+(*-TOKEN_ADDRESS_TABLE)/2
00C038  1               TOKEN_SPC=$03+$80+(*-TOKEN_ADDRESS_TABLE)/2
00C038  1               TOKEN_THEN=$04+$80+(*-TOKEN_ADDRESS_TABLE)/2
00C038  1               TOKEN_NOT=$05+$80+(*-TOKEN_ADDRESS_TABLE)/2
00C038  1               TOKEN_STEP=$06+$80+(*-TOKEN_ADDRESS_TABLE)/2
00C038  1               TOKEN_PLUS=$07+$80+(*-TOKEN_ADDRESS_TABLE)/2
00C038  1               TOKEN_MINUS=$08+$80+(*-TOKEN_ADDRESS_TABLE)/2
00C038  1               TOKEN_GREATER=$0E+$80+(*-TOKEN_ADDRESS_TABLE)/2
00C038  1               TOKEN_EQUAL=$0F+$80+(*-TOKEN_ADDRESS_TABLE)/2
00C038  1               NUM_TOKENS=(*-TOKEN_ADDRESS_TABLE)/2
00C038  1               
00C038  1               UNFNC:
00C038  1               TOKEN_SGN=$11+$80+(*-TOKEN_ADDRESS_TABLE)/2
00C038  1  15 DD        		.word SGN
00C03A  1  9F DD        		.word INT
00C03C  1  32 DD        		.word ABS
00C03E  1  0A 00        		.word USR
00C040  1  EA D4        		.word FRE
00C042  1  0B D5        		.word POS
00C044  1  E9 DF        		.word SQR
00C046  1  FD E0        		.word RND
00C048  1  FA DA        		.word LOG
00C04A  1  58 E0        		.word EXP
00C04C  1  39 E1        		.word COS
00C04E  1  40 E1        		.word SIN
00C050  1  89 E1        		.word TAN
00C052  1  D6 E1        		.word ATN
00C054  1  5B D9        		.word PEEK
00C056  1  C9 D8        		.word LEN
00C058  1  C9 D5        		.word STR
00C05A  1  FA D8        		.word VAL
00C05C  1  D8 D8        		.word ASC
00C05E  1  39 D8        		.word CHRSTR
00C060  1               TOKEN_LEFTSTR=$11+$80+(*-TOKEN_ADDRESS_TABLE)/2
00C060  1  4D D8        		.word LEFTSTR
00C062  1  79 D8        		.word RIGHTSTR
00C064  1  84 D8        		.word MIDSTR
00C066  1               
00C066  1               MATHTBL:
00C066  1  79                   .byte   $79
00C067  1  AB D9                .word   FADDT-1
00C069  1  79                   .byte   $79
00C06A  1  94 D9                .word   FSUBT-1
00C06C  1  7B                   .byte   $7B
00C06D  1  3A DB                .word   FMULTT-1
00C06F  1  7B                   .byte   $7B
00C070  1  09 DC                .word   FDIVT-1
00C072  1  7F                   .byte   $7F
00C073  1  F2 DF                .word   FPWRT-1
00C075  1  50                   .byte   $50
00C076  1  A5 D1                .word   TAND-1
00C078  1  46                   .byte   $46
00C079  1  A2 D1                .word   OR-1
00C07B  1  7D                   .byte   $7D
00C07C  1  2B E0                .word   NEGOP-1
00C07E  1  5A                   .byte   $5A
00C07F  1  14 D1                .word   EQUOP-1
00C081  1  64                   .byte   $64
00C082  1  D2 D1                .word   RELOPS-1
00C084  1               
00C084  1               TOKEN_NAME_TABLE:
00C084  1  45 4E C4     		.byte "EN", $80+'D'
00C087  1  46 4F D2     		.byte "FO", $80+'R'
00C08A  1  4E 45 58 D4  		.byte "NEX", $80+'T'
00C08E  1  44 41 54 C1  		.byte "DAT", $80+'A'
00C092  1  49 4E 50 55  		.byte "INPU", $80+'T'
00C096  1  D4           
00C097  1  44 49 CD     		.byte "DI", $80+'M'
00C09A  1  52 45 41 C4  		.byte "REA", $80+'D'
00C09E  1  4C 45 D4     		.byte "LE", $80+'T'
00C0A1  1  47 4F 54 CF  		.byte "GOT", $80+'O'
00C0A5  1  52 55 CE     		.byte "RU", $80+'N'
00C0A8  1  49 C6        		.byte "I", $80+'F'
00C0AA  1  52 45 53 54  		.byte "RESTOR", $80+'E'
00C0AE  1  4F 52 C5     
00C0B1  1  47 4F 53 55  		.byte "GOSU", $80+'B'
00C0B5  1  C2           
00C0B6  1  52 45 54 55  		.byte "RETUR", $80+'N'
00C0BA  1  52 CE        
00C0BC  1  52 45 CD     		.byte "RE", $80+'M'
00C0BF  1  53 54 4F D0  		.byte "STO", $80+'P'
00C0C3  1  4F CE        		.byte "O", $80+'N'
00C0C5  1  4E 55 4C CC  		.byte "NUL", $80+'L'
00C0C9  1  57 41 49 D4  		.byte "WAI", $80+'T'
00C0CD  1  4C 4F 41 C4  		.byte "LOA", $80+'D'
00C0D1  1  53 41 56 C5  		.byte "SAV", $80+'E'
00C0D5  1  44 45 C6     		.byte "DE", $80+'F'
00C0D8  1  50 4F 4B C5  		.byte "POK", $80+'E'
00C0DC  1  50 52 49 4E  		.byte "PRIN", $80+'T'
00C0E0  1  D4           
00C0E1  1  43 4F 4E D4  		.byte "CON", $80+'T'
00C0E5  1  4C 49 53 D4  		.byte "LIS", $80+'T'
00C0E9  1  43 4C 45 41  		.byte "CLEA", $80+'R'
00C0ED  1  D2           
00C0EE  1  4E 45 D7     		.byte "NE", $80+'W'
00C0F1  1  54 41 42 A8  		.byte "TAB", $80+'('
00C0F5  1  54 CF        		.byte "T", $80+'O'
00C0F7  1  46 CE        		.byte "F", $80+'N'
00C0F9  1  53 50 43 A8  		.byte "SPC", $80+'('
00C0FD  1  54 48 45 CE  		.byte "THE", $80+'N'
00C101  1  4E 4F D4     		.byte "NO", $80+'T'
00C104  1  53 54 45 D0  		.byte "STE", $80+'P'
00C108  1  AB           		.byte "", $80+'+'
00C109  1  AD           		.byte "", $80+'-'
00C10A  1  AA           		.byte "", $80+'*'
00C10B  1  AF           		.byte "", $80+'/'
00C10C  1  DE           		.byte "", $80+'^'
00C10D  1  41 4E C4     		.byte "AN", $80+'D'
00C110  1  4F D2        		.byte "O", $80+'R'
00C112  1  BE           		.byte "", $80+'>'
00C113  1  BD           		.byte "", $80+'='
00C114  1  BC           		.byte "", $80+'<'
00C115  1  53 47 CE     		.byte "SG", $80+'N'
00C118  1  49 4E D4     		.byte "IN", $80+'T'
00C11B  1  41 42 D3     		.byte "AB", $80+'S'
00C11E  1  55 53 D2     		.byte "US", $80+'R'
00C121  1  46 52 C5     		.byte "FR", $80+'E'
00C124  1  50 4F D3     		.byte "PO", $80+'S'
00C127  1  53 51 D2     		.byte "SQ", $80+'R'
00C12A  1  52 4E C4     		.byte "RN", $80+'D'
00C12D  1  4C 4F C7     		.byte "LO", $80+'G'
00C130  1  45 58 D0     		.byte "EX", $80+'P'
00C133  1  43 4F D3     		.byte "CO", $80+'S'
00C136  1  53 49 CE     		.byte "SI", $80+'N'
00C139  1  54 41 CE     		.byte "TA", $80+'N'
00C13C  1  41 54 CE     		.byte "AT", $80+'N'
00C13F  1  50 45 45 CB  		.byte "PEE", $80+'K'
00C143  1  4C 45 CE     		.byte "LE", $80+'N'
00C146  1  53 54 52 A4  		.byte "STR", $80+'$'
00C14A  1  56 41 CC     		.byte "VA", $80+'L'
00C14D  1  41 53 C3     		.byte "AS", $80+'C'
00C150  1  43 48 52 A4  		.byte "CHR", $80+'$'
00C154  1  4C 45 46 54  		.byte "LEFT", $80+'$'
00C158  1  A4           
00C159  1  52 49 47 48  		.byte "RIGHT", $80+'$'
00C15D  1  54 A4        
00C15F  1  4D 49 44 A4  		.byte "MID", $80+'$'
00C163  1  00           		.byte   0
00C164  1               
00C164  1               ERROR_MESSAGES:
00C164  1               ERR_NOFOR := <(*-ERROR_MESSAGES)
00C164  1  4E 46                .byte "NF"
00C166  1               ERR_SYNTAX := <(*-ERROR_MESSAGES)
00C166  1  53 4E                .byte "SN"
00C168  1               ERR_NOGOSUB := <(*-ERROR_MESSAGES)
00C168  1  52 47                .byte "RG"
00C16A  1               ERR_NODATA := <(*-ERROR_MESSAGES)
00C16A  1  4F 44                .byte "OD"
00C16C  1               ERR_ILLQTY := <(*-ERROR_MESSAGES)
00C16C  1  46 43                .byte "FC"
00C16E  1               ERR_OVERFLOW := <(*-ERROR_MESSAGES)
00C16E  1  4F 56                .byte "OV"
00C170  1               ERR_MEMFULL := <(*-ERROR_MESSAGES)
00C170  1  4F 4D                .byte "OM"
00C172  1               ERR_UNDEFSTAT := <(*-ERROR_MESSAGES)
00C172  1  55 53                .byte "US"
00C174  1               ERR_BADSUBS := <(*-ERROR_MESSAGES)
00C174  1  42 53                .byte "BS"
00C176  1               ERR_REDIMD := <(*-ERROR_MESSAGES)
00C176  1  44 44                .byte "DD"
00C178  1               ERR_ZERODIV := <(*-ERROR_MESSAGES)
00C178  1  2F 30                .byte "/0"
00C17A  1               ERR_ILLDIR := <(*-ERROR_MESSAGES)
00C17A  1  49 44                .byte "ID"
00C17C  1               ERR_BADTYPE := <(*-ERROR_MESSAGES)
00C17C  1  54 4D                .byte "TM"
00C17E  1               ERR_STRLONG := <(*-ERROR_MESSAGES)
00C17E  1  4C 53                .byte "LS"
00C180  1               ERR_FRMCPX := <(*-ERROR_MESSAGES)
00C180  1  53 54                .byte "ST"
00C182  1               ERR_CANTCONT := <(*-ERROR_MESSAGES)
00C182  1  43 4E                .byte "CN"
00C184  1               ERR_UNDEFFN := <(*-ERROR_MESSAGES)
00C184  1  55 46                .byte "UF"
00C186  1               
00C186  1               ; global messages: "error", "in", "ready", "break"
00C186  1               QT_ERROR:
00C186  1  20 45 52 52          .byte   " ERROR"
00C18A  1  4F 52        
00C18C  1  00                   .byte   0
00C18D  1               QT_IN:
00C18D  1  20 49 4E 20          .byte   " IN "
00C191  1  00                   .byte   $00
00C192  1               QT_OK:
00C192  1  0D 0A 4F 4B  		.byte   CR,LF,"OK",CR,LF
00C196  1  0D 0A        
00C198  1  00           		.byte	0
00C199  1               QT_BREAK:
00C199  1  0D 0A 42 52  		.byte CR,LF,"BREAK"
00C19D  1  45 41 4B     
00C1A0  1  00                   .byte   0
00C1A1  1               
00C1A1  1               	.include "hwconfig.s"
00C1A1  2               PORTB = $b000
00C1A1  2               PORTA = $b001
00C1A1  2               DDRB = $b002
00C1A1  2               DDRA = $b003
00C1A1  2               
00C1A1  2               LCD_E  = %10000000
00C1A1  2               LCD_RW = %01000000
00C1A1  2               LCD_RS = %00100000
00C1A1  2               
00C1A1  2               SD_CS   = %00010000
00C1A1  2               SD_SCK  = %00001000
00C1A1  2               SD_MOSI = %00000100
00C1A1  2               SD_MISO = %00000010
00C1A1  2               
00C1A1  2               PORTA_OUTPUTPINS = LCD_E | LCD_RW | LCD_RS | SD_CS | SD_SCK | SD_MOSI
00C1A1  2               
00C1A1  2               via_init:
00C1A1  2  A9 FF          lda #%11111111          ; Set all pins on port B to output
00C1A3  2  8D 02 B0       sta DDRB
00C1A6  2  A9 FC          lda #PORTA_OUTPUTPINS   ; Set various pins on port A to output
00C1A8  2  8D 03 B0       sta DDRA
00C1AB  2  60             rts
00C1AC  2               
00C1AC  2               
00C1AC  1                	.include "libsd.s"
00C1AC  2               ; SD card interface module
00C1AC  2               ;
00C1AC  2               ; Requires zero-page variable storage:
00C1AC  2               ;   zp_sd_address - 2 bytes
00C1AC  2               ;   zp_sd_currentsector - 4 bytes
00C1AC  2               
00C1AC  2               cmsg:
00C1AC  2  43 6F 6D 6D    .byte "Command: ", $00
00C1B0  2  61 6E 64 3A  
00C1B4  2  20 00        
00C1B6  2               
00C1B6  2               sd_init:
00C1B6  2                 ; Let the SD card boot up, by pumping the clock with SD CS disabled
00C1B6  2               
00C1B6  2                 ; We need to apply around 80 clock pulses with CS and MOSI high.
00C1B6  2                 ; Normally MOSI doesn't matter when CS is high, but the card is
00C1B6  2                 ; not yet is SPI mode, and in this non-SPI state it does care.
00C1B6  2               
00C1B6  2  A9 14          lda #SD_CS | SD_MOSI
00C1B8  2  A2 A0          ldx #160               ; toggle the clock 160 times, so 80 low-high transitions
00C1BA  2               preinitloop:
00C1BA  2  49 08          eor #SD_SCK
00C1BC  2  8D 01 B0       sta PORTA
00C1BF  2  CA             dex
00C1C0  2  D0 F8          bne preinitloop
00C1C2  2               
00C1C2  2               
00C1C2  2               cmd0: ; GO_IDLE_STATE - resets card to idle state, and SPI mode
00C1C2  2  A9 1A          lda #<sd_cmd0_bytes
00C1C4  2  85 01          sta zp_sd_address
00C1C6  2  A9 C2          lda #>sd_cmd0_bytes
00C1C8  2  85 02          sta zp_sd_address+1
00C1CA  2               
00C1CA  2  20 6C C2       jsr sd_sendcommand
00C1CD  2               
00C1CD  2                 ; Expect status response $01 (not initialized)
00C1CD  2                ; cmp #$01
00C1CD  2                ; bne .initfailed
00C1CD  2               
00C1CD  2               cmd8: ; SEND_IF_COND - tell the card how we want it to operate (3.3V, etc)
00C1CD  2  A9 20          lda #<sd_cmd8_bytes
00C1CF  2  85 01          sta zp_sd_address
00C1D1  2  A9 C2          lda #>sd_cmd8_bytes
00C1D3  2  85 02          sta zp_sd_address+1
00C1D5  2               
00C1D5  2  20 6C C2       jsr sd_sendcommand
00C1D8  2               
00C1D8  2                 ; Expect status response $01 (not initialized)
00C1D8  2  C9 01          cmp #$01
00C1DA  2  D0 3B          bne initfailed
00C1DC  2               
00C1DC  2                 ; Read 32-bit return value, but ignore it
00C1DC  2  20 32 C2       jsr sd_readbyte
00C1DF  2  20 32 C2       jsr sd_readbyte
00C1E2  2  20 32 C2       jsr sd_readbyte
00C1E5  2  20 32 C2       jsr sd_readbyte
00C1E8  2               
00C1E8  2               cmd55: ; APP_CMD - required prefix for ACMD commands
00C1E8  2  A9 26          lda #<sd_cmd55_bytes
00C1EA  2  85 01          sta zp_sd_address
00C1EC  2  A9 C2          lda #>sd_cmd55_bytes
00C1EE  2  85 02          sta zp_sd_address+1
00C1F0  2               
00C1F0  2  20 6C C2       jsr sd_sendcommand
00C1F3  2               
00C1F3  2                 ; Expect status response $01 (not initialized)
00C1F3  2  C9 01          cmp #$01
00C1F5  2  D0 20          bne initfailed
00C1F7  2               
00C1F7  2               cmd41: ; APP_SEND_OP_COND - send operating conditions, initialize card
00C1F7  2  A9 2C          lda #<sd_cmd41_bytes
00C1F9  2  85 01          sta zp_sd_address
00C1FB  2  A9 C2          lda #>sd_cmd41_bytes
00C1FD  2  85 02          sta zp_sd_address+1
00C1FF  2               
00C1FF  2  20 6C C2       jsr sd_sendcommand
00C202  2               
00C202  2                 ; Status response $00 means initialised
00C202  2  C9 00          cmp #$00
00C204  2  F0 11          beq initialized
00C206  2               
00C206  2                 ; Otherwise expect status response $01 (not initialized)
00C206  2  C9 01          cmp #$01
00C208  2  D0 0D          bne initfailed
00C20A  2               
00C20A  2                 ; Not initialized yet, so wait a while then try again.
00C20A  2                 ; This retry is important, to give the card time to initialize.
00C20A  2               
00C20A  2  A2 00          ldx #0
00C20C  2  A0 00          ldy #0
00C20E  2               delayloop:
00C20E  2  88             dey
00C20F  2  D0 FD          bne delayloop
00C211  2  CA             dex
00C212  2  D0 FA          bne delayloop
00C214  2               
00C214  2  4C E8 C1       jmp cmd55
00C217  2               
00C217  2               
00C217  2               initialized:
00C217  2               ;  ldy #>initmsg
00C217  2               ;  ldx #<initmsg
00C217  2               ;  jsr w_acia_full
00C217  2               ;  rts
00C217  2               
00C217  2               initfailed:
00C217  2               ;  ldy #>initfailedmsg
00C217  2               ;  ldx #<initfailedmsg
00C217  2               ;  jsr w_acia_full
00C217  2               loop:
00C217  2  4C 17 C2       jmp loop
00C21A  2               
00C21A  2               
00C21A  2               sd_cmd0_bytes:
00C21A  2  40 00 00 00    .byte $40, $00, $00, $00, $00, $95
00C21E  2  00 95        
00C220  2               sd_cmd8_bytes:
00C220  2  48 00 00 01    .byte $48, $00, $00, $01, $aa, $87
00C224  2  AA 87        
00C226  2               sd_cmd55_bytes:
00C226  2  77 00 00 00    .byte $77, $00, $00, $00, $00, $01
00C22A  2  00 01        
00C22C  2               sd_cmd41_bytes:
00C22C  2  69 40 00 00    .byte $69, $40, $00, $00, $00, $01
00C230  2  00 01        
00C232  2               
00C232  2               
00C232  2               
00C232  2               sd_readbyte:
00C232  2                 ; Enable the card and tick the clock 8 times with MOSI high,
00C232  2                 ; capturing bits from MISO and returning them
00C232  2               
00C232  2  A2 FE          ldx #$fe    ; Preloaded with seven ones and a zero, so we stop after eight bits
00C234  2               
00C234  2               loop2:
00C234  2               
00C234  2  A9 04          lda #SD_MOSI                ; enable card (CS low), set MOSI (resting state), SCK low
00C236  2  8D 01 B0       sta PORTA
00C239  2               
00C239  2  A9 0C          lda #SD_MOSI | SD_SCK       ; toggle the clock high
00C23B  2  8D 01 B0       sta PORTA
00C23E  2               
00C23E  2  AD 01 B0       lda PORTA                   ; read next bit
00C241  2  29 02          and #SD_MISO
00C243  2               
00C243  2  18             clc                         ; default to clearing the bottom bit
00C244  2  F0 01          beq bitnotset              ; unless MISO was set
00C246  2  38             sec                         ; in which case get ready to set the bottom bit
00C247  2               bitnotset:
00C247  2               
00C247  2  8A             txa                         ; transfer partial result from X
00C248  2  2A             rol                         ; rotate carry bit into read result, and loop bit into carry
00C249  2  AA             tax                         ; save partial result back to X
00C24A  2               
00C24A  2  B0 E8          bcs loop2                   ; loop if we need to read more bits
00C24C  2               
00C24C  2  60             rts
00C24D  2               
00C24D  2               
00C24D  2               sd_writebyte:
00C24D  2                 ; Tick the clock 8 times with descending bits on MOSI
00C24D  2                 ; SD communication is mostly half-duplex so we ignore anything it sends back here
00C24D  2               
00C24D  2  A2 08          ldx #8                      ; send 8 bits
00C24F  2               
00C24F  2               loop3:
00C24F  2  0A             asl                         ; shift next bit into carry
00C250  2  A8             tay                         ; save remaining bits for later
00C251  2               
00C251  2  A9 00          lda #0
00C253  2  90 02          bcc sendbit                ; if carry clear, don't set MOSI for this bit
00C255  2  09 04          ora #SD_MOSI
00C257  2               
00C257  2               sendbit:
00C257  2  8D 01 B0       sta PORTA                   ; set MOSI (or not) first with SCK low
00C25A  2  49 08          eor #SD_SCK
00C25C  2  8D 01 B0       sta PORTA                   ; raise SCK keeping MOSI the same, to send the bit
00C25F  2               
00C25F  2  98             tya                         ; restore remaining bits to send
00C260  2               
00C260  2  CA             dex
00C261  2  D0 EC          bne loop3                   ; loop if there are more bits to send
00C263  2               
00C263  2  60             rts
00C264  2               
00C264  2               
00C264  2               sd_waitresult:
00C264  2                 ; Wait for the SD card to return something other than $ff
00C264  2  20 32 C2       jsr sd_readbyte
00C267  2  C9 FF          cmp #$ff
00C269  2  F0 F9          beq sd_waitresult
00C26B  2  60             rts
00C26C  2               
00C26C  2               
00C26C  2               sd_sendcommand:
00C26C  2                 ; Debug print which command is being executed
00C26C  2                ; jsr lcd_cleardisplay
00C26C  2                ; jsr cleardisplay
00C26C  2               
00C26C  2               ;  phx
00C26C  2               ;  phy
00C26C  2               ;  ldx #<cmsg
00C26C  2               ;  ldy #>cmsg
00C26C  2               ;  jsr w_acia_full
00C26C  2               ;  ply
00C26C  2               ;  plx
00C26C  2               
00C26C  2               ;  ldx #0
00C26C  2               ;  lda (zp_sd_address,x)
00C26C  2               ;  jsr print_hex_acia
00C26C  2               
00C26C  2               ;  lda #$20
00C26C  2               ;  jsr print_chara
00C26C  2               ;
00C26C  2               ;  lda #$20
00C26C  2               ;  jsr print_chara
00C26C  2               
00C26C  2  A9 04          lda #SD_MOSI           ; pull CS low to begin command
00C26E  2  8D 01 B0       sta PORTA
00C271  2               
00C271  2  A0 00          ldy #0
00C273  2  B1 01          lda (zp_sd_address),y    ; command byte
00C275  2  20 4D C2       jsr sd_writebyte
00C278  2  A0 01          ldy #1
00C27A  2  B1 01          lda (zp_sd_address),y    ; data 1
00C27C  2  20 4D C2       jsr sd_writebyte
00C27F  2  A0 02          ldy #2
00C281  2  B1 01          lda (zp_sd_address),y    ; data 2
00C283  2  20 4D C2       jsr sd_writebyte
00C286  2  A0 03          ldy #3
00C288  2  B1 01          lda (zp_sd_address),y    ; data 3
00C28A  2  20 4D C2       jsr sd_writebyte
00C28D  2  A0 04          ldy #4
00C28F  2  B1 01          lda (zp_sd_address),y    ; data 4
00C291  2  20 4D C2       jsr sd_writebyte
00C294  2  A0 05          ldy #5
00C296  2  B1 01          lda (zp_sd_address),y    ; crc
00C298  2  20 4D C2       jsr sd_writebyte
00C29B  2               
00C29B  2  20 64 C2       jsr sd_waitresult
00C29E  2  48             pha
00C29F  2               
00C29F  2               ;  phy
00C29F  2               ;  phx
00C29F  2               ;  ldy #>respmsg
00C29F  2               ;  ldx #<respmsg
00C29F  2               ;  jsr w_acia_full
00C29F  2               ;  ply
00C29F  2               ;  plx
00C29F  2               
00C29F  2                 ; Debug print the result code
00C29F  2               ;  jsr print_hex_acia
00C29F  2               
00C29F  2               ;  lda #$0d
00C29F  2               ;  jsr print_chara
00C29F  2               ;
00C29F  2               ;  lda #$0a
00C29F  2               ;  jsr print_chara
00C29F  2               
00C29F  2                 ; End command
00C29F  2  A9 14          lda #SD_CS | SD_MOSI   ; set CS high again
00C2A1  2  8D 01 B0       sta PORTA
00C2A4  2               
00C2A4  2  68             pla   ; restore result code
00C2A5  2  60             rts
00C2A6  2               
00C2A6  2               
00C2A6  2               sd_readsector:
00C2A6  2                 ; Read a sector from the SD card.  A sector is 512 bytes.
00C2A6  2                 ;
00C2A6  2                 ; Parameters:
00C2A6  2                 ;    zp_sd_currentsector   32-bit sector number
00C2A6  2                 ;    zp_sd_address     address of buffer to receive data
00C2A6  2               
00C2A6  2  A9 04          lda #SD_MOSI
00C2A8  2  8D 01 B0       sta PORTA
00C2AB  2               
00C2AB  2                 ; Command 17, arg is sector number, crc not checked
00C2AB  2  A9 51          lda #$51                    ; CMD17 - READ_SINGLE_BLOCK
00C2AD  2  20 4D C2       jsr sd_writebyte
00C2B0  2  A5 06          lda zp_sd_currentsector+3   ; sector 24:31
00C2B2  2  20 4D C2       jsr sd_writebyte
00C2B5  2  A5 05          lda zp_sd_currentsector+2   ; sector 16:23
00C2B7  2  20 4D C2       jsr sd_writebyte
00C2BA  2  A5 04          lda zp_sd_currentsector+1   ; sector 8:15
00C2BC  2  20 4D C2       jsr sd_writebyte
00C2BF  2  A5 03          lda zp_sd_currentsector     ; sector 0:7
00C2C1  2  20 4D C2       jsr sd_writebyte
00C2C4  2  A9 01          lda #$01                    ; crc (not checked)
00C2C6  2  20 4D C2       jsr sd_writebyte
00C2C9  2               
00C2C9  2  20 64 C2       jsr sd_waitresult
00C2CC  2  C9 00          cmp #$00
00C2CE  2  D0 17          bne fail
00C2D0  2               
00C2D0  2                 ; wait for data
00C2D0  2  20 64 C2       jsr sd_waitresult
00C2D3  2  C9 FE          cmp #$fe
00C2D5  2  D0 10          bne fail
00C2D7  2               
00C2D7  2                 ; Need to read 512 bytes - two pages of 256 bytes each
00C2D7  2  20 EA C2       jsr readpage
00C2DA  2  E6 02          inc zp_sd_address+1
00C2DC  2  20 EA C2       jsr readpage
00C2DF  2  C6 02          dec zp_sd_address+1
00C2E1  2               
00C2E1  2                 ; End command
00C2E1  2  A9 14          lda #SD_CS | SD_MOSI
00C2E3  2  8D 01 B0       sta PORTA
00C2E6  2               
00C2E6  2  60             rts
00C2E7  2               
00C2E7  2               
00C2E7  2               fail:
00C2E7  2               ;  ldx #<statusmsg
00C2E7  2               ;  ldy #>statusmsg  ; Status:
00C2E7  2               ;  jsr w_acia_full
00C2E7  2               
00C2E7  2               ;  ldx #<failedmsg
00C2E7  2               ;  ldy #>failedmsg  ; Failed!
00C2E7  2               ;  jsr w_acia_full
00C2E7  2               failloop:
00C2E7  2  4C E7 C2       jmp failloop
00C2EA  2               
00C2EA  2               
00C2EA  2               readpage:
00C2EA  2                 ; Read 256 bytes to the address at zp_sd_address
00C2EA  2  A0 00          ldy #0
00C2EC  2               readloop:
00C2EC  2  20 32 C2       jsr sd_readbyte
00C2EF  2  91 01          sta (zp_sd_address),y
00C2F1  2  C8             iny
00C2F2  2  D0 F8          bne readloop
00C2F4  2  60             rts
00C2F5  2               
00C2F5  2               statusmsg:
00C2F5  2  53 74 61 74    .byte "Status: ", $00
00C2F9  2  75 73 3A 20  
00C2FD  2  00           
00C2FE  2               initfailedmsg:
00C2FE  2  49 6E 69 74    .byte "Init "
00C302  2  20           
00C303  2               failedmsg:
00C303  2  46 61 69 6C    .byte "Failed!", $0d, $0a, $00
00C307  2  65 64 21 0D  
00C30B  2  0A 00        
00C30D  2               respmsg:
00C30D  2  52 65 73 70    .byte "Response: ", $00
00C311  2  6F 6E 73 65  
00C315  2  3A 20 00     
00C318  2               initmsg:
00C318  2  49 6E 69 74    .byte "Initialized!", $0d, $0a, $00
00C31C  2  69 61 6C 69  
00C320  2  7A 65 64 21  
00C327  2               
00C327  1                 	.include "libfat32.s"
00C327  2               ; FAT32/SD interface library
00C327  2               ;
00C327  2               ; This module requires some RAM workspace to be defined elsewhere:
00C327  2               ;
00C327  2               ; fat32_workspace    - a large page-aligned 512-byte workspace
00C327  2               ; zp_fat32_variables - 24 bytes of zero-page storage for variables etc
00C327  2               
00C327  2               fat32_readbuffer = fat32_workspace
00C327  2               
00C327  2               fat32_fatstart          = zp_fat32_variables + $00  ; 4 bytes
00C327  2               fat32_datastart         = zp_fat32_variables + $04  ; 4 bytes
00C327  2               fat32_rootcluster       = zp_fat32_variables + $08  ; 4 bytes
00C327  2               fat32_sectorspercluster = zp_fat32_variables + $0c  ; 1 byte
00C327  2               fat32_pendingsectors    = zp_fat32_variables + $0d  ; 1 byte
00C327  2               fat32_address           = zp_fat32_variables + $0e  ; 2 bytes
00C327  2               fat32_nextcluster       = zp_fat32_variables + $10  ; 4 bytes
00C327  2               fat32_bytesremaining    = zp_fat32_variables + $14  ; 4 bytes
00C327  2               
00C327  2               fat32_errorstage        = fat32_bytesremaining  ; only used during initializatio
00C327  2               fat32_filenamepointer   = fat32_bytesremaining  ; only used when searching for a file
00C327  2               
00C327  2               
00C327  2               fat32_init:
00C327  2                 ; Initialize the module - read the MBR etc, find the partition,
00C327  2                 ; and set up the variables ready for navigating the filesystem
00C327  2               
00C327  2                 ; Read the MBR and extract pertinent information
00C327  2               
00C327  2  A9 00          lda #0
00C329  2  85 D2          sta fat32_errorstage
00C32B  2               
00C32B  2                 ; Sector 0
00C32B  2  A9 00          lda #0
00C32D  2  85 03          sta zp_sd_currentsector
00C32F  2  85 04          sta zp_sd_currentsector+1
00C331  2  85 05          sta zp_sd_currentsector+2
00C333  2  85 06          sta zp_sd_currentsector+3
00C335  2               
00C335  2                 ; Target buffer
00C335  2  A9 00          lda #<fat32_readbuffer
00C337  2  85 01          sta zp_sd_address
00C339  2  A9 02          lda #>fat32_readbuffer
00C33B  2  85 02          sta zp_sd_address+1
00C33D  2               
00C33D  2                 ; Do the read
00C33D  2  20 A6 C2       jsr sd_readsector
00C340  2               
00C340  2               
00C340  2  E6 D2          inc fat32_errorstage ; stage 1 = boot sector signature check
00C342  2               
00C342  2                 ; Check some things
00C342  2  AD FE 03       lda fat32_readbuffer + 510 ; Boot sector signature 55
00C345  2  C9 55          cmp #$55
00C347  2  D0 9E          bne fail
00C349  2  AD FF 03       lda fat32_readbuffer + 511 ; Boot sector signature aa
00C34C  2  C9 AA          cmp #$aa
00C34E  2  D0 97          bne fail
00C350  2               
00C350  2               
00C350  2  E6 D2          inc fat32_errorstage ; stage 2 = finding partition
00C352  2               
00C352  2                 ; Find a FAT32 partition
00C352  2               FSTYPE_FAT32 = 12
00C352  2  A2 00          ldx #0
00C354  2  BD C2 03       lda fat32_readbuffer+$1c2,x
00C357  2  C9 0C          cmp #FSTYPE_FAT32
00C359  2  F0 1E          beq foundpart
00C35B  2  A2 10          ldx #16
00C35D  2  BD C2 03       lda fat32_readbuffer+$1c2,x
00C360  2  C9 0C          cmp #FSTYPE_FAT32
00C362  2  F0 15          beq foundpart
00C364  2  A2 20          ldx #32
00C366  2  BD C2 03       lda fat32_readbuffer+$1c2,x
00C369  2  C9 0C          cmp #FSTYPE_FAT32
00C36B  2  F0 0C          beq foundpart
00C36D  2  A2 30          ldx #48
00C36F  2  BD C2 03       lda fat32_readbuffer+$1c2,x
00C372  2  C9 0C          cmp #FSTYPE_FAT32
00C374  2  F0 03          beq foundpart
00C376  2               
00C376  2               fail4:
00C376  2  4C 23 C4       jmp error
00C379  2               
00C379  2               foundpart:
00C379  2               
00C379  2                 ; Read the FAT32 BPB
00C379  2  BD C6 03       lda fat32_readbuffer+$1c6,x
00C37C  2  85 03          sta zp_sd_currentsector
00C37E  2  BD C7 03       lda fat32_readbuffer+$1c7,x
00C381  2  85 04          sta zp_sd_currentsector+1
00C383  2  BD C8 03       lda fat32_readbuffer+$1c8,x
00C386  2  85 05          sta zp_sd_currentsector+2
00C388  2  BD C9 03       lda fat32_readbuffer+$1c9,x
00C38B  2  85 06          sta zp_sd_currentsector+3
00C38D  2               
00C38D  2  20 A6 C2       jsr sd_readsector
00C390  2               
00C390  2               
00C390  2  E6 D2          inc fat32_errorstage ; stage 3 = BPB signature check
00C392  2               
00C392  2                 ; Check some things
00C392  2  AD FE 03       lda fat32_readbuffer+510 ; BPB sector signature 55
00C395  2  C9 55          cmp #$55
00C397  2  D0 DD          bne fail4
00C399  2  AD FF 03       lda fat32_readbuffer+511 ; BPB sector signature aa
00C39C  2  C9 AA          cmp #$aa
00C39E  2  D0 D6          bne fail4
00C3A0  2               
00C3A0  2  E6 D2          inc fat32_errorstage ; stage 4 = RootEntCnt check
00C3A2  2               
00C3A2  2  AD 11 02       lda fat32_readbuffer+17 ; RootEntCnt should be 0 for FAT32
00C3A5  2  0D 12 02       ora fat32_readbuffer+18
00C3A8  2  D0 CC          bne fail4
00C3AA  2               
00C3AA  2  E6 D2          inc fat32_errorstage ; stage 5 = TotSec16 check
00C3AC  2               
00C3AC  2  AD 13 02       lda fat32_readbuffer+19 ; TotSec16 should be 0 for FAT32
00C3AF  2  0D 14 02       ora fat32_readbuffer+20
00C3B2  2  D0 C2          bne fail4
00C3B4  2               
00C3B4  2  E6 D2          inc fat32_errorstage ; stage 6 = SectorsPerCluster check
00C3B6  2               
00C3B6  2                 ; Check bytes per filesystem sector, it should be 512 for any SD card that supports FAT32
00C3B6  2  AD 0B 02       lda fat32_readbuffer+11 ; low byte should be zero
00C3B9  2  D0 BB          bne fail4
00C3BB  2  AD 0C 02       lda fat32_readbuffer+12 ; high byte is 2 (512), 4, 8, or 16
00C3BE  2  C9 02          cmp #2
00C3C0  2  D0 B4          bne fail4
00C3C2  2               
00C3C2  2               
00C3C2  2                 ; Calculate the starting sector of the FAT
00C3C2  2  18             clc
00C3C3  2  A5 03          lda zp_sd_currentsector
00C3C5  2  6D 0E 02       adc fat32_readbuffer+14    ; reserved sectors lo
00C3C8  2  85 BE          sta fat32_fatstart
00C3CA  2  85 C2          sta fat32_datastart
00C3CC  2  A5 04          lda zp_sd_currentsector+1
00C3CE  2  6D 0F 02       adc fat32_readbuffer+15    ; reserved sectors hi
00C3D1  2  85 BF          sta fat32_fatstart+1
00C3D3  2  85 C3          sta fat32_datastart+1
00C3D5  2  A5 05          lda zp_sd_currentsector+2
00C3D7  2  69 00          adc #0
00C3D9  2  85 C0          sta fat32_fatstart+2
00C3DB  2  85 C4          sta fat32_datastart+2
00C3DD  2  A5 06          lda zp_sd_currentsector+3
00C3DF  2  69 00          adc #0
00C3E1  2  85 C1          sta fat32_fatstart+3
00C3E3  2  85 C5          sta fat32_datastart+3
00C3E5  2               
00C3E5  2                 ; Calculate the starting sector of the data area
00C3E5  2  AE 10 02       ldx fat32_readbuffer+16   ; number of FATs
00C3E8  2               skipfatsloop:
00C3E8  2  18             clc
00C3E9  2  A5 C2          lda fat32_datastart
00C3EB  2  6D 24 02       adc fat32_readbuffer+36 ; fatsize 0
00C3EE  2  85 C2          sta fat32_datastart
00C3F0  2  A5 C3          lda fat32_datastart+1
00C3F2  2  6D 25 02       adc fat32_readbuffer+37 ; fatsize 1
00C3F5  2  85 C3          sta fat32_datastart+1
00C3F7  2  A5 C4          lda fat32_datastart+2
00C3F9  2  6D 26 02       adc fat32_readbuffer+38 ; fatsize 2
00C3FC  2  85 C4          sta fat32_datastart+2
00C3FE  2  A5 C5          lda fat32_datastart+3
00C400  2  6D 27 02       adc fat32_readbuffer+39 ; fatsize 3
00C403  2  85 C5          sta fat32_datastart+3
00C405  2  CA             dex
00C406  2  D0 E0          bne skipfatsloop
00C408  2               
00C408  2                 ; Sectors-per-cluster is a power of two from 1 to 128
00C408  2  AD 0D 02       lda fat32_readbuffer+13
00C40B  2  85 CA          sta fat32_sectorspercluster
00C40D  2               
00C40D  2                 ; Remember the root cluster
00C40D  2  AD 2C 02       lda fat32_readbuffer+44
00C410  2  85 C6          sta fat32_rootcluster
00C412  2  AD 2D 02       lda fat32_readbuffer+45
00C415  2  85 C7          sta fat32_rootcluster+1
00C417  2  AD 2E 02       lda fat32_readbuffer+46
00C41A  2  85 C8          sta fat32_rootcluster+2
00C41C  2  AD 2F 02       lda fat32_readbuffer+47
00C41F  2  85 C9          sta fat32_rootcluster+3
00C421  2               
00C421  2  18             clc
00C422  2  60             rts
00C423  2               
00C423  2               error:
00C423  2  38             sec
00C424  2  60             rts
00C425  2               
00C425  2               
00C425  2               fat32_seekcluster:
00C425  2                 ; Gets ready to read fat32_nextcluster, and advances it according to the FAT
00C425  2               
00C425  2                 ; FAT sector = (cluster*4) / 512 = (cluster*2) / 256
00C425  2  A5 CE          lda fat32_nextcluster
00C427  2  0A             asl
00C428  2  A5 CF          lda fat32_nextcluster+1
00C42A  2  2A             rol
00C42B  2  85 03          sta zp_sd_currentsector
00C42D  2  A5 D0          lda fat32_nextcluster+2
00C42F  2  2A             rol
00C430  2  85 04          sta zp_sd_currentsector+1
00C432  2  A5 D1          lda fat32_nextcluster+3
00C434  2  2A             rol
00C435  2  85 05          sta zp_sd_currentsector+2
00C437  2                 ; note: cluster numbers never have the top bit set, so no carry can occur
00C437  2               
00C437  2                 ; Add FAT starting sector
00C437  2  A5 03          lda zp_sd_currentsector
00C439  2  65 BE          adc fat32_fatstart
00C43B  2  85 03          sta zp_sd_currentsector
00C43D  2  A5 04          lda zp_sd_currentsector+1
00C43F  2  65 BF          adc fat32_fatstart+1
00C441  2  85 04          sta zp_sd_currentsector+1
00C443  2  A5 05          lda zp_sd_currentsector+2
00C445  2  65 C0          adc fat32_fatstart+2
00C447  2  85 05          sta zp_sd_currentsector+2
00C449  2  A9 00          lda #0
00C44B  2  65 C1          adc fat32_fatstart+3
00C44D  2  85 06          sta zp_sd_currentsector+3
00C44F  2               
00C44F  2                 ; Target buffer
00C44F  2  A9 00          lda #<fat32_readbuffer
00C451  2  85 01          sta zp_sd_address
00C453  2  A9 02          lda #>fat32_readbuffer
00C455  2  85 02          sta zp_sd_address+1
00C457  2               
00C457  2                 ; Read the sector from the FAT
00C457  2  20 A6 C2       jsr sd_readsector
00C45A  2               
00C45A  2                 ; Before using this FAT data, set currentsector ready to read the cluster itself
00C45A  2                 ; We need to multiply the cluster number minus two by the number of sectors per
00C45A  2                 ; cluster, then add the data region start sector
00C45A  2               
00C45A  2                 ; Subtract two from cluster number
00C45A  2  38             sec
00C45B  2  A5 CE          lda fat32_nextcluster
00C45D  2  E9 02          sbc #2
00C45F  2  85 03          sta zp_sd_currentsector
00C461  2  A5 CF          lda fat32_nextcluster+1
00C463  2  E9 00          sbc #0
00C465  2  85 04          sta zp_sd_currentsector+1
00C467  2  A5 D0          lda fat32_nextcluster+2
00C469  2  E9 00          sbc #0
00C46B  2  85 05          sta zp_sd_currentsector+2
00C46D  2  A5 D1          lda fat32_nextcluster+3
00C46F  2  E9 00          sbc #0
00C471  2  85 06          sta zp_sd_currentsector+3
00C473  2               
00C473  2                 ; Multiply by sectors-per-cluster which is a power of two between 1 and 128
00C473  2  A5 CA          lda fat32_sectorspercluster
00C475  2               spcshiftloop:
00C475  2  4A             lsr
00C476  2  B0 0B          bcs spcshiftloopdone
00C478  2  06 03          asl zp_sd_currentsector
00C47A  2  26 04          rol zp_sd_currentsector+1
00C47C  2  26 05          rol zp_sd_currentsector+2
00C47E  2  26 06          rol zp_sd_currentsector+3
00C480  2  4C 75 C4       jmp spcshiftloop
00C483  2               spcshiftloopdone:
00C483  2               
00C483  2                 ; Add the data region start sector
00C483  2  18             clc
00C484  2  A5 03          lda zp_sd_currentsector
00C486  2  65 C2          adc fat32_datastart
00C488  2  85 03          sta zp_sd_currentsector
00C48A  2  A5 04          lda zp_sd_currentsector+1
00C48C  2  65 C3          adc fat32_datastart+1
00C48E  2  85 04          sta zp_sd_currentsector+1
00C490  2  A5 05          lda zp_sd_currentsector+2
00C492  2  65 C4          adc fat32_datastart+2
00C494  2  85 05          sta zp_sd_currentsector+2
00C496  2  A5 06          lda zp_sd_currentsector+3
00C498  2  65 C5          adc fat32_datastart+3
00C49A  2  85 06          sta zp_sd_currentsector+3
00C49C  2               
00C49C  2                 ; That's now ready for later code to read this sector in - tell it how many consecutive
00C49C  2                 ; sectors it can now read
00C49C  2  A5 CA          lda fat32_sectorspercluster
00C49E  2  85 CB          sta fat32_pendingsectors
00C4A0  2               
00C4A0  2                 ; Now go back to looking up the next cluster in the chain
00C4A0  2                 ; Find the offset to this cluster's entry in the FAT sector we loaded earlier
00C4A0  2               
00C4A0  2                 ; Offset = (cluster*4) & 511 = (cluster & 127) * 4
00C4A0  2  A5 CE          lda fat32_nextcluster
00C4A2  2  29 7F          and #$7f
00C4A4  2  0A             asl
00C4A5  2  0A             asl
00C4A6  2  A8             tay ; Y = low byte of offset
00C4A7  2               
00C4A7  2                 ; Add the potentially carried bit to the high byte of the address
00C4A7  2  A5 02          lda zp_sd_address+1
00C4A9  2  69 00          adc #0
00C4AB  2  85 02          sta zp_sd_address+1
00C4AD  2               
00C4AD  2                 ; Copy out the next cluster in the chain for later use
00C4AD  2  B1 01          lda (zp_sd_address),y
00C4AF  2  85 CE          sta fat32_nextcluster
00C4B1  2  C8             iny
00C4B2  2  B1 01          lda (zp_sd_address),y
00C4B4  2  85 CF          sta fat32_nextcluster+1
00C4B6  2  C8             iny
00C4B7  2  B1 01          lda (zp_sd_address),y
00C4B9  2  85 D0          sta fat32_nextcluster+2
00C4BB  2  C8             iny
00C4BC  2  B1 01          lda (zp_sd_address),y
00C4BE  2  29 0F          and #$0f
00C4C0  2  85 D1          sta fat32_nextcluster+3
00C4C2  2               
00C4C2  2                 ; See if it's the end of the chain
00C4C2  2  09 F0          ora #$f0
00C4C4  2  25 D0          and fat32_nextcluster+2
00C4C6  2  25 CF          and fat32_nextcluster+1
00C4C8  2  C9 FF          cmp #$ff
00C4CA  2  D0 08          bne notendofchain
00C4CC  2  A5 CE          lda fat32_nextcluster
00C4CE  2  C9 F8          cmp #$f8
00C4D0  2  90 02          bcc notendofchain
00C4D2  2               
00C4D2  2                 ; It's the end of the chain, set the top bits so that we can tell this later on
00C4D2  2  85 D1          sta fat32_nextcluster+3
00C4D4  2               notendofchain:
00C4D4  2               
00C4D4  2  60             rts
00C4D5  2               
00C4D5  2               
00C4D5  2               fat32_readnextsector:
00C4D5  2                 ; Reads the next sector from a cluster chain into the buffer at fat32_address.
00C4D5  2                 ;
00C4D5  2                 ; Advances the current sector ready for the next read and looks up the next cluster
00C4D5  2                 ; in the chain when necessary.
00C4D5  2                 ;
00C4D5  2                 ; On return, carry is clear if data was read, or set if the cluster chain has ended.
00C4D5  2               
00C4D5  2                 ; Maybe there are pending sectors in the current cluster
00C4D5  2  A5 CB          lda fat32_pendingsectors
00C4D7  2  D0 07          bne readsector
00C4D9  2               
00C4D9  2                 ; No pending sectors, check for end of cluster chain
00C4D9  2  A5 D1          lda fat32_nextcluster+3
00C4DB  2  30 20          bmi endofchain
00C4DD  2               
00C4DD  2                 ; Prepare to read the next cluster
00C4DD  2  20 25 C4       jsr fat32_seekcluster
00C4E0  2               
00C4E0  2               readsector:
00C4E0  2  C6 CB          dec fat32_pendingsectors
00C4E2  2               
00C4E2  2                 ; Set up target address
00C4E2  2  A5 CC          lda fat32_address
00C4E4  2  85 01          sta zp_sd_address
00C4E6  2  A5 CD          lda fat32_address+1
00C4E8  2  85 02          sta zp_sd_address+1
00C4EA  2               
00C4EA  2                 ; Read the sector
00C4EA  2  20 A6 C2       jsr sd_readsector
00C4ED  2               
00C4ED  2                 ; Advance to next sector
00C4ED  2  E6 03          inc zp_sd_currentsector
00C4EF  2  D0 0A          bne sectorincrementdone
00C4F1  2  E6 04          inc zp_sd_currentsector+1
00C4F3  2  D0 06          bne sectorincrementdone
00C4F5  2  E6 05          inc zp_sd_currentsector+2
00C4F7  2  D0 02          bne sectorincrementdone
00C4F9  2  E6 06          inc zp_sd_currentsector+3
00C4FB  2               sectorincrementdone:
00C4FB  2               
00C4FB  2                 ; Success - clear carry and return
00C4FB  2  18             clc
00C4FC  2  60             rts
00C4FD  2               
00C4FD  2               endofchain:
00C4FD  2                 ; End of chain - set carry and return
00C4FD  2  38             sec
00C4FE  2  60             rts
00C4FF  2               
00C4FF  2               
00C4FF  2               fat32_openroot:
00C4FF  2                 ; Prepare to read the root directory
00C4FF  2               
00C4FF  2  A5 C6          lda fat32_rootcluster
00C501  2  85 CE          sta fat32_nextcluster
00C503  2  A5 C7          lda fat32_rootcluster+1
00C505  2  85 CF          sta fat32_nextcluster+1
00C507  2  A5 C8          lda fat32_rootcluster+2
00C509  2  85 D0          sta fat32_nextcluster+2
00C50B  2  A5 C9          lda fat32_rootcluster+3
00C50D  2  85 D1          sta fat32_nextcluster+3
00C50F  2               
00C50F  2  20 25 C4       jsr fat32_seekcluster
00C512  2               
00C512  2                 ; Set the pointer to a large value so we always read a sector the first time through
00C512  2  A9 FF          lda #$ff
00C514  2  85 02          sta zp_sd_address+1
00C516  2               
00C516  2  60             rts
00C517  2               
00C517  2               
00C517  2               fat32_opendirent:
00C517  2                 ; Prepare to read from a file or directory based on a dirent
00C517  2                 ;
00C517  2                 ; Point zp_sd_address at the dirent
00C517  2               
00C517  2                 ; Remember file size in bytes remaining
00C517  2  A0 1C          ldy #28
00C519  2  B1 01          lda (zp_sd_address),y
00C51B  2  85 D2          sta fat32_bytesremaining
00C51D  2  C8             iny
00C51E  2  B1 01          lda (zp_sd_address),y
00C520  2  85 D3          sta fat32_bytesremaining+1
00C522  2  C8             iny
00C523  2  B1 01          lda (zp_sd_address),y
00C525  2  85 D4          sta fat32_bytesremaining+2
00C527  2  C8             iny
00C528  2  B1 01          lda (zp_sd_address),y
00C52A  2  85 D5          sta fat32_bytesremaining+3
00C52C  2               
00C52C  2                 ; Seek to first cluster
00C52C  2  A0 1A          ldy #26
00C52E  2  B1 01          lda (zp_sd_address),y
00C530  2  85 CE          sta fat32_nextcluster
00C532  2  C8             iny
00C533  2  B1 01          lda (zp_sd_address),y
00C535  2  85 CF          sta fat32_nextcluster+1
00C537  2  A0 14          ldy #20
00C539  2  B1 01          lda (zp_sd_address),y
00C53B  2  85 D0          sta fat32_nextcluster+2
00C53D  2  C8             iny
00C53E  2  B1 01          lda (zp_sd_address),y
00C540  2  85 D1          sta fat32_nextcluster+3
00C542  2               
00C542  2  20 25 C4       jsr fat32_seekcluster
00C545  2               
00C545  2                 ; Set the pointer to a large value so we always read a sector the first time through
00C545  2  A9 FF          lda #$ff
00C547  2  85 02          sta zp_sd_address+1
00C549  2               
00C549  2  60             rts
00C54A  2               
00C54A  2               
00C54A  2               fat32_readdirent:
00C54A  2                 ; Read a directory entry from the open directory
00C54A  2                 ;
00C54A  2                 ; On exit the carry is set if there were no more directory entries.
00C54A  2                 ;
00C54A  2                 ; Otherwise, A is set to the file's attribute byte and
00C54A  2                 ; zp_sd_address points at the returned directory entry.
00C54A  2                 ; LFNs and empty entries are ignored automatically.
00C54A  2               
00C54A  2                 ; Increment pointer by 32 to point to next entry
00C54A  2  18             clc
00C54B  2  A5 01          lda zp_sd_address
00C54D  2  69 20          adc #32
00C54F  2  85 01          sta zp_sd_address
00C551  2  A5 02          lda zp_sd_address+1
00C553  2  69 00          adc #0
00C555  2  85 02          sta zp_sd_address+1
00C557  2               
00C557  2                 ; If it's not at the end of the buffer, we have data already
00C557  2  C9 04          cmp #>(fat32_readbuffer+$200)
00C559  2  90 0F          bcc gotdata
00C55B  2               
00C55B  2                 ; Read another sector
00C55B  2  A9 00          lda #<fat32_readbuffer
00C55D  2  85 CC          sta fat32_address
00C55F  2  A9 02          lda #>fat32_readbuffer
00C561  2  85 CD          sta fat32_address+1
00C563  2               
00C563  2  20 D5 C4       jsr fat32_readnextsector
00C566  2  90 02          bcc gotdata
00C568  2               
00C568  2               endofdirectory:
00C568  2  38             sec
00C569  2  60             rts
00C56A  2               
00C56A  2               gotdata:
00C56A  2                 ; Check first character
00C56A  2  A0 00          ldy #0
00C56C  2  B1 01          lda (zp_sd_address),y
00C56E  2               
00C56E  2                 ; End of directory => abort
00C56E  2  F0 F8          beq endofdirectory
00C570  2               
00C570  2                 ; Empty entry => start again
00C570  2  C9 E5          cmp #$e5
00C572  2  F0 D6          beq fat32_readdirent
00C574  2               
00C574  2                 ; Check attributes
00C574  2  A0 0B          ldy #11
00C576  2  B1 01          lda (zp_sd_address),y
00C578  2  29 3F          and #$3f
00C57A  2  C9 0F          cmp #$0f ; LFN => start again
00C57C  2  F0 CC          beq fat32_readdirent
00C57E  2               
00C57E  2                 ; Yield this result
00C57E  2  18             clc
00C57F  2  60             rts
00C580  2               
00C580  2               
00C580  2               fat32_finddirent:
00C580  2                 ; Finds a particular directory entry.  X,Y point to the 11-character filename to seek.
00C580  2                 ; The directory should already be open for iteration.
00C580  2               
00C580  2                 ; Form ZP pointer to user's filename
00C580  2  86 D2          stx fat32_filenamepointer
00C582  2  84 D3          sty fat32_filenamepointer+1
00C584  2               
00C584  2                 ; Iterate until name is found or end of directory
00C584  2               direntloop:
00C584  2  20 4A C5       jsr fat32_readdirent
00C587  2  A0 0A          ldy #10
00C589  2  90 01          bcc comparenameloop
00C58B  2  60             rts ; with carry set
00C58C  2               
00C58C  2               comparenameloop:
00C58C  2  B1 01          lda (zp_sd_address),y
00C58E  2  D1 D2          cmp (fat32_filenamepointer),y
00C590  2  D0 F2          bne direntloop ; no match
00C592  2  88             dey
00C593  2  10 F7          bpl comparenameloop
00C595  2               
00C595  2                 ; Found it
00C595  2  18             clc
00C596  2  60             rts
00C597  2               
00C597  2               
00C597  2               fat32_file_readbyte:
00C597  2                 ; Read a byte from an open file
00C597  2                 ;
00C597  2                 ; The byte is returned in A with C clear; or if end-of-file was reached, C is set instead
00C597  2               
00C597  2  38             sec
00C598  2               
00C598  2                 ; Is there any data to read at all?
00C598  2  A5 D2          lda fat32_bytesremaining
00C59A  2  05 D3          ora fat32_bytesremaining+1
00C59C  2  05 D4          ora fat32_bytesremaining+2
00C59E  2  05 D5          ora fat32_bytesremaining+3
00C5A0  2  F0 3D          beq rts4
00C5A2  2               
00C5A2  2                 ; Decrement the remaining byte count
00C5A2  2  A5 D2          lda fat32_bytesremaining
00C5A4  2  E9 01          sbc #1
00C5A6  2  85 D2          sta fat32_bytesremaining
00C5A8  2  A5 D3          lda fat32_bytesremaining+1
00C5AA  2  E9 00          sbc #0
00C5AC  2  85 D3          sta fat32_bytesremaining+1
00C5AE  2  A5 D4          lda fat32_bytesremaining+2
00C5B0  2  E9 00          sbc #0
00C5B2  2  85 D4          sta fat32_bytesremaining+2
00C5B4  2  A5 D5          lda fat32_bytesremaining+3
00C5B6  2  E9 00          sbc #0
00C5B8  2  85 D5          sta fat32_bytesremaining+3
00C5BA  2               
00C5BA  2                 ; Need to read a new sector?
00C5BA  2  A5 02          lda zp_sd_address+1
00C5BC  2  C9 04          cmp #>(fat32_readbuffer+$200)
00C5BE  2  90 0D          bcc gotdata4
00C5C0  2               
00C5C0  2                 ; Read another sector
00C5C0  2  A9 00          lda #<fat32_readbuffer
00C5C2  2  85 CC          sta fat32_address
00C5C4  2  A9 02          lda #>fat32_readbuffer
00C5C6  2  85 CD          sta fat32_address+1
00C5C8  2               
00C5C8  2  20 D5 C4       jsr fat32_readnextsector
00C5CB  2  B0 12          bcs rts4                    ; this shouldn't happen
00C5CD  2               
00C5CD  2               gotdata4:
00C5CD  2  A0 00          ldy #0
00C5CF  2  B1 01          lda (zp_sd_address),y
00C5D1  2               
00C5D1  2  E6 01          inc zp_sd_address
00C5D3  2  D0 0A          bne rts4
00C5D5  2  E6 02          inc zp_sd_address+1
00C5D7  2  D0 06          bne rts4
00C5D9  2  E6 03          inc zp_sd_address+2
00C5DB  2  D0 02          bne rts4
00C5DD  2  E6 04          inc zp_sd_address+3
00C5DF  2               
00C5DF  2               rts4:
00C5DF  2  60             rts
00C5E0  2               
00C5E0  2               
00C5E0  2               fat32_file_read:
00C5E0  2                 ; Read a whole file into memory.  It's assumed the file has just been opened
00C5E0  2                 ; and no data has been read yet.
00C5E0  2                 ;
00C5E0  2                 ; Also we read whole sectors, so data in the target region beyond the end of the
00C5E0  2                 ; file may get overwritten, up to the next 512-byte boundary.
00C5E0  2                 ;
00C5E0  2                 ; And we don't properly support 64k+ files, as it's unnecessary complication given
00C5E0  2                 ; the 6502's small address space
00C5E0  2               
00C5E0  2                 ; Round the size up to the next whole sector
00C5E0  2  A5 D2          lda fat32_bytesremaining
00C5E2  2  C9 01          cmp #1                      ; set carry if bottom 8 bits not zero
00C5E4  2  A5 D3          lda fat32_bytesremaining+1
00C5E6  2  69 00          adc #0                      ; add carry, if any
00C5E8  2  4A             lsr                         ; divide by 2
00C5E9  2  69 00          adc #0                      ; round up
00C5EB  2               
00C5EB  2                 ; No data?
00C5EB  2  F0 12          beq done
00C5ED  2               
00C5ED  2                 ; Store sector count - not a byte count any more
00C5ED  2  85 D2          sta fat32_bytesremaining
00C5EF  2               
00C5EF  2                 ; Read entire sectors to the user-supplied buffer
00C5EF  2               wholesectorreadloop:
00C5EF  2                 ; Read a sector to fat32_address
00C5EF  2  20 D5 C4       jsr fat32_readnextsector
00C5F2  2               
00C5F2  2                 ; Advance fat32_address by 512 bytes
00C5F2  2  A5 CD          lda fat32_address+1
00C5F4  2  69 02          adc #2                      ; carry already clear
00C5F6  2  85 CD          sta fat32_address+1
00C5F8  2               
00C5F8  2  A6 D2          ldx fat32_bytesremaining    ; note - actually loads sectors remaining
00C5FA  2  CA             dex
00C5FB  2  86 D2          stx fat32_bytesremaining    ; note - actually stores sectors remaining
00C5FD  2               
00C5FD  2  D0 F0          bne wholesectorreadloop
00C5FF  2               
00C5FF  2               done:
00C5FF  2  60             rts
00C600  2               
00C600  2               
00C600  1                 	.include "libacia.s"
00C600  2               ;       ------------------ 6551 ACIA Subroutine Library -------------------
00C600  2               ; Includes:
00C600  2               ; acia_init       - Initializes the ACIA
00C600  2               ; print_hex_acia  - Prints a hex value in A
00C600  2               ; crlf		  - Prints <CR> followed by <LF>
00C600  2               ; clear_display   - Sends a <CLS> command
00C600  2               ; txpoll          - Polls the TX bit to see if the ACIA is ready
00C600  2               ; print_chara     - Prints a Character that is stored in A
00C600  2               ; print_char_acia - Same as print_chara
00C600  2               ; ascii_home      - Home the cursor
00C600  2               ; w_acia_full     - Print a NULL-Termintated String with >HIGH in Y and <LOW in X
00C600  2               
00C600  2               acia_init:
00C600  2  48             pha
00C601  2  A9 0B          lda #%00001011          ; No parity, no echo, no interrupt
00C603  2  8D 02 80       sta $8002
00C606  2  A9 1F          lda #%00011111          ; 1 stop bit, 8 data bits, 19200 baud
00C608  2  8D 03 80       sta $8003
00C60B  2  68             pla
00C60C  2  60             rts
00C60D  2               
00C60D  2               print_hex_acia:
00C60D  2  48             pha
00C60E  2  6A             ror
00C60F  2  6A             ror
00C610  2  6A             ror
00C611  2  6A             ror
00C612  2  20 16 C6       jsr print_nybble   ; This is just som usful hex cod
00C615  2  68             pla
00C616  2               print_nybble:
00C616  2  29 0F          and #15
00C618  2  C9 0A          cmp #10
00C61A  2  30 02          bmi skipletter
00C61C  2  69 06          adc #6
00C61E  2               skipletter:
00C61E  2  69 30          adc #48
00C620  2                ; jsr print_char
00C620  2  20 54 C6       jsr print_chara
00C623  2  60             rts
00C624  2               
00C624  2               crlf:
00C624  2  48             pha
00C625  2  8A             txa
00C626  2  48             pha
00C627  2  98             tya
00C628  2  48             pha
00C629  2  A9 0D          lda #$0d
00C62B  2  20 54 C6       jsr print_chara
00C62E  2  A9 0A          lda #$0a
00C630  2  20 54 C6       jsr print_chara
00C633  2  68             pla
00C634  2  A8             tay
00C635  2  68             pla
00C636  2  AA             tax
00C637  2  68             pla
00C638  2  60             rts
00C639  2               
00C639  2               cleardisplay:
00C639  2  48             pha
00C63A  2  20 44 C6       jsr txpoll  ; Poll the TX bit
00C63D  2  A9 0C          lda #12     ; Print decimal 12 (CLS)
00C63F  2  8D 00 80       sta $8000
00C642  2  68             pla
00C643  2  60             rts
00C644  2               
00C644  2               txpoll:
00C644  2  AD 01 80       lda $8001
00C647  2  29 10          and #$10    ; Poll the TX bit
00C649  2  F0 F9          beq txpoll
00C64B  2  60             rts
00C64C  2               
00C64C  2               rxpoll:
00C64C  2  AD 01 80       lda $8001
00C64F  2  29 08          and #$08    ; Poll the RX bit
00C651  2  F0 F9          beq rxpoll
00C653  2  60             rts
00C654  2               
00C654  2               
00C654  2               print_chara:
00C654  2  48             pha
00C655  2  20 44 C6       jsr txpoll  ; Poll the TX bit
00C658  2  68             pla
00C659  2  8D 00 80       sta $8000   ; Print character from A
00C65C  2  60             rts
00C65D  2               
00C65D  2               print_char_acia:
00C65D  2  4C 54 C6       jmp print_chara  ; Same as "print_chara"
00C660  2               
00C660  2               ascii_home:
00C660  2  48             pha
00C661  2  A9 01          lda #1
00C663  2  20 54 C6       jsr print_chara  ; Print 1 (HOME)
00C666  2  68             pla
00C667  2  60             rts
00C668  2               
00C668  2               w_acia_full:
00C668  2  48             pha
00C669  2  A5 FF          lda $ff
00C66B  2  48             pha        ; Push Previous States onto the stack
00C66C  2  A5 FE          lda $fe
00C66E  2  48             pha
00C66F  2  84 FF          sty $ff    ; Set Y as the Upper Address (8-15)
00C671  2  86 FE          stx $fe    ; Set X as the Lower Adderss (0-7)
00C673  2  A0 00          ldy #0
00C675  2               acia_man:
00C675  2  20 44 C6       jsr txpoll   ; Poll TX
00C678  2  B1 FE          lda ($fe),y  ; Load the Address
00C67A  2  8D 00 80       sta $8000    ; Print what is at the address
00C67D  2  F0 04          beq endwacia ; If Done, End
00C67F  2  C8             iny          ; Next Character
00C680  2  4C 75 C6       jmp acia_man ; Back to the top
00C683  2               endwacia:
00C683  2  68             pla
00C684  2  85 FE          sta $fe
00C686  2  68             pla          ; Restore Variables
00C687  2  85 FF          sta $ff
00C689  2  68             pla
00C68A  2  60             rts
00C68B  2               
00C68B  1               	.include "errors.s"
00C68B  2               error_sound:
00C68B  2  20 C8 C6     	jsr clear_sid
00C68E  2  A9 0F        	lda #$0f
00C690  2  8D 18 B8     	sta $b818
00C693  2  A9 E7        	lda #$e7
00C695  2  8D 02 B8     	sta $b802
00C698  2  A9 0F        	lda #$0f
00C69A  2  8D 05 B8     	sta $b805
00C69D  2  A9 F8        	lda #$f8
00C69F  2  8D 06 B8     	sta $b806
00C6A2  2  AD C6 C6     	lda freq_table
00C6A5  2  8D 00 B8     	sta $b800
00C6A8  2  AD C7 C6     	lda freq_table+1
00C6AB  2  8D 01 B8     	sta $b801
00C6AE  2  A9 41        	lda #$41
00C6B0  2  8D 04 B8     	sta $b804
00C6B3  2               
00C6B3  2               outer:
00C6B3  2  A0 FF        	ldy #$ff
00C6B5  2               inner:
00C6B5  2  A2 FF        	ldx #$ff
00C6B7  2               
00C6B7  2               innerloop:
00C6B7  2  CA           	dex
00C6B8  2  D0 FD        	bne innerloop
00C6BA  2               
00C6BA  2  88           	dey
00C6BB  2  F0 03        	beq ende
00C6BD  2  4C B5 C6     	jmp inner
00C6C0  2               ende:
00C6C0  2  A9 40        	lda #$40
00C6C2  2  8D 04 B8     	sta $b804
00C6C5  2  60           	rts
00C6C6  2               
00C6C6  2               freq_table:
00C6C6  2  50 50        	.byte $50, $50
00C6C8  2               
00C6C8  2               clear_sid:
00C6C8  2  A2 18        	ldx #$18
00C6CA  2  A9 00        	lda #0
00C6CC  2               csid:
00C6CC  2  9D 00 B8     	sta $B800,X
00C6CF  2  CA           	dex
00C6D0  2  D0 FA        	bne csid
00C6D2  2  60           	rts
00C6D3  2               
00C6D3  2               
00C6D3  1               dirname:
00C6D3  1  46 4F 4C 44  	.asciiz "FOLDER     "
00C6D7  1  45 52 20 20  
00C6DB  1  20 20 20 00  
00C6DF  1               errormsg:
00C6DF  1  0D 0A 45 52  	.byte CR,LF,"ERROR!",CR,LF
00C6E3  1  52 4F 52 21  
00C6E7  1  0D 0A        
00C6E9  1  00           	.byte 0
00C6EA  1               
00C6EA  1               ; generic stack and memory management code
00C6EA  1               ; this code is identical across all versions of
00C6EA  1               ; BASIC
00C6EA  1               ; ----------------------------------------------------------------------------
00C6EA  1               ; CALLED BY "NEXT" AND "FOR" TO SCAN THROUGH
00C6EA  1               ; THE STACK FOR A FRAME WITH THE SAME VARIABLE.
00C6EA  1               ;
00C6EA  1               ; (FORPNT) = ADDRESS OF VARIABLE IF "FOR" OR "NEXT"
00C6EA  1               ; 	= $XXFF IF CALLED FROM "RETURN"
00C6EA  1               ; 	<<< BUG: SHOULD BE $FFXX >>>
00C6EA  1               ;
00C6EA  1               ;	RETURNS .NE. IF VARIABLE NOT FOUND,
00C6EA  1               ;	(X) = STACK PNTR AFTER SKIPPING ALL FRAMES
00C6EA  1               ;
00C6EA  1               ;	.EQ. IF FOUND
00C6EA  1               ;	(X) = STACK PNTR OF FRAME FOUND
00C6EA  1               ; ----------------------------------------------------------------------------
00C6EA  1               GTFORPNT:
00C6EA  1  BA                   tsx
00C6EB  1  E8                   inx
00C6EC  1  E8                   inx
00C6ED  1  E8                   inx
00C6EE  1  E8                   inx
00C6EF  1               L2279:
00C6EF  1  BD 01 01             lda     STACK+1,x
00C6F2  1  C9 81                cmp     #$81
00C6F4  1  D0 21                bne     L22A1
00C6F6  1  A5 98                lda     FORPNT+1
00C6F8  1  D0 0A                bne     L228E
00C6FA  1  BD 02 01             lda     STACK+2,x
00C6FD  1  85 97                sta     FORPNT
00C6FF  1  BD 03 01             lda     STACK+3,x
00C702  1  85 98                sta     FORPNT+1
00C704  1               L228E:
00C704  1  DD 03 01             cmp     STACK+3,x
00C707  1  D0 07                bne     L229A
00C709  1  A5 97                lda     FORPNT
00C70B  1  DD 02 01             cmp     STACK+2,x
00C70E  1  F0 07                beq     L22A1
00C710  1               L229A:
00C710  1  8A                   txa
00C711  1  18                   clc
00C712  1  69 10                adc     #BYTES_PER_FRAME
00C714  1  AA                   tax
00C715  1  D0 D8                bne     L2279
00C717  1               L22A1:
00C717  1  60                   rts
00C718  1               ; ----------------------------------------------------------------------------
00C718  1               ; MOVE BLOCK OF MEMORY UP
00C718  1               ;
00C718  1               ; ON ENTRY:
00C718  1               ;	(Y,A) = (HIGHDS) = DESTINATION END+1
00C718  1               ;	(LOWTR) = LOWEST ADDRESS OF SOURCE
00C718  1               ;	(HIGHTR) = HIGHEST SOURCE ADDRESS+1
00C718  1               ; ----------------------------------------------------------------------------
00C718  1               BLTU:
00C718  1  20 68 C7             jsr     REASON
00C71B  1  85 7F                sta     STREND
00C71D  1  84 80                sty     STREND+1
00C71F  1               BLTU2:
00C71F  1  38                   sec
00C720  1  A5 A6                lda     HIGHTR
00C722  1  E5 AA                sbc     LOWTR
00C724  1  85 71                sta     INDEX
00C726  1  A8                   tay
00C727  1  A5 A7                lda     HIGHTR+1
00C729  1  E5 AB                sbc     LOWTR+1
00C72B  1  AA                   tax
00C72C  1  E8                   inx
00C72D  1  98                   tya
00C72E  1  F0 23                beq     L22DD
00C730  1  A5 A6                lda     HIGHTR
00C732  1  38                   sec
00C733  1  E5 71                sbc     INDEX
00C735  1  85 A6                sta     HIGHTR
00C737  1  B0 03                bcs     L22C6
00C739  1  C6 A7                dec     HIGHTR+1
00C73B  1  38                   sec
00C73C  1               L22C6:
00C73C  1  A5 A4                lda     HIGHDS
00C73E  1  E5 71                sbc     INDEX
00C740  1  85 A4                sta     HIGHDS
00C742  1  B0 08                bcs     L22D6
00C744  1  C6 A5                dec     HIGHDS+1
00C746  1  90 04                bcc     L22D6
00C748  1               L22D2:
00C748  1  B1 A6                lda     (HIGHTR),y
00C74A  1  91 A4                sta     (HIGHDS),y
00C74C  1               L22D6:
00C74C  1  88                   dey
00C74D  1  D0 F9                bne     L22D2
00C74F  1  B1 A6                lda     (HIGHTR),y
00C751  1  91 A4                sta     (HIGHDS),y
00C753  1               L22DD:
00C753  1  C6 A7                dec     HIGHTR+1
00C755  1  C6 A5                dec     HIGHDS+1
00C757  1  CA                   dex
00C758  1  D0 F2                bne     L22D6
00C75A  1  60                   rts
00C75B  1               ; ----------------------------------------------------------------------------
00C75B  1               ; CHECK IF ENOUGH ROOM LEFT ON STACK
00C75B  1               ; FOR "FOR", "GOSUB", OR EXPRESSION EVALUATION
00C75B  1               ; ----------------------------------------------------------------------------
00C75B  1               CHKMEM:
00C75B  1  0A                   asl     a
00C75C  1  69 33                adc     #SPACE_FOR_GOSUB
00C75E  1  B0 35                bcs     MEMERR
00C760  1  85 71                sta     INDEX
00C762  1  BA                   tsx
00C763  1  E4 71                cpx     INDEX
00C765  1  90 2E                bcc     MEMERR
00C767  1  60                   rts
00C768  1               ; ----------------------------------------------------------------------------
00C768  1               ; CHECK IF ENOUGH ROOM BETWEEN ARRAYS AND STRINGS
00C768  1               ; (Y,A) = ADDR ARRAYS NEED TO GROW TO
00C768  1               ; ----------------------------------------------------------------------------
00C768  1               REASON:
00C768  1  C4 82                cpy     FRETOP+1
00C76A  1  90 28                bcc     L231E
00C76C  1  D0 04                bne     L22FC
00C76E  1  C5 81                cmp     FRETOP
00C770  1  90 22                bcc     L231E
00C772  1               L22FC:
00C772  1  48                   pha
00C773  1  A2 08                ldx     #FAC-TEMP1-1
00C775  1  98                   tya
00C776  1               L2300:
00C776  1  48                   pha
00C777  1  B5 A3                lda     TEMP1,x
00C779  1  CA                   dex
00C77A  1  10 FA                bpl     L2300
00C77C  1  20 84 D6             jsr     GARBAG
00C77F  1  A2 F8                ldx     #TEMP1-FAC+1+256
00C781  1               L230B:
00C781  1  68                   pla
00C782  1  95 AC                sta     FAC,x
00C784  1  E8                   inx
00C785  1  30 FA                bmi     L230B
00C787  1  68                   pla
00C788  1  A8                   tay
00C789  1  68                   pla
00C78A  1  C4 82                cpy     FRETOP+1
00C78C  1  90 06                bcc     L231E
00C78E  1  D0 05                bne     MEMERR
00C790  1  C5 81                cmp     FRETOP
00C792  1  B0 01                bcs     MEMERR
00C794  1               L231E:
00C794  1  60                   rts
00C795  1               MEMERR:
00C795  1  A2 0C                ldx     #ERR_MEMFULL
00C797  1               ; ----------------------------------------------------------------------------
00C797  1               ; HANDLE AN ERROR
00C797  1               ;
00C797  1               ; (X)=OFFSET IN ERROR MESSAGE TABLE
00C797  1               ; (ERRFLG) > 128 IF "ON ERR" TURNED ON
00C797  1               ; (CURLIN+1) = $FF IF IN DIRECT MODE
00C797  1               ; ----------------------------------------------------------------------------
00C797  1               ERROR:
00C797  1  46 64                lsr     Z14
00C799  1  20 A9 CD             jsr     CRDO
00C79C  1  20 20 CE             jsr     OUTQUES
00C79F  1  BD 64 C1             lda     ERROR_MESSAGES,x
00C7A2  1  20 22 CE             jsr     OUTDO
00C7A5  1  BD 65 C1             lda     ERROR_MESSAGES+1,x
00C7A8  1  20 22 CE             jsr     OUTDO
00C7AB  1  20 DA C9             jsr     STKINI
00C7AE  1  A9 86                lda     #<QT_ERROR
00C7B0  1  A0 C1                ldy     #>QT_ERROR
00C7B2  1               ; ----------------------------------------------------------------------------
00C7B2  1               ; PRINT STRING AT (Y,A)
00C7B2  1               ; PRINT CURRENT LINE # UNLESS IN DIRECT MODE
00C7B2  1               ; FALL INTO WARM RESTART
00C7B2  1               ; ----------------------------------------------------------------------------
00C7B2  1               PRINT_ERROR_LINNUM:
00C7B2  1  20 00 CE             jsr     STROUT
00C7B5  1  A4 88                ldy     CURLIN+1
00C7B7  1  C8                   iny
00C7B8  1  F0 03                beq     RESTART
00C7BA  1  20 90 DE             jsr     INPRT
00C7BD  1               ; ----------------------------------------------------------------------------
00C7BD  1               ; WARM RESTART ENTRY
00C7BD  1               ; ----------------------------------------------------------------------------
00C7BD  1               RESTART:
00C7BD  1  46 64                lsr     Z14
00C7BF  1  A9 92                lda     #<QT_OK
00C7C1  1  A0 C1                ldy     #>QT_OK
00C7C3  1  20 0A 00             jsr     GOSTROUT
00C7C6  1               L2351:
00C7C6  1  20 A0 C8             jsr     INLIN
00C7C9  1  86 DD                stx     TXTPTR
00C7CB  1  84 DE                sty     TXTPTR+1
00C7CD  1  20 D6 00             jsr     CHRGET
00C7D0  1               ; bug in pre-1.1: CHRGET sets Z on '\0'
00C7D0  1               ; and ':' - a line starting with ':' in
00C7D0  1               ; direct mode gets ignored
00C7D0  1  F0 F4                beq     L2351
00C7D2  1  A2 FF                ldx     #$FF
00C7D4  1  86 88                stx     CURLIN+1
00C7D6  1  90 06                bcc     NUMBERED_LINE
00C7D8  1  20 EF C8             jsr     PARSE_INPUT_LINE
00C7DB  1  4C 3F CB             jmp     NEWSTT2
00C7DE  1               ; ----------------------------------------------------------------------------
00C7DE  1               ; HANDLE NUMBERED LINE
00C7DE  1               ; ----------------------------------------------------------------------------
00C7DE  1               NUMBERED_LINE:
00C7DE  1  20 BC CC             jsr     LINGET
00C7E1  1  20 EF C8             jsr     PARSE_INPUT_LINE
00C7E4  1  84 5D                sty     EOLPNTR
00C7E6  1  20 7B C9             jsr     FNDLIN
00C7E9  1  90 44                bcc     PUT_NEW_LINE
00C7EB  1  A0 01                ldy     #$01
00C7ED  1  B1 AA                lda     (LOWTR),y
00C7EF  1  85 72                sta     INDEX+1
00C7F1  1  A5 7B                lda     VARTAB
00C7F3  1  85 71                sta     INDEX
00C7F5  1  A5 AB                lda     LOWTR+1
00C7F7  1  85 74                sta     DEST+1
00C7F9  1  A5 AA                lda     LOWTR
00C7FB  1  88                   dey
00C7FC  1  F1 AA                sbc     (LOWTR),y
00C7FE  1  18                   clc
00C7FF  1  65 7B                adc     VARTAB
00C801  1  85 7B                sta     VARTAB
00C803  1  85 73                sta     DEST
00C805  1  A5 7C                lda     VARTAB+1
00C807  1  69 FF                adc     #$FF
00C809  1  85 7C                sta     VARTAB+1
00C80B  1  E5 AB                sbc     LOWTR+1
00C80D  1  AA                   tax
00C80E  1  38                   sec
00C80F  1  A5 AA                lda     LOWTR
00C811  1  E5 7B                sbc     VARTAB
00C813  1  A8                   tay
00C814  1  B0 03                bcs     L23A5
00C816  1  E8                   inx
00C817  1  C6 74                dec     DEST+1
00C819  1               L23A5:
00C819  1  18                   clc
00C81A  1  65 71                adc     INDEX
00C81C  1  90 03                bcc     L23AD
00C81E  1  C6 72                dec     INDEX+1
00C820  1  18                   clc
00C821  1               L23AD:
00C821  1  B1 71                lda     (INDEX),y
00C823  1  91 73                sta     (DEST),y
00C825  1  C8                   iny
00C826  1  D0 F9                bne     L23AD
00C828  1  E6 72                inc     INDEX+1
00C82A  1  E6 74                inc     DEST+1
00C82C  1  CA                   dex
00C82D  1  D0 F2                bne     L23AD
00C82F  1               ; ----------------------------------------------------------------------------
00C82F  1               PUT_NEW_LINE:
00C82F  1  A5 13                lda     INPUTBUFFER
00C831  1  F0 2F                beq     FIX_LINKS
00C833  1  A5 85                lda     MEMSIZ
00C835  1  A4 86                ldy     MEMSIZ+1
00C837  1  85 81                sta     FRETOP
00C839  1  84 82                sty     FRETOP+1
00C83B  1  A5 7B                lda     VARTAB
00C83D  1  85 A6                sta     HIGHTR
00C83F  1  65 5D                adc     EOLPNTR
00C841  1  85 A4                sta     HIGHDS
00C843  1  A4 7C                ldy     VARTAB+1
00C845  1  84 A7                sty     HIGHTR+1
00C847  1  90 01                bcc     L23D6
00C849  1  C8                   iny
00C84A  1               L23D6:
00C84A  1  84 A5                sty     HIGHDS+1
00C84C  1  20 18 C7             jsr     BLTU
00C84F  1  A5 7F                lda     STREND
00C851  1  A4 80                ldy     STREND+1
00C853  1  85 7B                sta     VARTAB
00C855  1  84 7C                sty     VARTAB+1
00C857  1  A4 5D                ldy     EOLPNTR
00C859  1  88                   dey
00C85A  1               ; ---COPY LINE INTO PROGRAM-------
00C85A  1               L23E6:
00C85A  1  B9 0F 00             lda     INPUTBUFFER-4,y
00C85D  1  91 AA                sta     (LOWTR),y
00C85F  1  88                   dey
00C860  1  10 F8                bpl     L23E6
00C862  1               ; ----------------------------------------------------------------------------
00C862  1               ; CLEAR ALL VARIABLES
00C862  1               ; RE-ESTABLISH ALL FORWARD LINKS
00C862  1               ; ----------------------------------------------------------------------------
00C862  1               FIX_LINKS:
00C862  1  20 C0 C9             jsr     SETPTRS
00C865  1  A5 79                lda     TXTTAB
00C867  1  A4 7A                ldy     TXTTAB+1
00C869  1  85 71                sta     INDEX
00C86B  1  84 72                sty     INDEX+1
00C86D  1  18                   clc
00C86E  1               L23FA:
00C86E  1  A0 01                ldy     #$01
00C870  1  B1 71                lda     (INDEX),y
00C872  1  D0 03 4C C6          jeq     L2351
00C876  1  C7           
00C877  1               
00C877  1  A0 04                ldy     #$04
00C879  1               L2405:
00C879  1  C8                   iny
00C87A  1  B1 71                lda     (INDEX),y
00C87C  1  D0 FB                bne     L2405
00C87E  1  C8                   iny
00C87F  1  98                   tya
00C880  1  65 71                adc     INDEX
00C882  1  AA                   tax
00C883  1  A0 00                ldy     #$00
00C885  1  91 71                sta     (INDEX),y
00C887  1  A5 72                lda     INDEX+1
00C889  1  69 00                adc     #$00
00C88B  1  C8                   iny
00C88C  1  91 71                sta     (INDEX),y
00C88E  1  86 71                stx     INDEX
00C890  1  85 72                sta     INDEX+1
00C892  1  90 DA                bcc     L23FA	; always
00C894  1               ; ----------------------------------------------------------------------------
00C894  1               L2420:
00C894  1  20 22 CE             jsr     OUTDO
00C897  1  CA                   dex
00C898  1  10 08                bpl     INLIN2
00C89A  1               L2423:
00C89A  1  20 22 CE             jsr     OUTDO
00C89D  1  20 A9 CD             jsr     CRDO
00C8A0  1               ; ----------------------------------------------------------------------------
00C8A0  1               ; READ A LINE, AND STRIP OFF SIGN BITS
00C8A0  1               ; ----------------------------------------------------------------------------
00C8A0  1               INLIN:
00C8A0  1  A2 00                ldx     #$00
00C8A2  1               INLIN2:
00C8A2  1  20 CF C8             jsr     GETLN
00C8A5  1  C9 07                cmp     #$07
00C8A7  1  F0 14                beq     L2443
00C8A9  1  C9 0D                cmp     #$0D
00C8AB  1  F0 1F                beq     L2453
00C8AD  1  C9 08                cmp     #$08 ; BACKSPACE
00C8AF  1  F0 E3                beq     L2420
00C8B1  1  C9 20                cmp     #$20
00C8B3  1  90 ED                bcc     INLIN2
00C8B5  1  C9 7D                cmp     #$7D
00C8B7  1  B0 E9                bcs     INLIN2
00C8B9  1  C9 40                cmp     #$40 ; @
00C8BB  1  F0 DD                beq     L2423
00C8BD  1               L2443:
00C8BD  1  E0 47                cpx     #$47
00C8BF  1  B0 04                bcs     L244C
00C8C1  1  95 13                sta     INPUTBUFFER,x
00C8C3  1  E8                   inx
00C8C4  1  2C                   .byte   $2C
00C8C5  1               L244C:
00C8C5  1  A9 07                lda     #$07 ; BEL
00C8C7  1  20 22 CE             jsr     OUTDO
00C8CA  1  D0 D6                bne     INLIN2
00C8CC  1               L2453:
00C8CC  1  4C A3 CD             jmp     L29B9
00C8CF  1               GETLN:
00C8CF  1  20 74 FF             jsr     MONRDKEY
00C8D2  1  EA                   nop
00C8D3  1  EA                   nop
00C8D4  1  EA                   nop
00C8D5  1  EA                   nop
00C8D6  1  EA                   nop
00C8D7  1  EA                   nop
00C8D8  1  EA                   nop
00C8D9  1  EA                   nop
00C8DA  1  EA                   nop
00C8DB  1  EA                   nop
00C8DC  1  EA                   nop
00C8DD  1  EA                   nop
00C8DE  1  EA                   nop
00C8DF  1  EA                   nop
00C8E0  1  29 7F                and     #$7F
00C8E2  1               RDKEY:
00C8E2  1  C9 0F                cmp     #$0F
00C8E4  1  D0 08                bne     L2465
00C8E6  1  48                   pha
00C8E7  1  A5 64                lda     Z14
00C8E9  1  49 FF                eor     #$FF
00C8EB  1  85 64                sta     Z14
00C8ED  1  68                   pla
00C8EE  1               L2465:
00C8EE  1  60                   rts
00C8EF  1               ; ----------------------------------------------------------------------------
00C8EF  1               ; TOKENIZE THE INPUT LINE
00C8EF  1               ; ----------------------------------------------------------------------------
00C8EF  1               PARSE_INPUT_LINE:
00C8EF  1  A6 DD                ldx     TXTPTR
00C8F1  1  A0 04                ldy     #$04
00C8F3  1  84 60                sty     DATAFLG
00C8F5  1               L246C:
00C8F5  1  B5 00                lda     INPUTBUFFERX,x
00C8F7  1  C9 20                cmp     #$20
00C8F9  1  F0 3A                beq     L24AC
00C8FB  1  85 5C                sta     ENDCHR
00C8FD  1  C9 22                cmp     #$22
00C8FF  1  F0 58                beq     L24D0
00C901  1  24 60                bit     DATAFLG
00C903  1  70 30                bvs     L24AC
00C905  1  C9 3F                cmp     #$3F
00C907  1  D0 04                bne     L2484
00C909  1  A9 97                lda     #TOKEN_PRINT
00C90B  1  D0 28                bne     L24AC
00C90D  1               L2484:
00C90D  1  C9 30                cmp     #$30
00C90F  1  90 04                bcc     L248C
00C911  1  C9 3C                cmp     #$3C
00C913  1  90 20                bcc     L24AC
00C915  1               ; ----------------------------------------------------------------------------
00C915  1               ; SEARCH TOKEN NAME TABLE FOR MATCH STARTING
00C915  1               ; WITH CURRENT CHAR FROM INPUT LINE
00C915  1               ; ----------------------------------------------------------------------------
00C915  1               L248C:
00C915  1  84 BA                sty     STRNG2
00C917  1  A0 00                ldy     #$00
00C919  1  84 5D                sty     EOLPNTR
00C91B  1  88                   dey
00C91C  1  86 DD                stx     TXTPTR
00C91E  1  CA                   dex
00C91F  1               L2496:
00C91F  1  C8                   iny
00C920  1               L2497:
00C920  1  E8                   inx
00C921  1               L2498:
00C921  1  B5 00                lda     INPUTBUFFERX,x
00C923  1  C9 20                cmp     #$20
00C925  1  F0 F9                beq     L2497
00C927  1  38                   sec
00C928  1  F9 84 C0             sbc     TOKEN_NAME_TABLE,y
00C92B  1  F0 F2                beq     L2496
00C92D  1  C9 80                cmp     #$80
00C92F  1  D0 2F                bne     L24D7
00C931  1  05 5D                ora     EOLPNTR
00C933  1               ; ----------------------------------------------------------------------------
00C933  1               ; STORE CHARACTER OR TOKEN IN OUTPUT LINE
00C933  1               ; ----------------------------------------------------------------------------
00C933  1               L24AA:
00C933  1  A4 BA                ldy     STRNG2
00C935  1               L24AC:
00C935  1  E8                   inx
00C936  1  C8                   iny
00C937  1  99 0E 00             sta     INPUTBUFFER-5,y
00C93A  1  B9 0E 00             lda     INPUTBUFFER-5,y
00C93D  1  F0 34                beq     L24EA
00C93F  1  38                   sec
00C940  1  E9 3A                sbc     #$3A
00C942  1  F0 04                beq     L24BF
00C944  1  C9 49                cmp     #$49
00C946  1  D0 02                bne     L24C1
00C948  1               L24BF:
00C948  1  85 60                sta     DATAFLG
00C94A  1               L24C1:
00C94A  1  38                   sec
00C94B  1  E9 54                sbc     #TOKEN_REM-':'
00C94D  1  D0 A6                bne     L246C
00C94F  1  85 5C                sta     ENDCHR
00C951  1               ; ----------------------------------------------------------------------------
00C951  1               ; HANDLE LITERAL (BETWEEN QUOTES) OR REMARK,
00C951  1               ; BY COPYING CHARS UP TO ENDCHR.
00C951  1               ; ----------------------------------------------------------------------------
00C951  1               L24C8:
00C951  1  B5 00                lda     INPUTBUFFERX,x
00C953  1  F0 E0                beq     L24AC
00C955  1  C5 5C                cmp     ENDCHR
00C957  1  F0 DC                beq     L24AC
00C959  1               L24D0:
00C959  1  C8                   iny
00C95A  1  99 0E 00             sta     INPUTBUFFER-5,y
00C95D  1  E8                   inx
00C95E  1  D0 F1                bne     L24C8
00C960  1               ; ----------------------------------------------------------------------------
00C960  1               ; ADVANCE POINTER TO NEXT TOKEN NAME
00C960  1               ; ----------------------------------------------------------------------------
00C960  1               L24D7:
00C960  1  A6 DD                ldx     TXTPTR
00C962  1  E6 5D                inc     EOLPNTR
00C964  1               L24DB:
00C964  1  C8                   iny
00C965  1  B9 83 C0             lda     MATHTBL+28+1,y
00C968  1  10 FA                bpl     L24DB
00C96A  1  B9 84 C0             lda     TOKEN_NAME_TABLE,y
00C96D  1  D0 B2                bne     L2498
00C96F  1  B5 00                lda     INPUTBUFFERX,x
00C971  1  10 C0                bpl     L24AA
00C973  1               ; ---END OF LINE------------------
00C973  1               L24EA:
00C973  1  99 10 00             sta     INPUTBUFFER-3,y
00C976  1  A9 12                lda     #<INPUTBUFFER-1
00C978  1  85 DD                sta     TXTPTR
00C97A  1  60                   rts
00C97B  1               ; ----------------------------------------------------------------------------
00C97B  1               ; SEARCH FOR LINE
00C97B  1               ;
00C97B  1               ; (LINNUM) = LINE # TO FIND
00C97B  1               ; IF NOT FOUND:  CARRY = 0
00C97B  1               ;	LOWTR POINTS AT NEXT LINE
00C97B  1               ; IF FOUND:      CARRY = 1
00C97B  1               ;	LOWTR POINTS AT LINE
00C97B  1               ; ----------------------------------------------------------------------------
00C97B  1               FNDLIN:
00C97B  1  A5 79                lda     TXTTAB
00C97D  1  A6 7A                ldx     TXTTAB+1
00C97F  1               FL1:
00C97F  1  A0 01                ldy     #$01
00C981  1  85 AA                sta     LOWTR
00C983  1  86 AB                stx     LOWTR+1
00C985  1  B1 AA                lda     (LOWTR),y
00C987  1  F0 1F                beq     L251F
00C989  1  C8                   iny
00C98A  1  C8                   iny
00C98B  1  A5 12                lda     LINNUM+1
00C98D  1  D1 AA                cmp     (LOWTR),y
00C98F  1  90 18                bcc     L2520
00C991  1  F0 03                beq     L250D
00C993  1  88                   dey
00C994  1  D0 09                bne     L2516
00C996  1               L250D:
00C996  1  A5 11                lda     LINNUM
00C998  1  88                   dey
00C999  1  D1 AA                cmp     (LOWTR),y
00C99B  1  90 0C                bcc     L2520
00C99D  1  F0 0A                beq     L2520
00C99F  1               L2516:
00C99F  1  88                   dey
00C9A0  1  B1 AA                lda     (LOWTR),y
00C9A2  1  AA                   tax
00C9A3  1  88                   dey
00C9A4  1  B1 AA                lda     (LOWTR),y
00C9A6  1  B0 D7                bcs     FL1
00C9A8  1               L251F:
00C9A8  1  18                   clc
00C9A9  1               L2520:
00C9A9  1  60                   rts
00C9AA  1               ; ----------------------------------------------------------------------------
00C9AA  1               ; "NEW" STATEMENT
00C9AA  1               ; ----------------------------------------------------------------------------
00C9AA  1               NEW:
00C9AA  1  D0 FD                bne     L2520
00C9AC  1               SCRTCH:
00C9AC  1  A9 00                lda     #$00
00C9AE  1  A8                   tay
00C9AF  1  91 79                sta     (TXTTAB),y
00C9B1  1  C8                   iny
00C9B2  1  91 79                sta     (TXTTAB),y
00C9B4  1  A5 79                lda     TXTTAB
00C9B6  1  69 02                adc     #$02
00C9B8  1  85 7B                sta     VARTAB
00C9BA  1  A5 7A                lda     TXTTAB+1
00C9BC  1  69 00                adc     #$00
00C9BE  1  85 7C                sta     VARTAB+1
00C9C0  1               ; ----------------------------------------------------------------------------
00C9C0  1               SETPTRS:
00C9C0  1  20 F0 C9             jsr     STXTPT
00C9C3  1               ; ----------------------------------------------------------------------------
00C9C3  1               ; "CLEAR" STATEMENT
00C9C3  1               ; ----------------------------------------------------------------------------
00C9C3  1               CLEARC:
00C9C3  1  A5 85                lda     MEMSIZ
00C9C5  1  A4 86                ldy     MEMSIZ+1
00C9C7  1  85 81                sta     FRETOP
00C9C9  1  84 82                sty     FRETOP+1
00C9CB  1  A5 7B                lda     VARTAB
00C9CD  1  A4 7C                ldy     VARTAB+1
00C9CF  1  85 7D                sta     ARYTAB
00C9D1  1  84 7E                sty     ARYTAB+1
00C9D3  1  85 7F                sta     STREND
00C9D5  1  84 80                sty     STREND+1
00C9D7  1  20 63 CB             jsr     RESTORE
00C9DA  1               ; ----------------------------------------------------------------------------
00C9DA  1               STKINI:
00C9DA  1  A2 68                ldx     #TEMPST
00C9DC  1  86 65                stx     TEMPPT
00C9DE  1  68                   pla
00C9DF  1  8D FD 01             sta     STACK+STACK_TOP+1
00C9E2  1  68                   pla
00C9E3  1  8D FE 01             sta     STACK+STACK_TOP+2
00C9E6  1  A2 FC                ldx     #STACK_TOP
00C9E8  1  9A                   txs
00C9E9  1  A9 00                lda     #$00
00C9EB  1  85 8C                sta     OLDTEXT+1
00C9ED  1  85 61                sta     SUBFLG
00C9EF  1               L256A:
00C9EF  1  60                   rts
00C9F0  1               ; ----------------------------------------------------------------------------
00C9F0  1               ; SET TXTPTR TO BEGINNING OF PROGRAM
00C9F0  1               ; ----------------------------------------------------------------------------
00C9F0  1               STXTPT:
00C9F0  1  18                   clc
00C9F1  1  A5 79                lda     TXTTAB
00C9F3  1  69 FF                adc     #$FF
00C9F5  1  85 DD                sta     TXTPTR
00C9F7  1  A5 7A                lda     TXTTAB+1
00C9F9  1  69 FF                adc     #$FF
00C9FB  1  85 DE                sta     TXTPTR+1
00C9FD  1  60                   rts
00C9FE  1               ; ----------------------------------------------------------------------------
00C9FE  1               ; ----------------------------------------------------------------------------
00C9FE  1               ; "LIST" STATEMENT
00C9FE  1               ; ----------------------------------------------------------------------------
00C9FE  1               LIST:
00C9FE  1  90 06                bcc     L2581
00CA00  1  F0 04                beq     L2581
00CA02  1  C9 A4                cmp     #TOKEN_MINUS
00CA04  1  D0 E9                bne     L256A
00CA06  1               L2581:
00CA06  1  20 BC CC             jsr     LINGET
00CA09  1  20 7B C9             jsr     FNDLIN
00CA0C  1  20 DC 00             jsr     CHRGOT
00CA0F  1  F0 0C                beq     L2598
00CA11  1  C9 A4                cmp     #TOKEN_MINUS
00CA13  1  D0 94                bne     L2520
00CA15  1  20 D6 00             jsr     CHRGET
00CA18  1  20 BC CC             jsr     LINGET
00CA1B  1  D0 8C                bne     L2520
00CA1D  1               L2598:
00CA1D  1  68                   pla
00CA1E  1  68                   pla
00CA1F  1  A5 11                lda     LINNUM
00CA21  1  05 12                ora     LINNUM+1
00CA23  1  D0 06                bne     L25A6
00CA25  1  A9 FF                lda     #$FF
00CA27  1  85 11                sta     LINNUM
00CA29  1  85 12                sta     LINNUM+1
00CA2B  1               L25A6:
00CA2B  1  A0 01                ldy     #$01
00CA2D  1  84 60                sty     DATAFLG
00CA2F  1  B1 AA                lda     (LOWTRX),y
00CA31  1  F0 41                beq     L25E5
00CA33  1  20 72 CB             jsr     ISCNTC
00CA36  1  20 A9 CD             jsr     CRDO
00CA39  1  C8                   iny
00CA3A  1  B1 AA                lda     (LOWTRX),y
00CA3C  1  AA                   tax
00CA3D  1  C8                   iny
00CA3E  1  B1 AA                lda     (LOWTRX),y
00CA40  1  C5 12                cmp     LINNUM+1
00CA42  1  D0 04                bne     L25C1
00CA44  1  E4 11                cpx     LINNUM
00CA46  1  F0 02                beq     L25C3
00CA48  1               L25C1:
00CA48  1  B0 2A                bcs     L25E5
00CA4A  1               ; ---LIST ONE LINE----------------
00CA4A  1               L25C3:
00CA4A  1  84 97                sty     FORPNT
00CA4C  1  20 9B DE             jsr     LINPRT
00CA4F  1  A9 20                lda     #$20
00CA51  1               L25CA:
00CA51  1  A4 97                ldy     FORPNT
00CA53  1  29 7F                and     #$7F
00CA55  1               L25CE:
00CA55  1  20 22 CE             jsr     OUTDO
00CA58  1  C9 22                cmp     #$22
00CA5A  1  D0 06                bne     LA519
00CA5C  1  A5 60                lda     DATAFLG
00CA5E  1  49 FF                eor     #$FF
00CA60  1  85 60                sta     DATAFLG
00CA62  1               LA519:
00CA62  1  C8                   iny
00CA63  1  B1 AA                lda     (LOWTRX),y
00CA65  1  D0 10                bne     L25E8
00CA67  1  A8                   tay
00CA68  1  B1 AA                lda     (LOWTRX),y
00CA6A  1  AA                   tax
00CA6B  1  C8                   iny
00CA6C  1  B1 AA                lda     (LOWTRX),y
00CA6E  1  86 AA                stx     LOWTRX
00CA70  1  85 AB                sta     LOWTRX+1
00CA72  1  D0 B7                bne     L25A6
00CA74  1               L25E5:
00CA74  1  4C BD C7             jmp     RESTART
00CA77  1               L25E8:
00CA77  1  10 DC                bpl     L25CE
00CA79  1  C9 FF                cmp     #$FF
00CA7B  1  F0 D8                beq     L25CE
00CA7D  1  24 60                bit     DATAFLG
00CA7F  1  30 D4                bmi     L25CE
00CA81  1  38                   sec
00CA82  1  E9 7F                sbc     #$7F
00CA84  1  AA                   tax
00CA85  1  84 97                sty     FORPNT
00CA87  1  A0 FF                ldy     #$FF
00CA89  1               L25F2:
00CA89  1  CA                   dex
00CA8A  1  F0 08                beq     L25FD
00CA8C  1               L25F5:
00CA8C  1  C8                   iny
00CA8D  1  B9 84 C0             lda     TOKEN_NAME_TABLE,y
00CA90  1  10 FA                bpl     L25F5
00CA92  1  30 F5                bmi     L25F2
00CA94  1               L25FD:
00CA94  1  C8                   iny
00CA95  1  B9 84 C0             lda     TOKEN_NAME_TABLE,y
00CA98  1  30 B7                bmi     L25CA
00CA9A  1  20 22 CE             jsr     OUTDO
00CA9D  1  D0 F5                bne     L25FD	; always
00CA9F  1               ; ----------------------------------------------------------------------------
00CA9F  1               ; "FOR" STATEMENT
00CA9F  1               ;
00CA9F  1               ; FOR PUSHES 18 BYTES ON THE STACK:
00CA9F  1               ; 2 -- TXTPTR
00CA9F  1               ; 2 -- LINE NUMBER
00CA9F  1               ; 5 -- INITIAL (CURRENT)  FOR VARIABLE VALUE
00CA9F  1               ; 1 -- STEP SIGN
00CA9F  1               ; 5 -- STEP VALUE
00CA9F  1               ; 2 -- ADDRESS OF FOR VARIABLE IN VARTAB
00CA9F  1               ; 1 -- FOR TOKEN ($81)
00CA9F  1               ; ----------------------------------------------------------------------------
00CA9F  1               FOR:
00CA9F  1  A9 80                lda     #$80
00CAA1  1  85 61                sta     SUBFLG
00CAA3  1  20 F6 CC             jsr     LET
00CAA6  1  20 EA C6             jsr     GTFORPNT
00CAA9  1  D0 05                bne     L2619
00CAAB  1  8A                   txa
00CAAC  1  69 0D                adc     #FOR_STACK1
00CAAE  1  AA                   tax
00CAAF  1  9A                   txs
00CAB0  1               L2619:
00CAB0  1  68                   pla
00CAB1  1  68                   pla
00CAB2  1  A9 08                lda     #FOR_STACK2
00CAB4  1  20 5B C7             jsr     CHKMEM
00CAB7  1  20 57 CC             jsr     DATAN
00CABA  1  18                   clc
00CABB  1  98                   tya
00CABC  1  65 DD                adc     TXTPTR
00CABE  1  48                   pha
00CABF  1  A5 DE                lda     TXTPTR+1
00CAC1  1  69 00                adc     #$00
00CAC3  1  48                   pha
00CAC4  1  A5 88                lda     CURLIN+1
00CAC6  1  48                   pha
00CAC7  1  A5 87                lda     CURLIN
00CAC9  1  48                   pha
00CACA  1  A9 9D                lda     #TOKEN_TO
00CACC  1  20 40 D1             jsr     SYNCHR
00CACF  1  20 ED CF             jsr     CHKNUM
00CAD2  1  20 EA CF             jsr     FRMNUM
00CAD5  1  A5 B0                lda     FACSIGN
00CAD7  1  09 7F                ora     #$7F
00CAD9  1  25 AD                and     FAC+1
00CADB  1  85 AD                sta     FAC+1
00CADD  1  A9 E8                lda     #<STEP
00CADF  1  A0 CA                ldy     #>STEP
00CAE1  1  85 71                sta     INDEX
00CAE3  1  84 72                sty     INDEX+1
00CAE5  1  4C A3 D0             jmp     FRM_STACK3
00CAE8  1               ; ----------------------------------------------------------------------------
00CAE8  1               ; "STEP" PHRASE OF "FOR" STATEMENT
00CAE8  1               ; ----------------------------------------------------------------------------
00CAE8  1               STEP:
00CAE8  1  A9 D9                lda     #<CON_ONE
00CAEA  1  A0 DA                ldy     #>CON_ONE
00CAEC  1  20 88 DC             jsr     LOAD_FAC_FROM_YA
00CAEF  1  20 DC 00             jsr     CHRGOT
00CAF2  1  C9 A2                cmp     #TOKEN_STEP
00CAF4  1  D0 06                bne     L2665
00CAF6  1  20 D6 00             jsr     CHRGET
00CAF9  1  20 EA CF             jsr     FRMNUM
00CAFC  1               L2665:
00CAFC  1  20 07 DD             jsr     SIGN
00CAFF  1  20 98 D0             jsr     FRM_STACK2
00CB02  1  A5 98                lda     FORPNT+1
00CB04  1  48                   pha
00CB05  1  A5 97                lda     FORPNT
00CB07  1  48                   pha
00CB08  1  A9 81                lda     #$81
00CB0A  1  48                   pha
00CB0B  1               ; ----------------------------------------------------------------------------
00CB0B  1               ; PERFORM NEXT STATEMENT
00CB0B  1               ; ----------------------------------------------------------------------------
00CB0B  1               NEWSTT:
00CB0B  1  20 72 CB             jsr     ISCNTC
00CB0E  1  A5 DD                lda     TXTPTR
00CB10  1  A4 DE                ldy     TXTPTR+1
00CB12  1  F0 06                beq     L2683
00CB14  1  85 8B                sta     OLDTEXT
00CB16  1  84 8C                sty     OLDTEXT+1
00CB18  1  A0 00                ldy     #$00
00CB1A  1               L2683:
00CB1A  1  B1 DD                lda     (TXTPTR),y
00CB1C  1  F0 07                beq     LA5DC	; old: 1 cycle more on generic case
00CB1E  1  C9 3A                cmp     #$3A
00CB20  1  F0 1D                beq     NEWSTT2
00CB22  1               SYNERR1:
00CB22  1  4C 49 D1             jmp     SYNERR
00CB25  1               LA5DC:
00CB25  1  A0 02                ldy     #$02
00CB27  1  B1 DD                lda     (TXTPTR),y
00CB29  1  18                   clc
00CB2A  1  F0 62                beq     L2701
00CB2C  1  C8                   iny
00CB2D  1  B1 DD                lda     (TXTPTR),y
00CB2F  1  85 87                sta     CURLIN
00CB31  1  C8                   iny
00CB32  1  B1 DD                lda     (TXTPTR),y
00CB34  1  85 88                sta     CURLIN+1
00CB36  1  98                   tya
00CB37  1  65 DD                adc     TXTPTR
00CB39  1  85 DD                sta     TXTPTR
00CB3B  1  90 02                bcc     NEWSTT2
00CB3D  1  E6 DE                inc     TXTPTR+1
00CB3F  1               NEWSTT2:
00CB3F  1  20 D6 00             jsr     CHRGET
00CB42  1  20 48 CB             jsr     EXECUTE_STATEMENT
00CB45  1  4C 0B CB             jmp     NEWSTT
00CB48  1               ; ----------------------------------------------------------------------------
00CB48  1               ; EXECUTE A STATEMENT
00CB48  1               ;
00CB48  1               ; (A) IS FIRST CHAR OF STATEMENT
00CB48  1               ; CARRY IS SET
00CB48  1               ; ----------------------------------------------------------------------------
00CB48  1               EXECUTE_STATEMENT:
00CB48  1  F0 6D                beq     RET1
00CB4A  1  38                   sec
00CB4B  1               EXECUTE_STATEMENT1:
00CB4B  1  E9 80                sbc     #$80
00CB4D  1  B0 03 4C F6          jcc     LET	; old: 1 cycle more on instr.
00CB51  1  CC           
00CB52  1               
00CB52  1  C9 1C                cmp     #NUM_TOKENS
00CB54  1  B0 CC                bcs     SYNERR1
00CB56  1  0A                   asl     a
00CB57  1  A8                   tay
00CB58  1  B9 01 C0             lda     TOKEN_ADDRESS_TABLE+1,y
00CB5B  1  48                   pha
00CB5C  1  B9 00 C0             lda     TOKEN_ADDRESS_TABLE,y
00CB5F  1  48                   pha
00CB60  1  4C D6 00             jmp     CHRGET
00CB63  1               ; ----------------------------------------------------------------------------
00CB63  1               ; "RESTORE" STATEMENT
00CB63  1               ; ----------------------------------------------------------------------------
00CB63  1               RESTORE:
00CB63  1  38                   sec
00CB64  1  A5 79                lda     TXTTAB
00CB66  1  E9 01                sbc     #$01
00CB68  1  A4 7A                ldy     TXTTAB+1
00CB6A  1  B0 01                bcs     SETDA
00CB6C  1  88                   dey
00CB6D  1               SETDA:
00CB6D  1  85 8F                sta     DATPTR
00CB6F  1  84 90                sty     DATPTR+1
00CB71  1  60                   rts
00CB72  1               ; ----------------------------------------------------------------------------
00CB72  1               ; SEE IF CONTROL-C TYPED
00CB72  1               ; ----------------------------------------------------------------------------
00CB72  1               
00CB72  1               ISCNTC:
00CB72  1               ; MODIFIED CALL BY G.SEARLE FROM THE ORIGINAL OSI CODE
00CB72  1  20 84 FF             jsr     MONISCNTC
00CB75  1               ; runs into "STOP"
00CB75  1               ; ----------------------------------------------------------------------------
00CB75  1               ; "STOP" STATEMENT
00CB75  1               ; ----------------------------------------------------------------------------
00CB75  1               STOP:
00CB75  1  B0 01                bcs     END2
00CB77  1               ; ----------------------------------------------------------------------------
00CB77  1               ; "END" STATEMENT
00CB77  1               ; ----------------------------------------------------------------------------
00CB77  1               END:
00CB77  1  18                   clc
00CB78  1               END2:
00CB78  1  D0 3D                bne     RET1
00CB7A  1  A5 DD                lda     TXTPTR
00CB7C  1  A4 DE                ldy     TXTPTR+1
00CB7E  1  F0 0C                beq     END4
00CB80  1  85 8B                sta     OLDTEXT
00CB82  1  84 8C                sty     OLDTEXT+1
00CB84  1               CONTROL_C_TYPED:
00CB84  1  A5 87                lda     CURLIN
00CB86  1  A4 88                ldy     CURLIN+1
00CB88  1  85 89                sta     OLDLIN
00CB8A  1  84 8A                sty     OLDLIN+1
00CB8C  1               END4:
00CB8C  1  68                   pla
00CB8D  1  68                   pla
00CB8E  1               L2701:
00CB8E  1  A9 99                lda     #<QT_BREAK
00CB90  1  A0 C1                ldy     #>QT_BREAK
00CB92  1  A2 00                ldx     #$00
00CB94  1  86 64                stx     Z14
00CB96  1  90 03                bcc     L270E
00CB98  1  4C B2 C7             jmp     PRINT_ERROR_LINNUM
00CB9B  1               L270E:
00CB9B  1  4C BD C7             jmp     RESTART
00CB9E  1               ; ----------------------------------------------------------------------------
00CB9E  1               ; "CONT" COMMAND
00CB9E  1               ; ----------------------------------------------------------------------------
00CB9E  1               CONT:
00CB9E  1  D0 17                bne     RET1
00CBA0  1  A2 1E                ldx     #ERR_CANTCONT
00CBA2  1  A4 8C                ldy     OLDTEXT+1
00CBA4  1  D0 03                bne     L271C
00CBA6  1  4C 97 C7             jmp     ERROR
00CBA9  1               L271C:
00CBA9  1  A5 8B                lda     OLDTEXT
00CBAB  1  85 DD                sta     TXTPTR
00CBAD  1  84 DE                sty     TXTPTR+1
00CBAF  1  A5 89                lda     OLDLIN
00CBB1  1  A4 8A                ldy     OLDLIN+1
00CBB3  1  85 87                sta     CURLIN
00CBB5  1  84 88                sty     CURLIN+1
00CBB7  1               RET1:
00CBB7  1  60                   rts
00CBB8  1               NULL:
00CBB8  1  20 EB D8             jsr     GETBYT
00CBBB  1  D0 FA                bne     RET1
00CBBD  1  E8                   inx
00CBBE  1  E0 0A                cpx     #NULL_MAX
00CBC0  1  B0 04                bcs     L2739
00CBC2  1  CA                   dex
00CBC3  1  86 0D                stx     Z15
00CBC5  1  60                   rts
00CBC6  1               L2739:
00CBC6  1  4C C5 D3             jmp     IQERR
00CBC9  1               CLEAR:
00CBC9  1  D0 EC                bne     RET1
00CBCB  1  4C C3 C9             jmp     CLEARC
00CBCE  1               ; ----------------------------------------------------------------------------
00CBCE  1               ; "RUN" COMMAND
00CBCE  1               ; ----------------------------------------------------------------------------
00CBCE  1               RUN:
00CBCE  1  D0 03                bne     L27CF
00CBD0  1  4C C0 C9             jmp     SETPTRS
00CBD3  1               L27CF:
00CBD3  1  20 C3 C9             jsr     CLEARC
00CBD6  1  4C ED CB             jmp     L27E9
00CBD9  1               ; ----------------------------------------------------------------------------
00CBD9  1               ; "GOSUB" STATEMENT
00CBD9  1               ;
00CBD9  1               ; LEAVES 7 BYTES ON STACK:
00CBD9  1               ; 2 -- RETURN ADDRESS (NEWSTT)
00CBD9  1               ; 2 -- TXTPTR
00CBD9  1               ; 2 -- LINE #
00CBD9  1               ; 1 -- GOSUB TOKEN
00CBD9  1               ; ----------------------------------------------------------------------------
00CBD9  1               GOSUB:
00CBD9  1  A9 03                lda     #$03
00CBDB  1  20 5B C7             jsr     CHKMEM
00CBDE  1  A5 DE                lda     TXTPTR+1
00CBE0  1  48                   pha
00CBE1  1  A5 DD                lda     TXTPTR
00CBE3  1  48                   pha
00CBE4  1  A5 88                lda     CURLIN+1
00CBE6  1  48                   pha
00CBE7  1  A5 87                lda     CURLIN
00CBE9  1  48                   pha
00CBEA  1  A9 8C                lda     #TOKEN_GOSUB
00CBEC  1  48                   pha
00CBED  1               L27E9:
00CBED  1  20 DC 00             jsr     CHRGOT
00CBF0  1  20 F6 CB             jsr     GOTO
00CBF3  1  4C 0B CB             jmp     NEWSTT
00CBF6  1               ; ----------------------------------------------------------------------------
00CBF6  1               ; "GOTO" STATEMENT
00CBF6  1               ; ALSO USED BY "RUN" AND "GOSUB"
00CBF6  1               ; ----------------------------------------------------------------------------
00CBF6  1               GOTO:
00CBF6  1  20 BC CC             jsr     LINGET
00CBF9  1  20 5A CC             jsr     REMN
00CBFC  1  A5 88                lda     CURLIN+1
00CBFE  1  C5 12                cmp     LINNUM+1
00CC00  1  B0 0B                bcs     L2809
00CC02  1  98                   tya
00CC03  1  38                   sec
00CC04  1  65 DD                adc     TXTPTR
00CC06  1  A6 DE                ldx     TXTPTR+1
00CC08  1  90 07                bcc     L280D
00CC0A  1  E8                   inx
00CC0B  1  B0 04                bcs     L280D
00CC0D  1               L2809:
00CC0D  1  A5 79                lda     TXTTAB
00CC0F  1  A6 7A                ldx     TXTTAB+1
00CC11  1               L280D:
00CC11  1  20 7F C9             jsr     FL1
00CC14  1  90 1E                bcc     UNDERR
00CC16  1  A5 AA                lda     LOWTRX
00CC18  1  E9 01                sbc     #$01
00CC1A  1  85 DD                sta     TXTPTR
00CC1C  1  A5 AB                lda     LOWTRX+1
00CC1E  1  E9 00                sbc     #$00
00CC20  1  85 DE                sta     TXTPTR+1
00CC22  1               L281E:
00CC22  1  60                   rts
00CC23  1               ; ----------------------------------------------------------------------------
00CC23  1               ; "POP" AND "RETURN" STATEMENTS
00CC23  1               ; ----------------------------------------------------------------------------
00CC23  1               POP:
00CC23  1  D0 FD                bne     L281E
00CC25  1  A9 FF                lda     #$FF
00CC27  1  85 97                sta     FORPNT
00CC29  1  20 EA C6             jsr     GTFORPNT
00CC2C  1  9A                   txs
00CC2D  1  C9 8C                cmp     #TOKEN_GOSUB
00CC2F  1  F0 0B                beq     RETURN
00CC31  1  A2 04                ldx     #ERR_NOGOSUB
00CC33  1  2C                   .byte   $2C
00CC34  1               UNDERR:
00CC34  1  A2 0E                ldx     #ERR_UNDEFSTAT
00CC36  1  4C 97 C7             jmp     ERROR
00CC39  1               ; ----------------------------------------------------------------------------
00CC39  1               SYNERR2:
00CC39  1  4C 49 D1             jmp     SYNERR
00CC3C  1               ; ----------------------------------------------------------------------------
00CC3C  1               RETURN:
00CC3C  1  68                   pla
00CC3D  1  68                   pla
00CC3E  1  85 87                sta     CURLIN
00CC40  1  68                   pla
00CC41  1  85 88                sta     CURLIN+1
00CC43  1  68                   pla
00CC44  1  85 DD                sta     TXTPTR
00CC46  1  68                   pla
00CC47  1  85 DE                sta     TXTPTR+1
00CC49  1               ; ----------------------------------------------------------------------------
00CC49  1               ; "DATA" STATEMENT
00CC49  1               ; EXECUTED BY SKIPPING TO NEXT COLON OR EOL
00CC49  1               ; ----------------------------------------------------------------------------
00CC49  1               DATA:
00CC49  1  20 57 CC             jsr     DATAN
00CC4C  1               ; ----------------------------------------------------------------------------
00CC4C  1               ; ADD (Y) TO TXTPTR
00CC4C  1               ; ----------------------------------------------------------------------------
00CC4C  1               ADDON:
00CC4C  1  98                   tya
00CC4D  1  18                   clc
00CC4E  1  65 DD                adc     TXTPTR
00CC50  1  85 DD                sta     TXTPTR
00CC52  1  90 02                bcc     L2852
00CC54  1  E6 DE                inc     TXTPTR+1
00CC56  1               L2852:
00CC56  1  60                   rts
00CC57  1               ; ----------------------------------------------------------------------------
00CC57  1               ; SCAN AHEAD TO NEXT ":" OR EOL
00CC57  1               ; ----------------------------------------------------------------------------
00CC57  1               DATAN:
00CC57  1  A2 3A                ldx     #$3A
00CC59  1  2C                   .byte   $2C
00CC5A  1               REMN:
00CC5A  1  A2 00                ldx     #$00
00CC5C  1  86 5B                stx     CHARAC
00CC5E  1  A0 00                ldy     #$00
00CC60  1  84 5C                sty     ENDCHR
00CC62  1               L285E:
00CC62  1  A5 5C                lda     ENDCHR
00CC64  1  A6 5B                ldx     CHARAC
00CC66  1  85 5B                sta     CHARAC
00CC68  1  86 5C                stx     ENDCHR
00CC6A  1               L2866:
00CC6A  1  B1 DD                lda     (TXTPTR),y
00CC6C  1  F0 E8                beq     L2852
00CC6E  1  C5 5C                cmp     ENDCHR
00CC70  1  F0 E4                beq     L2852
00CC72  1  C8                   iny
00CC73  1  C9 22                cmp     #$22
00CC75  1  F0 EB                beq     L285E; old: swap & cont is faster
00CC77  1  D0 F1                bne     L2866
00CC79  1               ; ----------------------------------------------------------------------------
00CC79  1               ; "IF" STATEMENT
00CC79  1               ; ----------------------------------------------------------------------------
00CC79  1               IF:
00CC79  1  20 FE CF             jsr     FRMEVL
00CC7C  1  20 DC 00             jsr     CHRGOT
00CC7F  1  C9 88                cmp     #TOKEN_GOTO
00CC81  1  F0 05                beq     L2884
00CC83  1  A9 A0                lda     #TOKEN_THEN
00CC85  1  20 40 D1             jsr     SYNCHR
00CC88  1               L2884:
00CC88  1  A5 AC                lda     FAC
00CC8A  1  D0 05                bne     L288D
00CC8C  1               ; ----------------------------------------------------------------------------
00CC8C  1               ; "REM" STATEMENT, OR FALSE "IF" STATEMENT
00CC8C  1               ; ----------------------------------------------------------------------------
00CC8C  1               REM:
00CC8C  1  20 5A CC             jsr     REMN
00CC8F  1  F0 BB                beq     ADDON
00CC91  1               L288D:
00CC91  1  20 DC 00             jsr     CHRGOT
00CC94  1  B0 03                bcs     L2895
00CC96  1  4C F6 CB             jmp     GOTO
00CC99  1               L2895:
00CC99  1  4C 48 CB             jmp     EXECUTE_STATEMENT
00CC9C  1               ; ----------------------------------------------------------------------------
00CC9C  1               ; "ON" STATEMENT
00CC9C  1               ;
00CC9C  1               ; ON <EXP> GOTO <LIST>
00CC9C  1               ; ON <EXP> GOSUB <LIST>
00CC9C  1               ; ----------------------------------------------------------------------------
00CC9C  1               ON:
00CC9C  1  20 EB D8             jsr     GETBYT
00CC9F  1  48                   pha
00CCA0  1  C9 8C                cmp     #TOKEN_GOSUB
00CCA2  1  F0 04                beq     L28A4
00CCA4  1               L28A0:
00CCA4  1  C9 88                cmp     #TOKEN_GOTO
00CCA6  1  D0 91                bne     SYNERR2
00CCA8  1               L28A4:
00CCA8  1  C6 AF                dec     FAC_LAST
00CCAA  1  D0 04                bne     L28AC
00CCAC  1  68                   pla
00CCAD  1  4C 4B CB             jmp     EXECUTE_STATEMENT1
00CCB0  1               L28AC:
00CCB0  1  20 D6 00             jsr     CHRGET
00CCB3  1  20 BC CC             jsr     LINGET
00CCB6  1  C9 2C                cmp     #$2C
00CCB8  1  F0 EE                beq     L28A4
00CCBA  1  68                   pla
00CCBB  1               L28B7:
00CCBB  1  60                   rts
00CCBC  1               ; ----------------------------------------------------------------------------
00CCBC  1               ; CONVERT LINE NUMBER
00CCBC  1               ; ----------------------------------------------------------------------------
00CCBC  1               LINGET:
00CCBC  1  A2 00                ldx     #$00
00CCBE  1  86 11                stx     LINNUM
00CCC0  1  86 12                stx     LINNUM+1
00CCC2  1               L28BE:
00CCC2  1  B0 F7                bcs     L28B7
00CCC4  1  E9 2F                sbc     #$2F
00CCC6  1  85 5B                sta     CHARAC
00CCC8  1  A5 12                lda     LINNUM+1
00CCCA  1  85 71                sta     INDEX
00CCCC  1  C9 19                cmp     #$19
00CCCE  1  B0 D4                bcs     L28A0
00CCD0  1               ; <<<<<DANGEROUS CODE>>>>>
00CCD0  1               ; NOTE THAT IF (A) = $AB ON THE LINE ABOVE,
00CCD0  1               ; ON.1 WILL COMPARE = AND CAUSE A CATASTROPHIC
00CCD0  1               ; JUMP TO $22D9 (FOR GOTO), OR OTHER LOCATIONS
00CCD0  1               ; FOR OTHER CALLS TO LINGET.
00CCD0  1               ;
00CCD0  1               ; YOU CAN SEE THIS IS YOU FIRST PUT "BRK" IN $22D9,
00CCD0  1               ; THEN TYPE "GO TO 437761".
00CCD0  1               ;
00CCD0  1               ; ANY VALUE FROM 437760 THROUGH 440319 WILL CAUSE
00CCD0  1               ; THE PROBLEM.  ($AB00 - $ABFF)
00CCD0  1               ; <<<<<DANGEROUS CODE>>>>>
00CCD0  1  A5 11                lda     LINNUM
00CCD2  1  0A                   asl     a
00CCD3  1  26 71                rol     INDEX
00CCD5  1  0A                   asl     a
00CCD6  1  26 71                rol     INDEX
00CCD8  1  65 11                adc     LINNUM
00CCDA  1  85 11                sta     LINNUM
00CCDC  1  A5 71                lda     INDEX
00CCDE  1  65 12                adc     LINNUM+1
00CCE0  1  85 12                sta     LINNUM+1
00CCE2  1  06 11                asl     LINNUM
00CCE4  1  26 12                rol     LINNUM+1
00CCE6  1  A5 11                lda     LINNUM
00CCE8  1  65 5B                adc     CHARAC
00CCEA  1  85 11                sta     LINNUM
00CCEC  1  90 02                bcc     L28EC
00CCEE  1  E6 12                inc     LINNUM+1
00CCF0  1               L28EC:
00CCF0  1  20 D6 00             jsr     CHRGET
00CCF3  1  4C C2 CC             jmp     L28BE
00CCF6  1               ; ----------------------------------------------------------------------------
00CCF6  1               ; "LET" STATEMENT
00CCF6  1               ;
00CCF6  1               ; LET <VAR> = <EXP>
00CCF6  1               ; <VAR> = <EXP>
00CCF6  1               ; ----------------------------------------------------------------------------
00CCF6  1               LET:
00CCF6  1  20 48 D2             jsr     PTRGET
00CCF9  1  85 97                sta     FORPNT
00CCFB  1  84 98                sty     FORPNT+1
00CCFD  1  A9 AB                lda     #TOKEN_EQUAL
00CCFF  1  20 40 D1             jsr     SYNCHR
00CD02  1  A5 5F                lda     VALTYP
00CD04  1  48                   pha
00CD05  1  20 FE CF             jsr     FRMEVL
00CD08  1  68                   pla
00CD09  1  2A                   rol     a
00CD0A  1  20 F0 CF             jsr     CHKVAL
00CD0D  1  D0 03                bne     LETSTRING
00CD0F  1               ; ----------------------------------------------------------------------------
00CD0F  1               ; REAL VARIABLE = EXPRESSION
00CD0F  1               ; ----------------------------------------------------------------------------
00CD0F  1  4C B1 DC             jmp     SETFOR
00CD12  1               LETSTRING:
00CD12  1               ; ----------------------------------------------------------------------------
00CD12  1               ; INSTALL STRING, DESCRIPTOR ADDRESS IS AT FAC+3,4
00CD12  1               ; ----------------------------------------------------------------------------
00CD12  1  A0 02                ldy     #$02
00CD14  1  B1 AE                lda     (FAC_LAST-1),y
00CD16  1  C5 82                cmp     FRETOP+1
00CD18  1  90 17                bcc     L2946
00CD1A  1  D0 07                bne     L2938
00CD1C  1  88                   dey
00CD1D  1  B1 AE                lda     (FAC_LAST-1),y
00CD1F  1  C5 81                cmp     FRETOP
00CD21  1  90 0E                bcc     L2946
00CD23  1               L2938:
00CD23  1  A4 AF                ldy     FAC_LAST
00CD25  1  C4 7C                cpy     VARTAB+1
00CD27  1  90 08                bcc     L2946
00CD29  1  D0 0D                bne     L294D
00CD2B  1  A5 AE                lda     FAC_LAST-1
00CD2D  1  C5 7B                cmp     VARTAB
00CD2F  1  B0 07                bcs     L294D
00CD31  1               L2946:
00CD31  1  A5 AE                lda     FAC_LAST-1
00CD33  1  A4 AF                ldy     FAC_LAST
00CD35  1  4C 4E CD             jmp     L2963
00CD38  1               L294D:
00CD38  1  A0 00                ldy     #$00
00CD3A  1  B1 AE                lda     (FAC_LAST-1),y
00CD3C  1  20 D9 D5             jsr     STRINI
00CD3F  1  A5 9E                lda     DSCPTR
00CD41  1  A4 9F                ldy     DSCPTR+1
00CD43  1  85 B8                sta     STRNG1
00CD45  1  84 B9                sty     STRNG1+1
00CD47  1  20 C7 D7             jsr     MOVINS
00CD4A  1  A9 AC                lda     #FAC
00CD4C  1  A0 00                ldy     #$00
00CD4E  1               L2963:
00CD4E  1  85 9E                sta     DSCPTR
00CD50  1  84 9F                sty     DSCPTR+1
00CD52  1  20 28 D8             jsr     FRETMS
00CD55  1  A0 00                ldy     #$00
00CD57  1  B1 9E                lda     (DSCPTR),y
00CD59  1  91 97                sta     (FORPNT),y
00CD5B  1  C8                   iny
00CD5C  1  B1 9E                lda     (DSCPTR),y
00CD5E  1  91 97                sta     (FORPNT),y
00CD60  1  C8                   iny
00CD61  1  B1 9E                lda     (DSCPTR),y
00CD63  1  91 97                sta     (FORPNT),y
00CD65  1  60                   rts
00CD66  1               PRSTRING:
00CD66  1  20 03 CE             jsr     STRPRT
00CD69  1               L297E:
00CD69  1  20 DC 00             jsr     CHRGOT
00CD6C  1               ; ----------------------------------------------------------------------------
00CD6C  1               ; "PRINT" STATEMENT
00CD6C  1               ; ----------------------------------------------------------------------------
00CD6C  1               PRINT:
00CD6C  1  F0 3B                beq     CRDO
00CD6E  1               PRINT2:
00CD6E  1  F0 57                beq     L29DD
00CD70  1  C9 9C                cmp     #TOKEN_TAB
00CD72  1  F0 6B                beq     L29F5
00CD74  1  C9 9F                cmp     #TOKEN_SPC
00CD76  1  F0 67                beq     L29F5
00CD78  1  C9 2C                cmp     #','
00CD7A  1  F0 4C                beq     L29DE
00CD7C  1  C9 3B                cmp     #$3B
00CD7E  1  F0 7A                beq     L2A0D
00CD80  1  20 FE CF             jsr     FRMEVL
00CD83  1  24 5F                bit     VALTYP
00CD85  1  30 DF                bmi     PRSTRING
00CD87  1  20 AB DE             jsr     FOUT
00CD8A  1  20 EB D5             jsr     STRLIT
00CD8D  1  A0 00                ldy     #$00
00CD8F  1  B1 AE                lda     (FAC_LAST-1),y
00CD91  1  18                   clc
00CD92  1  65 0E                adc     POSX
00CD94  1  C5 0F                cmp     Z17
00CD96  1  90 03                bcc     L29B1
00CD98  1  20 A9 CD             jsr     CRDO
00CD9B  1               L29B1:
00CD9B  1  20 03 CE             jsr     STRPRT
00CD9E  1  20 1D CE             jsr     OUTSP
00CDA1  1  D0 C6                bne     L297E ; branch always
00CDA3  1               L29B9:
00CDA3  1  A0 00                ldy     #$00
00CDA5  1  94 13                sty     INPUTBUFFER,x
00CDA7  1  A2 12                ldx     #LINNUM+1
00CDA9  1               CRDO:
00CDA9  1  A9 0D                lda     #CRLF_1
00CDAB  1  85 0E                sta     POSX
00CDAD  1  20 22 CE             jsr     OUTDO
00CDB0  1  A9 0A                lda     #CRLF_2
00CDB2  1  20 22 CE             jsr     OUTDO
00CDB5  1               PRINTNULLS:
00CDB5  1  8A                   txa
00CDB6  1  48                   pha
00CDB7  1  A6 0D                ldx     Z15
00CDB9  1  F0 08                beq     L29D9
00CDBB  1  A9 00                lda     #$00
00CDBD  1               L29D3:
00CDBD  1  20 22 CE             jsr     OUTDO
00CDC0  1  CA                   dex
00CDC1  1  D0 FA                bne     L29D3
00CDC3  1               L29D9:
00CDC3  1  86 0E                stx     POSX
00CDC5  1  68                   pla
00CDC6  1  AA                   tax
00CDC7  1               L29DD:
00CDC7  1  60                   rts
00CDC8  1               L29DE:
00CDC8  1  A5 0E                lda     POSX
00CDCA  1  C5 10                cmp     Z18
00CDCC  1  90 06                bcc     L29EA
00CDCE  1  20 A9 CD             jsr     CRDO
00CDD1  1  4C FA CD             jmp     L2A0D
00CDD4  1               L29EA:
00CDD4  1  38                   sec
00CDD5  1               L29EB:
00CDD5  1  E9 0E                sbc     #$0E
00CDD7  1  B0 FC                bcs     L29EB
00CDD9  1  49 FF                eor     #$FF
00CDDB  1  69 01                adc     #$01
00CDDD  1  D0 14                bne     L2A08
00CDDF  1               L29F5:
00CDDF  1  48                   pha
00CDE0  1  20 E8 D8             jsr     GTBYTC
00CDE3  1  C9 29                cmp     #')'
00CDE5  1  D0 66                bne     SYNERR4
00CDE7  1  68                   pla
00CDE8  1  C9 9C                cmp     #TOKEN_TAB
00CDEA  1  D0 08                bne     L2A0A
00CDEC  1  8A                   txa
00CDED  1  E5 0E                sbc     POSX
00CDEF  1  90 09                bcc     L2A0D
00CDF1  1  F0 07                beq     L2A0D
00CDF3  1               L2A08:
00CDF3  1  AA                   tax
00CDF4  1               L2A0A:
00CDF4  1  20 1D CE             jsr     OUTSP
00CDF7  1  CA                   dex
00CDF8  1  D0 FA                bne     L2A0A
00CDFA  1               L2A0D:
00CDFA  1  20 D6 00             jsr     CHRGET
00CDFD  1  4C 6E CD             jmp     PRINT2
00CE00  1               ; ----------------------------------------------------------------------------
00CE00  1               ; PRINT STRING AT (Y,A)
00CE00  1               ; ----------------------------------------------------------------------------
00CE00  1               STROUT:
00CE00  1  20 EB D5             jsr     STRLIT
00CE03  1               ; ----------------------------------------------------------------------------
00CE03  1               ; PRINT STRING AT (FACMO,FACLO)
00CE03  1               ; ----------------------------------------------------------------------------
00CE03  1               STRPRT:
00CE03  1  20 F3 D7             jsr     FREFAC
00CE06  1  AA                   tax
00CE07  1  A0 00                ldy     #$00
00CE09  1  E8                   inx
00CE0A  1               L2A22:
00CE0A  1  CA                   dex
00CE0B  1  F0 BA                beq     L29DD
00CE0D  1  B1 71                lda     (INDEX),y
00CE0F  1  20 22 CE             jsr     OUTDO
00CE12  1  C8                   iny
00CE13  1  C9 0D                cmp     #$0D
00CE15  1  D0 F3                bne     L2A22
00CE17  1  20 B5 CD             jsr     PRINTNULLS
00CE1A  1  4C 0A CE             jmp     L2A22
00CE1D  1               ; ----------------------------------------------------------------------------
00CE1D  1               OUTSP:
00CE1D  1  A9 20                lda     #$20
00CE1F  1  2C                   .byte   $2C
00CE20  1               OUTQUES:
00CE20  1  A9 3F                lda     #$3F
00CE22  1               ; ----------------------------------------------------------------------------
00CE22  1               ; PRINT CHAR FROM (A)
00CE22  1               ; ----------------------------------------------------------------------------
00CE22  1               OUTDO:
00CE22  1  24 64                bit     Z14
00CE24  1  30 18                bmi     L2A56
00CE26  1               ; Commodore forgot to remove this in CBM1
00CE26  1  48                   pha
00CE27  1  C9 20                cmp     #$20
00CE29  1  90 0B                bcc     L2A4E
00CE2B  1  A5 0E                lda     POSX
00CE2D  1  C5 0F                cmp     Z17
00CE2F  1  D0 03                bne     L2A4C
00CE31  1  20 A9 CD             jsr     CRDO
00CE34  1               L2A4C:
00CE34  1  E6 0E                inc     POSX
00CE36  1               L2A4E:
00CE36  1               ; Commodore forgot to remove this in CBM1
00CE36  1  68                   pla
00CE37  1  20 65 FF             jsr     MONCOUT
00CE3A  1  EA                   nop
00CE3B  1  EA                   nop
00CE3C  1  EA                   nop
00CE3D  1  EA                   nop
00CE3E  1               L2A56:
00CE3E  1  29 FF                and     #$FF
00CE40  1  60                   rts
00CE41  1               ; ----------------------------------------------------------------------------
00CE41  1               ; ???
00CE41  1               ; ----------------------------------------------------------------------------
00CE41  1               ; ----------------------------------------------------------------------------
00CE41  1               ; INPUT CONVERSION ERROR:  ILLEGAL CHARACTER
00CE41  1               ; IN NUMERIC FIELD.  MUST DISTINGUISH
00CE41  1               ; BETWEEN INPUT, READ, AND GET
00CE41  1               ; ----------------------------------------------------------------------------
00CE41  1               INPUTERR:
00CE41  1  A5 62                lda     INPUTFLG
00CE43  1  F0 0B                beq     RESPERR	; INPUT
00CE45  1               ; without this, it treats GET errors
00CE45  1               ; like READ errors
00CE45  1  A5 8D                lda     Z8C
00CE47  1  A4 8E                ldy     Z8C+1
00CE49  1  85 87                sta     CURLIN
00CE4B  1  84 88                sty     CURLIN+1
00CE4D  1               SYNERR4:
00CE4D  1  4C 49 D1             jmp     SYNERR
00CE50  1               RESPERR:
00CE50  1  A9 6A                lda     #<ERRREENTRY
00CE52  1  A0 CF                ldy     #>ERRREENTRY
00CE54  1  20 00 CE             jsr     STROUT
00CE57  1  A5 8B                lda     OLDTEXT
00CE59  1  A4 8C                ldy     OLDTEXT+1
00CE5B  1  85 DD                sta     TXTPTR
00CE5D  1  84 DE                sty     TXTPTR+1
00CE5F  1  60                   rts
00CE60  1               ; ----------------------------------------------------------------------------
00CE60  1               ; "GET" STATEMENT
00CE60  1               ; ----------------------------------------------------------------------------
00CE60  1               GET:
00CE60  1               ; ----------------------------------------------------------------------------
00CE60  1               ; "INPUT#" STATEMENT
00CE60  1               ; ----------------------------------------------------------------------------
00CE60  1               ; ----------------------------------------------------------------------------
00CE60  1               ; "INPUT" STATEMENT
00CE60  1               ; ----------------------------------------------------------------------------
00CE60  1               INPUT:
00CE60  1  46 64                lsr     Z14
00CE62  1  C9 22                cmp     #$22
00CE64  1  D0 0B                bne     L2A9E
00CE66  1  20 FE D0             jsr     STRTXT
00CE69  1  A9 3B                lda     #$3B
00CE6B  1  20 40 D1             jsr     SYNCHR
00CE6E  1  20 03 CE             jsr     STRPRT
00CE71  1               L2A9E:
00CE71  1  20 11 D5             jsr     ERRDIR
00CE74  1  A9 2C                lda     #$2C
00CE76  1  85 12                sta     INPUTBUFFER-1
00CE78  1  20 83 CE             jsr     NXIN
00CE7B  1  A5 13                lda     INPUTBUFFER
00CE7D  1  D0 12                bne     L2ABE
00CE7F  1  18                   clc
00CE80  1  4C 84 CB             jmp     CONTROL_C_TYPED
00CE83  1               NXIN:
00CE83  1  20 20 CE             jsr     OUTQUES	; '?'
00CE86  1  20 1D CE             jsr     OUTSP
00CE89  1  4C A0 C8             jmp     INLIN
00CE8C  1               ; ----------------------------------------------------------------------------
00CE8C  1               ; "GETC" STATEMENT
00CE8C  1               ; ----------------------------------------------------------------------------
00CE8C  1               ; ----------------------------------------------------------------------------
00CE8C  1               ; "READ" STATEMENT
00CE8C  1               ; ----------------------------------------------------------------------------
00CE8C  1               READ:
00CE8C  1  A6 8F                ldx     DATPTR
00CE8E  1  A4 90                ldy     DATPTR+1
00CE90  1               ; AppleSoft II, too
00CE90  1  A9                   .byte   $A9	; LDA #$98
00CE91  1               L2ABE:
00CE91  1  98                   tya
00CE92  1               ; ----------------------------------------------------------------------------
00CE92  1               ; PROCESS INPUT LIST
00CE92  1               ;
00CE92  1               ; (Y,X) IS ADDRESS OF INPUT DATA STRING
00CE92  1               ; (A) = VALUE FOR INPUTFLG:  $00 FOR INPUT
00CE92  1               ; 				$40 FOR GET
00CE92  1               ;				$98 FOR READ
00CE92  1               ; ----------------------------------------------------------------------------
00CE92  1  85 62                sta     INPUTFLG
00CE94  1  86 91                stx     INPTR
00CE96  1  84 92                sty     INPTR+1
00CE98  1               PROCESS_INPUT_ITEM:
00CE98  1  20 48 D2             jsr     PTRGET
00CE9B  1  85 97                sta     FORPNT
00CE9D  1  84 98                sty     FORPNT+1
00CE9F  1  A5 DD                lda     TXTPTR
00CEA1  1  A4 DE                ldy     TXTPTR+1
00CEA3  1  85 11                sta     TXPSV
00CEA5  1  84 12                sty     TXPSV+1
00CEA7  1  A6 91                ldx     INPTR
00CEA9  1  A4 92                ldy     INPTR+1
00CEAB  1  86 DD                stx     TXTPTR
00CEAD  1  84 DE                sty     TXTPTR+1
00CEAF  1  20 DC 00             jsr     CHRGOT
00CEB2  1  D0 0E                bne     INSTART
00CEB4  1  24 62                bit     INPUTFLG
00CEB6  1               ; BUG: The beq/bne L2AF8 below is supposed
00CEB6  1               ; to be always taken. For this to happen,
00CEB6  1               ; the last load must be a 0 for beq
00CEB6  1               ; and != 0 for bne. The original Microsoft
00CEB6  1               ; code had ldx/ldy/bne here, which was only
00CEB6  1               ; correct for a non-ZP INPUTBUFFER. Commodore
00CEB6  1               ; fixed it in CBMBASIC V1 by swapping the
00CEB6  1               ; ldx and the ldy. It was broken on KIM,
00CEB6  1               ; but okay on APPLE and CBM2, because
00CEB6  1               ; these used a non-ZP INPUTBUFFER.
00CEB6  1               ; Microsoft fixed this somewhere after KIM
00CEB6  1               ; and before MICROTAN, by using beq instead
00CEB6  1               ; of bne in the ZP case.
00CEB6  1  30 62                bmi     FINDATA
00CEB8  1  20 20 CE             jsr     OUTQUES
00CEBB  1  20 83 CE             jsr     NXIN
00CEBE  1  86 DD                stx     TXTPTR
00CEC0  1  84 DE                sty     TXTPTR+1
00CEC2  1               ; ----------------------------------------------------------------------------
00CEC2  1               INSTART:
00CEC2  1  20 D6 00             jsr     CHRGET
00CEC5  1  24 5F                bit     VALTYP
00CEC7  1  10 24                bpl     L2B34
00CEC9  1  85 5B                sta     CHARAC
00CECB  1  C9 22                cmp     #$22
00CECD  1  F0 07                beq     L2B1D
00CECF  1  A9 3A                lda     #$3A
00CED1  1  85 5B                sta     CHARAC
00CED3  1  A9 2C                lda     #$2C
00CED5  1  18                   clc
00CED6  1               L2B1D:
00CED6  1  85 5C                sta     ENDCHR
00CED8  1  A5 DD                lda     TXTPTR
00CEDA  1  A4 DE                ldy     TXTPTR+1
00CEDC  1  69 00                adc     #$00
00CEDE  1  90 01                bcc     L2B28
00CEE0  1  C8                   iny
00CEE1  1               L2B28:
00CEE1  1  20 F1 D5             jsr     STRLT2
00CEE4  1  20 30 D9             jsr     POINT
00CEE7  1  20 12 CD             jsr     LETSTRING
00CEEA  1  4C F3 CE             jmp     INPUT_MORE
00CEED  1               ; ----------------------------------------------------------------------------
00CEED  1               L2B34:
00CEED  1  20 C4 DD             jsr     FIN
00CEF0  1  20 B1 DC             jsr     SETFOR
00CEF3  1               ; ----------------------------------------------------------------------------
00CEF3  1               INPUT_MORE:
00CEF3  1  20 DC 00             jsr     CHRGOT
00CEF6  1  F0 07                beq     L2B48
00CEF8  1  C9 2C                cmp     #$2C
00CEFA  1  F0 03                beq     L2B48
00CEFC  1  4C 41 CE             jmp     INPUTERR
00CEFF  1               L2B48:
00CEFF  1  A5 DD                lda     TXTPTR
00CF01  1  A4 DE                ldy     TXTPTR+1
00CF03  1  85 91                sta     INPTR
00CF05  1  84 92                sty     INPTR+1
00CF07  1  A5 11                lda     TXPSV
00CF09  1  A4 12                ldy     TXPSV+1
00CF0B  1  85 DD                sta     TXTPTR
00CF0D  1  84 DE                sty     TXTPTR+1
00CF0F  1  20 DC 00             jsr     CHRGOT
00CF12  1  F0 2C                beq     INPDONE
00CF14  1  20 3E D1             jsr     CHKCOM
00CF17  1  4C 98 CE             jmp     PROCESS_INPUT_ITEM
00CF1A  1               ; ----------------------------------------------------------------------------
00CF1A  1               FINDATA:
00CF1A  1  20 57 CC             jsr     DATAN
00CF1D  1  C8                   iny
00CF1E  1  AA                   tax
00CF1F  1  D0 12                bne     L2B7C
00CF21  1  A2 06                ldx     #ERR_NODATA
00CF23  1  C8                   iny
00CF24  1  B1 DD                lda     (TXTPTR),y
00CF26  1  F0 69                beq     GERR
00CF28  1  C8                   iny
00CF29  1  B1 DD                lda     (TXTPTR),y
00CF2B  1  85 8D                sta     Z8C
00CF2D  1  C8                   iny
00CF2E  1  B1 DD                lda     (TXTPTR),y
00CF30  1  C8                   iny
00CF31  1  85 8E                sta     Z8C+1
00CF33  1               L2B7C:
00CF33  1  B1 DD                lda     (TXTPTR),y
00CF35  1  AA                   tax
00CF36  1  20 4C CC             jsr     ADDON
00CF39  1  E0 83                cpx     #$83
00CF3B  1  D0 DD                bne     FINDATA
00CF3D  1  4C C2 CE             jmp     INSTART
00CF40  1               ; ---NO MORE INPUT REQUESTED------
00CF40  1               INPDONE:
00CF40  1  A5 91                lda     INPTR
00CF42  1  A4 92                ldy     INPTR+1
00CF44  1  A6 62                ldx     INPUTFLG
00CF46  1  F0 03                beq     L2B94 ; INPUT
00CF48  1  4C 6D CB             jmp     SETDA
00CF4B  1               L2B94:
00CF4B  1  A0 00                ldy     #$00
00CF4D  1  B1 91                lda     (INPTR),y
00CF4F  1  F0 07                beq     L2BA1
00CF51  1  A9 59                lda     #<ERREXTRA
00CF53  1  A0 CF                ldy     #>ERREXTRA
00CF55  1  4C 00 CE             jmp     STROUT
00CF58  1               L2BA1:
00CF58  1  60                   rts
00CF59  1               ; ----------------------------------------------------------------------------
00CF59  1               ERREXTRA:
00CF59  1  3F 45 58 54          .byte   "?EXTRA IGNORED"
00CF5D  1  52 41 20 49  
00CF61  1  47 4E 4F 52  
00CF67  1               
00CF67  1               
00CF67  1  0D 0A 00             .byte   $0D,$0A,$00
00CF6A  1               ERRREENTRY:
00CF6A  1  3F 52 45 44          .byte   "?REDO FROM START"
00CF6E  1  4F 20 46 52  
00CF72  1  4F 4D 20 53  
00CF7A  1               
00CF7A  1               
00CF7A  1  0D 0A 00             .byte   $0D,$0A,$00
00CF7D  1               ; ----------------------------------------------------------------------------
00CF7D  1               ; "NEXT" STATEMENT
00CF7D  1               ; ----------------------------------------------------------------------------
00CF7D  1               NEXT:
00CF7D  1  D0 04                bne     NEXT1
00CF7F  1  A0 00                ldy     #$00
00CF81  1  F0 03                beq     NEXT2
00CF83  1               NEXT1:
00CF83  1  20 48 D2             jsr     PTRGET
00CF86  1               NEXT2:
00CF86  1  85 97                sta     FORPNT
00CF88  1  84 98                sty     FORPNT+1
00CF8A  1  20 EA C6             jsr     GTFORPNT
00CF8D  1  F0 04                beq     NEXT3
00CF8F  1  A2 00                ldx     #$00
00CF91  1               GERR:
00CF91  1  F0 68                beq     JERROR
00CF93  1               NEXT3:
00CF93  1  9A                   txs
00CF94  1  E8                   inx
00CF95  1  E8                   inx
00CF96  1  E8                   inx
00CF97  1  E8                   inx
00CF98  1  8A                   txa
00CF99  1  E8                   inx
00CF9A  1  E8                   inx
00CF9B  1  E8                   inx
00CF9C  1  E8                   inx
00CF9D  1  E8                   inx
00CF9E  1  86 73                stx     DEST
00CFA0  1  A0 01                ldy     #>STACK
00CFA2  1  20 88 DC             jsr     LOAD_FAC_FROM_YA
00CFA5  1  BA                   tsx
00CFA6  1  BD 08 01             lda     STACK+BYTES_FP+4,x
00CFA9  1  85 B0                sta     FACSIGN
00CFAB  1  A5 97                lda     FORPNT
00CFAD  1  A4 98                ldy     FORPNT+1
00CFAF  1  20 A9 D9             jsr     FADD
00CFB2  1  20 B1 DC             jsr     SETFOR
00CFB5  1  A0 01                ldy     #>STACK
00CFB7  1  20 37 DD             jsr     FCOMP2
00CFBA  1  BA                   tsx
00CFBB  1  38                   sec
00CFBC  1  FD 08 01             sbc     STACK+BYTES_FP+4,x
00CFBF  1  F0 17                beq     L2C22
00CFC1  1  BD 0D 01             lda     STACK+2*BYTES_FP+5,x
00CFC4  1  85 87                sta     CURLIN
00CFC6  1  BD 0E 01             lda     STACK+2*BYTES_FP+6,x
00CFC9  1  85 88                sta     CURLIN+1
00CFCB  1  BD 10 01             lda     STACK+2*BYTES_FP+8,x
00CFCE  1  85 DD                sta     TXTPTR
00CFD0  1  BD 0F 01             lda     STACK+2*BYTES_FP+7,x
00CFD3  1  85 DE                sta     TXTPTR+1
00CFD5  1               L2C1F:
00CFD5  1  4C 0B CB             jmp     NEWSTT
00CFD8  1               L2C22:
00CFD8  1  8A                   txa
00CFD9  1  69 0F                adc     #2*BYTES_FP+7
00CFDB  1  AA                   tax
00CFDC  1  9A                   txs
00CFDD  1  20 DC 00             jsr     CHRGOT
00CFE0  1  C9 2C                cmp     #$2C
00CFE2  1  D0 F1                bne     L2C1F
00CFE4  1  20 D6 00             jsr     CHRGET
00CFE7  1  20 83 CF             jsr     NEXT1
00CFEA  1               ; ----------------------------------------------------------------------------
00CFEA  1               ; EVALUATE EXPRESSION, MAKE SURE IT IS NUMERIC
00CFEA  1               ; ----------------------------------------------------------------------------
00CFEA  1               FRMNUM:
00CFEA  1  20 FE CF             jsr     FRMEVL
00CFED  1               ; ----------------------------------------------------------------------------
00CFED  1               ; MAKE SURE (FAC) IS NUMERIC
00CFED  1               ; ----------------------------------------------------------------------------
00CFED  1               CHKNUM:
00CFED  1  18                   clc
00CFEE  1  24                   .byte   $24
00CFEF  1               ; ----------------------------------------------------------------------------
00CFEF  1               ; MAKE SURE (FAC) IS STRING
00CFEF  1               ; ----------------------------------------------------------------------------
00CFEF  1               CHKSTR:
00CFEF  1  38                   sec
00CFF0  1               ; ----------------------------------------------------------------------------
00CFF0  1               ; MAKE SURE (FAC) IS CORRECT TYPE
00CFF0  1               ; IF C=0, TYPE MUST BE NUMERIC
00CFF0  1               ; IF C=1, TYPE MUST BE STRING
00CFF0  1               ; ----------------------------------------------------------------------------
00CFF0  1               CHKVAL:
00CFF0  1  24 5F                bit     VALTYP
00CFF2  1  30 03                bmi     L2C41
00CFF4  1  B0 03                bcs     L2C43
00CFF6  1               L2C40:
00CFF6  1  60                   rts
00CFF7  1               L2C41:
00CFF7  1  B0 FD                bcs     L2C40
00CFF9  1               L2C43:
00CFF9  1  A2 18                ldx     #ERR_BADTYPE
00CFFB  1               JERROR:
00CFFB  1  4C 97 C7             jmp     ERROR
00CFFE  1               ; ----------------------------------------------------------------------------
00CFFE  1               ; EVALUATE THE EXPRESSION AT TXTPTR, LEAVING THE
00CFFE  1               ; RESULT IN FAC.  WORKS FOR BOTH STRING AND NUMERIC
00CFFE  1               ; EXPRESSIONS.
00CFFE  1               ; ----------------------------------------------------------------------------
00CFFE  1               FRMEVL:
00CFFE  1  A6 DD                ldx     TXTPTR
00D000  1  D0 02                bne     L2C4E
00D002  1  C6 DE                dec     TXTPTR+1
00D004  1               L2C4E:
00D004  1  C6 DD                dec     TXTPTR
00D006  1  A2 00                ldx     #$00
00D008  1  24                   .byte   $24
00D009  1               FRMEVL1:
00D009  1  48                   pha
00D00A  1  8A                   txa
00D00B  1  48                   pha
00D00C  1  A9 01                lda     #$01
00D00E  1  20 5B C7             jsr     CHKMEM
00D011  1  20 DD D0             jsr     FRM_ELEMENT
00D014  1  A9 00                lda     #$00
00D016  1  85 9B                sta     CPRTYP
00D018  1               FRMEVL2:
00D018  1  20 DC 00             jsr     CHRGOT
00D01B  1               L2C65:
00D01B  1  38                   sec
00D01C  1  E9 AA                sbc     #TOKEN_GREATER
00D01E  1  90 17                bcc     L2C81
00D020  1  C9 03                cmp     #$03
00D022  1  B0 13                bcs     L2C81
00D024  1  C9 01                cmp     #$01
00D026  1  2A                   rol     a
00D027  1  49 01                eor     #$01
00D029  1  45 9B                eor     CPRTYP
00D02B  1  C5 9B                cmp     CPRTYP
00D02D  1  90 61                bcc     SNTXERR
00D02F  1  85 9B                sta     CPRTYP
00D031  1  20 D6 00             jsr     CHRGET
00D034  1  4C 1B D0             jmp     L2C65
00D037  1               L2C81:
00D037  1  A6 9B                ldx     CPRTYP
00D039  1  D0 2C                bne     FRM_RELATIONAL
00D03B  1  B0 78                bcs     L2D02
00D03D  1  69 07                adc     #$07
00D03F  1  90 74                bcc     L2D02
00D041  1  65 5F                adc     VALTYP
00D043  1  D0 03                bne     L2C92
00D045  1  4C 8A D7             jmp     CAT
00D048  1               L2C92:
00D048  1  69 FF                adc     #$FF
00D04A  1  85 71                sta     INDEX
00D04C  1  0A                   asl     a
00D04D  1  65 71                adc     INDEX
00D04F  1  A8                   tay
00D050  1               FRM_PRECEDENCE_TEST:
00D050  1  68                   pla
00D051  1  D9 66 C0             cmp     MATHTBL,y
00D054  1  B0 64                bcs     FRM_PERFORM1
00D056  1  20 ED CF             jsr     CHKNUM
00D059  1               L2CA3:
00D059  1  48                   pha
00D05A  1               L2CA4:
00D05A  1  20 80 D0             jsr     FRM_RECURSE
00D05D  1  68                   pla
00D05E  1  A4 99                ldy     LASTOP
00D060  1  10 17                bpl     PREFNC
00D062  1  AA                   tax
00D063  1  F0 53                beq     GOEX
00D065  1  D0 5C                bne     FRM_PERFORM2
00D067  1               ; ----------------------------------------------------------------------------
00D067  1               ; FOUND ONE OR MORE RELATIONAL OPERATORS <,=,>
00D067  1               ; ----------------------------------------------------------------------------
00D067  1               FRM_RELATIONAL:
00D067  1  46 5F                lsr     VALTYP
00D069  1  8A                   txa
00D06A  1  2A                   rol     a
00D06B  1  A6 DD                ldx     TXTPTR
00D06D  1  D0 02                bne     L2CBB
00D06F  1  C6 DE                dec     TXTPTR+1
00D071  1               L2CBB:
00D071  1  C6 DD                dec     TXTPTR
00D073  1  A0 1B                ldy     #$1B
00D075  1  85 9B                sta     CPRTYP
00D077  1  D0 D7                bne     FRM_PRECEDENCE_TEST
00D079  1               PREFNC:
00D079  1  D9 66 C0             cmp     MATHTBL,y
00D07C  1  B0 45                bcs     FRM_PERFORM2
00D07E  1  90 D9                bcc     L2CA3
00D080  1               ; ----------------------------------------------------------------------------
00D080  1               ; STACK THIS OPERATION AND CALL FRMEVL FOR
00D080  1               ; ANOTHER ONE
00D080  1               ; ----------------------------------------------------------------------------
00D080  1               FRM_RECURSE:
00D080  1  B9 68 C0             lda     MATHTBL+2,y
00D083  1  48                   pha
00D084  1  B9 67 C0             lda     MATHTBL+1,y
00D087  1  48                   pha
00D088  1  20 93 D0             jsr     FRM_STACK1
00D08B  1  A5 9B                lda     CPRTYP
00D08D  1  4C 09 D0             jmp     FRMEVL1
00D090  1               SNTXERR:
00D090  1  4C 49 D1             jmp     SYNERR
00D093  1               ; ----------------------------------------------------------------------------
00D093  1               ; STACK (FAC)
00D093  1               ; THREE ENTRY POINTS:
00D093  1               ; 	1, FROM FRMEVL
00D093  1               ;	2, FROM "STEP"
00D093  1               ;	3, FROM "FOR"
00D093  1               ; ----------------------------------------------------------------------------
00D093  1               FRM_STACK1:
00D093  1  A5 B0                lda     FACSIGN
00D095  1  BE 66 C0             ldx     MATHTBL,y
00D098  1               ; ----------------------------------------------------------------------------
00D098  1               ; ENTER HERE FROM "STEP", TO PUSH STEP SIGN AND VALUE
00D098  1               ; ----------------------------------------------------------------------------
00D098  1               FRM_STACK2:
00D098  1  A8                   tay
00D099  1  68                   pla
00D09A  1  85 71                sta     INDEX
00D09C  1  E6 71                inc     INDEX ; bug: assumes not on page boundary
00D09E  1               ; bug exists on AppleSoft II
00D09E  1  68                   pla
00D09F  1  85 72                sta     INDEX+1
00D0A1  1  98                   tya
00D0A2  1  48                   pha
00D0A3  1               ; ----------------------------------------------------------------------------
00D0A3  1               ; ENTER HERE FROM "FOR", WITH (INDEX) = STEP,
00D0A3  1               ; TO PUSH INITIAL VALUE OF "FOR" VARIABLE
00D0A3  1               ; ----------------------------------------------------------------------------
00D0A3  1               FRM_STACK3:
00D0A3  1  20 F7 DC             jsr     ROUND_FAC
00D0A6  1  A5 AF                lda     FAC+3
00D0A8  1  48                   pha
00D0A9  1  A5 AE                lda     FAC+2
00D0AB  1  48                   pha
00D0AC  1  A5 AD                lda     FAC+1
00D0AE  1  48                   pha
00D0AF  1  A5 AC                lda     FAC
00D0B1  1  48                   pha
00D0B2  1  6C 71 00             jmp     (INDEX)
00D0B5  1               L2D02:
00D0B5  1  A0 FF                ldy     #$FF
00D0B7  1  68                   pla
00D0B8  1               GOEX:
00D0B8  1  F0 20                beq     EXIT
00D0BA  1               ; ----------------------------------------------------------------------------
00D0BA  1               ; PERFORM STACKED OPERATION
00D0BA  1               ;
00D0BA  1               ; (A) = PRECEDENCE BYTE
00D0BA  1               ; STACK:  1 -- CPRMASK
00D0BA  1               ;	5 -- (ARG)
00D0BA  1               ;	2 -- ADDR OF PERFORMER
00D0BA  1               ; ----------------------------------------------------------------------------
00D0BA  1               FRM_PERFORM1:
00D0BA  1  C9 64                cmp     #$64
00D0BC  1  F0 03                beq     L2D0E
00D0BE  1  20 ED CF             jsr     CHKNUM
00D0C1  1               L2D0E:
00D0C1  1  84 99                sty     LASTOP
00D0C3  1               FRM_PERFORM2:
00D0C3  1  68                   pla
00D0C4  1  4A                   lsr     a
00D0C5  1  85 63                sta     CPRMASK
00D0C7  1  68                   pla
00D0C8  1  85 B3                sta     ARG
00D0CA  1  68                   pla
00D0CB  1  85 B4                sta     ARG+1
00D0CD  1  68                   pla
00D0CE  1  85 B5                sta     ARG+2
00D0D0  1  68                   pla
00D0D1  1  85 B6                sta     ARG+3
00D0D3  1  68                   pla
00D0D4  1  85 B7                sta     ARGSIGN
00D0D6  1  45 B0                eor     FACSIGN
00D0D8  1  85 B8                sta     SGNCPR
00D0DA  1               EXIT:
00D0DA  1  A5 AC                lda     FAC
00D0DC  1  60                   rts
00D0DD  1               ; ----------------------------------------------------------------------------
00D0DD  1               ; GET ELEMENT IN EXPRESSION
00D0DD  1               ;
00D0DD  1               ; GET VALUE OF VARIABLE OR NUMBER AT TXTPNT, OR POINT
00D0DD  1               ; TO STRING DESCRIPTOR IF A STRING, AND PUT IN FAC.
00D0DD  1               ; ----------------------------------------------------------------------------
00D0DD  1               FRM_ELEMENT:
00D0DD  1  A9 00                lda     #$00
00D0DF  1  85 5F                sta     VALTYP
00D0E1  1               L2D31:
00D0E1  1  20 D6 00             jsr     CHRGET
00D0E4  1  B0 03                bcs     L2D39
00D0E6  1               L2D36:
00D0E6  1  4C C4 DD             jmp     FIN
00D0E9  1               L2D39:
00D0E9  1  20 BE D2             jsr     ISLETC
00D0EC  1  B0 67                bcs     FRM_VARIABLE
00D0EE  1               CON_PI:
00D0EE  1  C9 2E                cmp     #$2E
00D0F0  1  F0 F4                beq     L2D36
00D0F2  1  C9 A4                cmp     #TOKEN_MINUS
00D0F4  1  F0 58                beq     MIN
00D0F6  1  C9 A3                cmp     #TOKEN_PLUS
00D0F8  1  F0 E7                beq     L2D31
00D0FA  1  C9 22                cmp     #$22
00D0FC  1  D0 0F                bne     NOT_
00D0FE  1               ; ----------------------------------------------------------------------------
00D0FE  1               ; STRING CONSTANT ELEMENT
00D0FE  1               ;
00D0FE  1               ; SET Y,A = (TXTPTR)+CARRY
00D0FE  1               ; ----------------------------------------------------------------------------
00D0FE  1               STRTXT:
00D0FE  1  A5 DD                lda     TXTPTR
00D100  1  A4 DE                ldy     TXTPTR+1
00D102  1  69 00                adc     #$00
00D104  1  90 01                bcc     L2D57
00D106  1  C8                   iny
00D107  1               L2D57:
00D107  1  20 EB D5             jsr     STRLIT
00D10A  1  4C 30 D9             jmp     POINT
00D10D  1               ; ----------------------------------------------------------------------------
00D10D  1               ; "NOT" FUNCTION
00D10D  1               ; IF FAC=0, RETURN FAC=1
00D10D  1               ; IF FAC<>0, RETURN FAC=0
00D10D  1               ; ----------------------------------------------------------------------------
00D10D  1               NOT_:
00D10D  1  C9 A1                cmp     #TOKEN_NOT
00D10F  1  D0 13                bne     L2D74
00D111  1  A0 18                ldy     #$18
00D113  1  D0 3B                bne     EQUL
00D115  1               ; ----------------------------------------------------------------------------
00D115  1               ; COMPARISON FOR EQUALITY (= OPERATOR)
00D115  1               ; ALSO USED TO EVALUATE "NOT" FUNCTION
00D115  1               ; ----------------------------------------------------------------------------
00D115  1               EQUOP:
00D115  1  20 42 D3             jsr     AYINT
00D118  1  A5 AF                lda     FAC_LAST
00D11A  1  49 FF                eor     #$FF
00D11C  1  A8                   tay
00D11D  1  A5 AE                lda     FAC_LAST-1
00D11F  1  49 FF                eor     #$FF
00D121  1  4C FE D4             jmp     GIVAYF
00D124  1               L2D74:
00D124  1  C9 9E                cmp     #TOKEN_FN
00D126  1  D0 03                bne     L2D7B
00D128  1  4C 5B D5             jmp     L31F3
00D12B  1               L2D7B:
00D12B  1  C9 AD                cmp     #TOKEN_SGN
00D12D  1  90 03                bcc     PARCHK
00D12F  1  4C 64 D1             jmp     UNARY
00D132  1               ; ----------------------------------------------------------------------------
00D132  1               ; EVALUATE "(EXPRESSION)"
00D132  1               ; ----------------------------------------------------------------------------
00D132  1               PARCHK:
00D132  1  20 3B D1             jsr     CHKOPN
00D135  1  20 FE CF             jsr     FRMEVL
00D138  1               CHKCLS:
00D138  1  A9 29                lda     #$29
00D13A  1  2C                   .byte   $2C
00D13B  1               CHKOPN:
00D13B  1  A9 28                lda     #$28
00D13D  1  2C                   .byte   $2C
00D13E  1               CHKCOM:
00D13E  1  A9 2C                lda     #$2C
00D140  1               ; ----------------------------------------------------------------------------
00D140  1               ; UNLESS CHAR AT TXTPTR = (A), SYNTAX ERROR
00D140  1               ; ----------------------------------------------------------------------------
00D140  1               SYNCHR:	; XXX all CBM code calls SYNCHR instead of CHKCOM
00D140  1  A0 00                ldy     #$00
00D142  1  D1 DD                cmp     (TXTPTR),y
00D144  1  D0 03                bne     SYNERR
00D146  1  4C D6 00             jmp     CHRGET
00D149  1               ; ----------------------------------------------------------------------------
00D149  1               SYNERR:
00D149  1  A2 02                ldx     #ERR_SYNTAX
00D14B  1  4C 97 C7             jmp     ERROR
00D14E  1               ; ----------------------------------------------------------------------------
00D14E  1               MIN:
00D14E  1  A0 15                ldy     #$15
00D150  1               EQUL:
00D150  1  68                   pla
00D151  1  68                   pla
00D152  1  4C 5A D0             jmp     L2CA4
00D155  1               ; ----------------------------------------------------------------------------
00D155  1               FRM_VARIABLE:
00D155  1  20 48 D2             jsr     PTRGET
00D158  1               FRM_VARIABLE_CALL	= *-1
00D158  1  85 AE                sta     FAC_LAST-1
00D15A  1  84 AF                sty     FAC_LAST
00D15C  1  A6 5F                ldx     VALTYP
00D15E  1  F0 01                beq     L2DB1
00D160  1               ; bugfix?
00D160  1               ; fixed on AppleSoft II, not on any CBM
00D160  1  60                   rts
00D161  1               L2DB1:
00D161  1  4C 88 DC             jmp     LOAD_FAC_FROM_YA
00D164  1               ; ----------------------------------------------------------------------------
00D164  1               UNARY:
00D164  1  0A                   asl     a
00D165  1  48                   pha
00D166  1  AA                   tax
00D167  1  20 D6 00             jsr     CHRGET
00D16A  1  E0 81                cpx     #<(TOKEN_LEFTSTR*2-1)
00D16C  1  90 20                bcc     L2DEF
00D16E  1  20 3B D1             jsr     CHKOPN
00D171  1  20 FE CF             jsr     FRMEVL
00D174  1  20 3E D1             jsr     CHKCOM
00D177  1  20 EF CF             jsr     CHKSTR
00D17A  1  68                   pla
00D17B  1  AA                   tax
00D17C  1  A5 AF                lda     FAC_LAST
00D17E  1  48                   pha
00D17F  1  A5 AE                lda     FAC_LAST-1
00D181  1  48                   pha
00D182  1  8A                   txa
00D183  1  48                   pha
00D184  1  20 EB D8             jsr     GETBYT
00D187  1  68                   pla
00D188  1  A8                   tay
00D189  1  8A                   txa
00D18A  1  48                   pha
00D18B  1  4C 93 D1             jmp     L2DF4
00D18E  1               L2DEF:
00D18E  1  20 32 D1             jsr     PARCHK
00D191  1  68                   pla
00D192  1  A8                   tay
00D193  1               L2DF4:
00D193  1  B9 DE BF             lda     UNFNC+($80-TOKEN_SGN)*2,y
00D196  1  85 A2                sta     JMPADRS+1
00D198  1  B9 DF BF             lda     UNFNC+($80-TOKEN_SGN)*2+1,y
00D19B  1  85 A3                sta     JMPADRS+2
00D19D  1  20 A1 00             jsr     JMPADRS
00D1A0  1  4C ED CF             jmp     CHKNUM
00D1A3  1               ; ----------------------------------------------------------------------------
00D1A3  1               OR:
00D1A3  1  A0 FF                ldy     #$FF
00D1A5  1  2C                   .byte   $2C
00D1A6  1               ; ----------------------------------------------------------------------------
00D1A6  1               TAND:
00D1A6  1  A0 00                ldy     #$00
00D1A8  1  84 5D                sty     EOLPNTR
00D1AA  1  20 42 D3             jsr     AYINT
00D1AD  1  A5 AE                lda     FAC_LAST-1
00D1AF  1  45 5D                eor     EOLPNTR
00D1B1  1  85 5B                sta     CHARAC
00D1B3  1  A5 AF                lda     FAC_LAST
00D1B5  1  45 5D                eor     EOLPNTR
00D1B7  1  85 5C                sta     ENDCHR
00D1B9  1  20 D8 DC             jsr     COPY_ARG_TO_FAC
00D1BC  1  20 42 D3             jsr     AYINT
00D1BF  1  A5 AF                lda     FAC_LAST
00D1C1  1  45 5D                eor     EOLPNTR
00D1C3  1  25 5C                and     ENDCHR
00D1C5  1  45 5D                eor     EOLPNTR
00D1C7  1  A8                   tay
00D1C8  1  A5 AE                lda     FAC_LAST-1
00D1CA  1  45 5D                eor     EOLPNTR
00D1CC  1  25 5B                and     CHARAC
00D1CE  1  45 5D                eor     EOLPNTR
00D1D0  1  4C FE D4             jmp     GIVAYF
00D1D3  1               ; ----------------------------------------------------------------------------
00D1D3  1               ; PERFORM RELATIONAL OPERATIONS
00D1D3  1               ; ----------------------------------------------------------------------------
00D1D3  1               RELOPS:
00D1D3  1  20 F0 CF             jsr     CHKVAL
00D1D6  1  B0 13                bcs     STRCMP
00D1D8  1  A5 B7                lda     ARGSIGN
00D1DA  1  09 7F                ora     #$7F
00D1DC  1  25 B4                and     ARG+1
00D1DE  1  85 B4                sta     ARG+1
00D1E0  1  A9 B3                lda     #<ARG
00D1E2  1  A0 00                ldy     #$00
00D1E4  1  20 35 DD             jsr     FCOMP
00D1E7  1  AA                   tax
00D1E8  1  4C 1E D2             jmp     NUMCMP
00D1EB  1               ; ----------------------------------------------------------------------------
00D1EB  1               ; STRING COMPARISON
00D1EB  1               ; ----------------------------------------------------------------------------
00D1EB  1               STRCMP:
00D1EB  1  A9 00                lda     #$00
00D1ED  1  85 5F                sta     VALTYP
00D1EF  1  C6 9B                dec     CPRTYP
00D1F1  1  20 F3 D7             jsr     FREFAC
00D1F4  1  85 AC                sta     FAC
00D1F6  1  86 AD                stx     FAC+1
00D1F8  1  84 AE                sty     FAC+2
00D1FA  1  A5 B5                lda     ARG_LAST-1
00D1FC  1  A4 B6                ldy     ARG_LAST
00D1FE  1  20 F7 D7             jsr     FRETMP
00D201  1  86 B5                stx     ARG_LAST-1
00D203  1  84 B6                sty     ARG_LAST
00D205  1  AA                   tax
00D206  1  38                   sec
00D207  1  E5 AC                sbc     FAC
00D209  1  F0 08                beq     L2E74
00D20B  1  A9 01                lda     #$01
00D20D  1  90 04                bcc     L2E74
00D20F  1  A6 AC                ldx     FAC
00D211  1  A9 FF                lda     #$FF
00D213  1               L2E74:
00D213  1  85 B0                sta     FACSIGN
00D215  1  A0 FF                ldy     #$FF
00D217  1  E8                   inx
00D218  1               STRCMP1:
00D218  1  C8                   iny
00D219  1  CA                   dex
00D21A  1  D0 07                bne     L2E84
00D21C  1  A6 B0                ldx     FACSIGN
00D21E  1               NUMCMP:
00D21E  1  30 0F                bmi     CMPDONE
00D220  1  18                   clc
00D221  1  90 0C                bcc     CMPDONE
00D223  1               L2E84:
00D223  1  B1 B5                lda     (ARG_LAST-1),y
00D225  1  D1 AD                cmp     (FAC+1),y
00D227  1  F0 EF                beq     STRCMP1
00D229  1  A2 FF                ldx     #$FF
00D22B  1  B0 02                bcs     CMPDONE
00D22D  1  A2 01                ldx     #$01
00D22F  1               CMPDONE:
00D22F  1  E8                   inx
00D230  1  8A                   txa
00D231  1  2A                   rol     a
00D232  1  25 63                and     CPRMASK
00D234  1  F0 02                beq     L2E99
00D236  1  A9 FF                lda     #$FF
00D238  1               L2E99:
00D238  1  4C 18 DD             jmp     FLOAT
00D23B  1               ; ----------------------------------------------------------------------------
00D23B  1               ; "DIM" STATEMENT
00D23B  1               ; ----------------------------------------------------------------------------
00D23B  1               NXDIM:
00D23B  1  20 3E D1             jsr     CHKCOM
00D23E  1               DIM:
00D23E  1  AA                   tax
00D23F  1  20 4D D2             jsr     PTRGET2
00D242  1  20 DC 00             jsr     CHRGOT
00D245  1  D0 F4                bne     NXDIM
00D247  1  60                   rts
00D248  1               ; ----------------------------------------------------------------------------
00D248  1               ; PTRGET -- GENERAL VARIABLE SCAN
00D248  1               ;
00D248  1               ; SCANS VARIABLE NAME AT TXTPTR, AND SEARCHES THE
00D248  1               ; VARTAB AND ARYTAB FOR THE NAME.
00D248  1               ; IF NOT FOUND, CREATE VARIABLE OF APPROPRIATE TYPE.
00D248  1               ; RETURN WITH ADDRESS IN VARPNT AND Y,A
00D248  1               ;
00D248  1               ; ACTUAL ACTIVITY CONTROLLED SOMEWHAT BY TWO FLAGS:
00D248  1               ;	DIMFLG -- NONZERO IF CALLED FROM "DIM"
00D248  1               ;		ELSE = 0
00D248  1               ;
00D248  1               ;	SUBFLG -- = $00
00D248  1               ;		= $40 IF CALLED FROM "GETARYPT"
00D248  1               ; ----------------------------------------------------------------------------
00D248  1               PTRGET:
00D248  1  A2 00                ldx     #$00
00D24A  1  20 DC 00             jsr     CHRGOT
00D24D  1               PTRGET2:
00D24D  1  86 5E                stx     DIMFLG
00D24F  1               PTRGET3:
00D24F  1  85 93                sta     VARNAM
00D251  1  20 DC 00             jsr     CHRGOT
00D254  1  20 BE D2             jsr     ISLETC
00D257  1  B0 03                bcs     NAMOK
00D259  1  4C 49 D1             jmp     SYNERR
00D25C  1               NAMOK:
00D25C  1  A2 00                ldx     #$00
00D25E  1  86 5F                stx     VALTYP
00D260  1  20 D6 00             jsr     CHRGET
00D263  1  90 05                bcc     L2ECD
00D265  1  20 BE D2             jsr     ISLETC
00D268  1  90 0B                bcc     L2ED8
00D26A  1               L2ECD:
00D26A  1  AA                   tax
00D26B  1               L2ECE:
00D26B  1  20 D6 00             jsr     CHRGET
00D26E  1  90 FB                bcc     L2ECE
00D270  1  20 BE D2             jsr     ISLETC
00D273  1  B0 F6                bcs     L2ECE
00D275  1               L2ED8:
00D275  1  C9 24                cmp     #$24
00D277  1  D0 0B                bne     L2EF9
00D279  1  A9 FF                lda     #$FF
00D27B  1  85 5F                sta     VALTYP
00D27D  1  8A                   txa
00D27E  1  09 80                ora     #$80
00D280  1  AA                   tax
00D281  1  20 D6 00             jsr     CHRGET
00D284  1               L2EF9:
00D284  1  86 94                stx     VARNAM+1
00D286  1  38                   sec
00D287  1  05 61                ora     SUBFLG
00D289  1  E9 28                sbc     #$28
00D28B  1  D0 03                bne     L2F05
00D28D  1  4C 54 D3             jmp     ARRAY
00D290  1               L2F05:
00D290  1  A9 00                lda     #$00
00D292  1  85 61                sta     SUBFLG
00D294  1  A5 7B                lda     VARTAB
00D296  1  A6 7C                ldx     VARTAB+1
00D298  1  A0 00                ldy     #$00
00D29A  1               L2F0F:
00D29A  1  86 AB                stx     LOWTR+1
00D29C  1               L2F11:
00D29C  1  85 AA                sta     LOWTR
00D29E  1  E4 7E                cpx     ARYTAB+1
00D2A0  1  D0 04                bne     L2F1B
00D2A2  1  C5 7D                cmp     ARYTAB
00D2A4  1  F0 22                beq     NAMENOTFOUND
00D2A6  1               L2F1B:
00D2A6  1  A5 93                lda     VARNAM
00D2A8  1  D1 AA                cmp     (LOWTR),y
00D2AA  1  D0 08                bne     L2F29
00D2AC  1  A5 94                lda     VARNAM+1
00D2AE  1  C8                   iny
00D2AF  1  D1 AA                cmp     (LOWTR),y
00D2B1  1  F0 61                beq     SET_VARPNT_AND_YA
00D2B3  1  88                   dey
00D2B4  1               L2F29:
00D2B4  1  18                   clc
00D2B5  1  A5 AA                lda     LOWTR
00D2B7  1  69 06                adc     #BYTES_PER_VARIABLE
00D2B9  1  90 E1                bcc     L2F11
00D2BB  1  E8                   inx
00D2BC  1  D0 DC                bne     L2F0F
00D2BE  1               ; ----------------------------------------------------------------------------
00D2BE  1               ; CHECK IF (A) IS ASCII LETTER A-Z
00D2BE  1               ;
00D2BE  1               ; RETURN CARRY = 1 IF A-Z
00D2BE  1               ;	= 0 IF NOT
00D2BE  1               ; ----------------------------------------------------------------------------
00D2BE  1               ISLETC:
00D2BE  1  C9 41                cmp     #$41
00D2C0  1  90 05                bcc     L2F3C
00D2C2  1  E9 5B                sbc     #$5B
00D2C4  1  38                   sec
00D2C5  1  E9 A5                sbc     #$A5
00D2C7  1               L2F3C:
00D2C7  1  60                   rts
00D2C8  1               ; ----------------------------------------------------------------------------
00D2C8  1               ; VARIABLE NOT FOUND, SO MAKE ONE
00D2C8  1               ; ----------------------------------------------------------------------------
00D2C8  1               NAMENOTFOUND:
00D2C8  1  68                   pla
00D2C9  1  48                   pha
00D2CA  1  C9 57                cmp     #<FRM_VARIABLE_CALL
00D2CC  1  D0 07                bne     MAKENEWVARIABLE
00D2CE  1  A9 D3                lda     #<C_ZERO
00D2D0  1  A0 D2                ldy     #>C_ZERO
00D2D2  1  60                   rts
00D2D3  1               ; ----------------------------------------------------------------------------
00D2D3  1               C_ZERO:
00D2D3  1  00 00                .byte   $00,$00
00D2D5  1               ; ----------------------------------------------------------------------------
00D2D5  1               ; MAKE A NEW SIMPLE VARIABLE
00D2D5  1               ;
00D2D5  1               ; MOVE ARRAYS UP 7 BYTES TO MAKE ROOM FOR NEW VARIABLE
00D2D5  1               ; ENTER 7-BYTE VARIABLE DATA IN THE HOLE
00D2D5  1               ; ----------------------------------------------------------------------------
00D2D5  1               MAKENEWVARIABLE:
00D2D5  1  A5 7D                lda     ARYTAB
00D2D7  1  A4 7E                ldy     ARYTAB+1
00D2D9  1  85 AA                sta     LOWTR
00D2DB  1  84 AB                sty     LOWTR+1
00D2DD  1  A5 7F                lda     STREND
00D2DF  1  A4 80                ldy     STREND+1
00D2E1  1  85 A6                sta     HIGHTR
00D2E3  1  84 A7                sty     HIGHTR+1
00D2E5  1  18                   clc
00D2E6  1  69 06                adc     #BYTES_PER_VARIABLE
00D2E8  1  90 01                bcc     L2F68
00D2EA  1  C8                   iny
00D2EB  1               L2F68:
00D2EB  1  85 A4                sta     HIGHDS
00D2ED  1  84 A5                sty     HIGHDS+1
00D2EF  1  20 18 C7             jsr     BLTU
00D2F2  1  A5 A4                lda     HIGHDS
00D2F4  1  A4 A5                ldy     HIGHDS+1
00D2F6  1  C8                   iny
00D2F7  1  85 7D                sta     ARYTAB
00D2F9  1  84 7E                sty     ARYTAB+1
00D2FB  1  A0 00                ldy     #$00
00D2FD  1  A5 93                lda     VARNAM
00D2FF  1  91 AA                sta     (LOWTR),y
00D301  1  C8                   iny
00D302  1  A5 94                lda     VARNAM+1
00D304  1  91 AA                sta     (LOWTR),y
00D306  1  A9 00                lda     #$00
00D308  1  C8                   iny
00D309  1  91 AA                sta     (LOWTR),y
00D30B  1  C8                   iny
00D30C  1  91 AA                sta     (LOWTR),y
00D30E  1  C8                   iny
00D30F  1  91 AA                sta     (LOWTR),y
00D311  1  C8                   iny
00D312  1  91 AA                sta     (LOWTR),y
00D314  1               ; ----------------------------------------------------------------------------
00D314  1               ; PUT ADDRESS OF VALUE OF VARIABLE IN VARPNT AND Y,A
00D314  1               ; ----------------------------------------------------------------------------
00D314  1               SET_VARPNT_AND_YA:
00D314  1  A5 AA                lda     LOWTR
00D316  1  18                   clc
00D317  1  69 02                adc     #$02
00D319  1  A4 AB                ldy     LOWTR+1
00D31B  1  90 01                bcc     L2F9E
00D31D  1  C8                   iny
00D31E  1               L2F9E:
00D31E  1  85 95                sta     VARPNT
00D320  1  84 96                sty     VARPNT+1
00D322  1  60                   rts
00D323  1               ; ----------------------------------------------------------------------------
00D323  1               ; COMPUTE ADDRESS OF FIRST VALUE IN ARRAY
00D323  1               ; ARYPNT = (LOWTR) + #DIMS*2 + 5
00D323  1               ; ----------------------------------------------------------------------------
00D323  1               GETARY:
00D323  1  A5 5D                lda     EOLPNTR
00D325  1  0A                   asl     a
00D326  1  69 05                adc     #$05
00D328  1  65 AA                adc     LOWTR
00D32A  1  A4 AB                ldy     LOWTR+1
00D32C  1  90 01                bcc     L2FAF
00D32E  1  C8                   iny
00D32F  1               L2FAF:
00D32F  1  85 A4                sta     HIGHDS
00D331  1  84 A5                sty     HIGHDS+1
00D333  1  60                   rts
00D334  1               ; ----------------------------------------------------------------------------
00D334  1               NEG32768:
00D334  1  90 80 00 00          .byte   $90,$80,$00,$00
00D338  1               ; ----------------------------------------------------------------------------
00D338  1               ; EVALUATE NUMERIC FORMULA AT TXTPTR
00D338  1               ; CONVERTING RESULT TO INTEGER 0 <= X <= 32767
00D338  1               ; IN FAC+3,4
00D338  1               ; ----------------------------------------------------------------------------
00D338  1               MAKINT:
00D338  1  20 D6 00             jsr     CHRGET
00D33B  1  20 EA CF             jsr     FRMNUM
00D33E  1               ; ----------------------------------------------------------------------------
00D33E  1               ; CONVERT FAC TO INTEGER
00D33E  1               ; MUST BE POSITIVE AND LESS THAN 32768
00D33E  1               ; ----------------------------------------------------------------------------
00D33E  1               MKINT:
00D33E  1  A5 B0                lda     FACSIGN
00D340  1  30 0D                bmi     MI1
00D342  1               ; ----------------------------------------------------------------------------
00D342  1               ; CONVERT FAC TO INTEGER
00D342  1               ; MUST BE -32767 <= FAC <= 32767
00D342  1               ; ----------------------------------------------------------------------------
00D342  1               AYINT:
00D342  1  A5 AC                lda     FAC
00D344  1  C9 90                cmp     #$90
00D346  1  90 09                bcc     MI2
00D348  1  A9 34                lda     #<NEG32768
00D34A  1  A0 D3                ldy     #>NEG32768
00D34C  1  20 35 DD             jsr     FCOMP
00D34F  1               MI1:
00D34F  1  D0 74                bne     IQERR
00D351  1               MI2:
00D351  1  4C 6E DD             jmp     QINT
00D354  1               ; ----------------------------------------------------------------------------
00D354  1               ; LOCATE ARRAY ELEMENT OR CREATE AN ARRAY
00D354  1               ; ----------------------------------------------------------------------------
00D354  1               ARRAY:
00D354  1  A5 5E                lda     DIMFLG
00D356  1  48                   pha
00D357  1  A5 5F                lda     VALTYP
00D359  1  48                   pha
00D35A  1  A0 00                ldy     #$00
00D35C  1               L2FDE:
00D35C  1  98                   tya
00D35D  1  48                   pha
00D35E  1  A5 94                lda     VARNAM+1
00D360  1  48                   pha
00D361  1  A5 93                lda     VARNAM
00D363  1  48                   pha
00D364  1  20 38 D3             jsr     MAKINT
00D367  1  68                   pla
00D368  1  85 93                sta     VARNAM
00D36A  1  68                   pla
00D36B  1  85 94                sta     VARNAM+1
00D36D  1  68                   pla
00D36E  1  A8                   tay
00D36F  1  BA                   tsx
00D370  1  BD 02 01             lda     STACK+2,x
00D373  1  48                   pha
00D374  1  BD 01 01             lda     STACK+1,x
00D377  1  48                   pha
00D378  1  A5 AE                lda     FAC_LAST-1
00D37A  1  9D 02 01             sta     STACK+2,x
00D37D  1  A5 AF                lda     FAC_LAST
00D37F  1  9D 01 01             sta     STACK+1,x
00D382  1  C8                   iny
00D383  1  20 DC 00             jsr     CHRGOT
00D386  1  C9 2C                cmp     #$2C
00D388  1  F0 D2                beq     L2FDE
00D38A  1  84 5D                sty     EOLPNTR
00D38C  1  20 38 D1             jsr     CHKCLS
00D38F  1  68                   pla
00D390  1  85 5F                sta     VALTYP
00D392  1  68                   pla
00D393  1  85 5E                sta     DIMFLG
00D395  1               ; ----------------------------------------------------------------------------
00D395  1               ; SEARCH ARRAY TABLE FOR THIS ARRAY NAME
00D395  1               ; ----------------------------------------------------------------------------
00D395  1  A6 7D                ldx     ARYTAB
00D397  1  A5 7E                lda     ARYTAB+1
00D399  1               L301F:
00D399  1  86 AA                stx     LOWTR
00D39B  1  85 AB                sta     LOWTR+1
00D39D  1  C5 80                cmp     STREND+1
00D39F  1  D0 04                bne     L302B
00D3A1  1  E4 7F                cpx     STREND
00D3A3  1  F0 39                beq     MAKE_NEW_ARRAY
00D3A5  1               L302B:
00D3A5  1  A0 00                ldy     #$00
00D3A7  1  B1 AA                lda     (LOWTR),y
00D3A9  1  C8                   iny
00D3AA  1  C5 93                cmp     VARNAM
00D3AC  1  D0 06                bne     L303A
00D3AE  1  A5 94                lda     VARNAM+1
00D3B0  1  D1 AA                cmp     (LOWTR),y
00D3B2  1  F0 16                beq     USE_OLD_ARRAY
00D3B4  1               L303A:
00D3B4  1  C8                   iny
00D3B5  1  B1 AA                lda     (LOWTR),y
00D3B7  1  18                   clc
00D3B8  1  65 AA                adc     LOWTR
00D3BA  1  AA                   tax
00D3BB  1  C8                   iny
00D3BC  1  B1 AA                lda     (LOWTR),y
00D3BE  1  65 AB                adc     LOWTR+1
00D3C0  1  90 D7                bcc     L301F
00D3C2  1               ; ----------------------------------------------------------------------------
00D3C2  1               ; ERROR:  BAD SUBSCRIPTS
00D3C2  1               ; ----------------------------------------------------------------------------
00D3C2  1               SUBERR:
00D3C2  1  A2 10                ldx     #ERR_BADSUBS
00D3C4  1  2C                   .byte   $2C
00D3C5  1               ; ----------------------------------------------------------------------------
00D3C5  1               ; ERROR:  ILLEGAL QUANTITY
00D3C5  1               ; ----------------------------------------------------------------------------
00D3C5  1               IQERR:
00D3C5  1  A2 08                ldx     #ERR_ILLQTY
00D3C7  1               JER:
00D3C7  1  4C 97 C7             jmp     ERROR
00D3CA  1               ; ----------------------------------------------------------------------------
00D3CA  1               ; FOUND THE ARRAY
00D3CA  1               ; ----------------------------------------------------------------------------
00D3CA  1               USE_OLD_ARRAY:
00D3CA  1  A2 12                ldx     #ERR_REDIMD
00D3CC  1  A5 5E                lda     DIMFLG
00D3CE  1  D0 F7                bne     JER
00D3D0  1  20 23 D3             jsr     GETARY
00D3D3  1  A5 5D                lda     EOLPNTR
00D3D5  1  A0 04                ldy     #$04
00D3D7  1  D1 AA                cmp     (LOWTR),y
00D3D9  1  D0 E7                bne     SUBERR
00D3DB  1  4C 61 D4             jmp     FIND_ARRAY_ELEMENT
00D3DE  1               ; ----------------------------------------------------------------------------
00D3DE  1               ; CREATE A NEW ARRAY, UNLESS CALLED FROM GETARYPT
00D3DE  1               ; ----------------------------------------------------------------------------
00D3DE  1               MAKE_NEW_ARRAY:
00D3DE  1  20 23 D3             jsr     GETARY
00D3E1  1  20 68 C7             jsr     REASON
00D3E4  1  A9 00                lda     #$00
00D3E6  1  A8                   tay
00D3E7  1  85 BB                sta     STRNG2+1
00D3E9  1  A2 04                ldx     #BYTES_PER_ELEMENT
00D3EB  1  86 BA                stx     STRNG2
00D3ED  1  A5 93                lda     VARNAM
00D3EF  1  91 AA                sta     (LOWTR),y
00D3F1  1  C8                   iny
00D3F2  1  A5 94                lda     VARNAM+1
00D3F4  1  91 AA                sta     (LOWTR),y
00D3F6  1  A5 5D                lda     EOLPNTR
00D3F8  1  C8                   iny
00D3F9  1  C8                   iny
00D3FA  1  C8                   iny
00D3FB  1  91 AA                sta     (LOWTR),y
00D3FD  1               L308A:
00D3FD  1  A2 0B                ldx     #$0B
00D3FF  1  A9 00                lda     #$00
00D401  1  24 5E                bit     DIMFLG
00D403  1  50 08                bvc     L309A
00D405  1  68                   pla
00D406  1  18                   clc
00D407  1  69 01                adc     #$01
00D409  1  AA                   tax
00D40A  1  68                   pla
00D40B  1  69 00                adc     #$00
00D40D  1               L309A:
00D40D  1  C8                   iny
00D40E  1  91 AA                sta     (LOWTR),y
00D410  1  C8                   iny
00D411  1  8A                   txa
00D412  1  91 AA                sta     (LOWTR),y
00D414  1  20 B9 D4             jsr     MULTIPLY_SUBSCRIPT
00D417  1  86 BA                stx     STRNG2
00D419  1  85 BB                sta     STRNG2+1
00D41B  1  A4 71                ldy     INDEX
00D41D  1  C6 5D                dec     EOLPNTR
00D41F  1  D0 DC                bne     L308A
00D421  1  65 A5                adc     HIGHDS+1
00D423  1  B0 5D                bcs     GME
00D425  1  85 A5                sta     HIGHDS+1
00D427  1  A8                   tay
00D428  1  8A                   txa
00D429  1  65 A4                adc     HIGHDS
00D42B  1  90 03                bcc     L30BD
00D42D  1  C8                   iny
00D42E  1  F0 52                beq     GME
00D430  1               L30BD:
00D430  1  20 68 C7             jsr     REASON
00D433  1  85 7F                sta     STREND
00D435  1  84 80                sty     STREND+1
00D437  1  A9 00                lda     #$00
00D439  1  E6 BB                inc     STRNG2+1
00D43B  1  A4 BA                ldy     STRNG2
00D43D  1  F0 05                beq     L30D1
00D43F  1               L30CC:
00D43F  1  88                   dey
00D440  1  91 A4                sta     (HIGHDS),y
00D442  1  D0 FB                bne     L30CC
00D444  1               L30D1:
00D444  1  C6 A5                dec     HIGHDS+1
00D446  1  C6 BB                dec     STRNG2+1
00D448  1  D0 F5                bne     L30CC
00D44A  1  E6 A5                inc     HIGHDS+1
00D44C  1  38                   sec
00D44D  1  A5 7F                lda     STREND
00D44F  1  E5 AA                sbc     LOWTR
00D451  1  A0 02                ldy     #$02
00D453  1  91 AA                sta     (LOWTR),y
00D455  1  A5 80                lda     STREND+1
00D457  1  C8                   iny
00D458  1  E5 AB                sbc     LOWTR+1
00D45A  1  91 AA                sta     (LOWTR),y
00D45C  1  A5 5E                lda     DIMFLG
00D45E  1  D0 58                bne     RTS9
00D460  1  C8                   iny
00D461  1               ; ----------------------------------------------------------------------------
00D461  1               ; FIND SPECIFIED ARRAY ELEMENT
00D461  1               ;
00D461  1               ; (LOWTR),Y POINTS AT # OF DIMS IN ARRAY DESCRIPTOR
00D461  1               ; THE SUBSCRIPTS ARE ALL ON THE STACK AS INTEGERS
00D461  1               ; ----------------------------------------------------------------------------
00D461  1               FIND_ARRAY_ELEMENT:
00D461  1  B1 AA                lda     (LOWTR),y
00D463  1  85 5D                sta     EOLPNTR
00D465  1  A9 00                lda     #$00
00D467  1  85 BA                sta     STRNG2
00D469  1               L30F6:
00D469  1  85 BB                sta     STRNG2+1
00D46B  1  C8                   iny
00D46C  1  68                   pla
00D46D  1  AA                   tax
00D46E  1  85 AE                sta     FAC_LAST-1
00D470  1  68                   pla
00D471  1  85 AF                sta     FAC_LAST
00D473  1  D1 AA                cmp     (LOWTR),y
00D475  1  90 0E                bcc     FAE2
00D477  1  D0 06                bne     GSE
00D479  1  C8                   iny
00D47A  1  8A                   txa
00D47B  1  D1 AA                cmp     (LOWTR),y
00D47D  1  90 07                bcc     FAE3
00D47F  1               ; ----------------------------------------------------------------------------
00D47F  1               GSE:
00D47F  1  4C C2 D3             jmp     SUBERR
00D482  1               GME:
00D482  1  4C 95 C7             jmp     MEMERR
00D485  1               ; ----------------------------------------------------------------------------
00D485  1               FAE2:
00D485  1  C8                   iny
00D486  1               FAE3:
00D486  1  A5 BB                lda     STRNG2+1
00D488  1  05 BA                ora     STRNG2
00D48A  1  18                   clc
00D48B  1  F0 0A                beq     L3124
00D48D  1  20 B9 D4             jsr     MULTIPLY_SUBSCRIPT
00D490  1  8A                   txa
00D491  1  65 AE                adc     FAC_LAST-1
00D493  1  AA                   tax
00D494  1  98                   tya
00D495  1  A4 71                ldy     INDEX
00D497  1               L3124:
00D497  1  65 AF                adc     FAC_LAST
00D499  1  86 BA                stx     STRNG2
00D49B  1  C6 5D                dec     EOLPNTR
00D49D  1  D0 CA                bne     L30F6
00D49F  1  06 BA                asl     STRNG2
00D4A1  1  2A                   rol     a
00D4A2  1  B0 DB                bcs     GSE
00D4A4  1  06 BA                asl     STRNG2
00D4A6  1  2A                   rol     a
00D4A7  1  B0 D6                bcs     GSE
00D4A9  1  A8                   tay
00D4AA  1  A5 BA                lda     STRNG2
00D4AC  1  65 A4                adc     HIGHDS
00D4AE  1  85 95                sta     VARPNT
00D4B0  1  98                   tya
00D4B1  1  65 A5                adc     HIGHDS+1
00D4B3  1  85 96                sta     VARPNT+1
00D4B5  1  A8                   tay
00D4B6  1  A5 95                lda     VARPNT
00D4B8  1               RTS9:
00D4B8  1  60                   rts
00D4B9  1               ; ----------------------------------------------------------------------------
00D4B9  1               ; MULTIPLY (STRNG2) BY ((LOWTR),Y)
00D4B9  1               ; LEAVING PRODUCT IN A,X.  (HI-BYTE ALSO IN Y.)
00D4B9  1               ; USED ONLY BY ARRAY SUBSCRIPT ROUTINES
00D4B9  1               ; ----------------------------------------------------------------------------
00D4B9  1               MULTIPLY_SUBSCRIPT:
00D4B9  1  84 71                sty     INDEX
00D4BB  1  B1 AA                lda     (LOWTR),y
00D4BD  1  85 76                sta     RESULT_LAST-2
00D4BF  1  88                   dey
00D4C0  1  B1 AA                lda     (LOWTR),y
00D4C2  1  85 77                sta     RESULT_LAST-1
00D4C4  1  A9 10                lda     #$10
00D4C6  1  85 A8                sta     INDX
00D4C8  1  A2 00                ldx     #$00
00D4CA  1  A0 00                ldy     #$00
00D4CC  1               L3163:
00D4CC  1  8A                   txa
00D4CD  1  0A                   asl     a
00D4CE  1  AA                   tax
00D4CF  1  98                   tya
00D4D0  1  2A                   rol     a
00D4D1  1  A8                   tay
00D4D2  1  B0 AE                bcs     GME
00D4D4  1  06 BA                asl     STRNG2
00D4D6  1  26 BB                rol     STRNG2+1
00D4D8  1  90 0B                bcc     L317C
00D4DA  1  18                   clc
00D4DB  1  8A                   txa
00D4DC  1  65 76                adc     RESULT_LAST-2
00D4DE  1  AA                   tax
00D4DF  1  98                   tya
00D4E0  1  65 77                adc     RESULT_LAST-1
00D4E2  1  A8                   tay
00D4E3  1  B0 9D                bcs     GME
00D4E5  1               L317C:
00D4E5  1  C6 A8                dec     INDX
00D4E7  1  D0 E3                bne     L3163
00D4E9  1  60                   rts
00D4EA  1               ; ----------------------------------------------------------------------------
00D4EA  1               ; "FRE" FUNCTION
00D4EA  1               ;
00D4EA  1               ; COLLECTS GARBAGE AND RETURNS # BYTES OF MEMORY LEFT
00D4EA  1               ; ----------------------------------------------------------------------------
00D4EA  1               FRE:
00D4EA  1  A5 5F                lda     VALTYP
00D4EC  1  F0 03                beq     L3188
00D4EE  1  20 F3 D7             jsr     FREFAC
00D4F1  1               L3188:
00D4F1  1  20 84 D6             jsr     GARBAG
00D4F4  1  38                   sec
00D4F5  1  A5 81                lda     FRETOP
00D4F7  1  E5 7F                sbc     STREND
00D4F9  1  A8                   tay
00D4FA  1  A5 82                lda     FRETOP+1
00D4FC  1  E5 80                sbc     STREND+1
00D4FE  1               ; FALL INTO GIVAYF TO FLOAT THE VALUE
00D4FE  1               ; NOTE THAT VALUES OVER 32767 WILL RETURN AS NEGATIVE
00D4FE  1               ; ----------------------------------------------------------------------------
00D4FE  1               ; FLOAT THE SIGNED INTEGER IN A,Y
00D4FE  1               ; ----------------------------------------------------------------------------
00D4FE  1               GIVAYF:
00D4FE  1  A2 00                ldx     #$00
00D500  1  86 5F                stx     VALTYP
00D502  1  85 AD                sta     FAC+1
00D504  1  84 AE                sty     FAC+2
00D506  1  A2 90                ldx     #$90
00D508  1  4C 20 DD             jmp     FLOAT1
00D50B  1               POS:
00D50B  1  A4 0E                ldy     POSX
00D50D  1               ; ----------------------------------------------------------------------------
00D50D  1               ; FLOAT (Y) INTO FAC, GIVING VALUE 0-255
00D50D  1               ; ----------------------------------------------------------------------------
00D50D  1               SNGFLT:
00D50D  1  A9 00                lda     #$00
00D50F  1  F0 ED                beq     GIVAYF
00D511  1               ; ----------------------------------------------------------------------------
00D511  1               ; CHECK FOR DIRECT OR RUNNING MODE
00D511  1               ; GIVING ERROR IF DIRECT MODE
00D511  1               ; ----------------------------------------------------------------------------
00D511  1               ERRDIR:
00D511  1  A6 88                ldx     CURLIN+1
00D513  1  E8                   inx
00D514  1  D0 A2                bne     RTS9
00D516  1  A2 16                ldx     #ERR_ILLDIR
00D518  1               L31AF:
00D518  1  4C 97 C7             jmp     ERROR
00D51B  1               DEF:
00D51B  1  20 48 D5             jsr     FNC
00D51E  1  20 11 D5             jsr     ERRDIR
00D521  1  20 3B D1             jsr     CHKOPN
00D524  1  A9 80                lda     #$80
00D526  1  85 61                sta     SUBFLG
00D528  1  20 48 D2             jsr     PTRGET
00D52B  1  20 ED CF             jsr     CHKNUM
00D52E  1  20 38 D1             jsr     CHKCLS
00D531  1  A9 AB                lda     #TOKEN_EQUAL
00D533  1  20 40 D1             jsr     SYNCHR
00D536  1  A5 96                lda     VARPNT+1
00D538  1  48                   pha
00D539  1  A5 95                lda     VARPNT
00D53B  1  48                   pha
00D53C  1  A5 DE                lda     TXTPTR+1
00D53E  1  48                   pha
00D53F  1  A5 DD                lda     TXTPTR
00D541  1  48                   pha
00D542  1  20 49 CC             jsr     DATA
00D545  1  4C B7 D5             jmp     L3250
00D548  1               FNC:
00D548  1  A9 9E                lda     #TOKEN_FN
00D54A  1  20 40 D1             jsr     SYNCHR
00D54D  1  09 80                ora     #$80
00D54F  1  85 61                sta     SUBFLG
00D551  1  20 4F D2             jsr     PTRGET3
00D554  1  85 9C                sta     FNCNAM
00D556  1  84 9D                sty     FNCNAM+1
00D558  1  4C ED CF             jmp     CHKNUM
00D55B  1               L31F3:
00D55B  1  20 48 D5             jsr     FNC
00D55E  1  A5 9D                lda     FNCNAM+1
00D560  1  48                   pha
00D561  1  A5 9C                lda     FNCNAM
00D563  1  48                   pha
00D564  1  20 32 D1             jsr     PARCHK
00D567  1  20 ED CF             jsr     CHKNUM
00D56A  1  68                   pla
00D56B  1  85 9C                sta     FNCNAM
00D56D  1  68                   pla
00D56E  1  85 9D                sta     FNCNAM+1
00D570  1  A0 02                ldy     #$02
00D572  1  A2 20                ldx     #ERR_UNDEFFN
00D574  1  B1 9C                lda     (FNCNAM),y
00D576  1  F0 A0                beq     L31AF
00D578  1  85 95                sta     VARPNT
00D57A  1  AA                   tax
00D57B  1  C8                   iny
00D57C  1  B1 9C                lda     (FNCNAM),y
00D57E  1  85 96                sta     VARPNT+1
00D580  1               L3219:
00D580  1  B1 95                lda     (VARPNT),y
00D582  1  48                   pha
00D583  1  88                   dey
00D584  1  10 FA                bpl     L3219
00D586  1  A4 96                ldy     VARPNT+1
00D588  1  20 B5 DC             jsr     STORE_FAC_AT_YX_ROUNDED
00D58B  1  A5 DE                lda     TXTPTR+1
00D58D  1  48                   pha
00D58E  1  A5 DD                lda     TXTPTR
00D590  1  48                   pha
00D591  1  B1 9C                lda     (FNCNAM),y
00D593  1  85 DD                sta     TXTPTR
00D595  1  C8                   iny
00D596  1  B1 9C                lda     (FNCNAM),y
00D598  1  85 DE                sta     TXTPTR+1
00D59A  1  A5 96                lda     VARPNT+1
00D59C  1  48                   pha
00D59D  1  A5 95                lda     VARPNT
00D59F  1  48                   pha
00D5A0  1  20 EA CF             jsr     FRMNUM
00D5A3  1  68                   pla
00D5A4  1  85 9C                sta     FNCNAM
00D5A6  1  68                   pla
00D5A7  1  85 9D                sta     FNCNAM+1
00D5A9  1  20 DC 00             jsr     CHRGOT
00D5AC  1  F0 03                beq     L324A
00D5AE  1  4C 49 D1             jmp     SYNERR
00D5B1  1               L324A:
00D5B1  1  68                   pla
00D5B2  1  85 DD                sta     TXTPTR
00D5B4  1  68                   pla
00D5B5  1  85 DE                sta     TXTPTR+1
00D5B7  1               L3250:
00D5B7  1  A0 00                ldy     #$00
00D5B9  1  68                   pla
00D5BA  1  91 9C                sta     (FNCNAM),y
00D5BC  1  68                   pla
00D5BD  1  C8                   iny
00D5BE  1  91 9C                sta     (FNCNAM),y
00D5C0  1  68                   pla
00D5C1  1  C8                   iny
00D5C2  1  91 9C                sta     (FNCNAM),y
00D5C4  1  68                   pla
00D5C5  1  C8                   iny
00D5C6  1  91 9C                sta     (FNCNAM),y
00D5C8  1  60                   rts
00D5C9  1               ; ----------------------------------------------------------------------------
00D5C9  1               ; "STR$" FUNCTION
00D5C9  1               ; ----------------------------------------------------------------------------
00D5C9  1               STR:
00D5C9  1  20 ED CF             jsr     CHKNUM
00D5CC  1  A0 00                ldy     #$00
00D5CE  1  20 AD DE             jsr     FOUT1
00D5D1  1  68                   pla
00D5D2  1  68                   pla
00D5D3  1  A9 FF                lda     #$FF
00D5D5  1  A0 00                ldy     #$00
00D5D7  1  F0 12                beq     STRLIT
00D5D9  1               ; ----------------------------------------------------------------------------
00D5D9  1               ; GET SPACE AND MAKE DESCRIPTOR FOR STRING WHOSE
00D5D9  1               ; ADDRESS IS IN FAC+3,4 AND WHOSE LENGTH IS IN A-REG
00D5D9  1               ; ----------------------------------------------------------------------------
00D5D9  1               STRINI:
00D5D9  1  A6 AE                ldx     FAC_LAST-1
00D5DB  1  A4 AF                ldy     FAC_LAST
00D5DD  1  86 9E                stx     DSCPTR
00D5DF  1  84 9F                sty     DSCPTR+1
00D5E1  1               ; ----------------------------------------------------------------------------
00D5E1  1               ; GET SPACE AND MAKE DESCRIPTOR FOR STRING WHOSE
00D5E1  1               ; ADDRESS IS IN Y,X AND WHOSE LENGTH IS IN A-REG
00D5E1  1               ; ----------------------------------------------------------------------------
00D5E1  1               STRSPA:
00D5E1  1  20 52 D6             jsr     GETSPA
00D5E4  1  86 AD                stx     FAC+1
00D5E6  1  84 AE                sty     FAC+2
00D5E8  1  85 AC                sta     FAC
00D5EA  1  60                   rts
00D5EB  1               ; ----------------------------------------------------------------------------
00D5EB  1               ; BUILD A DESCRIPTOR FOR STRING STARTING AT Y,A
00D5EB  1               ; AND TERMINATED BY $00 OR QUOTATION MARK
00D5EB  1               ; RETURN WITH DESCRIPTOR IN A TEMPORARY
00D5EB  1               ; AND ADDRESS OF DESCRIPTOR IN FAC+3,4
00D5EB  1               ; ----------------------------------------------------------------------------
00D5EB  1               STRLIT:
00D5EB  1  A2 22                ldx     #$22
00D5ED  1  86 5B                stx     CHARAC
00D5EF  1  86 5C                stx     ENDCHR
00D5F1  1               ; ----------------------------------------------------------------------------
00D5F1  1               ; BUILD A DESCRIPTOR FOR STRING STARTING AT Y,A
00D5F1  1               ; AND TERMINATED BY $00, (CHARAC), OR (ENDCHR)
00D5F1  1               ;
00D5F1  1               ; RETURN WITH DESCRIPTOR IN A TEMPORARY
00D5F1  1               ; AND ADDRESS OF DESCRIPTOR IN FAC+3,4
00D5F1  1               ; ----------------------------------------------------------------------------
00D5F1  1               STRLT2:
00D5F1  1  85 B8                sta     STRNG1
00D5F3  1  84 B9                sty     STRNG1+1
00D5F5  1  85 AD                sta     FAC+1
00D5F7  1  84 AE                sty     FAC+2
00D5F9  1  A0 FF                ldy     #$FF
00D5FB  1               L3298:
00D5FB  1  C8                   iny
00D5FC  1  B1 B8                lda     (STRNG1),y
00D5FE  1  F0 0C                beq     L32A9
00D600  1  C5 5B                cmp     CHARAC
00D602  1  F0 04                beq     L32A5
00D604  1  C5 5C                cmp     ENDCHR
00D606  1  D0 F3                bne     L3298
00D608  1               L32A5:
00D608  1  C9 22                cmp     #$22
00D60A  1  F0 01                beq     L32AA
00D60C  1               L32A9:
00D60C  1  18                   clc
00D60D  1               L32AA:
00D60D  1  84 AC                sty     FAC
00D60F  1  98                   tya
00D610  1  65 B8                adc     STRNG1
00D612  1  85 BA                sta     STRNG2
00D614  1  A6 B9                ldx     STRNG1+1
00D616  1  90 01                bcc     L32B6
00D618  1  E8                   inx
00D619  1               L32B6:
00D619  1  86 BB                stx     STRNG2+1
00D61B  1  A5 B9                lda     STRNG1+1
00D61D  1  D0 0B                bne     PUTNEW
00D61F  1  98                   tya
00D620  1  20 D9 D5             jsr     STRINI
00D623  1  A6 B8                ldx     STRNG1
00D625  1  A4 B9                ldy     STRNG1+1
00D627  1  20 D5 D7             jsr     MOVSTR
00D62A  1               ; ----------------------------------------------------------------------------
00D62A  1               ; STORE DESCRIPTOR IN TEMPORARY DESCRIPTOR STACK
00D62A  1               ;
00D62A  1               ; THE DESCRIPTOR IS NOW IN FAC, FAC+1, FAC+2
00D62A  1               ; PUT ADDRESS OF TEMP DESCRIPTOR IN FAC+3,4
00D62A  1               ; ----------------------------------------------------------------------------
00D62A  1               PUTNEW:
00D62A  1  A6 65                ldx     TEMPPT
00D62C  1  E0 71                cpx     #TEMPST+9
00D62E  1  D0 05                bne     PUTEMP
00D630  1  A2 1C                ldx     #ERR_FRMCPX
00D632  1               JERR:
00D632  1  4C 97 C7             jmp     ERROR
00D635  1               PUTEMP:
00D635  1  A5 AC                lda     FAC
00D637  1  95 00                sta     0,x
00D639  1  A5 AD                lda     FAC+1
00D63B  1  95 01                sta     1,x
00D63D  1  A5 AE                lda     FAC+2
00D63F  1  95 02                sta     2,x
00D641  1  A0 00                ldy     #$00
00D643  1  86 AE                stx     FAC_LAST-1
00D645  1  84 AF                sty     FAC_LAST
00D647  1  88                   dey
00D648  1  84 5F                sty     VALTYP
00D64A  1  86 66                stx     LASTPT
00D64C  1  E8                   inx
00D64D  1  E8                   inx
00D64E  1  E8                   inx
00D64F  1  86 65                stx     TEMPPT
00D651  1  60                   rts
00D652  1               ; ----------------------------------------------------------------------------
00D652  1               ; MAKE SPACE FOR STRING AT BOTTOM OF STRING SPACE
00D652  1               ; (A)=# BYTES SPACE TO MAKE
00D652  1               ;
00D652  1               ; RETURN WITH (A) SAME,
00D652  1               ;	AND Y,X = ADDRESS OF SPACE ALLOCATED
00D652  1               ; ----------------------------------------------------------------------------
00D652  1               GETSPA:
00D652  1  46 60                lsr     DATAFLG
00D654  1               L32F1:
00D654  1  48                   pha
00D655  1  49 FF                eor     #$FF
00D657  1  38                   sec
00D658  1  65 81                adc     FRETOP
00D65A  1  A4 82                ldy     FRETOP+1
00D65C  1  B0 01                bcs     L32FC
00D65E  1  88                   dey
00D65F  1               L32FC:
00D65F  1  C4 80                cpy     STREND+1
00D661  1  90 11                bcc     L3311
00D663  1  D0 04                bne     L3306
00D665  1  C5 7F                cmp     STREND
00D667  1  90 0B                bcc     L3311
00D669  1               L3306:
00D669  1  85 81                sta     FRETOP
00D66B  1  84 82                sty     FRETOP+1
00D66D  1  85 83                sta     FRESPC
00D66F  1  84 84                sty     FRESPC+1
00D671  1  AA                   tax
00D672  1  68                   pla
00D673  1  60                   rts
00D674  1               L3311:
00D674  1  A2 0C                ldx     #ERR_MEMFULL
00D676  1  A5 60                lda     DATAFLG
00D678  1  30 B8                bmi     JERR
00D67A  1  20 84 D6             jsr     GARBAG
00D67D  1  A9 80                lda     #$80
00D67F  1  85 60                sta     DATAFLG
00D681  1  68                   pla
00D682  1  D0 D0                bne     L32F1
00D684  1               ; ----------------------------------------------------------------------------
00D684  1               ; SHOVE ALL REFERENCED STRINGS AS HIGH AS POSSIBLE
00D684  1               ; IN MEMORY (AGAINST HIMEM), FREEING UP SPACE
00D684  1               ; BELOW STRING AREA DOWN TO STREND.
00D684  1               ; ----------------------------------------------------------------------------
00D684  1               GARBAG:
00D684  1  A6 85                ldx     MEMSIZ
00D686  1  A5 86                lda     MEMSIZ+1
00D688  1               FINDHIGHESTSTRING:
00D688  1  86 81                stx     FRETOP
00D68A  1  85 82                sta     FRETOP+1
00D68C  1  A0 00                ldy     #$00
00D68E  1  84 9D                sty     FNCNAM+1
00D690  1  A5 7F                lda     STREND
00D692  1  A6 80                ldx     STREND+1
00D694  1  85 AA                sta     LOWTR
00D696  1  86 AB                stx     LOWTR+1
00D698  1  A9 68                lda     #TEMPST
00D69A  1  A2 00                ldx     #$00
00D69C  1  85 71                sta     INDEX
00D69E  1  86 72                stx     INDEX+1
00D6A0  1               L333D:
00D6A0  1  C5 65                cmp     TEMPPT
00D6A2  1  F0 05                beq     L3346
00D6A4  1  20 16 D7             jsr     CHECK_VARIABLE
00D6A7  1  F0 F7                beq     L333D
00D6A9  1               L3346:
00D6A9  1  A9 06                lda     #BYTES_PER_VARIABLE
00D6AB  1  85 A0                sta     DSCLEN
00D6AD  1  A5 7B                lda     VARTAB
00D6AF  1  A6 7C                ldx     VARTAB+1
00D6B1  1  85 71                sta     INDEX
00D6B3  1  86 72                stx     INDEX+1
00D6B5  1               L3352:
00D6B5  1  E4 7E                cpx     ARYTAB+1
00D6B7  1  D0 04                bne     L335A
00D6B9  1  C5 7D                cmp     ARYTAB
00D6BB  1  F0 05                beq     L335F
00D6BD  1               L335A:
00D6BD  1  20 10 D7             jsr     CHECK_SIMPLE_VARIABLE
00D6C0  1  F0 F3                beq     L3352
00D6C2  1               L335F:
00D6C2  1  85 A4                sta     HIGHDS
00D6C4  1  86 A5                stx     HIGHDS+1
00D6C6  1  A9 03                lda     #$03	; OSI GC bugfix -> $04 ???
00D6C8  1  85 A0                sta     DSCLEN
00D6CA  1               L3367:
00D6CA  1  A5 A4                lda     HIGHDS
00D6CC  1  A6 A5                ldx     HIGHDS+1
00D6CE  1               L336B:
00D6CE  1  E4 80                cpx     STREND+1
00D6D0  1  D0 07                bne     L3376
00D6D2  1  C5 7F                cmp     STREND
00D6D4  1  D0 03                bne     L3376
00D6D6  1  4C 55 D7             jmp     MOVE_HIGHEST_STRING_TO_TOP
00D6D9  1               L3376:
00D6D9  1  85 71                sta     INDEX
00D6DB  1  86 72                stx     INDEX+1
00D6DD  1  A0 01                ldy     #$01
00D6DF  1  B1 71                lda     (INDEX),y
00D6E1  1  08                   php
00D6E2  1  C8                   iny
00D6E3  1  B1 71                lda     (INDEX),y
00D6E5  1  65 A4                adc     HIGHDS
00D6E7  1  85 A4                sta     HIGHDS
00D6E9  1  C8                   iny
00D6EA  1  B1 71                lda     (INDEX),y
00D6EC  1  65 A5                adc     HIGHDS+1
00D6EE  1  85 A5                sta     HIGHDS+1
00D6F0  1  28                   plp
00D6F1  1  10 D7                bpl     L3367
00D6F3  1  C8                   iny
00D6F4  1  B1 71                lda     (INDEX),y
00D6F6  1  0A                   asl     a
00D6F7  1  69 05                adc     #$05
00D6F9  1  65 71                adc     INDEX
00D6FB  1  85 71                sta     INDEX
00D6FD  1  90 02                bcc     L33A7
00D6FF  1  E6 72                inc     INDEX+1
00D701  1               L33A7:
00D701  1  A6 72                ldx     INDEX+1
00D703  1               L33A9:
00D703  1  E4 A5                cpx     HIGHDS+1
00D705  1  D0 04                bne     L33B1
00D707  1  C5 A4                cmp     HIGHDS
00D709  1  F0 C3                beq     L336B
00D70B  1               L33B1:
00D70B  1  20 16 D7             jsr     CHECK_VARIABLE
00D70E  1  F0 F3                beq     L33A9
00D710  1               ; ----------------------------------------------------------------------------
00D710  1               ; PROCESS A SIMPLE VARIABLE
00D710  1               ; ----------------------------------------------------------------------------
00D710  1               CHECK_SIMPLE_VARIABLE:
00D710  1  C8                   iny
00D711  1  B1 71                lda     (INDEX),y
00D713  1  10 30                bpl     CHECK_BUMP
00D715  1  C8                   iny
00D716  1               ; ----------------------------------------------------------------------------
00D716  1               ; IF STRING IS NOT EMPTY, CHECK IF IT IS HIGHEST
00D716  1               ; ----------------------------------------------------------------------------
00D716  1               CHECK_VARIABLE:
00D716  1  B1 71                lda     (INDEX),y
00D718  1  F0 2B                beq     CHECK_BUMP
00D71A  1  C8                   iny
00D71B  1  B1 71                lda     (INDEX),y
00D71D  1  AA                   tax
00D71E  1  C8                   iny
00D71F  1  B1 71                lda     (INDEX),y
00D721  1  C5 82                cmp     FRETOP+1
00D723  1  90 06                bcc     L33D5
00D725  1  D0 1E                bne     CHECK_BUMP
00D727  1  E4 81                cpx     FRETOP
00D729  1  B0 1A                bcs     CHECK_BUMP
00D72B  1               L33D5:
00D72B  1  C5 AB                cmp     LOWTR+1
00D72D  1  90 16                bcc     CHECK_BUMP
00D72F  1  D0 04                bne     L33DF
00D731  1  E4 AA                cpx     LOWTR
00D733  1  90 10                bcc     CHECK_BUMP
00D735  1               L33DF:
00D735  1  86 AA                stx     LOWTR
00D737  1  85 AB                sta     LOWTR+1
00D739  1  A5 71                lda     INDEX
00D73B  1  A6 72                ldx     INDEX+1
00D73D  1  85 9C                sta     FNCNAM
00D73F  1  86 9D                stx     FNCNAM+1
00D741  1  A5 A0                lda     DSCLEN
00D743  1  85 A2                sta     Z52
00D745  1               ; ----------------------------------------------------------------------------
00D745  1               ; ADD (DSCLEN) TO PNTR IN INDEX
00D745  1               ; RETURN WITH Y=0, PNTR ALSO IN X,A
00D745  1               ; ----------------------------------------------------------------------------
00D745  1               CHECK_BUMP:
00D745  1  A5 A0                lda     DSCLEN
00D747  1  18                   clc
00D748  1  65 71                adc     INDEX
00D74A  1  85 71                sta     INDEX
00D74C  1  90 02                bcc     L33FA
00D74E  1  E6 72                inc     INDEX+1
00D750  1               L33FA:
00D750  1  A6 72                ldx     INDEX+1
00D752  1  A0 00                ldy     #$00
00D754  1  60                   rts
00D755  1               ; ----------------------------------------------------------------------------
00D755  1               ; FOUND HIGHEST NON-EMPTY STRING, SO MOVE IT
00D755  1               ; TO TOP AND GO BACK FOR ANOTHER
00D755  1               ; ----------------------------------------------------------------------------
00D755  1               MOVE_HIGHEST_STRING_TO_TOP:
00D755  1  A6 9D                ldx     FNCNAM+1
00D757  1  F0 F7                beq     L33FA
00D759  1  A5 A2                lda     Z52
00D75B  1  29 04                and     #$04
00D75D  1  4A                   lsr     a
00D75E  1  A8                   tay
00D75F  1  85 A2                sta     Z52
00D761  1  B1 9C                lda     (FNCNAM),y
00D763  1  65 AA                adc     LOWTR
00D765  1  85 A6                sta     HIGHTR
00D767  1  A5 AB                lda     LOWTR+1
00D769  1  69 00                adc     #$00
00D76B  1  85 A7                sta     HIGHTR+1
00D76D  1  A5 81                lda     FRETOP
00D76F  1  A6 82                ldx     FRETOP+1
00D771  1  85 A4                sta     HIGHDS
00D773  1  86 A5                stx     HIGHDS+1
00D775  1  20 1F C7             jsr     BLTU2
00D778  1  A4 A2                ldy     Z52
00D77A  1  C8                   iny
00D77B  1  A5 A4                lda     HIGHDS
00D77D  1  91 9C                sta     (FNCNAM),y
00D77F  1  AA                   tax
00D780  1  E6 A5                inc     HIGHDS+1
00D782  1  A5 A5                lda     HIGHDS+1
00D784  1  C8                   iny
00D785  1  91 9C                sta     (FNCNAM),y
00D787  1  4C 88 D6             jmp     FINDHIGHESTSTRING
00D78A  1               ; ----------------------------------------------------------------------------
00D78A  1               ; CONCATENATE TWO STRINGS
00D78A  1               ; ----------------------------------------------------------------------------
00D78A  1               CAT:
00D78A  1  A5 AF                lda     FAC_LAST
00D78C  1  48                   pha
00D78D  1  A5 AE                lda     FAC_LAST-1
00D78F  1  48                   pha
00D790  1  20 DD D0             jsr     FRM_ELEMENT
00D793  1  20 EF CF             jsr     CHKSTR
00D796  1  68                   pla
00D797  1  85 B8                sta     STRNG1
00D799  1  68                   pla
00D79A  1  85 B9                sta     STRNG1+1
00D79C  1  A0 00                ldy     #$00
00D79E  1  B1 B8                lda     (STRNG1),y
00D7A0  1  18                   clc
00D7A1  1  71 AE                adc     (FAC_LAST-1),y
00D7A3  1  90 05                bcc     L3454
00D7A5  1  A2 1A                ldx     #ERR_STRLONG
00D7A7  1  4C 97 C7             jmp     ERROR
00D7AA  1               L3454:
00D7AA  1  20 D9 D5             jsr     STRINI
00D7AD  1  20 C7 D7             jsr     MOVINS
00D7B0  1  A5 9E                lda     DSCPTR
00D7B2  1  A4 9F                ldy     DSCPTR+1
00D7B4  1  20 F7 D7             jsr     FRETMP
00D7B7  1  20 D9 D7             jsr     MOVSTR1
00D7BA  1  A5 B8                lda     STRNG1
00D7BC  1  A4 B9                ldy     STRNG1+1
00D7BE  1  20 F7 D7             jsr     FRETMP
00D7C1  1  20 2A D6             jsr     PUTNEW
00D7C4  1  4C 18 D0             jmp     FRMEVL2
00D7C7  1               ; ----------------------------------------------------------------------------
00D7C7  1               ; GET STRING DESCRIPTOR POINTED AT BY (STRNG1)
00D7C7  1               ; AND MOVE DESCRIBED STRING TO (FRESPC)
00D7C7  1               ; ----------------------------------------------------------------------------
00D7C7  1               MOVINS:
00D7C7  1  A0 00                ldy     #$00
00D7C9  1  B1 B8                lda     (STRNG1),y
00D7CB  1  48                   pha
00D7CC  1  C8                   iny
00D7CD  1  B1 B8                lda     (STRNG1),y
00D7CF  1  AA                   tax
00D7D0  1  C8                   iny
00D7D1  1  B1 B8                lda     (STRNG1),y
00D7D3  1  A8                   tay
00D7D4  1  68                   pla
00D7D5  1               ; ----------------------------------------------------------------------------
00D7D5  1               ; MOVE STRING AT (Y,X) WITH LENGTH (A)
00D7D5  1               ; TO DESTINATION WHOSE ADDRESS IS IN FRESPC,FRESPC+1
00D7D5  1               ; ----------------------------------------------------------------------------
00D7D5  1               MOVSTR:
00D7D5  1  86 71                stx     INDEX
00D7D7  1  84 72                sty     INDEX+1
00D7D9  1               MOVSTR1:
00D7D9  1  A8                   tay
00D7DA  1  F0 0A                beq     L3490
00D7DC  1  48                   pha
00D7DD  1               L3487:
00D7DD  1  88                   dey
00D7DE  1  B1 71                lda     (INDEX),y
00D7E0  1  91 83                sta     (FRESPC),y
00D7E2  1  98                   tya
00D7E3  1  D0 F8                bne     L3487
00D7E5  1  68                   pla
00D7E6  1               L3490:
00D7E6  1  18                   clc
00D7E7  1  65 83                adc     FRESPC
00D7E9  1  85 83                sta     FRESPC
00D7EB  1  90 02                bcc     L3499
00D7ED  1  E6 84                inc     FRESPC+1
00D7EF  1               L3499:
00D7EF  1  60                   rts
00D7F0  1               ; ----------------------------------------------------------------------------
00D7F0  1               ; IF (FAC) IS A TEMPORARY STRING, RELEASE DESCRIPTOR
00D7F0  1               ; ----------------------------------------------------------------------------
00D7F0  1               FRESTR:
00D7F0  1  20 EF CF             jsr     CHKSTR
00D7F3  1               ; ----------------------------------------------------------------------------
00D7F3  1               ; IF STRING DESCRIPTOR POINTED TO BY FAC+3,4 IS
00D7F3  1               ; A TEMPORARY STRING, RELEASE IT.
00D7F3  1               ; ----------------------------------------------------------------------------
00D7F3  1               FREFAC:
00D7F3  1  A5 AE                lda     FAC_LAST-1
00D7F5  1  A4 AF                ldy     FAC_LAST
00D7F7  1               ; ----------------------------------------------------------------------------
00D7F7  1               ; IF STRING DESCRIPTOR WHOSE ADDRESS IS IN Y,A IS
00D7F7  1               ; A TEMPORARY STRING, RELEASE IT.
00D7F7  1               ; ----------------------------------------------------------------------------
00D7F7  1               FRETMP:
00D7F7  1  85 71                sta     INDEX
00D7F9  1  84 72                sty     INDEX+1
00D7FB  1  20 28 D8             jsr     FRETMS
00D7FE  1  08                   php
00D7FF  1  A0 00                ldy     #$00
00D801  1  B1 71                lda     (INDEX),y
00D803  1  48                   pha
00D804  1  C8                   iny
00D805  1  B1 71                lda     (INDEX),y
00D807  1  AA                   tax
00D808  1  C8                   iny
00D809  1  B1 71                lda     (INDEX),y
00D80B  1  A8                   tay
00D80C  1  68                   pla
00D80D  1  28                   plp
00D80E  1  D0 13                bne     L34CD
00D810  1  C4 82                cpy     FRETOP+1
00D812  1  D0 0F                bne     L34CD
00D814  1  E4 81                cpx     FRETOP
00D816  1  D0 0B                bne     L34CD
00D818  1  48                   pha
00D819  1  18                   clc
00D81A  1  65 81                adc     FRETOP
00D81C  1  85 81                sta     FRETOP
00D81E  1  90 02                bcc     L34CC
00D820  1  E6 82                inc     FRETOP+1
00D822  1               L34CC:
00D822  1  68                   pla
00D823  1               L34CD:
00D823  1  86 71                stx     INDEX
00D825  1  84 72                sty     INDEX+1
00D827  1  60                   rts
00D828  1               ; ----------------------------------------------------------------------------
00D828  1               ; RELEASE TEMPORARY DESCRIPTOR IF Y,A = LASTPT
00D828  1               ; ----------------------------------------------------------------------------
00D828  1               FRETMS:
00D828  1  C4 67                cpy     LASTPT+1
00D82A  1  D0 0C                bne     L34E2
00D82C  1  C5 66                cmp     LASTPT
00D82E  1  D0 08                bne     L34E2
00D830  1  85 65                sta     TEMPPT
00D832  1  E9 03                sbc     #$03
00D834  1  85 66                sta     LASTPT
00D836  1  A0 00                ldy     #$00
00D838  1               L34E2:
00D838  1  60                   rts
00D839  1               ; ----------------------------------------------------------------------------
00D839  1               ; "CHR$" FUNCTION
00D839  1               ; ----------------------------------------------------------------------------
00D839  1               CHRSTR:
00D839  1  20 EE D8             jsr     CONINT
00D83C  1  8A                   txa
00D83D  1  48                   pha
00D83E  1  A9 01                lda     #$01
00D840  1  20 E1 D5             jsr     STRSPA
00D843  1  68                   pla
00D844  1  A0 00                ldy     #$00
00D846  1  91 AD                sta     (FAC+1),y
00D848  1  68                   pla
00D849  1  68                   pla
00D84A  1  4C 2A D6             jmp     PUTNEW
00D84D  1               ; ----------------------------------------------------------------------------
00D84D  1               ; "LEFT$" FUNCTION
00D84D  1               ; ----------------------------------------------------------------------------
00D84D  1               LEFTSTR:
00D84D  1  20 AC D8             jsr     SUBSTRING_SETUP
00D850  1  D1 9E                cmp     (DSCPTR),y
00D852  1  98                   tya
00D853  1               SUBSTRING1:
00D853  1  90 04                bcc     L3503
00D855  1  B1 9E                lda     (DSCPTR),y
00D857  1  AA                   tax
00D858  1  98                   tya
00D859  1               L3503:
00D859  1  48                   pha
00D85A  1               SUBSTRING2:
00D85A  1  8A                   txa
00D85B  1               SUBSTRING3:
00D85B  1  48                   pha
00D85C  1  20 E1 D5             jsr     STRSPA
00D85F  1  A5 9E                lda     DSCPTR
00D861  1  A4 9F                ldy     DSCPTR+1
00D863  1  20 F7 D7             jsr     FRETMP
00D866  1  68                   pla
00D867  1  A8                   tay
00D868  1  68                   pla
00D869  1  18                   clc
00D86A  1  65 71                adc     INDEX
00D86C  1  85 71                sta     INDEX
00D86E  1  90 02                bcc     L351C
00D870  1  E6 72                inc     INDEX+1
00D872  1               L351C:
00D872  1  98                   tya
00D873  1  20 D9 D7             jsr     MOVSTR1
00D876  1  4C 2A D6             jmp     PUTNEW
00D879  1               ; ----------------------------------------------------------------------------
00D879  1               ; "RIGHT$" FUNCTION
00D879  1               ; ----------------------------------------------------------------------------
00D879  1               RIGHTSTR:
00D879  1  20 AC D8             jsr     SUBSTRING_SETUP
00D87C  1  18                   clc
00D87D  1  F1 9E                sbc     (DSCPTR),y
00D87F  1  49 FF                eor     #$FF
00D881  1  4C 53 D8             jmp     SUBSTRING1
00D884  1               ; ----------------------------------------------------------------------------
00D884  1               ; "MID$" FUNCTION
00D884  1               ; ----------------------------------------------------------------------------
00D884  1               MIDSTR:
00D884  1  A9 FF                lda     #$FF
00D886  1  85 AF                sta     FAC_LAST
00D888  1  20 DC 00             jsr     CHRGOT
00D88B  1  C9 29                cmp     #$29
00D88D  1  F0 06                beq     L353F
00D88F  1  20 3E D1             jsr     CHKCOM
00D892  1  20 EB D8             jsr     GETBYT
00D895  1               L353F:
00D895  1  20 AC D8             jsr     SUBSTRING_SETUP
00D898  1  CA                   dex
00D899  1  8A                   txa
00D89A  1  48                   pha
00D89B  1  18                   clc
00D89C  1  A2 00                ldx     #$00
00D89E  1  F1 9E                sbc     (DSCPTR),y
00D8A0  1  B0 B8                bcs     SUBSTRING2
00D8A2  1  49 FF                eor     #$FF
00D8A4  1  C5 AF                cmp     FAC_LAST
00D8A6  1  90 B3                bcc     SUBSTRING3
00D8A8  1  A5 AF                lda     FAC_LAST
00D8AA  1  B0 AF                bcs     SUBSTRING3
00D8AC  1               ; ----------------------------------------------------------------------------
00D8AC  1               ; COMMON SETUP ROUTINE FOR LEFT$, RIGHT$, MID$:
00D8AC  1               ; REQUIRE ")"; POP RETURN ADRS, GET DESCRIPTOR
00D8AC  1               ; ADDRESS, GET 1ST PARAMETER OF COMMAND
00D8AC  1               ; ----------------------------------------------------------------------------
00D8AC  1               SUBSTRING_SETUP:
00D8AC  1  20 38 D1             jsr     CHKCLS
00D8AF  1  68                   pla
00D8B0  1  85 A2                sta     JMPADRS+1
00D8B2  1  68                   pla
00D8B3  1  85 A3                sta     JMPADRS+2
00D8B5  1  68                   pla
00D8B6  1  68                   pla
00D8B7  1  68                   pla
00D8B8  1  AA                   tax
00D8B9  1  68                   pla
00D8BA  1  85 9E                sta     DSCPTR
00D8BC  1  68                   pla
00D8BD  1  85 9F                sta     DSCPTR+1
00D8BF  1  A0 00                ldy     #$00
00D8C1  1  8A                   txa
00D8C2  1  F0 21                beq     GOIQ
00D8C4  1  E6 A2                inc     JMPADRS+1
00D8C6  1  6C A2 00             jmp     (JMPADRS+1)
00D8C9  1               ; ----------------------------------------------------------------------------
00D8C9  1               ; "LEN" FUNCTION
00D8C9  1               ; ----------------------------------------------------------------------------
00D8C9  1               LEN:
00D8C9  1  20 CF D8             jsr     GETSTR
00D8CC  1               SNGFLT1:
00D8CC  1  4C 0D D5             jmp     SNGFLT
00D8CF  1               ; ----------------------------------------------------------------------------
00D8CF  1               ; IF LAST RESULT IS A TEMPORARY STRING, FREE IT
00D8CF  1               ; MAKE VALTYP NUMERIC, RETURN LENGTH IN Y-REG
00D8CF  1               ; ----------------------------------------------------------------------------
00D8CF  1               GETSTR:
00D8CF  1  20 F0 D7             jsr     FRESTR
00D8D2  1  A2 00                ldx     #$00
00D8D4  1  86 5F                stx     VALTYP
00D8D6  1  A8                   tay
00D8D7  1  60                   rts
00D8D8  1               ; ----------------------------------------------------------------------------
00D8D8  1               ; "ASC" FUNCTION
00D8D8  1               ; ----------------------------------------------------------------------------
00D8D8  1               ASC:
00D8D8  1  20 CF D8             jsr     GETSTR
00D8DB  1  F0 08                beq     GOIQ
00D8DD  1  A0 00                ldy     #$00
00D8DF  1  B1 71                lda     (INDEX),y
00D8E1  1  A8                   tay
00D8E2  1  4C CC D8             jmp     SNGFLT1
00D8E5  1               ; ----------------------------------------------------------------------------
00D8E5  1               GOIQ:
00D8E5  1  4C C5 D3             jmp     IQERR
00D8E8  1               ; ----------------------------------------------------------------------------
00D8E8  1               ; SCAN TO NEXT CHARACTER AND CONVERT EXPRESSION
00D8E8  1               ; TO SINGLE BYTE IN X-REG
00D8E8  1               ; ----------------------------------------------------------------------------
00D8E8  1               GTBYTC:
00D8E8  1  20 D6 00             jsr     CHRGET
00D8EB  1               ; ----------------------------------------------------------------------------
00D8EB  1               ; EVALUATE EXPRESSION AT TXTPTR, AND
00D8EB  1               ; CONVERT IT TO SINGLE BYTE IN X-REG
00D8EB  1               ; ----------------------------------------------------------------------------
00D8EB  1               GETBYT:
00D8EB  1  20 EA CF             jsr     FRMNUM
00D8EE  1               ; ----------------------------------------------------------------------------
00D8EE  1               ; CONVERT (FAC) TO SINGLE BYTE INTEGER IN X-REG
00D8EE  1               ; ----------------------------------------------------------------------------
00D8EE  1               CONINT:
00D8EE  1  20 3E D3             jsr     MKINT
00D8F1  1  A6 AE                ldx     FAC_LAST-1
00D8F3  1  D0 F0                bne     GOIQ
00D8F5  1  A6 AF                ldx     FAC_LAST
00D8F7  1  4C DC 00             jmp     CHRGOT
00D8FA  1               ; ----------------------------------------------------------------------------
00D8FA  1               ; "VAL" FUNCTION
00D8FA  1               ; ----------------------------------------------------------------------------
00D8FA  1               VAL:
00D8FA  1  20 CF D8             jsr     GETSTR
00D8FD  1  D0 03                bne     L35AC
00D8FF  1  4C 2E DA             jmp     ZERO_FAC
00D902  1               L35AC:
00D902  1  A6 DD                ldx     TXTPTR
00D904  1  A4 DE                ldy     TXTPTR+1
00D906  1  86 BA                stx     STRNG2
00D908  1  84 BB                sty     STRNG2+1
00D90A  1  A6 71                ldx     INDEX
00D90C  1  86 DD                stx     TXTPTR
00D90E  1  18                   clc
00D90F  1  65 71                adc     INDEX
00D911  1  85 73                sta     DEST
00D913  1  A6 72                ldx     INDEX+1
00D915  1  86 DE                stx     TXTPTR+1
00D917  1  90 01                bcc     L35C4
00D919  1  E8                   inx
00D91A  1               L35C4:
00D91A  1  86 74                stx     DEST+1
00D91C  1  A0 00                ldy     #$00
00D91E  1  B1 73                lda     (DEST),y
00D920  1  48                   pha
00D921  1  A9 00                lda     #$00
00D923  1  91 73                sta     (DEST),y
00D925  1  20 DC 00             jsr     CHRGOT
00D928  1  20 C4 DD             jsr     FIN
00D92B  1  68                   pla
00D92C  1  A0 00                ldy     #$00
00D92E  1  91 73                sta     (DEST),y
00D930  1               ; ----------------------------------------------------------------------------
00D930  1               ; COPY STRNG2 INTO TXTPTR
00D930  1               ; ----------------------------------------------------------------------------
00D930  1               POINT:
00D930  1  A6 BA                ldx     STRNG2
00D932  1  A4 BB                ldy     STRNG2+1
00D934  1  86 DD                stx     TXTPTR
00D936  1  84 DE                sty     TXTPTR+1
00D938  1  60                   rts
00D939  1               ; ----------------------------------------------------------------------------
00D939  1               ; EVALUATE "EXP1,EXP2"
00D939  1               ;
00D939  1               ; CONVERT EXP1 TO 16-BIT NUMBER IN LINNUM
00D939  1               ; CONVERT EXP2 TO 8-BIT NUMBER IN X-REG
00D939  1               ; ----------------------------------------------------------------------------
00D939  1               GTNUM:
00D939  1  20 EA CF             jsr     FRMNUM
00D93C  1  20 45 D9             jsr     GETADR
00D93F  1               ; ----------------------------------------------------------------------------
00D93F  1               ; EVALUATE ",EXPRESSION"
00D93F  1               ; CONVERT EXPRESSION TO SINGLE BYTE IN X-REG
00D93F  1               ; ----------------------------------------------------------------------------
00D93F  1               COMBYTE:
00D93F  1  20 3E D1             jsr     CHKCOM
00D942  1  4C EB D8             jmp     GETBYT
00D945  1               ; ----------------------------------------------------------------------------
00D945  1               ; CONVERT (FAC) TO A 16-BIT VALUE IN LINNUM
00D945  1               ; ----------------------------------------------------------------------------
00D945  1               GETADR:
00D945  1  A5 B0                lda     FACSIGN
00D947  1  30 9C                bmi     GOIQ
00D949  1  A5 AC                lda     FAC
00D94B  1  C9 91                cmp     #$91
00D94D  1  B0 96                bcs     GOIQ
00D94F  1  20 6E DD             jsr     QINT
00D952  1  A5 AE                lda     FAC_LAST-1
00D954  1  A4 AF                ldy     FAC_LAST
00D956  1  84 11                sty     LINNUM
00D958  1  85 12                sta     LINNUM+1
00D95A  1  60                   rts
00D95B  1               ; ----------------------------------------------------------------------------
00D95B  1               ; "PEEK" FUNCTION
00D95B  1               ; ----------------------------------------------------------------------------
00D95B  1               PEEK:
00D95B  1  20 45 D9             jsr     GETADR
00D95E  1  A0 00                ldy     #$00
00D960  1               ; disallow PEEK between $C000 and $DFFF
00D960  1  B1 11                lda     (LINNUM),y
00D962  1  A8                   tay
00D963  1  4C 0D D5             jmp     SNGFLT
00D966  1               ; ----------------------------------------------------------------------------
00D966  1               ; "POKE" STATEMENT
00D966  1               ; ----------------------------------------------------------------------------
00D966  1               POKE:
00D966  1  20 39 D9             jsr     GTNUM
00D969  1  8A                   txa
00D96A  1  A0 00                ldy     #$00
00D96C  1  91 11                sta     (LINNUM),y
00D96E  1  60                   rts
00D96F  1               ; ----------------------------------------------------------------------------
00D96F  1               ; "WAIT" STATEMENT
00D96F  1               ; ----------------------------------------------------------------------------
00D96F  1               WAIT:
00D96F  1  20 39 D9             jsr     GTNUM
00D972  1  86 97                stx     FORPNT
00D974  1  A2 00                ldx     #$00
00D976  1  20 DC 00             jsr     CHRGOT
00D979  1  F0 03                beq     L3628
00D97B  1  20 3F D9             jsr     COMBYTE
00D97E  1               L3628:
00D97E  1  86 98                stx     FORPNT+1
00D980  1  A0 00                ldy     #$00
00D982  1               L362C:
00D982  1  B1 11                lda     (LINNUM),y
00D984  1  45 98                eor     FORPNT+1
00D986  1  25 97                and     FORPNT
00D988  1  F0 F8                beq     L362C
00D98A  1               RTS3:
00D98A  1  60                   rts
00D98B  1               TEMP1X = TEMP1+(5-BYTES_FP)
00D98B  1               ; ----------------------------------------------------------------------------
00D98B  1               ; ADD 0.5 TO FAC
00D98B  1               ; ----------------------------------------------------------------------------
00D98B  1               FADDH:
00D98B  1  A9 D3                lda     #<CON_HALF
00D98D  1  A0 DF                ldy     #>CON_HALF
00D98F  1  4C A9 D9             jmp     FADD
00D992  1               ; ----------------------------------------------------------------------------
00D992  1               ; FAC = (Y,A) - FAC
00D992  1               ; ----------------------------------------------------------------------------
00D992  1               FSUB:
00D992  1  20 8A DB             jsr     LOAD_ARG_FROM_YA
00D995  1               ; ----------------------------------------------------------------------------
00D995  1               ; FAC = ARG - FAC
00D995  1               ; ----------------------------------------------------------------------------
00D995  1               FSUBT:
00D995  1  A5 B0                lda     FACSIGN
00D997  1  49 FF                eor     #$FF
00D999  1  85 B0                sta     FACSIGN
00D99B  1  45 B7                eor     ARGSIGN
00D99D  1  85 B8                sta     SGNCPR
00D99F  1  A5 AC                lda     FAC
00D9A1  1  4C AC D9             jmp     FADDT
00D9A4  1               ; ----------------------------------------------------------------------------
00D9A4  1               ; Commodore BASIC V2 Easter Egg
00D9A4  1               ; ----------------------------------------------------------------------------
00D9A4  1               ; ----------------------------------------------------------------------------
00D9A4  1               ; SHIFT SMALLER ARGUMENT MORE THAN 7 BITS
00D9A4  1               ; ----------------------------------------------------------------------------
00D9A4  1               FADD1:
00D9A4  1  20 B8 DA             jsr     SHIFT_RIGHT
00D9A7  1  90 3C                bcc     FADD3
00D9A9  1               ; ----------------------------------------------------------------------------
00D9A9  1               ; FAC = (Y,A) + FAC
00D9A9  1               ; ----------------------------------------------------------------------------
00D9A9  1               FADD:
00D9A9  1  20 8A DB             jsr     LOAD_ARG_FROM_YA
00D9AC  1               ; ----------------------------------------------------------------------------
00D9AC  1               ; FAC = ARG + FAC
00D9AC  1               ; ----------------------------------------------------------------------------
00D9AC  1               FADDT:
00D9AC  1  D0 03                bne     L365B
00D9AE  1  4C D8 DC             jmp     COPY_ARG_TO_FAC
00D9B1  1               L365B:
00D9B1  1  A6 B9                ldx     FACEXTENSION
00D9B3  1  86 A3                stx     ARGEXTENSION
00D9B5  1  A2 B3                ldx     #ARG
00D9B7  1  A5 B3                lda     ARG
00D9B9  1               FADD2:
00D9B9  1  A8                   tay
00D9BA  1  F0 CE                beq     RTS3
00D9BC  1  38                   sec
00D9BD  1  E5 AC                sbc     FAC
00D9BF  1  F0 24                beq     FADD3
00D9C1  1  90 12                bcc     L367F
00D9C3  1  84 AC                sty     FAC
00D9C5  1  A4 B7                ldy     ARGSIGN
00D9C7  1  84 B0                sty     FACSIGN
00D9C9  1  49 FF                eor     #$FF
00D9CB  1  69 00                adc     #$00
00D9CD  1  A0 00                ldy     #$00
00D9CF  1  84 A3                sty     ARGEXTENSION
00D9D1  1  A2 AC                ldx     #FAC
00D9D3  1  D0 04                bne     L3683
00D9D5  1               L367F:
00D9D5  1  A0 00                ldy     #$00
00D9D7  1  84 B9                sty     FACEXTENSION
00D9D9  1               L3683:
00D9D9  1  C9 F9                cmp     #$F9
00D9DB  1  30 C7                bmi     FADD1
00D9DD  1  A8                   tay
00D9DE  1  A5 B9                lda     FACEXTENSION
00D9E0  1  56 01                lsr     1,x
00D9E2  1  20 CF DA             jsr     SHIFT_RIGHT4
00D9E5  1               FADD3:
00D9E5  1  24 B8                bit     SGNCPR
00D9E7  1  10 4C                bpl     FADD4
00D9E9  1  A0 AC                ldy     #FAC
00D9EB  1  E0 B3                cpx     #ARG
00D9ED  1  F0 02                beq     L369B
00D9EF  1  A0 B3                ldy     #ARG
00D9F1  1               L369B:
00D9F1  1  38                   sec
00D9F2  1  49 FF                eor     #$FF
00D9F4  1  65 A3                adc     ARGEXTENSION
00D9F6  1  85 B9                sta     FACEXTENSION
00D9F8  1  B9 03 00             lda     3,y
00D9FB  1  F5 03                sbc     3,x
00D9FD  1  85 AF                sta     FAC+3
00D9FF  1  B9 02 00             lda     2,y
00DA02  1  F5 02                sbc     2,x
00DA04  1  85 AE                sta     FAC+2
00DA06  1  B9 01 00             lda     1,y
00DA09  1  F5 01                sbc     1,x
00DA0B  1  85 AD                sta     FAC+1
00DA0D  1               ; ----------------------------------------------------------------------------
00DA0D  1               ; NORMALIZE VALUE IN FAC
00DA0D  1               ; ----------------------------------------------------------------------------
00DA0D  1               NORMALIZE_FAC1:
00DA0D  1  B0 03                bcs     NORMALIZE_FAC2
00DA0F  1  20 74 DA             jsr     COMPLEMENT_FAC
00DA12  1               NORMALIZE_FAC2:
00DA12  1  A0 00                ldy     #$00
00DA14  1  98                   tya
00DA15  1  18                   clc
00DA16  1               L36C7:
00DA16  1  A6 AD                ldx     FAC+1
00DA18  1  D0 3E                bne     NORMALIZE_FAC4
00DA1A  1  A6 AE                ldx     FAC+2
00DA1C  1  86 AD                stx     FAC+1
00DA1E  1  A6 AF                ldx     FAC+3
00DA20  1  86 AE                stx     FAC+2
00DA22  1  A6 B9                ldx     FACEXTENSION
00DA24  1  86 AF                stx     FAC+3
00DA26  1  84 B9                sty     FACEXTENSION
00DA28  1  69 08                adc     #$08
00DA2A  1               ; bugfix?
00DA2A  1               ; fix does not exist on AppleSoft 2
00DA2A  1  C9 18                cmp     #MANTISSA_BYTES*8
00DA2C  1  D0 E8                bne     L36C7
00DA2E  1               ; ----------------------------------------------------------------------------
00DA2E  1               ; SET FAC = 0
00DA2E  1               ; (ONLY NECESSARY TO ZERO EXPONENT AND SIGN CELLS)
00DA2E  1               ; ----------------------------------------------------------------------------
00DA2E  1               ZERO_FAC:
00DA2E  1  A9 00                lda     #$00
00DA30  1               STA_IN_FAC_SIGN_AND_EXP:
00DA30  1  85 AC                sta     FAC
00DA32  1               STA_IN_FAC_SIGN:
00DA32  1  85 B0                sta     FACSIGN
00DA34  1  60                   rts
00DA35  1               ; ----------------------------------------------------------------------------
00DA35  1               ; ADD MANTISSAS OF FAC AND ARG INTO FAC
00DA35  1               ; ----------------------------------------------------------------------------
00DA35  1               FADD4:
00DA35  1  65 A3                adc     ARGEXTENSION
00DA37  1  85 B9                sta     FACEXTENSION
00DA39  1  A5 AF                lda     FAC+3
00DA3B  1  65 B6                adc     ARG+3
00DA3D  1  85 AF                sta     FAC+3
00DA3F  1  A5 AE                lda     FAC+2
00DA41  1  65 B5                adc     ARG+2
00DA43  1  85 AE                sta     FAC+2
00DA45  1  A5 AD                lda     FAC+1
00DA47  1  65 B4                adc     ARG+1
00DA49  1  85 AD                sta     FAC+1
00DA4B  1  4C 65 DA             jmp     NORMALIZE_FAC5
00DA4E  1               ; ----------------------------------------------------------------------------
00DA4E  1               ; FINISH NORMALIZING FAC
00DA4E  1               ; ----------------------------------------------------------------------------
00DA4E  1               NORMALIZE_FAC3:
00DA4E  1  69 01                adc     #$01
00DA50  1  06 B9                asl     FACEXTENSION
00DA52  1  26 AF                rol     FAC+3
00DA54  1  26 AE                rol     FAC+2
00DA56  1  26 AD                rol     FAC+1
00DA58  1               NORMALIZE_FAC4:
00DA58  1  10 F4                bpl     NORMALIZE_FAC3
00DA5A  1  38                   sec
00DA5B  1  E5 AC                sbc     FAC
00DA5D  1  B0 CF                bcs     ZERO_FAC
00DA5F  1  49 FF                eor     #$FF
00DA61  1  69 01                adc     #$01
00DA63  1  85 AC                sta     FAC
00DA65  1               NORMALIZE_FAC5:
00DA65  1  90 0C                bcc     L3764
00DA67  1               NORMALIZE_FAC6:
00DA67  1  E6 AC                inc     FAC
00DA69  1  F0 36                beq     OVERFLOW
00DA6B  1  66 AD                ror     FAC+1
00DA6D  1  66 AE                ror     FAC+2
00DA6F  1  66 AF                ror     FAC+3
00DA71  1  66 B9                ror     FACEXTENSION
00DA73  1               L3764:
00DA73  1  60                   rts
00DA74  1               ; ----------------------------------------------------------------------------
00DA74  1               ; 2'S COMPLEMENT OF FAC
00DA74  1               ; ----------------------------------------------------------------------------
00DA74  1               COMPLEMENT_FAC:
00DA74  1  A5 B0                lda     FACSIGN
00DA76  1  49 FF                eor     #$FF
00DA78  1  85 B0                sta     FACSIGN
00DA7A  1               ; ----------------------------------------------------------------------------
00DA7A  1               ; 2'S COMPLEMENT OF FAC MANTISSA ONLY
00DA7A  1               ; ----------------------------------------------------------------------------
00DA7A  1               COMPLEMENT_FAC_MANTISSA:
00DA7A  1  A5 AD                lda     FAC+1
00DA7C  1  49 FF                eor     #$FF
00DA7E  1  85 AD                sta     FAC+1
00DA80  1  A5 AE                lda     FAC+2
00DA82  1  49 FF                eor     #$FF
00DA84  1  85 AE                sta     FAC+2
00DA86  1  A5 AF                lda     FAC+3
00DA88  1  49 FF                eor     #$FF
00DA8A  1  85 AF                sta     FAC+3
00DA8C  1  A5 B9                lda     FACEXTENSION
00DA8E  1  49 FF                eor     #$FF
00DA90  1  85 B9                sta     FACEXTENSION
00DA92  1  E6 B9                inc     FACEXTENSION
00DA94  1  D0 0A                bne     RTS12
00DA96  1               ; ----------------------------------------------------------------------------
00DA96  1               ; INCREMENT FAC MANTISSA
00DA96  1               ; ----------------------------------------------------------------------------
00DA96  1               INCREMENT_FAC_MANTISSA:
00DA96  1  E6 AF                inc     FAC+3
00DA98  1  D0 06                bne     RTS12
00DA9A  1  E6 AE                inc     FAC+2
00DA9C  1  D0 02                bne     RTS12
00DA9E  1  E6 AD                inc     FAC+1
00DAA0  1               RTS12:
00DAA0  1  60                   rts
00DAA1  1               OVERFLOW:
00DAA1  1  A2 0A                ldx     #ERR_OVERFLOW
00DAA3  1  4C 97 C7             jmp     ERROR
00DAA6  1               ; ----------------------------------------------------------------------------
00DAA6  1               ; SHIFT 1,X THRU 5,X RIGHT
00DAA6  1               ; (A) = NEGATIVE OF SHIFT COUNT
00DAA6  1               ; (X) = POINTER TO BYTES TO BE SHIFTED
00DAA6  1               ;
00DAA6  1               ; RETURN WITH (Y)=0, CARRY=0, EXTENSION BITS IN A-REG
00DAA6  1               ; ----------------------------------------------------------------------------
00DAA6  1               SHIFT_RIGHT1:
00DAA6  1  A2 74                ldx     #RESULT-1
00DAA8  1               SHIFT_RIGHT2:
00DAA8  1  B4 03                ldy     3,x
00DAAA  1  84 B9                sty     FACEXTENSION
00DAAC  1  B4 02                ldy     2,x
00DAAE  1  94 03                sty     3,x
00DAB0  1  B4 01                ldy     1,x
00DAB2  1  94 02                sty     2,x
00DAB4  1  A4 B2                ldy     SHIFTSIGNEXT
00DAB6  1  94 01                sty     1,x
00DAB8  1               ; ----------------------------------------------------------------------------
00DAB8  1               ; MAIN ENTRY TO RIGHT SHIFT SUBROUTINE
00DAB8  1               ; ----------------------------------------------------------------------------
00DAB8  1               SHIFT_RIGHT:
00DAB8  1  69 08                adc     #$08
00DABA  1  30 EC                bmi     SHIFT_RIGHT2
00DABC  1  F0 EA                beq     SHIFT_RIGHT2
00DABE  1  E9 08                sbc     #$08
00DAC0  1  A8                   tay
00DAC1  1  A5 B9                lda     FACEXTENSION
00DAC3  1  B0 12                bcs     SHIFT_RIGHT5
00DAC5  1               LB588:
00DAC5  1  16 01                asl     1,x
00DAC7  1  90 02                bcc     LB58E
00DAC9  1  F6 01                inc     1,x
00DACB  1               LB58E:
00DACB  1  76 01                ror     1,x
00DACD  1  76 01                ror     1,x
00DACF  1               ; ----------------------------------------------------------------------------
00DACF  1               ; ENTER HERE FOR SHORT SHIFTS WITH NO SIGN EXTENSION
00DACF  1               ; ----------------------------------------------------------------------------
00DACF  1               SHIFT_RIGHT4:
00DACF  1  76 02                ror     2,x
00DAD1  1  76 03                ror     3,x
00DAD3  1  6A                   ror     a
00DAD4  1  C8                   iny
00DAD5  1  D0 EE                bne     LB588
00DAD7  1               SHIFT_RIGHT5:
00DAD7  1  18                   clc
00DAD8  1  60                   rts
00DAD9  1               ; ----------------------------------------------------------------------------
00DAD9  1               CON_ONE:
00DAD9  1  81 00 00 00          .byte   $81,$00,$00,$00
00DADD  1               POLY_LOG:
00DADD  1  02           		.byte	$02
00DADE  1  80 19 56 62  		.byte   $80,$19,$56,$62
00DAE2  1  80 76 22 F3  		.byte   $80,$76,$22,$F3
00DAE6  1  82 38 AA 40  		.byte   $82,$38,$AA,$40
00DAEA  1               CON_SQR_HALF:
00DAEA  1  80 35 04 F3  		.byte   $80,$35,$04,$F3
00DAEE  1               CON_SQR_TWO:
00DAEE  1  81 35 04 F3  		.byte   $81,$35,$04,$F3
00DAF2  1               CON_NEG_HALF:
00DAF2  1  80 80 00 00  		.byte   $80,$80,$00,$00
00DAF6  1               CON_LOG_TWO:
00DAF6  1  80 31 72 18  		.byte   $80,$31,$72,$18
00DAFA  1               ; ----------------------------------------------------------------------------
00DAFA  1               ; "LOG" FUNCTION
00DAFA  1               ; ----------------------------------------------------------------------------
00DAFA  1               LOG:
00DAFA  1  20 07 DD             jsr     SIGN
00DAFD  1  F0 02                beq     GIQ
00DAFF  1  10 03                bpl     LOG2
00DB01  1               GIQ:
00DB01  1  4C C5 D3             jmp     IQERR
00DB04  1               LOG2:
00DB04  1  A5 AC                lda     FAC
00DB06  1  E9 7F                sbc     #$7F
00DB08  1  48                   pha
00DB09  1  A9 80                lda     #$80
00DB0B  1  85 AC                sta     FAC
00DB0D  1  A9 EA                lda     #<CON_SQR_HALF
00DB0F  1  A0 DA                ldy     #>CON_SQR_HALF
00DB11  1  20 A9 D9             jsr     FADD
00DB14  1  A9 EE                lda     #<CON_SQR_TWO
00DB16  1  A0 DA                ldy     #>CON_SQR_TWO
00DB18  1  20 07 DC             jsr     FDIV
00DB1B  1  A9 D9                lda     #<CON_ONE
00DB1D  1  A0 DA                ldy     #>CON_ONE
00DB1F  1  20 92 D9             jsr     FSUB
00DB22  1  A9 DD                lda     #<POLY_LOG
00DB24  1  A0 DA                ldy     #>POLY_LOG
00DB26  1  20 AB E0             jsr     POLYNOMIAL_ODD
00DB29  1  A9 F2                lda     #<CON_NEG_HALF
00DB2B  1  A0 DA                ldy     #>CON_NEG_HALF
00DB2D  1  20 A9 D9             jsr     FADD
00DB30  1  68                   pla
00DB31  1  20 4F DE             jsr     ADDACC
00DB34  1  A9 F6                lda     #<CON_LOG_TWO
00DB36  1  A0 DA                ldy     #>CON_LOG_TWO
00DB38  1               ; ----------------------------------------------------------------------------
00DB38  1               ; FAC = (Y,A) * FAC
00DB38  1               ; ----------------------------------------------------------------------------
00DB38  1               FMULT:
00DB38  1  20 8A DB             jsr     LOAD_ARG_FROM_YA
00DB3B  1               ; ----------------------------------------------------------------------------
00DB3B  1               ; FAC = ARG * FAC
00DB3B  1               ; ----------------------------------------------------------------------------
00DB3B  1               FMULTT:
00DB3B  1  F0 4C                beq     L3903
00DB3D  1  20 B0 DB             jsr     ADD_EXPONENTS
00DB40  1  A9 00                lda     #$00
00DB42  1  85 75                sta     RESULT
00DB44  1  85 76                sta     RESULT+1
00DB46  1  85 77                sta     RESULT+2
00DB48  1  A5 B9                lda     FACEXTENSION
00DB4A  1  20 5F DB             jsr     MULTIPLY1
00DB4D  1  A5 AF                lda     FAC+3
00DB4F  1  20 5F DB             jsr     MULTIPLY1
00DB52  1  A5 AE                lda     FAC+2
00DB54  1  20 5F DB             jsr     MULTIPLY1
00DB57  1  A5 AD                lda     FAC+1
00DB59  1  20 64 DB             jsr     MULTIPLY2
00DB5C  1  4C 79 DC             jmp     COPY_RESULT_INTO_FAC
00DB5F  1               ; ----------------------------------------------------------------------------
00DB5F  1               ; MULTIPLY ARG BY (A) INTO RESULT
00DB5F  1               ; ----------------------------------------------------------------------------
00DB5F  1               MULTIPLY1:
00DB5F  1  D0 03                bne     MULTIPLY2
00DB61  1  4C A6 DA             jmp     SHIFT_RIGHT1
00DB64  1               MULTIPLY2:
00DB64  1  4A                   lsr     a
00DB65  1  09 80                ora     #$80
00DB67  1               L38A7:
00DB67  1  A8                   tay
00DB68  1  90 13                bcc     L38C3
00DB6A  1  18                   clc
00DB6B  1  A5 77                lda     RESULT+2
00DB6D  1  65 B6                adc     ARG+3
00DB6F  1  85 77                sta     RESULT+2
00DB71  1  A5 76                lda     RESULT+1
00DB73  1  65 B5                adc     ARG+2
00DB75  1  85 76                sta     RESULT+1
00DB77  1  A5 75                lda     RESULT
00DB79  1  65 B4                adc     ARG+1
00DB7B  1  85 75                sta     RESULT
00DB7D  1               L38C3:
00DB7D  1  66 75                ror     RESULT
00DB7F  1  66 76                ror     RESULT+1
00DB81  1               ; this seems to be a bad byte in the dump
00DB81  1  66 77                ror     RESULT+2
00DB83  1  66 B9                ror     FACEXTENSION
00DB85  1  98                   tya
00DB86  1  4A                   lsr     a
00DB87  1  D0 DE                bne     L38A7
00DB89  1               L3903:
00DB89  1  60                   rts
00DB8A  1               ; ----------------------------------------------------------------------------
00DB8A  1               ; UNPACK NUMBER AT (Y,A) INTO ARG
00DB8A  1               ; ----------------------------------------------------------------------------
00DB8A  1               LOAD_ARG_FROM_YA:
00DB8A  1  85 71                sta     INDEX
00DB8C  1  84 72                sty     INDEX+1
00DB8E  1  A0 03                ldy     #BYTES_FP-1
00DB90  1  B1 71                lda     (INDEX),y
00DB92  1  85 B6                sta     ARG+3
00DB94  1  88                   dey
00DB95  1  B1 71                lda     (INDEX),y
00DB97  1  85 B5                sta     ARG+2
00DB99  1  88                   dey
00DB9A  1  B1 71                lda     (INDEX),y
00DB9C  1  85 B7                sta     ARGSIGN
00DB9E  1  45 B0                eor     FACSIGN
00DBA0  1  85 B8                sta     SGNCPR
00DBA2  1  A5 B7                lda     ARGSIGN
00DBA4  1  09 80                ora     #$80
00DBA6  1  85 B4                sta     ARG+1
00DBA8  1  88                   dey
00DBA9  1  B1 71                lda     (INDEX),y
00DBAB  1  85 B3                sta     ARG
00DBAD  1  A5 AC                lda     FAC
00DBAF  1  60                   rts
00DBB0  1               ; ----------------------------------------------------------------------------
00DBB0  1               ; ADD EXPONENTS OF ARG AND FAC
00DBB0  1               ; (CALLED BY FMULT AND FDIV)
00DBB0  1               ;
00DBB0  1               ; ALSO CHECK FOR OVERFLOW, AND SET RESULT SIGN
00DBB0  1               ; ----------------------------------------------------------------------------
00DBB0  1               ADD_EXPONENTS:
00DBB0  1  A5 B3                lda     ARG
00DBB2  1               ADD_EXPONENTS1:
00DBB2  1  F0 1F                beq     ZERO
00DBB4  1  18                   clc
00DBB5  1  65 AC                adc     FAC
00DBB7  1  90 04                bcc     L393C
00DBB9  1  30 1D                bmi     JOV
00DBBB  1  18                   clc
00DBBC  1  2C                   .byte   $2C
00DBBD  1               L393C:
00DBBD  1  10 14                bpl     ZERO
00DBBF  1  69 80                adc     #$80
00DBC1  1  85 AC                sta     FAC
00DBC3  1  D0 03                bne     L3947
00DBC5  1  4C 32 DA             jmp     STA_IN_FAC_SIGN
00DBC8  1               L3947:
00DBC8  1  A5 B8                lda     SGNCPR
00DBCA  1  85 B0                sta     FACSIGN
00DBCC  1  60                   rts
00DBCD  1               ; ----------------------------------------------------------------------------
00DBCD  1               ; IF (FAC) IS POSITIVE, GIVE "OVERFLOW" ERROR
00DBCD  1               ; IF (FAC) IS NEGATIVE, SET FAC=0, POP ONE RETURN, AND RTS
00DBCD  1               ; CALLED FROM "EXP" FUNCTION
00DBCD  1               ; ----------------------------------------------------------------------------
00DBCD  1               OUTOFRNG:
00DBCD  1  A5 B0                lda     FACSIGN
00DBCF  1  49 FF                eor     #$FF
00DBD1  1  30 05                bmi     JOV
00DBD3  1               ; ----------------------------------------------------------------------------
00DBD3  1               ; POP RETURN ADDRESS AND SET FAC=0
00DBD3  1               ; ----------------------------------------------------------------------------
00DBD3  1               ZERO:
00DBD3  1  68                   pla
00DBD4  1  68                   pla
00DBD5  1  4C 2E DA             jmp     ZERO_FAC
00DBD8  1               JOV:
00DBD8  1  4C A1 DA             jmp     OVERFLOW
00DBDB  1               ; ----------------------------------------------------------------------------
00DBDB  1               ; MULTIPLY FAC BY 10
00DBDB  1               ; ----------------------------------------------------------------------------
00DBDB  1               MUL10:
00DBDB  1  20 E8 DC             jsr     COPY_FAC_TO_ARG_ROUNDED
00DBDE  1  AA                   tax
00DBDF  1  F0 10                beq     L3970
00DBE1  1  18                   clc
00DBE2  1  69 02                adc     #$02
00DBE4  1  B0 F2                bcs     JOV
00DBE6  1  A2 00                ldx     #$00
00DBE8  1  86 B8                stx     SGNCPR
00DBEA  1  20 B9 D9             jsr     FADD2
00DBED  1  E6 AC                inc     FAC
00DBEF  1  F0 E7                beq     JOV
00DBF1  1               L3970:
00DBF1  1  60                   rts
00DBF2  1               ; ----------------------------------------------------------------------------
00DBF2  1               CONTEN:
00DBF2  1  84 20 00 00          .byte   $84,$20,$00,$00
00DBF6  1               ; ----------------------------------------------------------------------------
00DBF6  1               ; DIVIDE FAC BY 10
00DBF6  1               ; ----------------------------------------------------------------------------
00DBF6  1               DIV10:
00DBF6  1  20 E8 DC             jsr     COPY_FAC_TO_ARG_ROUNDED
00DBF9  1  A9 F2                lda     #<CONTEN
00DBFB  1  A0 DB                ldy     #>CONTEN
00DBFD  1  A2 00                ldx     #$00
00DBFF  1               ; ----------------------------------------------------------------------------
00DBFF  1               ; FAC = ARG / (Y,A)
00DBFF  1               ; ----------------------------------------------------------------------------
00DBFF  1               DIV:
00DBFF  1  86 B8                stx     SGNCPR
00DC01  1  20 88 DC             jsr     LOAD_FAC_FROM_YA
00DC04  1  4C 0A DC             jmp     FDIVT
00DC07  1               ; ----------------------------------------------------------------------------
00DC07  1               ; FAC = (Y,A) / FAC
00DC07  1               ; ----------------------------------------------------------------------------
00DC07  1               FDIV:
00DC07  1  20 8A DB             jsr     LOAD_ARG_FROM_YA
00DC0A  1               ; ----------------------------------------------------------------------------
00DC0A  1               ; FAC = ARG / FAC
00DC0A  1               ; ----------------------------------------------------------------------------
00DC0A  1               FDIVT:
00DC0A  1  F0 68                beq     L3A02
00DC0C  1  20 F7 DC             jsr     ROUND_FAC
00DC0F  1  A9 00                lda     #$00
00DC11  1  38                   sec
00DC12  1  E5 AC                sbc     FAC
00DC14  1  85 AC                sta     FAC
00DC16  1  20 B0 DB             jsr     ADD_EXPONENTS
00DC19  1  E6 AC                inc     FAC
00DC1B  1  F0 BB                beq     JOV
00DC1D  1  A2 FD                ldx     #-MANTISSA_BYTES+256
00DC1F  1  A9 01                lda     #$01
00DC21  1               L39A1:
00DC21  1  A4 B4                ldy     ARG+1
00DC23  1  C4 AD                cpy     FAC+1
00DC25  1  D0 0A                bne     L39B7
00DC27  1  A4 B5                ldy     ARG+2
00DC29  1  C4 AE                cpy     FAC+2
00DC2B  1  D0 04                bne     L39B7
00DC2D  1  A4 B6                ldy     ARG+3
00DC2F  1  C4 AF                cpy     FAC+3
00DC31  1               L39B7:
00DC31  1  08                   php
00DC32  1  2A                   rol     a
00DC33  1  90 09                bcc     L39C4
00DC35  1  E8                   inx
00DC36  1  95 77                sta     RESULT_LAST-1,x
00DC38  1  F0 2A                beq     L39F2
00DC3A  1  10 2C                bpl     L39F6
00DC3C  1  A9 01                lda     #$01
00DC3E  1               L39C4:
00DC3E  1  28                   plp
00DC3F  1  B0 0C                bcs     L39D5
00DC41  1               L39C7:
00DC41  1  06 B6                asl     ARG_LAST
00DC43  1  26 B5                rol     ARG+2
00DC45  1  26 B4                rol     ARG+1
00DC47  1  B0 E8                bcs     L39B7
00DC49  1  30 D6                bmi     L39A1
00DC4B  1  10 E4                bpl     L39B7
00DC4D  1               L39D5:
00DC4D  1  A8                   tay
00DC4E  1  A5 B6                lda     ARG+3
00DC50  1  E5 AF                sbc     FAC+3
00DC52  1  85 B6                sta     ARG+3
00DC54  1  A5 B5                lda     ARG+2
00DC56  1  E5 AE                sbc     FAC+2
00DC58  1  85 B5                sta     ARG+2
00DC5A  1  A5 B4                lda     ARG+1
00DC5C  1  E5 AD                sbc     FAC+1
00DC5E  1  85 B4                sta     ARG+1
00DC60  1  98                   tya
00DC61  1  4C 41 DC             jmp     L39C7
00DC64  1               L39F2:
00DC64  1  A9 40                lda     #$40
00DC66  1  D0 D6                bne     L39C4
00DC68  1               L39F6:
00DC68  1  0A                   asl     a
00DC69  1  0A                   asl     a
00DC6A  1  0A                   asl     a
00DC6B  1  0A                   asl     a
00DC6C  1  0A                   asl     a
00DC6D  1  0A                   asl     a
00DC6E  1  85 B9                sta     FACEXTENSION
00DC70  1  28                   plp
00DC71  1  4C 79 DC             jmp     COPY_RESULT_INTO_FAC
00DC74  1               L3A02:
00DC74  1  A2 14                ldx     #ERR_ZERODIV
00DC76  1  4C 97 C7             jmp     ERROR
00DC79  1               ; ----------------------------------------------------------------------------
00DC79  1               ; COPY RESULT INTO FAC MANTISSA, AND NORMALIZE
00DC79  1               ; ----------------------------------------------------------------------------
00DC79  1               COPY_RESULT_INTO_FAC:
00DC79  1  A5 75                lda     RESULT
00DC7B  1  85 AD                sta     FAC+1
00DC7D  1  A5 76                lda     RESULT+1
00DC7F  1  85 AE                sta     FAC+2
00DC81  1  A5 77                lda     RESULT+2
00DC83  1  85 AF                sta     FAC+3
00DC85  1  4C 12 DA             jmp     NORMALIZE_FAC2
00DC88  1               ; ----------------------------------------------------------------------------
00DC88  1               ; UNPACK (Y,A) INTO FAC
00DC88  1               ; ----------------------------------------------------------------------------
00DC88  1               LOAD_FAC_FROM_YA:
00DC88  1  85 71                sta     INDEX
00DC8A  1  84 72                sty     INDEX+1
00DC8C  1  A0 03                ldy     #MANTISSA_BYTES
00DC8E  1  B1 71                lda     (INDEX),y
00DC90  1  85 AF                sta     FAC+3
00DC92  1  88                   dey
00DC93  1  B1 71                lda     (INDEX),y
00DC95  1  85 AE                sta     FAC+2
00DC97  1  88                   dey
00DC98  1  B1 71                lda     (INDEX),y
00DC9A  1  85 B0                sta     FACSIGN
00DC9C  1  09 80                ora     #$80
00DC9E  1  85 AD                sta     FAC+1
00DCA0  1  88                   dey
00DCA1  1  B1 71                lda     (INDEX),y
00DCA3  1  85 AC                sta     FAC
00DCA5  1  84 B9                sty     FACEXTENSION
00DCA7  1  60                   rts
00DCA8  1               ; ----------------------------------------------------------------------------
00DCA8  1               ; ROUND FAC, STORE IN TEMP2
00DCA8  1               ; ----------------------------------------------------------------------------
00DCA8  1               STORE_FAC_IN_TEMP2_ROUNDED:
00DCA8  1  A2 A8                ldx     #TEMP2
00DCAA  1  2C                   .byte   $2C
00DCAB  1               ; ----------------------------------------------------------------------------
00DCAB  1               ; ROUND FAC, STORE IN TEMP1
00DCAB  1               ; ----------------------------------------------------------------------------
00DCAB  1               STORE_FAC_IN_TEMP1_ROUNDED:
00DCAB  1  A2 A4                ldx     #TEMP1X
00DCAD  1  A0 00                ldy     #$00
00DCAF  1  F0 04                beq     STORE_FAC_AT_YX_ROUNDED
00DCB1  1               ; ----------------------------------------------------------------------------
00DCB1  1               ; ROUND FAC, AND STORE WHERE FORPNT POINTS
00DCB1  1               ; ----------------------------------------------------------------------------
00DCB1  1               SETFOR:
00DCB1  1  A6 97                ldx     FORPNT
00DCB3  1  A4 98                ldy     FORPNT+1
00DCB5  1               ; ----------------------------------------------------------------------------
00DCB5  1               ; ROUND FAC, AND STORE AT (Y,X)
00DCB5  1               ; ----------------------------------------------------------------------------
00DCB5  1               STORE_FAC_AT_YX_ROUNDED:
00DCB5  1  20 F7 DC             jsr     ROUND_FAC
00DCB8  1  86 71                stx     INDEX
00DCBA  1  84 72                sty     INDEX+1
00DCBC  1  A0 03                ldy     #MANTISSA_BYTES
00DCBE  1  A5 AF                lda     FAC+3
00DCC0  1  91 71                sta     (INDEX),y
00DCC2  1  88                   dey
00DCC3  1  A5 AE                lda     FAC+2
00DCC5  1  91 71                sta     (INDEX),y
00DCC7  1  88                   dey
00DCC8  1  A5 B0                lda     FACSIGN
00DCCA  1  09 7F                ora     #$7F
00DCCC  1  25 AD                and     FAC+1
00DCCE  1  91 71                sta     (INDEX),y
00DCD0  1  88                   dey
00DCD1  1  A5 AC                lda     FAC
00DCD3  1  91 71                sta     (INDEX),y
00DCD5  1  84 B9                sty     FACEXTENSION
00DCD7  1  60                   rts
00DCD8  1               ; ----------------------------------------------------------------------------
00DCD8  1               ; COPY ARG INTO FAC
00DCD8  1               ; ----------------------------------------------------------------------------
00DCD8  1               COPY_ARG_TO_FAC:
00DCD8  1  A5 B7                lda     ARGSIGN
00DCDA  1               MFA:
00DCDA  1  85 B0                sta     FACSIGN
00DCDC  1  A2 04                ldx     #BYTES_FP
00DCDE  1               L3A7A:
00DCDE  1  B5 B2                lda     SHIFTSIGNEXT,x
00DCE0  1  95 AB                sta     EXPSGN,x
00DCE2  1  CA                   dex
00DCE3  1  D0 F9                bne     L3A7A
00DCE5  1  86 B9                stx     FACEXTENSION
00DCE7  1  60                   rts
00DCE8  1               ; ----------------------------------------------------------------------------
00DCE8  1               ; ROUND FAC AND COPY TO ARG
00DCE8  1               ; ----------------------------------------------------------------------------
00DCE8  1               COPY_FAC_TO_ARG_ROUNDED:
00DCE8  1  20 F7 DC             jsr     ROUND_FAC
00DCEB  1               MAF:
00DCEB  1  A2 05                ldx     #BYTES_FP+1
00DCED  1               L3A89:
00DCED  1  B5 AB                lda     EXPSGN,x
00DCEF  1  95 B2                sta     SHIFTSIGNEXT,x
00DCF1  1  CA                   dex
00DCF2  1  D0 F9                bne     L3A89
00DCF4  1  86 B9                stx     FACEXTENSION
00DCF6  1               RTS14:
00DCF6  1  60                   rts
00DCF7  1               ; ----------------------------------------------------------------------------
00DCF7  1               ; ROUND FAC USING EXTENSION BYTE
00DCF7  1               ; ----------------------------------------------------------------------------
00DCF7  1               ROUND_FAC:
00DCF7  1  A5 AC                lda     FAC
00DCF9  1  F0 FB                beq     RTS14
00DCFB  1  06 B9                asl     FACEXTENSION
00DCFD  1  90 F7                bcc     RTS14
00DCFF  1               ; ----------------------------------------------------------------------------
00DCFF  1               ; INCREMENT MANTISSA AND RE-NORMALIZE IF CARRY
00DCFF  1               ; ----------------------------------------------------------------------------
00DCFF  1               INCREMENT_MANTISSA:
00DCFF  1  20 96 DA             jsr     INCREMENT_FAC_MANTISSA
00DD02  1  D0 F2                bne     RTS14
00DD04  1  4C 67 DA             jmp     NORMALIZE_FAC6
00DD07  1               ; ----------------------------------------------------------------------------
00DD07  1               ; TEST FAC FOR ZERO AND SIGN
00DD07  1               ;
00DD07  1               ; FAC > 0, RETURN +1
00DD07  1               ; FAC = 0, RETURN  0
00DD07  1               ; FAC < 0, RETURN -1
00DD07  1               ; ----------------------------------------------------------------------------
00DD07  1               SIGN:
00DD07  1  A5 AC                lda     FAC
00DD09  1  F0 09                beq     RTS15
00DD0B  1               L3AA7:
00DD0B  1  A5 B0                lda     FACSIGN
00DD0D  1               SIGN2:
00DD0D  1  2A                   rol     a
00DD0E  1  A9 FF                lda     #$FF
00DD10  1  B0 02                bcs     RTS15
00DD12  1  A9 01                lda     #$01
00DD14  1               RTS15:
00DD14  1  60                   rts
00DD15  1               ; ----------------------------------------------------------------------------
00DD15  1               ; "SGN" FUNCTION
00DD15  1               ; ----------------------------------------------------------------------------
00DD15  1               SGN:
00DD15  1  20 07 DD             jsr     SIGN
00DD18  1               ; ----------------------------------------------------------------------------
00DD18  1               ; CONVERT (A) INTO FAC, AS SIGNED VALUE -128 TO +127
00DD18  1               ; ----------------------------------------------------------------------------
00DD18  1               FLOAT:
00DD18  1  85 AD                sta     FAC+1
00DD1A  1  A9 00                lda     #$00
00DD1C  1  85 AE                sta     FAC+2
00DD1E  1  A2 88                ldx     #$88
00DD20  1               ; ----------------------------------------------------------------------------
00DD20  1               ; FLOAT UNSIGNED VALUE IN FAC+1,2
00DD20  1               ; (X) = EXPONENT
00DD20  1               ; ----------------------------------------------------------------------------
00DD20  1               FLOAT1:
00DD20  1  A5 AD                lda     FAC+1
00DD22  1  49 FF                eor     #$FF
00DD24  1  2A                   rol     a
00DD25  1               ; ----------------------------------------------------------------------------
00DD25  1               ; FLOAT UNSIGNED VALUE IN FAC+1,2
00DD25  1               ; (X) = EXPONENT
00DD25  1               ; C=0 TO MAKE VALUE NEGATIVE
00DD25  1               ; C=1 TO MAKE VALUE POSITIVE
00DD25  1               ; ----------------------------------------------------------------------------
00DD25  1               FLOAT2:
00DD25  1  A9 00                lda     #$00
00DD27  1  85 AF                sta     FAC+3
00DD29  1  86 AC                stx     FAC
00DD2B  1  85 B9                sta     FACEXTENSION
00DD2D  1  85 B0                sta     FACSIGN
00DD2F  1  4C 0D DA             jmp     NORMALIZE_FAC1
00DD32  1               ; ----------------------------------------------------------------------------
00DD32  1               ; "ABS" FUNCTION
00DD32  1               ; ----------------------------------------------------------------------------
00DD32  1               ABS:
00DD32  1  46 B0                lsr     FACSIGN
00DD34  1  60                   rts
00DD35  1               ; ----------------------------------------------------------------------------
00DD35  1               ; COMPARE FAC WITH PACKED # AT (Y,A)
00DD35  1               ; RETURN A=1,0,-1 AS (Y,A) IS <,=,> FAC
00DD35  1               ; ----------------------------------------------------------------------------
00DD35  1               FCOMP:
00DD35  1  85 73                sta     DEST
00DD37  1               ; ----------------------------------------------------------------------------
00DD37  1               ; SPECIAL ENTRY FROM "NEXT" PROCESSOR
00DD37  1               ; "DEST" ALREADY SET UP
00DD37  1               ; ----------------------------------------------------------------------------
00DD37  1               FCOMP2:
00DD37  1  84 74                sty     DEST+1
00DD39  1  A0 00                ldy     #$00
00DD3B  1  B1 73                lda     (DEST),y
00DD3D  1  C8                   iny
00DD3E  1  AA                   tax
00DD3F  1  F0 C6                beq     SIGN
00DD41  1  B1 73                lda     (DEST),y
00DD43  1  45 B0                eor     FACSIGN
00DD45  1  30 C4                bmi     L3AA7
00DD47  1  E4 AC                cpx     FAC
00DD49  1  D0 1A                bne     L3B0A
00DD4B  1  B1 73                lda     (DEST),y
00DD4D  1  09 80                ora     #$80
00DD4F  1  C5 AD                cmp     FAC+1
00DD51  1  D0 12                bne     L3B0A
00DD53  1  C8                   iny
00DD54  1  B1 73                lda     (DEST),y
00DD56  1  C5 AE                cmp     FAC+2
00DD58  1  D0 0B                bne     L3B0A
00DD5A  1  C8                   iny
00DD5B  1  A9 7F                lda     #$7F
00DD5D  1  C5 B9                cmp     FACEXTENSION
00DD5F  1  B1 73                lda     (DEST),y
00DD61  1  E5 AF                sbc     FAC_LAST
00DD63  1  F0 28                beq     L3B32
00DD65  1               L3B0A:
00DD65  1  A5 B0                lda     FACSIGN
00DD67  1  90 02                bcc     L3B10
00DD69  1  49 FF                eor     #$FF
00DD6B  1               L3B10:
00DD6B  1  4C 0D DD             jmp     SIGN2
00DD6E  1               ; ----------------------------------------------------------------------------
00DD6E  1               ; QUICK INTEGER FUNCTION
00DD6E  1               ;
00DD6E  1               ; CONVERTS FP VALUE IN FAC TO INTEGER VALUE
00DD6E  1               ; IN FAC+1...FAC+4, BY SHIFTING RIGHT WITH SIGN
00DD6E  1               ; EXTENSION UNTIL FRACTIONAL BITS ARE OUT.
00DD6E  1               ;
00DD6E  1               ; THIS SUBROUTINE ASSUMES THE EXPONENT < 32.
00DD6E  1               ; ----------------------------------------------------------------------------
00DD6E  1               QINT:
00DD6E  1  A5 AC                lda     FAC
00DD70  1  F0 4A                beq     QINT3
00DD72  1  38                   sec
00DD73  1  E9 98                sbc     #120+8*BYTES_FP
00DD75  1  24 B0                bit     FACSIGN
00DD77  1  10 09                bpl     L3B27
00DD79  1  AA                   tax
00DD7A  1  A9 FF                lda     #$FF
00DD7C  1  85 B2                sta     SHIFTSIGNEXT
00DD7E  1  20 7A DA             jsr     COMPLEMENT_FAC_MANTISSA
00DD81  1  8A                   txa
00DD82  1               L3B27:
00DD82  1  A2 AC                ldx     #FAC
00DD84  1  C9 F9                cmp     #$F9
00DD86  1  10 06                bpl     QINT2
00DD88  1  20 B8 DA             jsr     SHIFT_RIGHT
00DD8B  1  84 B2                sty     SHIFTSIGNEXT
00DD8D  1               L3B32:
00DD8D  1  60                   rts
00DD8E  1               QINT2:
00DD8E  1  A8                   tay
00DD8F  1  A5 B0                lda     FACSIGN
00DD91  1  29 80                and     #$80
00DD93  1  46 AD                lsr     FAC+1
00DD95  1  05 AD                ora     FAC+1
00DD97  1  85 AD                sta     FAC+1
00DD99  1  20 CF DA             jsr     SHIFT_RIGHT4
00DD9C  1  84 B2                sty     SHIFTSIGNEXT
00DD9E  1  60                   rts
00DD9F  1               ; ----------------------------------------------------------------------------
00DD9F  1               ; "INT" FUNCTION
00DD9F  1               ;
00DD9F  1               ; USES QINT TO CONVERT (FAC) TO INTEGER FORM,
00DD9F  1               ; AND THEN REFLOATS THE INTEGER.
00DD9F  1               ; ----------------------------------------------------------------------------
00DD9F  1               INT:
00DD9F  1  A5 AC                lda     FAC
00DDA1  1  C9 98                cmp     #120+8*BYTES_FP
00DDA3  1  B0 1E                bcs     RTS17
00DDA5  1  20 6E DD             jsr     QINT
00DDA8  1  84 B9                sty     FACEXTENSION
00DDAA  1  A5 B0                lda     FACSIGN
00DDAC  1  84 B0                sty     FACSIGN
00DDAE  1  49 80                eor     #$80
00DDB0  1  2A                   rol     a
00DDB1  1  A9 98                lda     #120+8*BYTES_FP
00DDB3  1  85 AC                sta     FAC
00DDB5  1  A5 AF                lda     FAC_LAST
00DDB7  1  85 5B                sta     CHARAC
00DDB9  1  4C 0D DA             jmp     NORMALIZE_FAC1
00DDBC  1               QINT3:
00DDBC  1  85 AD                sta     FAC+1
00DDBE  1  85 AE                sta     FAC+2
00DDC0  1  85 AF                sta     FAC+3
00DDC2  1  A8                   tay
00DDC3  1               RTS17:
00DDC3  1  60                   rts
00DDC4  1               ; ----------------------------------------------------------------------------
00DDC4  1               ; CONVERT STRING TO FP VALUE IN FAC
00DDC4  1               ;
00DDC4  1               ; STRING POINTED TO BY TXTPTR
00DDC4  1               ; FIRST CHAR ALREADY SCANNED BY CHRGET
00DDC4  1               ; (A) = FIRST CHAR, C=0 IF DIGIT.
00DDC4  1               ; ----------------------------------------------------------------------------
00DDC4  1               FIN:
00DDC4  1  A0 00                ldy     #$00
00DDC6  1  A2 09                ldx     #SERLEN-TMPEXP
00DDC8  1               L3B6F:
00DDC8  1  94 A8                sty     TMPEXP,x
00DDCA  1  CA                   dex
00DDCB  1  10 FB                bpl     L3B6F
00DDCD  1  90 0F                bcc     FIN2
00DDCF  1  C9 2D                cmp     #$2D
00DDD1  1  D0 04                bne     L3B7E
00DDD3  1  86 B1                stx     SERLEN
00DDD5  1  F0 04                beq     FIN1
00DDD7  1               L3B7E:
00DDD7  1  C9 2B                cmp     #$2B
00DDD9  1  D0 05                bne     FIN3
00DDDB  1               FIN1:
00DDDB  1  20 D6 00             jsr     CHRGET
00DDDE  1               FIN2:
00DDDE  1  90 5B                bcc     FIN9
00DDE0  1               FIN3:
00DDE0  1  C9 2E                cmp     #$2E
00DDE2  1  F0 2E                beq     FIN10
00DDE4  1  C9 45                cmp     #$45
00DDE6  1  D0 30                bne     FIN7
00DDE8  1  20 D6 00             jsr     CHRGET
00DDEB  1  90 17                bcc     FIN5
00DDED  1  C9 A4                cmp     #TOKEN_MINUS
00DDEF  1  F0 0E                beq     L3BA6
00DDF1  1  C9 2D                cmp     #$2D
00DDF3  1  F0 0A                beq     L3BA6
00DDF5  1  C9 A3                cmp     #TOKEN_PLUS
00DDF7  1  F0 08                beq     FIN4
00DDF9  1  C9 2B                cmp     #$2B
00DDFB  1  F0 04                beq     FIN4
00DDFD  1  D0 07                bne     FIN6
00DDFF  1               L3BA6:
00DDFF  1  66 AB                ror     EXPSGN
00DE01  1               FIN4:
00DE01  1  20 D6 00             jsr     CHRGET
00DE04  1               FIN5:
00DE04  1  90 5C                bcc     GETEXP
00DE06  1               FIN6:
00DE06  1  24 AB                bit     EXPSGN
00DE08  1  10 0E                bpl     FIN7
00DE0A  1  A9 00                lda     #$00
00DE0C  1  38                   sec
00DE0D  1  E5 A9                sbc     EXPON
00DE0F  1  4C 1A DE             jmp     FIN8
00DE12  1               ; ----------------------------------------------------------------------------
00DE12  1               ; FOUND A DECIMAL POINT
00DE12  1               ; ----------------------------------------------------------------------------
00DE12  1               FIN10:
00DE12  1  66 AA                ror     LOWTR
00DE14  1  24 AA                bit     LOWTR
00DE16  1  50 C3                bvc     FIN1
00DE18  1               ; ----------------------------------------------------------------------------
00DE18  1               ; NUMBER TERMINATED, ADJUST EXPONENT NOW
00DE18  1               ; ----------------------------------------------------------------------------
00DE18  1               FIN7:
00DE18  1  A5 A9                lda     EXPON
00DE1A  1               FIN8:
00DE1A  1  38                   sec
00DE1B  1  E5 A8                sbc     INDX
00DE1D  1  85 A9                sta     EXPON
00DE1F  1  F0 12                beq     L3BEE
00DE21  1  10 09                bpl     L3BE7
00DE23  1               L3BDE:
00DE23  1  20 F6 DB             jsr     DIV10
00DE26  1  E6 A9                inc     EXPON
00DE28  1  D0 F9                bne     L3BDE
00DE2A  1  F0 07                beq     L3BEE
00DE2C  1               L3BE7:
00DE2C  1  20 DB DB             jsr     MUL10
00DE2F  1  C6 A9                dec     EXPON
00DE31  1  D0 F9                bne     L3BE7
00DE33  1               L3BEE:
00DE33  1  A5 B1                lda     SERLEN
00DE35  1  30 01                bmi     L3BF3
00DE37  1  60                   rts
00DE38  1               L3BF3:
00DE38  1  4C 2C E0             jmp     NEGOP
00DE3B  1               ; ----------------------------------------------------------------------------
00DE3B  1               ; ACCUMULATE A DIGIT INTO FAC
00DE3B  1               ; ----------------------------------------------------------------------------
00DE3B  1               FIN9:
00DE3B  1  48                   pha
00DE3C  1  24 AA                bit     LOWTR
00DE3E  1  10 02                bpl     L3BFD
00DE40  1  E6 A8                inc     INDX
00DE42  1               L3BFD:
00DE42  1  20 DB DB             jsr     MUL10
00DE45  1  68                   pla
00DE46  1  38                   sec
00DE47  1  E9 30                sbc     #$30
00DE49  1  20 4F DE             jsr     ADDACC
00DE4C  1  4C DB DD             jmp     FIN1
00DE4F  1               ; ----------------------------------------------------------------------------
00DE4F  1               ; ADD (A) TO FAC
00DE4F  1               ; ----------------------------------------------------------------------------
00DE4F  1               ADDACC:
00DE4F  1  48                   pha
00DE50  1  20 E8 DC             jsr     COPY_FAC_TO_ARG_ROUNDED
00DE53  1  68                   pla
00DE54  1  20 18 DD             jsr     FLOAT
00DE57  1  A5 B7                lda     ARGSIGN
00DE59  1  45 B0                eor     FACSIGN
00DE5B  1  85 B8                sta     SGNCPR
00DE5D  1  A6 AC                ldx     FAC
00DE5F  1  4C AC D9             jmp     FADDT
00DE62  1               ; ----------------------------------------------------------------------------
00DE62  1               ; ACCUMULATE DIGIT OF EXPONENT
00DE62  1               ; ----------------------------------------------------------------------------
00DE62  1               GETEXP:
00DE62  1  A5 A9                lda     EXPON
00DE64  1  C9 0A                cmp     #MAX_EXPON
00DE66  1  90 09                bcc     L3C2C
00DE68  1  A9 64                lda     #$64
00DE6A  1  24 AB                bit     EXPSGN
00DE6C  1  30 11                bmi     L3C3A
00DE6E  1  4C A1 DA             jmp     OVERFLOW
00DE71  1               L3C2C:
00DE71  1  0A                   asl     a
00DE72  1  0A                   asl     a
00DE73  1  18                   clc
00DE74  1  65 A9                adc     EXPON
00DE76  1  0A                   asl     a
00DE77  1  18                   clc
00DE78  1  A0 00                ldy     #$00
00DE7A  1  71 DD                adc     (TXTPTR),y
00DE7C  1  38                   sec
00DE7D  1  E9 30                sbc     #$30
00DE7F  1               L3C3A:
00DE7F  1  85 A9                sta     EXPON
00DE81  1  4C 01 DE             jmp     FIN4
00DE84  1               ; ----------------------------------------------------------------------------
00DE84  1               ; these values are /1000 of what the labels say
00DE84  1               CON_99999999_9:
00DE84  1  91 43 4F F8          .byte   $91,$43,$4F,$F8
00DE88  1               CON_999999999:
00DE88  1  94 74 23 F7  		.byte   $94,$74,$23,$F7
00DE8C  1               CON_BILLION:
00DE8C  1  94 74 24 00          .byte   $94,$74,$24,$00
00DE90  1               ; ----------------------------------------------------------------------------
00DE90  1               ; PRINT "IN <LINE #>"
00DE90  1               ; ----------------------------------------------------------------------------
00DE90  1               INPRT:
00DE90  1  A9 8D                lda     #<QT_IN
00DE92  1  A0 C1                ldy     #>QT_IN
00DE94  1  20 A8 DE             jsr     GOSTROUT2
00DE97  1  A5 88                lda     CURLIN+1
00DE99  1  A6 87                ldx     CURLIN
00DE9B  1               ; ----------------------------------------------------------------------------
00DE9B  1               ; PRINT A,X AS DECIMAL INTEGER
00DE9B  1               ; ----------------------------------------------------------------------------
00DE9B  1               LINPRT:
00DE9B  1  85 AD                sta     FAC+1
00DE9D  1  86 AE                stx     FAC+2
00DE9F  1  A2 90                ldx     #$90
00DEA1  1  38                   sec
00DEA2  1  20 25 DD             jsr     FLOAT2
00DEA5  1  20 AB DE             jsr     FOUT
00DEA8  1               GOSTROUT2:
00DEA8  1  4C 00 CE             jmp     STROUT
00DEAB  1               ; ----------------------------------------------------------------------------
00DEAB  1               ; CONVERT (FAC) TO STRING STARTING AT STACK
00DEAB  1               ; RETURN WITH (Y,A) POINTING AT STRING
00DEAB  1               ; ----------------------------------------------------------------------------
00DEAB  1               FOUT:
00DEAB  1  A0 01                ldy     #$01
00DEAD  1               ; ----------------------------------------------------------------------------
00DEAD  1               ; "STR$" FUNCTION ENTERS HERE, WITH (Y)=0
00DEAD  1               ; SO THAT RESULT STRING STARTS AT STACK-1
00DEAD  1               ; (THIS IS USED AS A FLAG)
00DEAD  1               ; ----------------------------------------------------------------------------
00DEAD  1               FOUT1:
00DEAD  1  A9 20                lda     #$20
00DEAF  1  24 B0                bit     FACSIGN
00DEB1  1  10 02                bpl     L3C73
00DEB3  1  A9 2D                lda     #$2D
00DEB5  1               L3C73:
00DEB5  1  99 FF 00             sta     $FF,y
00DEB8  1  85 B0                sta     FACSIGN
00DEBA  1  84 BA                sty     STRNG2
00DEBC  1  C8                   iny
00DEBD  1  A9 30                lda     #$30
00DEBF  1  A6 AC                ldx     FAC
00DEC1  1  D0 03                bne     L3C84
00DEC3  1  4C C6 DF             jmp     FOUT4
00DEC6  1               L3C84:
00DEC6  1  A9 00                lda     #$00
00DEC8  1  E0 80                cpx     #$80
00DECA  1  F0 02                beq     L3C8C
00DECC  1  B0 09                bcs     L3C95
00DECE  1               L3C8C:
00DECE  1  A9 8C                lda     #<CON_BILLION
00DED0  1  A0 DE                ldy     #>CON_BILLION
00DED2  1  20 38 DB             jsr     FMULT
00DED5  1  A9 FA                lda     #-6+256 ; exponent adjustment
00DED7  1               L3C95:
00DED7  1  85 A8                sta     INDX
00DED9  1               ; ----------------------------------------------------------------------------
00DED9  1               ; ADJUST UNTIL 1E8 <= (FAC) <1E9
00DED9  1               ; ----------------------------------------------------------------------------
00DED9  1               L3C97:
00DED9  1  A9 88                lda     #<CON_999999999
00DEDB  1  A0 DE                ldy     #>CON_999999999
00DEDD  1  20 35 DD             jsr     FCOMP
00DEE0  1  F0 1E                beq     L3CBE
00DEE2  1  10 12                bpl     L3CB4
00DEE4  1               L3CA2:
00DEE4  1  A9 84                lda     #<CON_99999999_9
00DEE6  1  A0 DE                ldy     #>CON_99999999_9
00DEE8  1  20 35 DD             jsr     FCOMP
00DEEB  1  F0 02                beq     L3CAD
00DEED  1  10 0E                bpl     L3CBB
00DEEF  1               L3CAD:
00DEEF  1  20 DB DB             jsr     MUL10
00DEF2  1  C6 A8                dec     INDX
00DEF4  1  D0 EE                bne     L3CA2
00DEF6  1               L3CB4:
00DEF6  1  20 F6 DB             jsr     DIV10
00DEF9  1  E6 A8                inc     INDX
00DEFB  1  D0 DC                bne     L3C97
00DEFD  1               L3CBB:
00DEFD  1  20 8B D9             jsr     FADDH
00DF00  1               L3CBE:
00DF00  1  20 6E DD             jsr     QINT
00DF03  1               ; ----------------------------------------------------------------------------
00DF03  1               ; FAC+1...FAC+4 IS NOW IN INTEGER FORM
00DF03  1               ; WITH POWER OF TEN ADJUSTMENT IN TMPEXP
00DF03  1               ;
00DF03  1               ; IF -10 < TMPEXP > 1, PRINT IN DECIMAL FORM
00DF03  1               ; OTHERWISE, PRINT IN EXPONENTIAL FORM
00DF03  1               ; ----------------------------------------------------------------------------
00DF03  1  A2 01                ldx     #$01
00DF05  1  A5 A8                lda     INDX
00DF07  1  18                   clc
00DF08  1  69 07                adc     #3*BYTES_FP-5
00DF0A  1  30 09                bmi     L3CD3
00DF0C  1  C9 08                cmp     #3*BYTES_FP-4
00DF0E  1  B0 06                bcs     L3CD4
00DF10  1  69 FF                adc     #$FF
00DF12  1  AA                   tax
00DF13  1  A9 02                lda     #$02
00DF15  1               L3CD3:
00DF15  1  38                   sec
00DF16  1               L3CD4:
00DF16  1  E9 02                sbc     #$02
00DF18  1  85 A9                sta     EXPON
00DF1A  1  86 A8                stx     INDX
00DF1C  1  8A                   txa
00DF1D  1  F0 02                beq     L3CDF
00DF1F  1  10 13                bpl     L3CF2
00DF21  1               L3CDF:
00DF21  1  A4 BA                ldy     STRNG2
00DF23  1  A9 2E                lda     #$2E
00DF25  1  C8                   iny
00DF26  1  99 FF 00             sta     $FF,y
00DF29  1  8A                   txa
00DF2A  1  F0 06                beq     L3CF0
00DF2C  1  A9 30                lda     #$30
00DF2E  1  C8                   iny
00DF2F  1  99 FF 00             sta     $FF,y
00DF32  1               L3CF0:
00DF32  1  84 BA                sty     STRNG2
00DF34  1               ; ----------------------------------------------------------------------------
00DF34  1               ; NOW DIVIDE BY POWERS OF TEN TO GET SUCCESSIVE DIGITS
00DF34  1               ; ----------------------------------------------------------------------------
00DF34  1               L3CF2:
00DF34  1  A0 00                ldy     #$00
00DF36  1  A2 80                ldx     #$80
00DF38  1               L3CF6:
00DF38  1  A5 AF                lda     FAC_LAST
00DF3A  1  18                   clc
00DF3B  1  79 D9 DF             adc     DECTBL+2,y
00DF3E  1  85 AF                sta     FAC+3
00DF40  1  A5 AE                lda     FAC+2
00DF42  1  79 D8 DF             adc     DECTBL+1,y
00DF45  1  85 AE                sta     FAC+2
00DF47  1  A5 AD                lda     FAC+1
00DF49  1  79 D7 DF             adc     DECTBL,y
00DF4C  1  85 AD                sta     FAC+1
00DF4E  1  E8                   inx
00DF4F  1  B0 04                bcs     L3D1A
00DF51  1  10 E5                bpl     L3CF6
00DF53  1  30 02                bmi     L3D1C
00DF55  1               L3D1A:
00DF55  1  30 E1                bmi     L3CF6
00DF57  1               L3D1C:
00DF57  1  8A                   txa
00DF58  1  90 04                bcc     L3D23
00DF5A  1  49 FF                eor     #$FF
00DF5C  1  69 0A                adc     #$0A
00DF5E  1               L3D23:
00DF5E  1  69 2F                adc     #$2F
00DF60  1  C8                   iny
00DF61  1  C8                   iny
00DF62  1  C8                   iny
00DF63  1  84 95                sty     VARPNT
00DF65  1  A4 BA                ldy     STRNG2
00DF67  1  C8                   iny
00DF68  1  AA                   tax
00DF69  1  29 7F                and     #$7F
00DF6B  1  99 FF 00             sta     $FF,y
00DF6E  1  C6 A8                dec     INDX
00DF70  1  D0 06                bne     L3D3E
00DF72  1  A9 2E                lda     #$2E
00DF74  1  C8                   iny
00DF75  1  99 FF 00             sta     $FF,y
00DF78  1               L3D3E:
00DF78  1  84 BA                sty     STRNG2
00DF7A  1  A4 95                ldy     VARPNT
00DF7C  1  8A                   txa
00DF7D  1  49 FF                eor     #$FF
00DF7F  1  29 80                and     #$80
00DF81  1  AA                   tax
00DF82  1  C0 12                cpy     #DECTBL_END-DECTBL
00DF84  1  D0 B2                bne     L3CF6
00DF86  1               ; ----------------------------------------------------------------------------
00DF86  1               ; NINE DIGITS HAVE BEEN STORED IN STRING.  NOW LOOK
00DF86  1               ; BACK AND LOP OFF TRAILING ZEROES AND A TRAILING
00DF86  1               ; DECIMAL POINT.
00DF86  1               ; ----------------------------------------------------------------------------
00DF86  1  A4 BA                ldy     STRNG2
00DF88  1               L3D4E:
00DF88  1  B9 FF 00             lda     $FF,y
00DF8B  1  88                   dey
00DF8C  1  C9 30                cmp     #$30
00DF8E  1  F0 F8                beq     L3D4E
00DF90  1  C9 2E                cmp     #$2E
00DF92  1  F0 01                beq     L3D5B
00DF94  1  C8                   iny
00DF95  1               L3D5B:
00DF95  1  A9 2B                lda     #$2B
00DF97  1  A6 A9                ldx     EXPON
00DF99  1  F0 2E                beq     L3D8F
00DF9B  1  10 08                bpl     L3D6B
00DF9D  1  A9 00                lda     #$00
00DF9F  1  38                   sec
00DFA0  1  E5 A9                sbc     EXPON
00DFA2  1  AA                   tax
00DFA3  1  A9 2D                lda     #$2D
00DFA5  1               L3D6B:
00DFA5  1  99 01 01             sta     STACK+1,y
00DFA8  1  A9 45                lda     #$45
00DFAA  1  99 00 01             sta     STACK,y
00DFAD  1  8A                   txa
00DFAE  1  A2 2F                ldx     #$2F
00DFB0  1  38                   sec
00DFB1  1               L3D77:
00DFB1  1  E8                   inx
00DFB2  1  E9 0A                sbc     #$0A
00DFB4  1  B0 FB                bcs     L3D77
00DFB6  1  69 3A                adc     #$3A
00DFB8  1  99 03 01             sta     STACK+3,y
00DFBB  1  8A                   txa
00DFBC  1  99 02 01             sta     STACK+2,y
00DFBF  1  A9 00                lda     #$00
00DFC1  1  99 04 01             sta     STACK+4,y
00DFC4  1  F0 08                beq     L3D94
00DFC6  1               FOUT4:
00DFC6  1  99 FF 00             sta     $FF,y
00DFC9  1               L3D8F:
00DFC9  1  A9 00                lda     #$00
00DFCB  1  99 00 01             sta     STACK,y
00DFCE  1               L3D94:
00DFCE  1  A9 00                lda     #$00
00DFD0  1  A0 01                ldy     #$01
00DFD2  1  60                   rts
00DFD3  1               ; ----------------------------------------------------------------------------
00DFD3  1               CON_HALF:
00DFD3  1  80 00 00 00          .byte   $80,$00,$00,$00
00DFD7  1               ; ----------------------------------------------------------------------------
00DFD7  1               ; POWERS OF 10 FROM 1E8 DOWN TO 1,
00DFD7  1               ; AS 32-BIT INTEGERS, WITH ALTERNATING SIGNS
00DFD7  1               ; ----------------------------------------------------------------------------
00DFD7  1               DECTBL:
00DFD7  1  FE 79 60             .byte   $FE,$79,$60 ; -100000
00DFDA  1  00 27 10     		.byte	$00,$27,$10 ; 10000
00DFDD  1  FF FC 18     		.byte	$FF,$FC,$18 ; -1000
00DFE0  1  00 00 64     		.byte	$00,$00,$64 ; 100
00DFE3  1  FF FF F6     		.byte	$FF,$FF,$F6 ; -10
00DFE6  1  00 00 01     		.byte	$00,$00,$01 ; 1
00DFE9  1               DECTBL_END:
00DFE9  1               ; ----------------------------------------------------------------------------
00DFE9  1               ; "SQR" FUNCTION
00DFE9  1               ; ----------------------------------------------------------------------------
00DFE9  1               SQR:
00DFE9  1  20 E8 DC             jsr     COPY_FAC_TO_ARG_ROUNDED
00DFEC  1  A9 D3                lda     #<CON_HALF
00DFEE  1  A0 DF                ldy     #>CON_HALF
00DFF0  1  20 88 DC             jsr     LOAD_FAC_FROM_YA
00DFF3  1               ; ----------------------------------------------------------------------------
00DFF3  1               ; EXPONENTIATION OPERATION
00DFF3  1               ;
00DFF3  1               ; ARG ^ FAC  =  EXP( LOG(ARG) * FAC )
00DFF3  1               ; ----------------------------------------------------------------------------
00DFF3  1               FPWRT:
00DFF3  1  F0 63                beq     EXP
00DFF5  1  A5 B3                lda     ARG
00DFF7  1  D0 03                bne     L3DD5
00DFF9  1  4C 30 DA             jmp     STA_IN_FAC_SIGN_AND_EXP
00DFFC  1               L3DD5:
00DFFC  1  A2 9C                ldx     #TEMP3
00DFFE  1  A0 00                ldy     #$00
00E000  1  20 B5 DC             jsr     STORE_FAC_AT_YX_ROUNDED
00E003  1  A5 B7                lda     ARGSIGN
00E005  1  10 0F                bpl     L3DEF
00E007  1  20 9F DD             jsr     INT
00E00A  1  A9 9C                lda     #TEMP3
00E00C  1  A0 00                ldy     #$00
00E00E  1  20 35 DD             jsr     FCOMP
00E011  1  D0 03                bne     L3DEF
00E013  1  98                   tya
00E014  1  A4 5B                ldy     CHARAC
00E016  1               L3DEF:
00E016  1  20 DA DC             jsr     MFA
00E019  1  98                   tya
00E01A  1  48                   pha
00E01B  1  20 FA DA             jsr     LOG
00E01E  1  A9 9C                lda     #TEMP3
00E020  1  A0 00                ldy     #$00
00E022  1  20 38 DB             jsr     FMULT
00E025  1  20 58 E0             jsr     EXP
00E028  1  68                   pla
00E029  1  4A                   lsr     a
00E02A  1  90 0A                bcc     L3E0F
00E02C  1               ; ----------------------------------------------------------------------------
00E02C  1               ; NEGATE VALUE IN FAC
00E02C  1               ; ----------------------------------------------------------------------------
00E02C  1               NEGOP:
00E02C  1  A5 AC                lda     FAC
00E02E  1  F0 06                beq     L3E0F
00E030  1  A5 B0                lda     FACSIGN
00E032  1  49 FF                eor     #$FF
00E034  1  85 B0                sta     FACSIGN
00E036  1               L3E0F:
00E036  1  60                   rts
00E037  1               ; ----------------------------------------------------------------------------
00E037  1               CON_LOG_E:
00E037  1  81 38 AA 3B          .byte   $81,$38,$AA,$3B
00E03B  1               POLY_EXP:
00E03B  1  06           		.byte	$06
00E03C  1  74 63 90 8C  		.byte	$74,$63,$90,$8C
00E040  1  77 23 0C AB  		.byte	$77,$23,$0C,$AB
00E044  1  7A 1E 94 00  		.byte	$7A,$1E,$94,$00
00E048  1  7C 63 42 80  		.byte	$7C,$63,$42,$80
00E04C  1  7E 75 FE D0  		.byte	$7E,$75,$FE,$D0
00E050  1  80 31 72 15  		.byte	$80,$31,$72,$15
00E054  1  81 00 00 00  		.byte	$81,$00,$00,$00
00E058  1               ; ----------------------------------------------------------------------------
00E058  1               ; "EXP" FUNCTION
00E058  1               ;
00E058  1               ; FAC = E ^ FAC
00E058  1               ; ----------------------------------------------------------------------------
00E058  1               EXP:
00E058  1  A9 37                lda     #<CON_LOG_E
00E05A  1  A0 E0                ldy     #>CON_LOG_E
00E05C  1  20 38 DB             jsr     FMULT
00E05F  1  A5 B9                lda     FACEXTENSION
00E061  1  69 50                adc     #$50
00E063  1  90 03                bcc     L3E4E
00E065  1  20 FF DC             jsr     INCREMENT_MANTISSA
00E068  1               L3E4E:
00E068  1  85 A3                sta     ARGEXTENSION
00E06A  1  20 EB DC             jsr     MAF
00E06D  1  A5 AC                lda     FAC
00E06F  1  C9 88                cmp     #$88
00E071  1  90 03                bcc     L3E5C
00E073  1               L3E59:
00E073  1  20 CD DB             jsr     OUTOFRNG
00E076  1               L3E5C:
00E076  1  20 9F DD             jsr     INT
00E079  1  A5 5B                lda     CHARAC
00E07B  1  18                   clc
00E07C  1  69 81                adc     #$81
00E07E  1  F0 F3                beq     L3E59
00E080  1  38                   sec
00E081  1  E9 01                sbc     #$01
00E083  1  48                   pha
00E084  1  A2 04                ldx     #BYTES_FP
00E086  1               L3E6C:
00E086  1  B5 B3                lda     ARG,x
00E088  1  B4 AC                ldy     FAC,x
00E08A  1  95 AC                sta     FAC,x
00E08C  1  94 B3                sty     ARG,x
00E08E  1  CA                   dex
00E08F  1  10 F5                bpl     L3E6C
00E091  1  A5 A3                lda     ARGEXTENSION
00E093  1  85 B9                sta     FACEXTENSION
00E095  1  20 95 D9             jsr     FSUBT
00E098  1  20 2C E0             jsr     NEGOP
00E09B  1  A9 3B                lda     #<POLY_EXP
00E09D  1  A0 E0                ldy     #>POLY_EXP
00E09F  1  20 C1 E0             jsr     POLYNOMIAL
00E0A2  1  A9 00                lda     #$00
00E0A4  1  85 B8                sta     SGNCPR
00E0A6  1  68                   pla
00E0A7  1  20 B2 DB             jsr     ADD_EXPONENTS1
00E0AA  1  60                   rts
00E0AB  1               ; ----------------------------------------------------------------------------
00E0AB  1               ; ODD POLYNOMIAL SUBROUTINE
00E0AB  1               ;
00E0AB  1               ; F(X) = X * P(X^2)
00E0AB  1               ;
00E0AB  1               ; WHERE:  X IS VALUE IN FAC
00E0AB  1               ;	Y,A POINTS AT COEFFICIENT TABLE
00E0AB  1               ;	FIRST BYTE OF COEFF. TABLE IS N
00E0AB  1               ;	COEFFICIENTS FOLLOW, HIGHEST POWER FIRST
00E0AB  1               ;
00E0AB  1               ; P(X^2) COMPUTED USING NORMAL POLYNOMIAL SUBROUTINE
00E0AB  1               ; ----------------------------------------------------------------------------
00E0AB  1               POLYNOMIAL_ODD:
00E0AB  1  85 BA                sta     STRNG2
00E0AD  1  84 BB                sty     STRNG2+1
00E0AF  1  20 AB DC             jsr     STORE_FAC_IN_TEMP1_ROUNDED
00E0B2  1  A9 A4                lda     #TEMP1X
00E0B4  1  20 38 DB             jsr     FMULT
00E0B7  1  20 C5 E0             jsr     SERMAIN
00E0BA  1  A9 A4                lda     #TEMP1X
00E0BC  1  A0 00                ldy     #$00
00E0BE  1  4C 38 DB             jmp     FMULT
00E0C1  1               ; ----------------------------------------------------------------------------
00E0C1  1               ; NORMAL POLYNOMIAL SUBROUTINE
00E0C1  1               ;
00E0C1  1               ; P(X) = C(0)*X^N + C(1)*X^(N-1) + ... + C(N)
00E0C1  1               ;
00E0C1  1               ; WHERE:  X IS VALUE IN FAC
00E0C1  1               ;	Y,A POINTS AT COEFFICIENT TABLE
00E0C1  1               ;	FIRST BYTE OF COEFF. TABLE IS N
00E0C1  1               ;	COEFFICIENTS FOLLOW, HIGHEST POWER FIRST
00E0C1  1               ; ----------------------------------------------------------------------------
00E0C1  1               POLYNOMIAL:
00E0C1  1  85 BA                sta     STRNG2
00E0C3  1  84 BB                sty     STRNG2+1
00E0C5  1               SERMAIN:
00E0C5  1  20 A8 DC             jsr     STORE_FAC_IN_TEMP2_ROUNDED
00E0C8  1  B1 BA                lda     (STRNG2),y
00E0CA  1  85 B1                sta     SERLEN
00E0CC  1  A4 BA                ldy     STRNG2
00E0CE  1  C8                   iny
00E0CF  1  98                   tya
00E0D0  1  D0 02                bne     L3EBA
00E0D2  1  E6 BB                inc     STRNG2+1
00E0D4  1               L3EBA:
00E0D4  1  85 BA                sta     STRNG2
00E0D6  1  A4 BB                ldy     STRNG2+1
00E0D8  1               L3EBE:
00E0D8  1  20 38 DB             jsr     FMULT
00E0DB  1  A5 BA                lda     STRNG2
00E0DD  1  A4 BB                ldy     STRNG2+1
00E0DF  1  18                   clc
00E0E0  1  69 04                adc     #BYTES_FP
00E0E2  1  90 01                bcc     L3ECB
00E0E4  1  C8                   iny
00E0E5  1               L3ECB:
00E0E5  1  85 BA                sta     STRNG2
00E0E7  1  84 BB                sty     STRNG2+1
00E0E9  1  20 A9 D9             jsr     FADD
00E0EC  1  A9 A8                lda     #TEMP2
00E0EE  1  A0 00                ldy     #$00
00E0F0  1  C6 B1                dec     SERLEN
00E0F2  1  D0 E4                bne     L3EBE
00E0F4  1               RTS19:
00E0F4  1  60                   rts
00E0F5  1               ; ----------------------------------------------------------------------------
00E0F5  1               ; "RND" FUNCTION
00E0F5  1               ; ----------------------------------------------------------------------------
00E0F5  1               CONRND1:
00E0F5  1  98 35 44 7A          .byte   $98,$35,$44,$7A
00E0F9  1               CONRND2:
00E0F9  1  68 28 B1 46          .byte   $68,$28,$B1,$46
00E0FD  1               RND:
00E0FD  1  20 07 DD             jsr     SIGN
00E100  1  AA                   tax
00E101  1  30 18                bmi     L3F01
00E103  1  A9 EE                lda     #<RNDSEED
00E105  1  A0 00                ldy     #>RNDSEED
00E107  1  20 88 DC             jsr     LOAD_FAC_FROM_YA
00E10A  1  8A                   txa
00E10B  1  F0 E7                beq     RTS19
00E10D  1  A9 F5                lda     #<CONRND1
00E10F  1  A0 E0                ldy     #>CONRND1
00E111  1  20 38 DB             jsr     FMULT
00E114  1  A9 F9                lda     #<CONRND2
00E116  1  A0 E0                ldy     #>CONRND2
00E118  1  20 A9 D9             jsr     FADD
00E11B  1               L3F01:
00E11B  1  A6 AF                ldx     FAC_LAST
00E11D  1  A5 AD                lda     FAC+1
00E11F  1  85 AF                sta     FAC_LAST
00E121  1  86 AD                stx     FAC+1
00E123  1  A9 00                lda     #$00
00E125  1  85 B0                sta     FACSIGN
00E127  1  A5 AC                lda     FAC
00E129  1  85 B9                sta     FACEXTENSION
00E12B  1  A9 80                lda     #$80
00E12D  1  85 AC                sta     FAC
00E12F  1  20 12 DA             jsr     NORMALIZE_FAC2
00E132  1  A2 EE                ldx     #<RNDSEED
00E134  1  A0 00                ldy     #>RNDSEED
00E136  1               GOMOVMF:
00E136  1  4C B5 DC             jmp     STORE_FAC_AT_YX_ROUNDED
00E139  1               ; ----------------------------------------------------------------------------
00E139  1               ; "COS" FUNCTION
00E139  1               ; ----------------------------------------------------------------------------
00E139  1               COS:
00E139  1  A9 B5                lda     #<CON_PI_HALF
00E13B  1  A0 E1                ldy     #>CON_PI_HALF
00E13D  1  20 A9 D9             jsr     FADD
00E140  1               ; ----------------------------------------------------------------------------
00E140  1               ; "SIN" FUNCTION
00E140  1               ; ----------------------------------------------------------------------------
00E140  1               SIN:
00E140  1  20 E8 DC             jsr     COPY_FAC_TO_ARG_ROUNDED
00E143  1  A9 B9                lda     #<CON_PI_DOUB
00E145  1  A0 E1                ldy     #>CON_PI_DOUB
00E147  1  A6 B7                ldx     ARGSIGN
00E149  1  20 FF DB             jsr     DIV
00E14C  1  20 E8 DC             jsr     COPY_FAC_TO_ARG_ROUNDED
00E14F  1  20 9F DD             jsr     INT
00E152  1  A9 00                lda     #$00
00E154  1  85 B8                sta     STRNG1
00E156  1  20 95 D9             jsr     FSUBT
00E159  1               ; ----------------------------------------------------------------------------
00E159  1               ; (FAC) = ANGLE AS A FRACTION OF A FULL CIRCLE
00E159  1               ;
00E159  1               ; NOW FOLD THE RANGE INTO A QUARTER CIRCLE
00E159  1               ;
00E159  1               ; <<< THERE ARE MUCH SIMPLER WAYS TO DO THIS >>>
00E159  1               ; ----------------------------------------------------------------------------
00E159  1  A9 BD                lda     #<QUARTER
00E15B  1  A0 E1                ldy     #>QUARTER
00E15D  1  20 92 D9             jsr     FSUB
00E160  1  A5 B0                lda     FACSIGN
00E162  1  48                   pha
00E163  1  10 0D                bpl     SIN1
00E165  1  20 8B D9             jsr     FADDH
00E168  1  A5 B0                lda     FACSIGN
00E16A  1  30 09                bmi     L3F5B
00E16C  1  A5 63                lda     CPRMASK
00E16E  1  49 FF                eor     #$FF
00E170  1  85 63                sta     CPRMASK
00E172  1               ; ----------------------------------------------------------------------------
00E172  1               ; IF FALL THRU, RANGE IS 0...1/2
00E172  1               ; IF BRANCH HERE, RANGE IS 0...1/4
00E172  1               ; ----------------------------------------------------------------------------
00E172  1               SIN1:
00E172  1  20 2C E0             jsr     NEGOP
00E175  1               ; ----------------------------------------------------------------------------
00E175  1               ; IF FALL THRU, RANGE IS -1/2...0
00E175  1               ; IF BRANCH HERE, RANGE IS -1/4...0
00E175  1               ; ----------------------------------------------------------------------------
00E175  1               L3F5B:
00E175  1  A9 BD                lda     #<QUARTER
00E177  1  A0 E1                ldy     #>QUARTER
00E179  1  20 A9 D9             jsr     FADD
00E17C  1  68                   pla
00E17D  1  10 03                bpl     L3F68
00E17F  1  20 2C E0             jsr     NEGOP
00E182  1               L3F68:
00E182  1  A9 C1                lda     #<POLY_SIN
00E184  1  A0 E1                ldy     #>POLY_SIN
00E186  1  4C AB E0             jmp     POLYNOMIAL_ODD
00E189  1               ; ----------------------------------------------------------------------------
00E189  1               ; "TAN" FUNCTION
00E189  1               ;
00E189  1               ; COMPUTE TAN(X) = SIN(X) / COS(X)
00E189  1               ; ----------------------------------------------------------------------------
00E189  1               TAN:
00E189  1  20 AB DC             jsr     STORE_FAC_IN_TEMP1_ROUNDED
00E18C  1  A9 00                lda     #$00
00E18E  1  85 63                sta     CPRMASK
00E190  1  20 40 E1             jsr     SIN
00E193  1  A2 9C                ldx     #TEMP3
00E195  1  A0 00                ldy     #$00
00E197  1  20 36 E1             jsr     GOMOVMF
00E19A  1  A9 A4                lda     #TEMP1+(5-BYTES_FP)
00E19C  1  A0 00                ldy     #$00
00E19E  1  20 88 DC             jsr     LOAD_FAC_FROM_YA
00E1A1  1  A9 00                lda     #$00
00E1A3  1  85 B0                sta     FACSIGN
00E1A5  1  A5 63                lda     CPRMASK
00E1A7  1  20 B1 E1             jsr     TAN1
00E1AA  1  A9 9C                lda     #TEMP3
00E1AC  1  A0 00                ldy     #$00
00E1AE  1  4C 07 DC             jmp     FDIV
00E1B1  1               TAN1:
00E1B1  1  48                   pha
00E1B2  1  4C 72 E1             jmp     SIN1
00E1B5  1               ; ----------------------------------------------------------------------------
00E1B5  1               CON_PI_HALF:
00E1B5  1  81 49 0F DB          .byte   $81,$49,$0F,$DB
00E1B9  1               CON_PI_DOUB:
00E1B9  1  83 49 0F DB          .byte   $83,$49,$0F,$DB
00E1BD  1               QUARTER:
00E1BD  1  7F 00 00 00          .byte   $7F,$00,$00,$00
00E1C1  1               POLY_SIN:
00E1C1  1  04 86 1E D7          .byte   $04,$86,$1E,$D7,$FB,$87,$99,$26
00E1C5  1  FB 87 99 26  
00E1C9  1  65 87 23 34          .byte   $65,$87,$23,$34,$58,$86,$A5,$5D
00E1CD  1  58 86 A5 5D  
00E1D1  1  E1 83 49 0F          .byte   $E1,$83,$49,$0F,$DB
00E1D5  1  DB           
00E1D6  1               
00E1D6  1               ; ----------------------------------------------------------------------------
00E1D6  1               ; "ATN" FUNCTION
00E1D6  1               ; ----------------------------------------------------------------------------
00E1D6  1               ATN:
00E1D6  1  A5 B0                lda     FACSIGN
00E1D8  1  48                   pha
00E1D9  1  10 03                bpl     L3FDB
00E1DB  1  20 2C E0             jsr     NEGOP
00E1DE  1               L3FDB:
00E1DE  1  A5 AC                lda     FAC
00E1E0  1  48                   pha
00E1E1  1  C9 81                cmp     #$81
00E1E3  1  90 07                bcc     L3FE9
00E1E5  1  A9 D9                lda     #<CON_ONE
00E1E7  1  A0 DA                ldy     #>CON_ONE
00E1E9  1  20 07 DC             jsr     FDIV
00E1EC  1               ; ----------------------------------------------------------------------------
00E1EC  1               ; 0 <= X <= 1
00E1EC  1               ; 0 <= ATN(X) <= PI/8
00E1EC  1               ; ----------------------------------------------------------------------------
00E1EC  1               L3FE9:
00E1EC  1  A9 06                lda     #<POLY_ATN
00E1EE  1  A0 E2                ldy     #>POLY_ATN
00E1F0  1  20 AB E0             jsr     POLYNOMIAL_ODD
00E1F3  1  68                   pla
00E1F4  1  C9 81                cmp     #$81
00E1F6  1  90 07                bcc     L3FFC
00E1F8  1  A9 B5                lda     #<CON_PI_HALF
00E1FA  1  A0 E1                ldy     #>CON_PI_HALF
00E1FC  1  20 92 D9             jsr     FSUB
00E1FF  1               L3FFC:
00E1FF  1  68                   pla
00E200  1  10 03                bpl     L4002
00E202  1  4C 2C E0             jmp     NEGOP
00E205  1               L4002:
00E205  1  60                   rts
00E206  1               ; ----------------------------------------------------------------------------
00E206  1               POLY_ATN:
00E206  1  08                   .byte   $08
00E207  1  78 3A C5 37  		.byte	$78,$3A,$C5,$37
00E20B  1  7B 83 A2 5C  		.byte	$7B,$83,$A2,$5C
00E20F  1  7C 2E DD 4D  		.byte	$7C,$2E,$DD,$4D
00E213  1  7D 99 B0 1E  		.byte	$7D,$99,$B0,$1E
00E217  1  7D 59 ED 24  		.byte	$7D,$59,$ED,$24
00E21B  1  7E 91 72 00  		.byte	$7E,$91,$72,$00
00E21F  1  7E 4C B9 73  		.byte	$7E,$4C,$B9,$73
00E223  1  7F AA AA 53  		.byte	$7F,$AA,$AA,$53
00E227  1  81 00 00 00  		.byte	$81,$00,$00,$00
00E22B  1               GENERIC_CHRGET:
00E22B  1  E6 DD                inc     TXTPTR
00E22D  1  D0 02                bne     GENERIC_CHRGOT
00E22F  1  E6 DE                inc     TXTPTR+1
00E231  1               GENERIC_CHRGOT:
00E231  1               GENERIC_TXTPTR = GENERIC_CHRGOT + 1
00E231  1  AD 60 EA             lda     $EA60
00E234  1  C9 3A                cmp     #$3A
00E236  1  B0 0A                bcs     L4058
00E238  1               GENERIC_CHRGOT2:
00E238  1  C9 20                cmp     #$20
00E23A  1  F0 EF                beq     GENERIC_CHRGET
00E23C  1  38                   sec
00E23D  1  E9 30                sbc     #$30
00E23F  1  38                   sec
00E240  1  E9 D0                sbc     #$D0
00E242  1               L4058:
00E242  1  60                   rts
00E243  1               GENERIC_RNDSEED:
00E243  1               ; random number seed
00E243  1  80 4F C7 52          .byte   $80,$4F,$C7,$52
00E247  1               GENERIC_CHRGET_END:
00E247  1               ; ----------------------------------------------------------------------------
00E247  1               PR_WRITTEN_BY:
00E247  1  A9 8B                lda     #<QT_WRITTEN_BY
00E249  1  A0 E3                ldy     #>QT_WRITTEN_BY
00E24B  1  20 00 CE             jsr     STROUT
00E24E  1               COLD_START:
00E24E  1  A2 FF                ldx     #$FF
00E250  1  86 88                stx     CURLIN+1
00E252  1  9A                   txs
00E253  1  A9 4E                lda     #<COLD_START
00E255  1  A0 E2                ldy     #>COLD_START
00E257  1  85 08                sta     GORESTART+1
00E259  1  84 09                sty     GORESTART+2
00E25B  1  85 0B                sta     GOSTROUT+1
00E25D  1  84 0C                sty     GOSTROUT+2
00E25F  1  A9 42                lda     #<AYINT
00E261  1  A0 D3                ldy     #>AYINT
00E263  1  85 0D                sta     GOAYINT
00E265  1  84 0E                sty     GOAYINT+1
00E267  1  A9 FE                lda     #<GIVAYF
00E269  1  A0 D4                ldy     #>GIVAYF
00E26B  1  85 0F                sta     GOGIVEAYF
00E26D  1  84 10                sty     GOGIVEAYF+1
00E26F  1  A9 4C                lda     #$4C
00E271  1  85 07                sta     GORESTART
00E273  1  85 0A                sta     GOSTROUT
00E275  1  85 A1                sta     JMPADRS
00E277  1  85 0A                sta     USR
00E279  1  A9 C5                lda     #<IQERR
00E27B  1  A0 D3                ldy     #>IQERR
00E27D  1  85 0B                sta     USR+1
00E27F  1  84 0C                sty     USR+2
00E281  1  A9 48                lda     #WIDTH
00E283  1  85 0F                sta     Z17
00E285  1  A9 38                lda     #WIDTH2
00E287  1  85 10                sta     Z18
00E289  1  A2 1C                ldx     #GENERIC_CHRGET_END-GENERIC_CHRGET
00E28B  1               L4098:
00E28B  1  BD 2A E2             lda     GENERIC_CHRGET-1,x
00E28E  1  95 D5                sta     CHRGET-1,x
00E290  1  CA                   dex
00E291  1  D0 F8                bne     L4098
00E293  1  8A                   txa
00E294  1  85 B2                sta     SHIFTSIGNEXT
00E296  1  85 67                sta     LASTPT+1
00E298  1  85 0D                sta     Z15
00E29A  1  85 0E                sta     POSX
00E29C  1  48                   pha
00E29D  1  85 64                sta     Z14
00E29F  1  A9 03                lda     #$03
00E2A1  1  85 A0                sta     DSCLEN
00E2A3  1  A9 2C                lda     #$2C
00E2A5  1  85 12                sta     LINNUM+1
00E2A7  1  20 A9 CD             jsr     CRDO
00E2AA  1  A2 68                ldx     #TEMPST
00E2AC  1  86 65                stx     TEMPPT
00E2AE  1  A9 AF                lda     #<QT_MEMORY_SIZE
00E2B0  1  A0 E3                ldy     #>QT_MEMORY_SIZE
00E2B2  1  20 00 CE             jsr     STROUT
00E2B5  1  20 83 CE             jsr     NXIN
00E2B8  1  86 DD                stx     TXTPTR
00E2BA  1  84 DE                sty     TXTPTR+1
00E2BC  1  20 D6 00             jsr     CHRGET
00E2BF  1  C9 41                cmp     #$41
00E2C1  1  F0 84                beq     PR_WRITTEN_BY
00E2C3  1  A8                   tay
00E2C4  1  D0 21                bne     L40EE
00E2C6  1  A9 00                lda     #<RAMSTART2
00E2C8  1  A0 06                ldy     #>RAMSTART2
00E2CA  1  85 11                sta     LINNUM
00E2CC  1  84 12                sty     LINNUM+1
00E2CE  1  A0 00                ldy     #$00
00E2D0  1               L40D7:
00E2D0  1  E6 11                inc     LINNUM
00E2D2  1  D0 02                bne     L40DD
00E2D4  1  E6 12                inc     LINNUM+1
00E2D6  1               L40DD:
00E2D6  1  A9 92                lda     #$92 ; 10010010 / 00100100
00E2D8  1  91 11                sta     (LINNUM),y
00E2DA  1  D1 11                cmp     (LINNUM),y
00E2DC  1  D0 15                bne     L40FA
00E2DE  1  0A                   asl     a
00E2DF  1  91 11                sta     (LINNUM),y
00E2E1  1  D1 11                cmp     (LINNUM),y
00E2E3  1  F0 EB                beq     L40D7; old: faster
00E2E5  1  D0 0C                bne     L40FA
00E2E7  1               L40EE:
00E2E7  1  20 DC 00             jsr     CHRGOT
00E2EA  1  20 BC CC             jsr     LINGET
00E2ED  1  A8                   tay
00E2EE  1  F0 03                beq     L40FA
00E2F0  1  4C 49 D1             jmp     SYNERR
00E2F3  1               L40FA:
00E2F3  1  A5 11                lda     LINNUM
00E2F5  1  A4 12                ldy     LINNUM+1
00E2F7  1  85 85                sta     MEMSIZ
00E2F9  1  84 86                sty     MEMSIZ+1
00E2FB  1  85 81                sta     FRETOP
00E2FD  1  84 82                sty     FRETOP+1
00E2FF  1               L4106:
00E2FF  1  A9 BD                lda     #<QT_TERMINAL_WIDTH
00E301  1  A0 E3                ldy     #>QT_TERMINAL_WIDTH
00E303  1  20 00 CE             jsr     STROUT
00E306  1  20 83 CE             jsr     NXIN
00E309  1  86 DD                stx     TXTPTR
00E30B  1  84 DE                sty     TXTPTR+1
00E30D  1  20 D6 00             jsr     CHRGET
00E310  1  A8                   tay
00E311  1  F0 1C                beq     L4136
00E313  1  20 BC CC             jsr     LINGET
00E316  1  A5 12                lda     LINNUM+1
00E318  1  D0 E5                bne     L4106
00E31A  1  A5 11                lda     LINNUM
00E31C  1  C9 10                cmp     #$10
00E31E  1  90 DF                bcc     L4106
00E320  1  85 0F                sta     Z17
00E322  1               L4129:
00E322  1  E9 0E                sbc     #$0E
00E324  1  B0 FC                bcs     L4129
00E326  1  49 FF                eor     #$FF
00E328  1  E9 0C                sbc     #$0C
00E32A  1  18                   clc
00E32B  1  65 0F                adc     Z17
00E32D  1  85 10                sta     Z18
00E32F  1               L4136:
00E32F  1  A2 00                ldx     #<RAMSTART2
00E331  1  A0 06                ldy     #>RAMSTART2
00E333  1  86 79                stx     TXTTAB
00E335  1  84 7A                sty     TXTTAB+1
00E337  1  A0 00                ldy     #$00
00E339  1  98                   tya
00E33A  1  91 79                sta     (TXTTAB),y
00E33C  1  E6 79                inc     TXTTAB
00E33E  1  D0 02                bne     L4192
00E340  1  E6 7A                inc     TXTTAB+1
00E342  1               L4192:
00E342  1  A5 79                lda     TXTTAB
00E344  1  A4 7A                ldy     TXTTAB+1
00E346  1  20 68 C7             jsr     REASON
00E349  1  20 A9 CD             jsr     CRDO
00E34C  1  A5 85                lda     MEMSIZ
00E34E  1  38                   sec
00E34F  1  E5 79                sbc     TXTTAB
00E351  1  AA                   tax
00E352  1  A5 86                lda     MEMSIZ+1
00E354  1  E5 7A                sbc     TXTTAB+1
00E356  1  20 9B DE             jsr     LINPRT
00E359  1  A9 CC                lda     #<QT_BYTES_FREE
00E35B  1  A0 E3                ldy     #>QT_BYTES_FREE
00E35D  1  20 00 CE             jsr     STROUT
00E360  1  A9 00                lda     #<STROUT
00E362  1  A0 CE                ldy     #>STROUT
00E364  1  85 0B                sta     GOSTROUT+1
00E366  1  84 0C                sty     GOSTROUT+2
00E368  1  20 AC C9             jsr     SCRTCH
00E36B  1  A9 BD                lda     #<RESTART
00E36D  1  A0 C7                ldy     #>RESTART
00E36F  1  85 08                sta     GORESTART+1
00E371  1  84 09                sty     GORESTART+2
00E373  1  6C 08 00             jmp     (GORESTART+1)
00E376  1               
00E376  1               ; OSI is compiled for ROM, but includes
00E376  1               ; this unused string
00E376  1  57 41 4E 54          .byte   "WANT SIN-COS-TAN-ATN"
00E37A  1  20 53 49 4E  
00E37E  1  2D 43 4F 53  
00E38A  1  00                   .byte   0
00E38B  1               QT_WRITTEN_BY:
00E38B  1  0D 0A 0C             .byte   CR,LF,$0C ; FORM FEED
00E38E  1  57 52 49 54          .byte   "WRITTEN BY RICHARD W. WEILAND."
00E392  1  54 45 4E 20  
00E396  1  42 59 20 52  
00E3AC  1  0D 0A 00             .byte   CR,LF,0
00E3AF  1               QT_MEMORY_SIZE:
00E3AF  1  02 5F 4D 45          .byte   $02,"_MEMORY SIZE"
00E3B3  1  4D 4F 52 59  
00E3B7  1  20 53 49 5A  
00E3BC  1  00                   .byte   0
00E3BD  1               QT_TERMINAL_WIDTH:
00E3BD  1  54 45 52 4D          .byte   "TERMINAL WIDTH"
00E3C1  1  49 4E 41 4C  
00E3C5  1  20 57 49 44  
00E3CB  1  00                   .byte   0
00E3CC  1               QT_BYTES_FREE:
00E3CC  1  20 42 59 54          .byte   " BYTES FREE"
00E3D0  1  45 53 20 46  
00E3D4  1  52 45 45     
00E3D7  1  0D 0A 0D 0A          .byte   CR,LF,CR,LF
00E3DB  1  4F 53 49 20          .byte   "OSI 6502 BASIC VERSION 1.0 REV 3.2"
00E3DF  1  36 35 30 32  
00E3E3  1  20 42 41 53  
00E3FD  1  0D 0A                .byte   CR,LF
00E3FF  1  43 4F 50 59          .byte   "COPYRIGHT 1977 BY MICROSOFT CO."
00E403  1  52 49 47 48  
00E407  1  54 20 31 39  
00E41E  1  0D 0A 00             .byte   CR,LF,0
00E421  1               
00E421  1               XPL:
00E421  1  0C 1B 5B 31  	.byte	$0C, $1B, "[12;20H"
00E425  1  32 3B 32 30  
00E429  1  48           
00E42A  1  20 58 58 20  	.byte	    " XX     XX  PPPP   LL     ",CR,LF
00E42E  1  20 20 20 20  
00E432  1  58 58 20 20  
00E446  1  1B 5B 31 33  	.byte	$1B, "[13;20H"
00E44A  1  3B 32 30 48  
00E44E  1  20 20 58 58  	.byte	    "  XX   XX   PP PP  LL     ",CR,LF
00E452  1  20 20 20 58  
00E456  1  58 20 20 20  
00E46A  1  1B 5B 31 34  	.byte	$1B, "[14;20H"
00E46E  1  3B 32 30 48  
00E472  1  20 20 20 58  	.byte	    "   XXXXX    PPPPP  LL     ",CR,LF
00E476  1  58 58 58 58  
00E47A  1  20 20 20 20  
00E48E  1  1B 5B 31 35  	.byte	$1B, "[15;20H"
00E492  1  3B 32 30 48  
00E496  1  20 20 58 58  	.byte	    "  XX   XX   PP     LL  32 ",CR,LF
00E49A  1  20 20 20 58  
00E49E  1  58 20 20 20  
00E4B2  1  1B 5B 31 36  	.byte	$1B, "[16;20H"
00E4B6  1  3B 32 30 48  
00E4BA  1  20 58 58 20  	.byte	    " XX     XX  PP     LLLLLLL",CR,LF
00E4BE  1  20 20 20 20  
00E4C2  1  58 58 20 20  
00E4D6  1  00           	.byte	$00
00E4D7  1               
00E4D7  1               ; XPL-32 LOAD/SAVE ROUTINES =================================================================
00E4D7  1               ; BY L. OPPENHEIMER 2021/2022 ===============================================================
00E4D7  1               
00E4D7  1               SMCHECK:
00E4D7  1  20 4C C6     	JSR	rxpoll
00E4DA  1  AD 00 80     	LDA	ACIAData
00E4DD  1  85 BC        	STA	XYLODSAV2	; save to tmp var
00E4DF  1  C9 73        	cmp	#'s'		; If "s" is pressed
00E4E1  1  F0 09        	BEQ	SDET		; then use serial
00E4E3  1  A5 BC        	LDA	XYLODSAV2	; load tmp var
00E4E5  1  C9 6D        	cmp	#'m'		; If "m" is pressed
00E4E7  1  F0 05        	BEQ	MDET		; then use a memory card
00E4E9  1  4C D7 E4     	JMP	SMCHECK
00E4EC  1               SDET:
00E4EC  1  38           	sec
00E4ED  1  60           	rts
00E4EE  1               MDET:
00E4EE  1  18           	clc
00E4EF  1  60           	rts
00E4F0  1               
00E4F0  1               LOAD:
00E4F0  1  48           	pha
00E4F1  1  8A           	txa
00E4F2  1  48           	pha 	; save registers
00E4F3  1  98           	tya
00E4F4  1  48           	pha
00E4F5  1  20 0B E6     	jsr 	WRITE_TRANSFER_MSG
00E4F8  1  20 D7 E4     	jsr	SMCHECK
00E4FB  1  B0 03        	bcs	SERIAL_LOAD
00E4FD  1  4C 41 E5     	jmp 	MEMORY_LOAD
00E500  1               SERIAL_LOAD:
00E500  1  A2 9A        	ldx	#<SERIAL_MSG
00E502  1  A0 E6        	ldy	#>SERIAL_MSG
00E504  1  20 68 C6     	jsr	w_acia_full
00E507  1  20 4C C6     	jsr	rxpoll
00E50A  1               receive_serial:
00E50A  1  A2 00          	ldx 	#0
00E50C  1               rcloopadd:
00E50C  1  A9 01          	lda 	#$01
00E50E  1  85 BC          	sta 	XYLODSAV2
00E510  1  A9 06        	lda	#$06
00E512  1  85 BD        	sta	XYLODSAV2+1
00E514  1  A0 00          	ldy 	#0
00E516  1               rsl:
00E516  1  20 4C C6       	jsr 	rxpoll
00E519  1  AD 00 80       	lda 	ACIAData
00E51C  1  91 BC          	sta 	(XYLODSAV2),Y
00E51E  1  F0 0B        	beq	rseof
00E520  1                 	;lda 	#$2e
00E520  1                 	;jsr 	MONCOUT
00E520  1  E6 BC        	inc	XYLODSAV2
00E522  1  A5 BC        	lda	XYLODSAV2
00E524  1  F0 02        	beq	ssl
00E526  1  E6 BD        	inc	XYLODSAV2+1
00E528  1               ssl:
00E528  1  4C 16 E5     	jmp rsl
00E52B  1               rseof:
00E52B  1  A0 01        	ldy	#1
00E52D  1  20 4C C6     	jsr	rxpoll
00E530  1  91 BC        	sta	(XYLODSAV2),Y
00E532  1  D0 F4        	bne	ssl
00E534  1               sdone:
00E534  1  A2 B4          	ldx	#<LOAD_DONE
00E536  1  A0 E6        	ldy	#>LOAD_DONE
00E538  1  20 68 C6     	jsr	w_acia_full
00E53B  1               stop_sl:
00E53B  1  68             	pla
00E53C  1  A8           	tay
00E53D  1  68             	pla
00E53E  1  AA           	tax
00E53F  1  68             	pla
00E540  1  60             	rts
00E541  1               
00E541  1               MEMORY_LOAD:
00E541  1               	; BUG need to make the memory load
00E541  1               	; i will start a load of a specified file
00E541  1               	; (.BAS)
00E541  1               	; basically just a darn copy of the type loader (lol)
00E541  1  20 A2 E5     	jsr	rootsetup
00E544  1  20 CC E5     	jsr	list
00E547  1               
00E547  1               type:			; typing a filename
00E547  1  A2 F4          ldx #<typemsg		; Filename:_
00E549  1  A0 E6          ldy #>typemsg
00E54B  1  20 68 C6       jsr w_acia_full
00E54E  1  A2 00          ldx #0
00E550  1  A9 20          lda #' '
00E552  1  85 00          sta charbuffer
00E554  1               
00E554  1                typeloop:		; loop to type filenames
00E554  1  20 4C C6       jsr rxpoll		; read a charactor
00E557  1  AD 00 80       lda ACIAData
00E55A  1  85 00          sta charbuffer
00E55C  1  C9 0D          cmp #$0d		; enter?
00E55E  1  F0 0E          beq exitloop		; if so, load
00E560  1  A5 00          lda charbuffer	; echo back
00E562  1  8D 00 80       sta ACIAData
00E565  1  A5 00          lda charbuffer	; and store it in the filename buffer
00E567  1  9D 4C E7       sta loadbuf,x
00E56A  1  E8             inx
00E56B  1  4C 54 E5       jmp typeloop
00E56E  1               exitloop:
00E56E  1  20 24 C6       jsr crlf
00E571  1  20 A2 E5       jsr rootsetup
00E574  1  A0 E7          ldy #>loadbuf
00E576  1  A2 4C          ldx #<loadbuf
00E578  1  20 80 C5       jsr fat32_finddirent
00E57B  1  90 03          bcc foundfile
00E57D  1                 ; File not found
00E57D  1  4C B5 E5       jmp transfer_error
00E580  1               foundfile:
00E580  1                 ; Open file
00E580  1  20 17 C5       jsr fat32_opendirent
00E583  1  A2 E5          ldx #<lodmsg
00E585  1  A0 E6          ldy #>lodmsg
00E587  1  20 68 C6       jsr w_acia_full
00E58A  1  A9 01          lda #$01
00E58C  1  85 CC          sta fat32_address
00E58E  1  A9 06          lda #$06
00E590  1  85 CD          sta fat32_address+1
00E592  1  20 E0 C5       jsr fat32_file_read  ; Yes. It is finally time to read the file.
00E595  1               end:
00E595  1  A2 B4          ldx #<LOAD_DONE
00E597  1  A0 E6          ldy #>LOAD_DONE
00E599  1  20 68 C6       jsr w_acia_full
00E59C  1  68             pla
00E59D  1  A8             tay
00E59E  1  68             pla
00E59F  1  AA             tax
00E5A0  1  68             pla
00E5A1  1  60             rts
00E5A2  1               
00E5A2  1               rootsetup:		; setup <ROOT>
00E5A2  1               
00E5A2  1                 ; Open root directory
00E5A2  1  20 FF C4       jsr fat32_openroot
00E5A5  1               
00E5A5  1                 ; Find the subdirectory by name
00E5A5  1  A2 D3          ldx #<dirname
00E5A7  1  A0 C6          ldy #>dirname
00E5A9  1  20 80 C5       jsr fat32_finddirent
00E5AC  1  90 03          bcc foundsub
00E5AE  1               
00E5AE  1                 ; Subdirectory not found
00E5AE  1  4C B5 E5       jmp transfer_error
00E5B1  1               
00E5B1  1               foundsub:
00E5B1  1               
00E5B1  1                 ; Open subdirectory
00E5B1  1  20 17 C5       jsr fat32_opendirent	; open folder
00E5B4  1               
00E5B4  1  60             rts			; done
00E5B5  1               
00E5B5  1               transfer_error:
00E5B5  1  A0 C6          ldy #>errormsg
00E5B7  1  A2 DF          ldx #<errormsg
00E5B9  1  20 68 C6       jsr w_acia_full
00E5BC  1  20 8B C6       jsr error_sound
00E5BF  1  4C 3B E5       jmp stop_sl
00E5C2  1               
00E5C2  1               other:
00E5C2  1  20 44 C6       jsr txpoll		; Write a letter of the filename currently being read
00E5C5  1  B1 01          lda (zp_sd_address),y
00E5C7  1  8D 00 80       sta ACIAData
00E5CA  1  C8             iny
00E5CB  1  60             rts
00E5CC  1               
00E5CC  1               list:			; list file dir
00E5CC  1  20 4A C5       jsr fat32_readdirent	; files?
00E5CF  1  B0 36          bcs nofiles
00E5D1  1  29 40          and #$40
00E5D3  1  F0 05          beq arc
00E5D5  1               dir:
00E5D5  1  A9 44          lda #'D'		; directorys show up as
00E5D7  1  4C DC E5       jmp ebut		; D YOURFILENAME     D TEST      D FOLDER  ...Etc
00E5DA  1               arc:
00E5DA  1  A9 46          lda #'F'		; files show up as
00E5DC  1               ebut:			; F TEST.XPL         F MUSIC.XPL        F FILE.BIN  ...Etc
00E5DC  1  20 54 C6       jsr print_chara	; f or d
00E5DF  1  A9 20          lda #$20		; space
00E5E1  1  20 54 C6       jsr print_chara
00E5E4  1                 ; At this point, we know that there are no files, files, or a suddir
00E5E4  1                 ; Now for the name
00E5E4  1  A0 00          ldy #0
00E5E6  1               nameloop:
00E5E6  1  C0 08          cpy #8
00E5E8  1  F0 06          beq dot
00E5EA  1  20 C2 E5       jsr other
00E5ED  1  4C E6 E5       jmp nameloop
00E5F0  1               dot:
00E5F0  1  A9 2E          lda #'.'		; shows a file extention
00E5F2  1  20 54 C6       jsr print_chara
00E5F5  1               lopii:
00E5F5  1  C0 0B          cpy #11
00E5F7  1  F0 06          beq endthat		; print 3-letter file extention
00E5F9  1  20 C2 E5       jsr other
00E5FC  1  4C F5 E5       jmp lopii
00E5FF  1               endthat:
00E5FF  1  A9 09          lda #$09 ; Tab
00E601  1  20 54 C6       jsr print_chara	; tab
00E604  1  4C CC E5       jmp list ; go again	; next file if there are any left
00E607  1               nofiles:		; if not,
00E607  1               endlist:		; exit listing code
00E607  1  20 24 C6       jsr crlf
00E60A  1  60             rts
00E60B  1               
00E60B  1               WRITE_TRANSFER_MSG:
00E60B  1  A2 70          	LDX 	#<TRANSFER_MSG
00E60D  1  A0 E6        	LDY	#>TRANSFER_MSG
00E60F  1  20 68 C6     	JSR	w_acia_full
00E612  1  60             	RTS
00E613  1               
00E613  1               SAVE:				; BUG save dont work
00E613  1  48           	PHA
00E614  1  8A           	TXA
00E615  1  48           	PHA			; Push registers on the stack
00E616  1  98           	TYA
00E617  1  48           	PHA
00E618  1  20 0B E6     	JSR	WRITE_TRANSFER_MSG
00E61B  1  20 D7 E4     	JSR	SMCHECK
00E61E  1  B0 03        	bcs	SERIAL_SAVE
00E620  1  4C 6A E6     	jmp	MEMORY_SAVE
00E623  1               SERIAL_SAVE:
00E623  1  A2 9A        	LDX	#<SERIAL_MSG
00E625  1  A0 E6        	LDY	#>SERIAL_MSG
00E627  1  20 68 C6     	jsr	w_acia_full
00E62A  1  20 4C C6     	jsr	rxpoll
00E62D  1  A2 00        	LDX	#0
00E62F  1  A0 00        	LDY	#0
00E631  1  A9 01        	LDA	#$01
00E633  1  85 BC        	STA	XYLODSAV2	; set to start of RAM
00E635  1  A9 06        	LDA	#$06
00E637  1  85 BD        	STA	XYLODSAV2+1
00E639  1               	; now for the loop
00E639  1               SAVELOOP:
00E639  1  B1 BC        	LDA	(XYLODSAV2),Y	; save out a byte
00E63B  1  48           	PHA
00E63C  1  20 65 FF     	JSR	MONCOUT
00E63F  1  68           	PLA
00E640  1  F0 0B        	BEQ	SAVE_EOF_CHECK
00E642  1  E6 BC        	INC	XYLODSAV2
00E644  1  F0 02        	BEQ	SAVE_NOT16BIT
00E646  1  E6 BD        	INC	XYLODSAV2+1
00E648  1               SAVE_NOT16BIT:
00E648  1  20 84 FF     	JSR	MONISCNTC	; check if control+c is pressed.
00E64B  1  90 EC        	BCC	SAVELOOP	; if not, then send the next byte
00E64D  1               SAVE_EOF_CHECK:			; if so, then send break error message
00E64D  1  A0 01        	ldy	#1
00E64F  1  B1 BC        	lda	(XYLODSAV2),Y	; End Of File? (NULL followed by another NULL)
00E651  1  F0 0A        	beq	SAVE_END_WRITE
00E653  1               SAVE_CUT:
00E653  1  A2 D8        	ldx	#<ABORT_MSG
00E655  1  A0 E6        	ldy	#>ABORT_MSG
00E657  1  20 68 C6     	jsr	w_acia_full
00E65A  1  4C 64 E6     	jmp	END_SERIAL_SAVE
00E65D  1               SAVE_END_WRITE:
00E65D  1  A2 C5        	ldx	#<SAVE_DONE
00E65F  1  A0 E6        	ldy	#>SAVE_DONE
00E661  1  20 68 C6     	jsr	w_acia_full
00E664  1               END_SERIAL_SAVE:
00E664  1  68           	PLA
00E665  1  A8           	TAY
00E666  1  68           	PLA
00E667  1  AA           	TAX			; pull registers off stack
00E668  1  68           	PLA
00E669  1  60           	RTS
00E66A  1               
00E66A  1               MEMORY_SAVE:
00E66A  1               	; BUG oh darn i need to make this too
00E66A  1               	; same as the other one but it will save instead...
00E66A  1               	;
00E66A  1               	; e
00E66A  1               	;
00E66A  1  68           	PLA
00E66B  1  A8           	TAY
00E66C  1  68           	PLA
00E66D  1  AA           	TAX
00E66E  1  68           	PLA
00E66F  1  60           	RTS
00E670  1               
00E670  1               TRANSFER_MSG:
00E670  1  53 65 72 69    .byte	"Serial [S] or Memory Card [M] Transfer?",CR,LF,$00
00E674  1  61 6C 20 5B  
00E678  1  53 5D 20 6F  
00E69A  1               SERIAL_MSG:
00E69A  1  50 72 65 73    .byte	"Press Any Key To Begin.",CR,LF,$00
00E69E  1  73 20 41 6E  
00E6A2  1  79 20 4B 65  
00E6B4  1               LOAD_DONE:
00E6B4  1  4C 6F 61 64    .byte	"Load Complete.",CR,LF,$00
00E6B8  1  20 43 6F 6D  
00E6BC  1  70 6C 65 74  
00E6C5  1               SAVE_DONE:
00E6C5  1  0D 0A 53 61    .byte	CR,LF,"Save Complete.",CR,LF,$00
00E6C9  1  76 65 20 43  
00E6CD  1  6F 6D 70 6C  
00E6D8  1               ABORT_MSG:
00E6D8  1  0D 0A 41 62    .byte	CR,LF,"Aborted.",CR,LF,0
00E6DC  1  6F 72 74 65  
00E6E0  1  64 2E 0D 0A  
00E6E5  1               lodmsg:
00E6E5  1  0D 0A 4C 6F    .byte $0d, $0a, "Loading...", $0d, $0a, $00
00E6E9  1  61 64 69 6E  
00E6ED  1  67 2E 2E 2E  
00E6F4  1               typemsg:
00E6F4  1  54 79 70 65    .byte "Type the filename in all caps.", $0d, $0a, "The filename is up to 8 characters long.", $0d, $0a, " Filename: ", $02, "_", $00
00E6F8  1  20 74 68 65  
00E6FC  1  20 66 69 6C  
00E74C  1               loadbuf:
00E74C  1  20 20 20 20    .byte $20, $20, $20, $20, $20, $20, $20, $20
00E750  1  20 20 20 20  
00E754  1  42 41 53       .byte "BAS"
00E757  1               fat_error:
00E757  1  46 41 54 33    .byte "FAT32 Initialization Failed at Stage"
00E75B  1  32 20 49 6E  
00E75F  1  69 74 69 61  
00E77B  1               sd_msg:
00E77B  1  0E 14 0F 12    .byte	$0e, 20, $0f, 18
00E77F  1  02 20          .byte $02, $20
00E781  1  49 6E 69 74    .byte "Initializing SD Card...",CR,LF,0
00E785  1  69 61 6C 69  
00E789  1  7A 69 6E 67  
00E79B  1               
00E79B  1               
00E79B  1               ; STARTUP AND SERIAL I/O ROUTINES ===========================================================
00E79B  1               ; BY G. SEARLE 2013 =========================================================================
00E79B  1               ACIA := $8000
00E79B  1               ACIAControl := ACIA+3
00E79B  1               ACIACommand := ACIA+2
00E79B  1               ACIAStatus := ACIA+1
00E79B  1               ACIAData := ACIA+0
00E79B  1               
00E79B  1               .segment "IOHANDLER"
000000r 1               .org $FF00
00FF00  1               Reset:
00FF00  1  A2 FC        	LDX     #STACK_TOP
00FF02  1  9A           	TXS
00FF03  1               
00FF03  1  A9 0B        	LDA	#$0B
00FF05  1  8D 02 80     	STA	ACIACommand
00FF08  1  A9 1F        	LDA 	#$1F		; Set ACIA baud rate, word size and Rx interrupt (to control RTS)
00FF0A  1  8D 03 80     	STA	ACIAControl
00FF0D  1               
00FF0D  1  A2 21        	LDX	#<XPL
00FF0F  1  A0 E4        	LDY	#>XPL
00FF11  1  20 68 C6     	JSR	w_acia_full
00FF14  1               
00FF14  1               ;NextStart:
00FF14  1               ;	LDY	#$FF
00FF14  1               ;InnerDelayLoop:
00FF14  1               ;	LDX	#$FF
00FF14  1               ;Wee:
00FF14  1               ;	NOP
00FF14  1               ;	NOP
00FF14  1               ;	NOP
00FF14  1               ;	NOP
00FF14  1               ;	NOP
00FF14  1               ;	NOP
00FF14  1               ;	DEX
00FF14  1               ;	BNE Wee
00FF14  1               ;
00FF14  1               ;	DEY
00FF14  1               ;	BNE InnerDelayLoop
00FF14  1               
00FF14  1  A2 7B        	ldx #<sd_msg
00FF16  1  A0 E7        	ldy #>sd_msg
00FF18  1  20 68 C6     	jsr w_acia_full
00FF1B  1               
00FF1B  1  20 A1 C1      	jsr via_init
00FF1E  1  20 B6 C1     	jsr sd_init
00FF21  1  20 27 C3     	jsr fat32_init
00FF24  1  90 1D        	bcc dispstart
00FF26  1               
00FF26  1               	; Error during FAT32 initialization
00FF26  1               
00FF26  1  20 39 C6     	jsr cleardisplay
00FF29  1  A0 E7        	ldy #>fat_error
00FF2B  1  A2 57        	ldx #<fat_error
00FF2D  1  20 68 C6     	jsr w_acia_full
00FF30  1  A5 D2        	lda fat32_errorstage
00FF32  1  20 0D C6     	jsr print_hex_acia
00FF35  1  A9 21        	lda #'!'
00FF37  1  20 54 C6     	jsr print_chara
00FF3A  1  20 24 C6     	jsr crlf
00FF3D  1  4C 43 FF     	jmp dispstart
00FF40  1               JMPToReset:
00FF40  1  4C 00 FF     	jmp	Reset
00FF43  1               dispstart:
00FF43  1               ; Display startup message
00FF43  1  A0 00        	LDY #0
00FF45  1               ShowStartMsg:
00FF45  1  B9 91 FF     	LDA	StartupMessage,Y
00FF48  1  F0 06        	BEQ	WaitForKeypress
00FF4A  1  20 65 FF     	JSR	MONCOUT
00FF4D  1  C8           	INY
00FF4E  1  D0 F5        	BNE	ShowStartMsg
00FF50  1               
00FF50  1               ; Wait for a cold/warm start selection
00FF50  1               WaitForKeypress:
00FF50  1  20 74 FF     	JSR	MONRDKEY
00FF53  1  90 FB        	BCC	WaitForKeypress
00FF55  1               
00FF55  1  29 DF        	AND	#$DF			; Make upper case
00FF57  1  C9 57        	CMP	#'W'			; compare with [W]arm start
00FF59  1  F0 07        	BEQ	WarmStart
00FF5B  1               
00FF5B  1  C9 43        	CMP	#'C'			; compare with [C]old start
00FF5D  1  D0 E1        	BNE	JMPToReset
00FF5F  1               
00FF5F  1  4C 4E E2     	JMP	COLD_START	; BASIC cold start
00FF62  1               
00FF62  1               WarmStart:
00FF62  1  4C BD C7     	JMP	RESTART		; BASIC warm start
00FF65  1               
00FF65  1               MONCOUT:
00FF65  1  48           	PHA
00FF66  1               SerialOutWait:
00FF66  1  AD 01 80     	LDA	ACIAStatus
00FF69  1  29 10        	AND	#$10
00FF6B  1  C9 10        	CMP	#$10
00FF6D  1  D0 F7        	BNE	SerialOutWait
00FF6F  1  68           	PLA
00FF70  1  8D 00 80     	STA	ACIAData
00FF73  1  60           	RTS
00FF74  1               
00FF74  1               MONRDKEY:
00FF74  1  AD 01 80     	LDA	ACIAStatus
00FF77  1  29 08        	AND	#$08
00FF79  1  C9 08        	CMP	#$08
00FF7B  1  D0 05        	BNE	NoDataIn
00FF7D  1  AD 00 80     	LDA	ACIAData
00FF80  1  38           	SEC		; Carry set if key available
00FF81  1  60           	RTS
00FF82  1               NoDataIn:
00FF82  1  18           	CLC		; Carry clear if no key pressed
00FF83  1  60           	RTS
00FF84  1               
00FF84  1               MONISCNTC:
00FF84  1  20 74 FF     	JSR	MONRDKEY
00FF87  1  90 06        	BCC	NotCTRLC ; If no key pressed then exit
00FF89  1  C9 03        	CMP	#3
00FF8B  1  D0 02        	BNE	NotCTRLC ; if CTRL-C not pressed then exit
00FF8D  1  38           	SEC		; Carry set if control C pressed
00FF8E  1  60           	RTS
00FF8F  1               NotCTRLC:
00FF8F  1  18           	CLC		; Carry clear if control C not pressed
00FF90  1  60           	RTS
00FF91  1               
00FF91  1               StartupMessage:
00FF91  1  0C 43 6F 6C  	.byte	$0C,"Cold [C] or warm [W] start?",$0D,$0A,$00
00FF95  1  64 20 5B 43  
00FF99  1  5D 20 6F 72  
00FFB0  1               
00FFB0  1               .segment "VECTS"
000000r 1               .org $FFFA
00FFFA  1  00 FF        	.word	Reset		; NMI
00FFFC  1  00 FF        	.word	Reset		; RESET
00FFFE  1  00 FF        	.word	Reset		; IRQ
010000  1               
010000  1               
