ca65 V2.17 - Raspbian 2.17-1
Main file   : osi_bas.s
Current file: osi_bas.s

000000r 1               ; Microsoft BASIC for 6502 (OSI VERSION)
000000r 1               ;
000000r 1               ; ==================================================================================
000000r 1               ; MODIFIED FROM THE ORIGINAL FILES AT http://www.pagetable.com/?p=46
000000r 1               ; MERGED INTO ONE FILE AND MACROS AND CONDITIONAL STATEMENTS REMOVED
000000r 1               ; BY G. SEARLE 2013
000000r 1               ;
000000r 1               ; I/O and dummy load/saves added to the end of this code
000000r 1               ;
000000r 1               ; This then assembles to the OSI version with the following
000000r 1               ; minor changes to the original BASIC code:
000000r 1               ; 1. Control-C call changed
000000r 1               ; 2. Load/save calls changed
000000r 1               ; 3. RAM start set to $0200 instead of $0300
000000r 1               ; 4. ROM start set to $C000
000000r 1               ; 5. Second letter of error messages back to ASCII value (instead of $80+val)
000000r 1               ; ==================================================================================
000000r 1               ;
000000r 1               ; Extract of original header comments follows:
000000r 1               ;
000000r 1               ; (first revision of this distribution, 20 Oct 2008, Michael Steil www.pagetable.com)
000000r 1               ;
000000r 1               ;
000000r 1               ; Name                 Release   MS Version    ROM   9digit  INPUTBUFFER   extensions
000000r 1               ;---------------------------------------------------------------------------------------------------
000000r 1               ; OSI BASIC             1977     1.0 REV 3.2    Y      N          ZP            -
000000r 1               ;
000000r 1               ; Credits:
000000r 1               ; * main work by Michael Steil
000000r 1               ; * function names and all uppercase comments taken from Bob Sander-Cederlof's excellent AppleSoft II disassembly:
000000r 1               ;   http://www.txbobsc.com/scsc/scdocumentor/
000000r 1               ; * Applesoft lite by Tom Greene http://cowgod.org/replica1/applesoft/ helped a lot, too.
000000r 1               ; * Thanks to Joe Zbicak for help with Intellision Keyboard BASIC
000000r 1               ; * This work is dedicated to the memory of my dear hacking pal Michael "acidity" Kollmann.
000000r 1               
000000r 1               fat32_workspace = $200      ; two pages
000000r 1               
000000r 1               buffer = $400               ; 512 bytes
000000r 1               endbuf = $600
000000r 1               
000000r 1               .debuginfo +
000000r 1               
000000r 1               .setcpu "6502"
000000r 1               .macpack longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               
000000r 1               ; zero page
000000r 1               ZP_START1 = $00
000000r 1               ZP_START2 = $0D
000000r 1               ZP_START3 = $5B
000000r 1               ZP_START4 = $65
000000r 1               
000000r 1               ;extra ZP variables
000000r 1               USR             := $000A
000000r 1               
000000r 1               ; constants
000000r 1               STACK_TOP		:= $FC
000000r 1               SPACE_FOR_GOSUB := $33
000000r 1               NULL_MAX		:= $0A
000000r 1               WIDTH			:= 72
000000r 1               WIDTH2			:= 56
000000r 1               
000000r 1               ; memory layout
000000r 1               RAMSTART2		:= $0600
000000r 1               BYTES_FP		:= 4
000000r 1               BYTES_PER_ELEMENT := BYTES_FP
000000r 1               BYTES_PER_VARIABLE := BYTES_FP+2
000000r 1               MANTISSA_BYTES	:= BYTES_FP-1
000000r 1               BYTES_PER_FRAME := 2*BYTES_FP+8
000000r 1               FOR_STACK1		:= 2*BYTES_FP+5
000000r 1               FOR_STACK2		:= BYTES_FP+4
000000r 1               MAX_EXPON = 10
000000r 1               sdbuffer		:= $7ff2
000000r 1               STACK           := $0100
000000r 1               
000000r 1               INPUTBUFFERX = INPUTBUFFER & $FF00
000000r 1               
000000r 1               CR=13
000000r 1               LF=10
000000r 1               
000000r 1               CRLF_1 := CR
000000r 1               CRLF_2 := LF
000000r 1               
000000r 1               .feature org_per_seg
000000r 1               .zeropage
000000r 1               .org $0000
000000  1               .org ZP_START1
000000  1               charbuffer:
000000  1  xx           	.res 1
000001  1               zp_sd_address:
000001  1  xx xx        	.res 2
000003  1               zp_sd_currentsector:
000003  1  xx xx xx xx  	.res 4
000007  1               GORESTART:
000007  1  xx xx xx     	.res 3
00000A  1               GOSTROUT:
00000A  1  xx xx xx     	.res 3
00000D  1               GOAYINT:
00000D  1  xx xx        	.res 2
00000F  1               GOGIVEAYF:
00000F  1  xx xx        	.res 2
000011  1               
000011  1               .org ZP_START2
00000D  1               Z15:
00000D  1  xx           	.res 1
00000E  1               POSX:
00000E  1  xx           	.res 1
00000F  1               Z17:
00000F  1  xx           	.res 1
000010  1               Z18:
000010  1  xx           	.res 1
000011  1               LINNUM:
000011  1               TXPSV:
000011  1  xx xx        	.res 2
000013  1               INPUTBUFFER:
000013  1               
000013  1               .org ZP_START3
00005B  1               CHARAC:
00005B  1  xx           	.res 1
00005C  1               ENDCHR:
00005C  1  xx           	.res 1
00005D  1               EOLPNTR:
00005D  1  xx           	.res 1
00005E  1               DIMFLG:
00005E  1  xx           	.res 1
00005F  1               VALTYP:
00005F  1  xx           	.res 1
000060  1               DATAFLG:
000060  1  xx           	.res 1
000061  1               SUBFLG:
000061  1  xx           	.res 1
000062  1               INPUTFLG:
000062  1  xx           	.res 1
000063  1               CPRMASK:
000063  1  xx           	.res 1
000064  1               Z14:
000064  1  xx           	.res 1
000065  1               
000065  1               .org ZP_START4
000065  1               TEMPPT:
000065  1  xx           	.res 1
000066  1               LASTPT:
000066  1  xx xx        	.res 2
000068  1               TEMPST:
000068  1  xx xx xx xx  	.res 9
00006C  1  xx xx xx xx  
000070  1  xx           
000071  1               INDEX:
000071  1  xx xx        	.res 2
000073  1               DEST:
000073  1  xx xx        	.res 2
000075  1               RESULT:
000075  1  xx xx xx xx  	.res BYTES_FP
000079  1               RESULT_LAST = RESULT + BYTES_FP-1
000079  1               TXTTAB:
000079  1  xx xx        	.res 2
00007B  1               VARTAB:
00007B  1  xx xx        	.res 2
00007D  1               ARYTAB:
00007D  1  xx xx        	.res 2
00007F  1               STREND:
00007F  1  xx xx        	.res 2
000081  1               FRETOP:
000081  1  xx xx        	.res 2
000083  1               FRESPC:
000083  1  xx xx        	.res 2
000085  1               MEMSIZ:
000085  1  xx xx        	.res 2
000087  1               CURLIN:
000087  1  xx xx        	.res 2
000089  1               OLDLIN:
000089  1  xx xx        	.res 2
00008B  1               OLDTEXT:
00008B  1  xx xx        	.res 2
00008D  1               Z8C:
00008D  1  xx xx        	.res 2
00008F  1               DATPTR:
00008F  1  xx xx        	.res 2
000091  1               INPTR:
000091  1  xx xx        	.res 2
000093  1               VARNAM:
000093  1  xx xx        	.res 2
000095  1               VARPNT:
000095  1  xx xx        	.res 2
000097  1               FORPNT:
000097  1  xx xx        	.res 2
000099  1               LASTOP:
000099  1  xx xx        	.res 2
00009B  1               CPRTYP:
00009B  1  xx           	.res 1
00009C  1               FNCNAM:
00009C  1               TEMP3:
00009C  1  xx xx        	.res 2
00009E  1               DSCPTR:
00009E  1  xx xx        	.res 2
0000A0  1               DSCLEN:
0000A0  1  xx xx        	.res 2
0000A2  1               JMPADRS	:= DSCLEN + 1
0000A2  1               
0000A2  1               Z52:
0000A2  1  xx           	.res 1
0000A3  1               ARGEXTENSION:
0000A3  1               TEMP1:
0000A3  1  xx           	.res 1
0000A4  1               HIGHDS:
0000A4  1  xx xx        	.res 2
0000A6  1               HIGHTR:
0000A6  1  xx xx        	.res 2
0000A8  1               INDX:
0000A8  1               TMPEXP:
0000A8  1               TEMP2:
0000A8  1  xx           	.res 1
0000A9  1               EXPON:
0000A9  1  xx           	.res 1
0000AA  1               LOWTR:
0000AA  1               LOWTRX:
0000AA  1  xx           	.res 1
0000AB  1               EXPSGN:
0000AB  1  xx           	.res 1
0000AC  1               FAC:
0000AC  1  xx xx xx xx  	.res BYTES_FP
0000B0  1               FAC_LAST = FAC + BYTES_FP-1
0000B0  1               FACSIGN:
0000B0  1  xx           	.res 1
0000B1  1               SERLEN:
0000B1  1  xx           	.res 1
0000B2  1               SHIFTSIGNEXT:
0000B2  1  xx           	.res 1
0000B3  1               ARG:
0000B3  1  xx xx xx xx  	.res BYTES_FP
0000B7  1               ARG_LAST = ARG + BYTES_FP-1
0000B7  1               ARGSIGN:
0000B7  1  xx           	.res 1
0000B8  1               STRNG1:
0000B8  1  xx xx        	.res 2
0000BA  1               SGNCPR = STRNG1
0000BA  1               FACEXTENSION = STRNG1+1
0000BA  1               STRNG2:
0000BA  1  xx xx        	.res 2
0000BC  1               XYLODSAV2:
0000BC  1  xx xx        	.res 2
0000BE  1               zp_fat32_variables:
0000BE  1  xx xx xx xx  	.res 24
0000C2  1  xx xx xx xx  
0000C6  1  xx xx xx xx  
0000D6  1               CHRGET:
0000D6  1               TXTPTR = <(GENERIC_TXTPTR-GENERIC_CHRGET + CHRGET)
0000D6  1               CHRGOT = <(GENERIC_CHRGOT-GENERIC_CHRGET + CHRGET)
0000D6  1               CHRGOT2 = <(GENERIC_CHRGOT2-GENERIC_CHRGET + CHRGET)
0000D6  1               RNDSEED = <(GENERIC_RNDSEED-GENERIC_CHRGET + CHRGET)
0000D6  1               
0000D6  1               .segment "CODE"
000000r 1               .org $C000
00C000  1               TOKEN_ADDRESS_TABLE:
00C000  1  1B CC        		.word END-1
00C002  1  43 CB        		.word FOR-1
00C004  1  21 D0        		.word NEXT-1
00C006  1  ED CC        		.word DATA-1
00C008  1  04 CF        		.word INPUT-1
00C00A  1  E2 D2        		.word DIM-1
00C00C  1  30 CF        		.word READ-1
00C00E  1  9A CD        		.word LET-1
00C010  1               TOKEN_GOTO=$80+(*-TOKEN_ADDRESS_TABLE)/2
00C010  1  9A CC        		.word GOTO-1
00C012  1  72 CC        		.word RUN-1
00C014  1  1D CD        		.word IF-1
00C016  1  07 CC        		.word RESTORE-1
00C018  1               TOKEN_GOSUB=$80+(*-TOKEN_ADDRESS_TABLE)/2
00C018  1  7D CC        		.word GOSUB-1
00C01A  1  C7 CC        		.word POP-1
00C01C  1               TOKEN_REM=$80+(*-TOKEN_ADDRESS_TABLE)/2
00C01C  1  30 CD        		.word REM-1
00C01E  1  19 CC        		.word STOP-1
00C020  1  40 CD        		.word ON-1
00C022  1  5C CC        		.word NULL-1
00C024  1  13 DA        		.word WAIT-1
00C026  1  94 E5        		.word LOAD-1
00C028  1  07 E7        		.word SAVE-1
00C02A  1  BF D5        		.word DEF-1
00C02C  1  0A DA        		.word POKE-1
00C02E  1               TOKEN_PRINT=$80+(*-TOKEN_ADDRESS_TABLE)/2
00C02E  1  10 CE        		.word PRINT-1
00C030  1  42 CC        		.word CONT-1
00C032  1  A2 CA        		.word LIST-1
00C034  1  6D CC        		.word CLEAR-1
00C036  1  4E CA        		.word NEW-1
00C038  1               TOKEN_TAB=$00+$80+(*-TOKEN_ADDRESS_TABLE)/2
00C038  1               TOKEN_TO=$01+$80+(*-TOKEN_ADDRESS_TABLE)/2
00C038  1               TOKEN_FN=$02+$80+(*-TOKEN_ADDRESS_TABLE)/2
00C038  1               TOKEN_SPC=$03+$80+(*-TOKEN_ADDRESS_TABLE)/2
00C038  1               TOKEN_THEN=$04+$80+(*-TOKEN_ADDRESS_TABLE)/2
00C038  1               TOKEN_NOT=$05+$80+(*-TOKEN_ADDRESS_TABLE)/2
00C038  1               TOKEN_STEP=$06+$80+(*-TOKEN_ADDRESS_TABLE)/2
00C038  1               TOKEN_PLUS=$07+$80+(*-TOKEN_ADDRESS_TABLE)/2
00C038  1               TOKEN_MINUS=$08+$80+(*-TOKEN_ADDRESS_TABLE)/2
00C038  1               TOKEN_GREATER=$0E+$80+(*-TOKEN_ADDRESS_TABLE)/2
00C038  1               TOKEN_EQUAL=$0F+$80+(*-TOKEN_ADDRESS_TABLE)/2
00C038  1               NUM_TOKENS=(*-TOKEN_ADDRESS_TABLE)/2
00C038  1               
00C038  1               UNFNC:
00C038  1               TOKEN_SGN=$11+$80+(*-TOKEN_ADDRESS_TABLE)/2
00C038  1  BA DD        		.word SGN
00C03A  1  44 DE        		.word INT
00C03C  1  D7 DD        		.word ABS
00C03E  1  0A 00        		.word USR
00C040  1  8F D5        		.word FRE
00C042  1  B0 D5        		.word POS
00C044  1  8E E0        		.word SQR
00C046  1  A2 E1        		.word RND
00C048  1  9F DB        		.word LOG
00C04A  1  FD E0        		.word EXP
00C04C  1  DE E1        		.word COS
00C04E  1  E5 E1        		.word SIN
00C050  1  2E E2        		.word TAN
00C052  1  7B E2        		.word ATN
00C054  1  00 DA        		.word PEEK
00C056  1  6E D9        		.word LEN
00C058  1  6E D6        		.word STR
00C05A  1  9F D9        		.word VAL
00C05C  1  7D D9        		.word ASC
00C05E  1  DE D8        		.word CHRSTR
00C060  1               TOKEN_LEFTSTR=$11+$80+(*-TOKEN_ADDRESS_TABLE)/2
00C060  1  F2 D8        		.word LEFTSTR
00C062  1  1E D9        		.word RIGHTSTR
00C064  1  29 D9        		.word MIDSTR
00C066  1               
00C066  1               MATHTBL:
00C066  1  79                   .byte   $79
00C067  1  50 DA                .word   FADDT-1
00C069  1  79                   .byte   $79
00C06A  1  39 DA                .word   FSUBT-1
00C06C  1  7B                   .byte   $7B
00C06D  1  DF DB                .word   FMULTT-1
00C06F  1  7B                   .byte   $7B
00C070  1  AE DC                .word   FDIVT-1
00C072  1  7F                   .byte   $7F
00C073  1  97 E0                .word   FPWRT-1
00C075  1  50                   .byte   $50
00C076  1  4A D2                .word   TAND-1
00C078  1  46                   .byte   $46
00C079  1  47 D2                .word   OR-1
00C07B  1  7D                   .byte   $7D
00C07C  1  D0 E0                .word   NEGOP-1
00C07E  1  5A                   .byte   $5A
00C07F  1  B9 D1                .word   EQUOP-1
00C081  1  64                   .byte   $64
00C082  1  77 D2                .word   RELOPS-1
00C084  1               
00C084  1               TOKEN_NAME_TABLE:
00C084  1  45 4E C4     		.byte "EN", $80+'D'
00C087  1  46 4F D2     		.byte "FO", $80+'R'
00C08A  1  4E 45 58 D4  		.byte "NEX", $80+'T'
00C08E  1  44 41 54 C1  		.byte "DAT", $80+'A'
00C092  1  49 4E 50 55  		.byte "INPU", $80+'T'
00C096  1  D4           
00C097  1  44 49 CD     		.byte "DI", $80+'M'
00C09A  1  52 45 41 C4  		.byte "REA", $80+'D'
00C09E  1  4C 45 D4     		.byte "LE", $80+'T'
00C0A1  1  47 4F 54 CF  		.byte "GOT", $80+'O'
00C0A5  1  52 55 CE     		.byte "RU", $80+'N'
00C0A8  1  49 C6        		.byte "I", $80+'F'
00C0AA  1  52 45 53 54  		.byte "RESTOR", $80+'E'
00C0AE  1  4F 52 C5     
00C0B1  1  47 4F 53 55  		.byte "GOSU", $80+'B'
00C0B5  1  C2           
00C0B6  1  52 45 54 55  		.byte "RETUR", $80+'N'
00C0BA  1  52 CE        
00C0BC  1  52 45 CD     		.byte "RE", $80+'M'
00C0BF  1  53 54 4F D0  		.byte "STO", $80+'P'
00C0C3  1  4F CE        		.byte "O", $80+'N'
00C0C5  1  4E 55 4C CC  		.byte "NUL", $80+'L'
00C0C9  1  57 41 49 D4  		.byte "WAI", $80+'T'
00C0CD  1  4C 4F 41 C4  		.byte "LOA", $80+'D'
00C0D1  1  53 41 56 C5  		.byte "SAV", $80+'E'
00C0D5  1  44 45 C6     		.byte "DE", $80+'F'
00C0D8  1  50 4F 4B C5  		.byte "POK", $80+'E'
00C0DC  1  50 52 49 4E  		.byte "PRIN", $80+'T'
00C0E0  1  D4           
00C0E1  1  43 4F 4E D4  		.byte "CON", $80+'T'
00C0E5  1  4C 49 53 D4  		.byte "LIS", $80+'T'
00C0E9  1  43 4C 45 41  		.byte "CLEA", $80+'R'
00C0ED  1  D2           
00C0EE  1  4E 45 D7     		.byte "NE", $80+'W'
00C0F1  1  54 41 42 A8  		.byte "TAB", $80+'('
00C0F5  1  54 CF        		.byte "T", $80+'O'
00C0F7  1  46 CE        		.byte "F", $80+'N'
00C0F9  1  53 50 43 A8  		.byte "SPC", $80+'('
00C0FD  1  54 48 45 CE  		.byte "THE", $80+'N'
00C101  1  4E 4F D4     		.byte "NO", $80+'T'
00C104  1  53 54 45 D0  		.byte "STE", $80+'P'
00C108  1  AB           		.byte "", $80+'+'
00C109  1  AD           		.byte "", $80+'-'
00C10A  1  AA           		.byte "", $80+'*'
00C10B  1  AF           		.byte "", $80+'/'
00C10C  1  DE           		.byte "", $80+'^'
00C10D  1  41 4E C4     		.byte "AN", $80+'D'
00C110  1  4F D2        		.byte "O", $80+'R'
00C112  1  BE           		.byte "", $80+'>'
00C113  1  BD           		.byte "", $80+'='
00C114  1  BC           		.byte "", $80+'<'
00C115  1  53 47 CE     		.byte "SG", $80+'N'
00C118  1  49 4E D4     		.byte "IN", $80+'T'
00C11B  1  41 42 D3     		.byte "AB", $80+'S'
00C11E  1  55 53 D2     		.byte "US", $80+'R'
00C121  1  46 52 C5     		.byte "FR", $80+'E'
00C124  1  50 4F D3     		.byte "PO", $80+'S'
00C127  1  53 51 D2     		.byte "SQ", $80+'R'
00C12A  1  52 4E C4     		.byte "RN", $80+'D'
00C12D  1  4C 4F C7     		.byte "LO", $80+'G'
00C130  1  45 58 D0     		.byte "EX", $80+'P'
00C133  1  43 4F D3     		.byte "CO", $80+'S'
00C136  1  53 49 CE     		.byte "SI", $80+'N'
00C139  1  54 41 CE     		.byte "TA", $80+'N'
00C13C  1  41 54 CE     		.byte "AT", $80+'N'
00C13F  1  50 45 45 CB  		.byte "PEE", $80+'K'
00C143  1  4C 45 CE     		.byte "LE", $80+'N'
00C146  1  53 54 52 A4  		.byte "STR", $80+'$'
00C14A  1  56 41 CC     		.byte "VA", $80+'L'
00C14D  1  41 53 C3     		.byte "AS", $80+'C'
00C150  1  43 48 52 A4  		.byte "CHR", $80+'$'
00C154  1  4C 45 46 54  		.byte "LEFT", $80+'$'
00C158  1  A4           
00C159  1  52 49 47 48  		.byte "RIGHT", $80+'$'
00C15D  1  54 A4        
00C15F  1  4D 49 44 A4  		.byte "MID", $80+'$'
00C163  1  00           		.byte   0
00C164  1               
00C164  1               ERROR_MESSAGES:
00C164  1               ERR_NOFOR := <(*-ERROR_MESSAGES)
00C164  1  4E 46                .byte "NF"
00C166  1               ERR_SYNTAX := <(*-ERROR_MESSAGES)
00C166  1  53 4E                .byte "SN"
00C168  1               ERR_NOGOSUB := <(*-ERROR_MESSAGES)
00C168  1  52 47                .byte "RG"
00C16A  1               ERR_NODATA := <(*-ERROR_MESSAGES)
00C16A  1  4F 44                .byte "OD"
00C16C  1               ERR_ILLQTY := <(*-ERROR_MESSAGES)
00C16C  1  46 43                .byte "FC"
00C16E  1               ERR_OVERFLOW := <(*-ERROR_MESSAGES)
00C16E  1  4F 56                .byte "OV"
00C170  1               ERR_MEMFULL := <(*-ERROR_MESSAGES)
00C170  1  4F 4D                .byte "OM"
00C172  1               ERR_UNDEFSTAT := <(*-ERROR_MESSAGES)
00C172  1  55 53                .byte "US"
00C174  1               ERR_BADSUBS := <(*-ERROR_MESSAGES)
00C174  1  42 53                .byte "BS"
00C176  1               ERR_REDIMD := <(*-ERROR_MESSAGES)
00C176  1  44 44                .byte "DD"
00C178  1               ERR_ZERODIV := <(*-ERROR_MESSAGES)
00C178  1  2F 30                .byte "/0"
00C17A  1               ERR_ILLDIR := <(*-ERROR_MESSAGES)
00C17A  1  49 44                .byte "ID"
00C17C  1               ERR_BADTYPE := <(*-ERROR_MESSAGES)
00C17C  1  54 4D                .byte "TM"
00C17E  1               ERR_STRLONG := <(*-ERROR_MESSAGES)
00C17E  1  4C 53                .byte "LS"
00C180  1               ERR_FRMCPX := <(*-ERROR_MESSAGES)
00C180  1  53 54                .byte "ST"
00C182  1               ERR_CANTCONT := <(*-ERROR_MESSAGES)
00C182  1  43 4E                .byte "CN"
00C184  1               ERR_UNDEFFN := <(*-ERROR_MESSAGES)
00C184  1  55 46                .byte "UF"
00C186  1               
00C186  1               ; global messages: "error", "in", "ready", "break"
00C186  1               QT_ERROR:
00C186  1  20 45 52 52          .byte   " ERROR"
00C18A  1  4F 52        
00C18C  1  00                   .byte   0
00C18D  1               QT_IN:
00C18D  1  20 49 4E 20          .byte   " IN "
00C191  1  00                   .byte   $00
00C192  1               QT_OK:
00C192  1  0D 0A 4F 4B  		.byte   CR,LF,"OK",CR,LF
00C196  1  0D 0A        
00C198  1  00           		.byte	0
00C199  1               QT_BREAK:
00C199  1  0D 0A 42 52  		.byte CR,LF,"BREAK"
00C19D  1  45 41 4B     
00C1A0  1  00                   .byte   0
00C1A1  1               
00C1A1  1               	.include "hwconfig.s"
00C1A1  2               PORTB = $b000
00C1A1  2               PORTA = $b001
00C1A1  2               DDRB = $b002
00C1A1  2               DDRA = $b003
00C1A1  2               
00C1A1  2               LCD_E  = %10000000
00C1A1  2               LCD_RW = %01000000
00C1A1  2               LCD_RS = %00100000
00C1A1  2               
00C1A1  2               SD_CS   = %00010000
00C1A1  2               SD_SCK  = %00001000
00C1A1  2               SD_MOSI = %00000100
00C1A1  2               SD_MISO = %00000010
00C1A1  2               
00C1A1  2               PORTA_OUTPUTPINS = LCD_E | LCD_RW | LCD_RS | SD_CS | SD_SCK | SD_MOSI
00C1A1  2               
00C1A1  2               via_init:
00C1A1  2  A9 FF          lda #%11111111          ; Set all pins on port B to output
00C1A3  2  8D 02 B0       sta DDRB
00C1A6  2  A9 FC          lda #PORTA_OUTPUTPINS   ; Set various pins on port A to output
00C1A8  2  8D 03 B0       sta DDRA
00C1AB  2  60             rts
00C1AC  2               
00C1AC  2               
00C1AC  1                	.include "libsd.s"
00C1AC  2               ; SD card interface module
00C1AC  2               ;
00C1AC  2               ; Requires zero-page variable storage:
00C1AC  2               ;   zp_sd_address - a bytes
00C1AC  2               ;   zp_sd_currentsector - 4 bytes
00C1AC  2               
00C1AC  2               cmsg:
00C1AC  2  43 6F 6D 6D    .byte "Command: ", $00
00C1B0  2  61 6E 64 3A  
00C1B4  2  20 00        
00C1B6  2               
00C1B6  2               sd_init:
00C1B6  2                 ; Let the SD card boot up, by pumping the clock with SD CS disabled
00C1B6  2               
00C1B6  2                 ; We need to apply around 80 clock pulses with CS and MOSI higha
00C1B6  2                 ; Normally MOSI doesn't matter when CS is high, but the card is
00C1B6  2                 ; not yet is SPI mode, and in this non-SPI state it does carea
00C1B6  2               
00C1B6  2  A9 14          lda #SD_CS | SD_MOSI
00C1B8  2  A2 A0          ldx #160               ; toggle the clock 160 times, so 80 low-high transitions
00C1BA  2               apreinitloop:
00C1BA  2  49 08          eor #SD_SCK
00C1BC  2  8D 01 B0       sta PORTA
00C1BF  2  CA             dex
00C1C0  2  D0 F8          bne apreinitloop
00C1C2  2               
00C1C2  2               
00C1C2  2               acmd0: ; GO_IDLE_STATE - resets card to idle state, and SPI mode
00C1C2  2  A9 29          lda #<sd_cmd0_bytes
00C1C4  2  85 01          sta zp_sd_address
00C1C6  2  A9 C2          lda #>sd_cmd0_bytes
00C1C8  2  85 02          sta zp_sd_address+1
00C1CA  2               
00C1CA  2  20 7B C2       jsr sd_sendcommand
00C1CD  2               
00C1CD  2                 ; Expect status response $01 (not initialized)
00C1CD  2                ; cmp #$01
00C1CD  2                ; bne ainitfailed
00C1CD  2               
00C1CD  2               acmd8: ; SEND_IF_COND - tell the card how we want it to operate (3a3V, etc)
00C1CD  2  A9 2F          lda #<sd_cmd8_bytes
00C1CF  2  85 01          sta zp_sd_address
00C1D1  2  A9 C2          lda #>sd_cmd8_bytes
00C1D3  2  85 02          sta zp_sd_address+1
00C1D5  2               
00C1D5  2  20 7B C2       jsr sd_sendcommand
00C1D8  2               
00C1D8  2                 ; Expect status response $01 (not initialized)
00C1D8  2  C9 01          cmp #$01
00C1DA  2  D0 43          bne ainitfailed
00C1DC  2               
00C1DC  2                 ; Read 3a-bit return value, but ignore it
00C1DC  2  20 41 C2       jsr sd_readbyte
00C1DF  2  20 41 C2       jsr sd_readbyte
00C1E2  2  20 41 C2       jsr sd_readbyte
00C1E5  2  20 41 C2       jsr sd_readbyte
00C1E8  2               
00C1E8  2               acmd55: ; APP_CMD - required prefix for ACMD commands
00C1E8  2  A9 35          lda #<sd_cmd55_bytes
00C1EA  2  85 01          sta zp_sd_address
00C1EC  2  A9 C2          lda #>sd_cmd55_bytes
00C1EE  2  85 02          sta zp_sd_address+1
00C1F0  2               
00C1F0  2  20 7B C2       jsr sd_sendcommand
00C1F3  2               
00C1F3  2                 ; Expect status response $01 (not initialized)
00C1F3  2  C9 01          cmp #$01
00C1F5  2  D0 28          bne ainitfailed
00C1F7  2               
00C1F7  2               acmd41: ; APP_SEND_OP_COND - send operating conditions, initialize card
00C1F7  2  A9 3B          lda #<sd_cmd41_bytes
00C1F9  2  85 01          sta zp_sd_address
00C1FB  2  A9 C2          lda #>sd_cmd41_bytes
00C1FD  2  85 02          sta zp_sd_address+1
00C1FF  2               
00C1FF  2  20 7B C2       jsr sd_sendcommand
00C202  2               
00C202  2                 ; Status response $00 means initialised
00C202  2  C9 00          cmp #$00
00C204  2  F0 11          beq ainitialized
00C206  2               
00C206  2                 ; Otherwise expect status response $01 (not initialized)
00C206  2  C9 01          cmp #$01
00C208  2  D0 15          bne ainitfailed
00C20A  2               
00C20A  2                 ; Not initialized yet, so wait a while then try againa
00C20A  2                 ; This retry is important, to give the card time to initializea
00C20A  2               
00C20A  2  A2 00          ldx #0
00C20C  2  A0 00          ldy #0
00C20E  2               adelayloop:
00C20E  2  88             dey
00C20F  2  D0 FD          bne adelayloop
00C211  2  CA             dex
00C212  2  D0 FA          bne adelayloop
00C214  2               
00C214  2  4C E8 C1       jmp acmd55
00C217  2               
00C217  2               
00C217  2               ainitialized:
00C217  2  A0 C3          ldy #>initmsg
00C219  2  A2 74          ldx #<initmsg
00C21B  2  20 0E C7       jsr w_acia_full
00C21E  2  60             rts
00C21F  2               
00C21F  2               ainitfailed:
00C21F  2  A0 C3          ldy #>initfailedmsg
00C221  2  A2 5A          ldx #<initfailedmsg
00C223  2  20 0E C7       jsr w_acia_full
00C226  2               aloop:
00C226  2  4C 43 FF       jmp dispstart
00C229  2               
00C229  2               sd_cmd0_bytes:
00C229  2  40 00 00 00    .byte $40, $00, $00, $00, $00, $95
00C22D  2  00 95        
00C22F  2               sd_cmd8_bytes:
00C22F  2  48 00 00 01    .byte $48, $00, $00, $01, $aa, $87
00C233  2  AA 87        
00C235  2               sd_cmd55_bytes:
00C235  2  77 00 00 00    .byte $77, $00, $00, $00, $00, $01
00C239  2  00 01        
00C23B  2               sd_cmd41_bytes:
00C23B  2  69 40 00 00    .byte $69, $40, $00, $00, $00, $01
00C23F  2  00 01        
00C241  2               
00C241  2               
00C241  2               
00C241  2               sd_readbyte:
00C241  2                 ; Enable the card and tick the clock 8 times with MOSI high,
00C241  2                 ; capturing bits from MISO and returning them
00C241  2               
00C241  2  A2 FE          ldx #$fe    ; Preloaded with seven ones and a zero, so we stop after eight bits
00C243  2               
00C243  2               baloop:
00C243  2               
00C243  2  A9 04          lda #SD_MOSI                ; enable card (CS low), set MOSI (resting state), SCK low
00C245  2  8D 01 B0       sta PORTA
00C248  2               
00C248  2  A9 0C          lda #SD_MOSI | SD_SCK       ; toggle the clock high
00C24A  2  8D 01 B0       sta PORTA
00C24D  2               
00C24D  2  AD 01 B0       lda PORTA                   ; read next bit
00C250  2  29 02          and #SD_MISO
00C252  2               
00C252  2  18             clc                         ; default to clearing the bottom bit
00C253  2  F0 01          beq abitnotset              ; unless MISO was set
00C255  2  38             sec                         ; in which case get ready to set the bottom bit
00C256  2               abitnotset:
00C256  2               
00C256  2  8A             txa                         ; transfer partial result from X
00C257  2  2A             rol                         ; rotate carry bit into read result, and loop bit into carry
00C258  2  AA             tax                         ; save partial result back to X
00C259  2               
00C259  2  B0 E8          bcs baloop                   ; loop if we need to read more bits
00C25B  2               
00C25B  2  60             rts
00C25C  2               
00C25C  2               
00C25C  2               sd_writebyte:
00C25C  2                 ; Tick the clock 8 times with descending bits on MOSI
00C25C  2                 ; SD communication is mostly half-duplex so we ignore anything it sends back here
00C25C  2               
00C25C  2  A2 08          ldx #8                      ; send 8 bits
00C25E  2               
00C25E  2               arloop:
00C25E  2  0A             asl                         ; shift next bit into carry
00C25F  2  A8             tay                         ; save remaining bits for later
00C260  2               
00C260  2  A9 00          lda #0
00C262  2  90 02          bcc asendbit                ; if carry clear, don't set MOSI for this bit
00C264  2  09 04          ora #SD_MOSI
00C266  2               
00C266  2               asendbit:
00C266  2  8D 01 B0       sta PORTA                   ; set MOSI (or not) first with SCK low
00C269  2  49 08          eor #SD_SCK
00C26B  2  8D 01 B0       sta PORTA                   ; raise SCK keeping MOSI the same, to send the bit
00C26E  2               
00C26E  2  98             tya                         ; restore remaining bits to send
00C26F  2               
00C26F  2  CA             dex
00C270  2  D0 EC          bne arloop                   ; loop if there are more bits to send
00C272  2               
00C272  2  60             rts
00C273  2               
00C273  2               
00C273  2               sd_waitresult:
00C273  2                 ; Wait for the SD card to return something other than $ff
00C273  2  20 41 C2       jsr sd_readbyte
00C276  2  C9 FF          cmp #$ff
00C278  2  F0 F9          beq sd_waitresult
00C27A  2  60             rts
00C27B  2               
00C27B  2               
00C27B  2               sd_sendcommand:
00C27B  2                 ; Debug print which command is being executed
00C27B  2                ; jsr lcd_cleardisplay
00C27B  2                ; jsr cleardisplay
00C27B  2               
00C27B  2               ;  phx
00C27B  2               ;  phy
00C27B  2               ;  ldx #<cmsg
00C27B  2               ;  ldy #>cmsg
00C27B  2               ;  jsr w_acia_full
00C27B  2               ;  ply
00C27B  2               ;  plx
00C27B  2               
00C27B  2               ;  ldx #0
00C27B  2               ;  lda (zp_sd_address,x)
00C27B  2               ;  jsr print_hex_acia
00C27B  2               
00C27B  2               ;  lda #$a0
00C27B  2               ;  jsr print_chara
00C27B  2               ;
00C27B  2               ;  lda #$a0
00C27B  2               ;  jsr print_chara
00C27B  2               
00C27B  2  A9 04          lda #SD_MOSI           ; pull CS low to begin command
00C27D  2  8D 01 B0       sta PORTA
00C280  2               
00C280  2  A0 00          ldy #0
00C282  2  B1 01          lda (zp_sd_address),y    ; command byte
00C284  2  20 5C C2       jsr sd_writebyte
00C287  2  A0 01          ldy #1
00C289  2  B1 01          lda (zp_sd_address),y    ; data 1
00C28B  2  20 5C C2       jsr sd_writebyte
00C28E  2  A0 02          ldy #2
00C290  2  B1 01          lda (zp_sd_address),y    ; data 2
00C292  2  20 5C C2       jsr sd_writebyte
00C295  2  A0 03          ldy #3
00C297  2  B1 01          lda (zp_sd_address),y    ; data 3
00C299  2  20 5C C2       jsr sd_writebyte
00C29C  2  A0 04          ldy #4
00C29E  2  B1 01          lda (zp_sd_address),y    ; data 4
00C2A0  2  20 5C C2       jsr sd_writebyte
00C2A3  2  A0 05          ldy #5
00C2A5  2  B1 01          lda (zp_sd_address),y    ; crc
00C2A7  2  20 5C C2       jsr sd_writebyte
00C2AA  2               
00C2AA  2  20 73 C2       jsr sd_waitresult
00C2AD  2  48             pha
00C2AE  2               
00C2AE  2               ;  phy
00C2AE  2               ;  phx
00C2AE  2               ;  ldy #>respmsg
00C2AE  2               ;  ldx #<respmsg
00C2AE  2               ;  jsr w_acia_full
00C2AE  2               ;  ply
00C2AE  2               ;  plx
00C2AE  2               
00C2AE  2                 ; Debug print the result code
00C2AE  2               ;  jsr print_hex_acia
00C2AE  2               
00C2AE  2               ;  lda #$0d
00C2AE  2               ;  jsr print_chara
00C2AE  2               ;
00C2AE  2               ;  lda #$0a
00C2AE  2               ;  jsr print_chara
00C2AE  2               
00C2AE  2                 ; End command
00C2AE  2  A9 14          lda #SD_CS | SD_MOSI   ; set CS high again
00C2B0  2  8D 01 B0       sta PORTA
00C2B3  2               
00C2B3  2  68             pla   ; restore result code
00C2B4  2  60             rts
00C2B5  2               
00C2B5  2               
00C2B5  2               sd_readsector:
00C2B5  2                 ; Read a sector from the SD carda  A sector is 512 bytes.
00C2B5  2                 ;
00C2B5  2                 ; Parameters:
00C2B5  2                 ;    zp_sd_currentsector   3a-bit sector number
00C2B5  2                 ;    zp_sd_address     address of buffer to receive data
00C2B5  2               
00C2B5  2  A9 04          lda #SD_MOSI
00C2B7  2  8D 01 B0       sta PORTA
00C2BA  2               
00C2BA  2                 ; Command 17, arg is sector number, crc not checked
00C2BA  2  A9 51          lda #$51                    ; CMD17 - READ_SINGLE_BLOCK
00C2BC  2  20 5C C2       jsr sd_writebyte
00C2BF  2  A5 06          lda zp_sd_currentsector+3   ; sector 24:31
00C2C1  2  20 5C C2       jsr sd_writebyte
00C2C4  2  A5 05          lda zp_sd_currentsector+2   ; sector 16:23
00C2C6  2  20 5C C2       jsr sd_writebyte
00C2C9  2  A5 04          lda zp_sd_currentsector+1   ; sector 8:15
00C2CB  2  20 5C C2       jsr sd_writebyte
00C2CE  2  A5 03          lda zp_sd_currentsector     ; sector 0:7
00C2D0  2  20 5C C2       jsr sd_writebyte
00C2D3  2  A9 01          lda #$01                    ; crc (not checked)
00C2D5  2  20 5C C2       jsr sd_writebyte
00C2D8  2               
00C2D8  2  20 73 C2       jsr sd_waitresult
00C2DB  2  C9 00          cmp #$00
00C2DD  2  D0 53          bne afail
00C2DF  2               
00C2DF  2                 ; wait for data
00C2DF  2  20 73 C2       jsr sd_waitresult
00C2E2  2  C9 FE          cmp #$fe
00C2E4  2  D0 4C          bne afail
00C2E6  2               
00C2E6  2                 ; Need to read 512 bytes - two pages of 256 bytes each
00C2E6  2  20 3B C3       jsr areadpage
00C2E9  2  E6 02          inc zp_sd_address+1
00C2EB  2  20 3B C3       jsr areadpage
00C2EE  2  C6 02          dec zp_sd_address+1
00C2F0  2               
00C2F0  2                 ; End command
00C2F0  2  A9 14          lda #SD_CS | SD_MOSI
00C2F2  2  8D 01 B0       sta PORTA
00C2F5  2               
00C2F5  2  38             sec
00C2F6  2  60             rts
00C2F7  2               
00C2F7  2               sd_writesector:
00C2F7  2                 ; Write a sector to the SD card.  A sector is 512 bytes.
00C2F7  2                 ;
00C2F7  2                 ; Parameters:
00C2F7  2                 ;    zp_sd_currentsector   32-bit sector number
00C2F7  2                 ;    zp_sd_address     address of buffer to take data from
00C2F7  2               
00C2F7  2  A9 02          lda #SD_MISO
00C2F9  2  8D 01 B0       sta PORTA
00C2FC  2               
00C2FC  2                 ; Command 24, arg is sector number, crc not checked
00C2FC  2  A9 58          lda #$58                    ; CMD24 - WRITE_BLOCK
00C2FE  2  20 5C C2       jsr sd_writebyte
00C301  2  A5 06          lda zp_sd_currentsector+3   ; sector 24:31
00C303  2  20 5C C2       jsr sd_writebyte
00C306  2  A5 05          lda zp_sd_currentsector+2   ; sector 16:23
00C308  2  20 5C C2       jsr sd_writebyte
00C30B  2  A5 04          lda zp_sd_currentsector+1   ; sector 8:15
00C30D  2  20 5C C2       jsr sd_writebyte
00C310  2  A5 03          lda zp_sd_currentsector     ; sector 0:7
00C312  2  20 5C C2       jsr sd_writebyte
00C315  2  A9 01          lda #$01                    ; crc (not checked)
00C317  2  20 5C C2       jsr sd_writebyte
00C31A  2               
00C31A  2  20 73 C2       jsr sd_waitresult
00C31D  2  C9 00          cmp #$00
00C31F  2  D0 11          bne afail
00C321  2               
00C321  2                 ; wait for data
00C321  2                 ;jsr sd_waitresult
00C321  2                 ;cmp #$fe
00C321  2                 ;bne afail
00C321  2                 ; BUG I don't think it need to wait for any more data, but I gotta check the datasheet more... (hard to read)
00C321  2               
00C321  2                 ; Need to write 512 bytes - two pages of 256 bytes each
00C321  2  20 46 C3       jsr awritepage
00C324  2  E6 02          inc zp_sd_address+1
00C326  2  20 46 C3       jsr awritepage
00C329  2  C6 02          dec zp_sd_address+1
00C32B  2               
00C32B  2                 ; End command
00C32B  2  A9 14          lda #SD_CS | SD_MOSI ; set cs and mosi high (disconnected)
00C32D  2  8D 01 B0       sta PORTA
00C330  2               
00C330  2  38             sec
00C331  2  60             rts
00C332  2               
00C332  2               afail:
00C332  2  A2 5F          ldx #<failedmsg
00C334  2  A0 C3          ldy #>failedmsg  ;Failed!
00C336  2  20 0E C7       jsr w_acia_full
00C339  2               afailloop:
00C339  2  18             clc
00C33A  2  60             rts
00C33B  2               
00C33B  2               areadpage:
00C33B  2                 ; Read 256 bytes to the address at zp_sd_address
00C33B  2  A0 00          ldy #0
00C33D  2               areadloop:
00C33D  2  20 41 C2       jsr sd_readbyte
00C340  2  91 01          sta (zp_sd_address),y
00C342  2  C8             iny
00C343  2  D0 F8          bne areadloop
00C345  2  60             rts
00C346  2               
00C346  2               awritepage:
00C346  2                 ; Write 256 bytes to the sd card
00C346  2  A0 00          ldy #0
00C348  2               awriteloop:
00C348  2  B1 01          lda (zp_sd_address),y
00C34A  2  20 5C C2       jsr sd_writebyte
00C34D  2  C8             iny
00C34E  2  D0 F8          bne awriteloop
00C350  2  60             rts
00C351  2               
00C351  2               statusmsg:
00C351  2  53 74 61 74    .byte "Status: ", $00
00C355  2  75 73 3A 20  
00C359  2  00           
00C35A  2               initfailedmsg:
00C35A  2  49 6E 69 74    .byte "Init "
00C35E  2  20           
00C35F  2               failedmsg:
00C35F  2  46 61 69 6C    .byte "Failed!", $0d, $0a, $00
00C363  2  65 64 21 0D  
00C367  2  0A 00        
00C369  2               respmsg:
00C369  2  52 65 73 70    .byte "Response: ", $00
00C36D  2  6F 6E 73 65  
00C371  2  3A 20 00     
00C374  2               initmsg:
00C374  2  49 6E 69 74    .byte "Initialized!", $0d, $0a, $00
00C378  2  69 61 6C 69  
00C37C  2  7A 65 64 21  
00C383  2               
00C383  1                 	.include "libfat32.s"
00C383  2               ; FAT32/SD interface library
00C383  2               ;
00C383  2               ; This module requires some RAM workspace to be defined elsewhere:
00C383  2               ;
00C383  2               ; fat32_workspace    - a large page-aligned 512-byte workspace
00C383  2               ; zp_fat32_variables - 24 bytes of zero-page storage for variables etc
00C383  2               
00C383  2               fat32_readbuffer = fat32_workspace
00C383  2               
00C383  2               fat32_fatstart          = zp_fat32_variables + $00  ; 4 bytes
00C383  2               fat32_datastart         = zp_fat32_variables + $04  ; 4 bytes
00C383  2               fat32_rootcluster       = zp_fat32_variables + $08  ; 4 bytes
00C383  2               fat32_sectorspercluster = zp_fat32_variables + $0c  ; 1 byte
00C383  2               fat32_pendingsectors    = zp_fat32_variables + $0d  ; 1 byte
00C383  2               fat32_address           = zp_fat32_variables + $0e  ; 2 bytes
00C383  2               fat32_nextcluster       = zp_fat32_variables + $10  ; 4 bytes
00C383  2               fat32_bytesremaining    = zp_fat32_variables + $14  ; 4 bytes
00C383  2               
00C383  2               fat32_errorstage        = fat32_bytesremaining  ; only used during initializatio
00C383  2               fat32_filenamepointer   = fat32_bytesremaining  ; only used when searching for a file
00C383  2               
00C383  2               
00C383  2               fat32_init:
00C383  2                 ; Initialize the module - read the MBR etc, find the partition,
00C383  2                 ; and set up the variables ready for navigating the filesystem
00C383  2               
00C383  2                 ; Read the MBR and extract pertinent information
00C383  2               
00C383  2  A9 00          lda #0
00C385  2  85 D2          sta fat32_errorstage
00C387  2               
00C387  2                 ; Sector 0
00C387  2  A9 00          lda #0
00C389  2  85 03          sta zp_sd_currentsector
00C38B  2  85 04          sta zp_sd_currentsector+1
00C38D  2  85 05          sta zp_sd_currentsector+2
00C38F  2  85 06          sta zp_sd_currentsector+3
00C391  2               
00C391  2                 ; Target buffer
00C391  2  A9 00          lda #<fat32_readbuffer
00C393  2  85 01          sta zp_sd_address
00C395  2  A9 02          lda #>fat32_readbuffer
00C397  2  85 02          sta zp_sd_address+1
00C399  2               
00C399  2                 ; Do the read
00C399  2  20 B5 C2       jsr sd_readsector
00C39C  2               
00C39C  2               
00C39C  2  E6 D2          inc fat32_errorstage ; stage 1 = boot sector signature check
00C39E  2               
00C39E  2                 ; Check some things
00C39E  2  AD FE 03       lda fat32_readbuffer+510 ; Boot sector signature 55
00C3A1  2  C9 55          cmp #$55
00C3A3  2  D0 2D          bne ufail
00C3A5  2  AD FF 03       lda fat32_readbuffer+511 ; Boot sector signature aa
00C3A8  2  C9 AA          cmp #$aa
00C3AA  2  D0 26          bne ufail
00C3AC  2               
00C3AC  2               
00C3AC  2  E6 D2          inc fat32_errorstage ; stage 2 = finding partition
00C3AE  2               
00C3AE  2                 ; Find a FAT32 partition
00C3AE  2               uFSTYPE_FAT32 = 12
00C3AE  2  A2 00          ldx #0
00C3B0  2  BD C2 03       lda fat32_readbuffer+$1c2,x
00C3B3  2  C9 0C          cmp #uFSTYPE_FAT32
00C3B5  2  F0 1E          beq ufoundpart
00C3B7  2  A2 10          ldx #16
00C3B9  2  BD C2 03       lda fat32_readbuffer+$1c2,x
00C3BC  2  C9 0C          cmp #uFSTYPE_FAT32
00C3BE  2  F0 15          beq ufoundpart
00C3C0  2  A2 20          ldx #32
00C3C2  2  BD C2 03       lda fat32_readbuffer+$1c2,x
00C3C5  2  C9 0C          cmp #uFSTYPE_FAT32
00C3C7  2  F0 0C          beq ufoundpart
00C3C9  2  A2 30          ldx #48
00C3CB  2  BD C2 03       lda fat32_readbuffer+$1c2,x
00C3CE  2  C9 0C          cmp #uFSTYPE_FAT32
00C3D0  2  F0 03          beq ufoundpart
00C3D2  2               
00C3D2  2               ufail:
00C3D2  2  4C 7F C4       jmp uerror
00C3D5  2               
00C3D5  2               ufoundpart:
00C3D5  2               
00C3D5  2                 ; Read the FAT32 BPB
00C3D5  2  BD C6 03       lda fat32_readbuffer+$1c6,x
00C3D8  2  85 03          sta zp_sd_currentsector
00C3DA  2  BD C7 03       lda fat32_readbuffer+$1c7,x
00C3DD  2  85 04          sta zp_sd_currentsector+1
00C3DF  2  BD C8 03       lda fat32_readbuffer+$1c8,x
00C3E2  2  85 05          sta zp_sd_currentsector+2
00C3E4  2  BD C9 03       lda fat32_readbuffer+$1c9,x
00C3E7  2  85 06          sta zp_sd_currentsector+3
00C3E9  2               
00C3E9  2  20 B5 C2       jsr sd_readsector
00C3EC  2               
00C3EC  2               
00C3EC  2  E6 D2          inc fat32_errorstage ; stage 3 = BPB signature check
00C3EE  2               
00C3EE  2                 ; Check some things
00C3EE  2  AD FE 03       lda fat32_readbuffer+510 ; BPB sector signature 55
00C3F1  2  C9 55          cmp #$55
00C3F3  2  D0 DD          bne ufail
00C3F5  2  AD FF 03       lda fat32_readbuffer+511 ; BPB sector signature aa
00C3F8  2  C9 AA          cmp #$aa
00C3FA  2  D0 D6          bne ufail
00C3FC  2               
00C3FC  2  E6 D2          inc fat32_errorstage ; stage 4 = RootEntCnt check
00C3FE  2               
00C3FE  2  AD 11 02       lda fat32_readbuffer+17 ; RootEntCnt should be 0 for FAT32
00C401  2  0D 12 02       ora fat32_readbuffer+18
00C404  2  D0 CC          bne ufail
00C406  2               
00C406  2  E6 D2          inc fat32_errorstage ; stage 5 = TotSec16 check
00C408  2               
00C408  2  AD 13 02       lda fat32_readbuffer+19 ; TotSec16 should be 0 for FAT32
00C40B  2  0D 14 02       ora fat32_readbuffer+20
00C40E  2  D0 C2          bne ufail
00C410  2               
00C410  2  E6 D2          inc fat32_errorstage ; stage 6 = SectorsPerCluster check
00C412  2               
00C412  2                 ; Check bytes per filesystem sector, it should be 512 for any SD card that supports FAT32
00C412  2  AD 0B 02       lda fat32_readbuffer+11 ; low byte should be zero
00C415  2  D0 BB          bne ufail
00C417  2  AD 0C 02       lda fat32_readbuffer+12 ; high byte is 2 (512), 4, 8, or 16
00C41A  2  C9 02          cmp #2
00C41C  2  D0 B4          bne ufail
00C41E  2               
00C41E  2               
00C41E  2                 ; Calculate the starting sector of the FAT
00C41E  2  18             clc
00C41F  2  A5 03          lda zp_sd_currentsector
00C421  2  6D 0E 02       adc fat32_readbuffer+14    ; reserved sectors lo
00C424  2  85 BE          sta fat32_fatstart
00C426  2  85 C2          sta fat32_datastart
00C428  2  A5 04          lda zp_sd_currentsector+1
00C42A  2  6D 0F 02       adc fat32_readbuffer+15    ; reserved sectors hi
00C42D  2  85 BF          sta fat32_fatstart+1
00C42F  2  85 C3          sta fat32_datastart+1
00C431  2  A5 05          lda zp_sd_currentsector+2
00C433  2  69 00          adc #0
00C435  2  85 C0          sta fat32_fatstart+2
00C437  2  85 C4          sta fat32_datastart+2
00C439  2  A5 06          lda zp_sd_currentsector+3
00C43B  2  69 00          adc #0
00C43D  2  85 C1          sta fat32_fatstart+3
00C43F  2  85 C5          sta fat32_datastart+3
00C441  2               
00C441  2                 ; Calculate the starting sector of the data area
00C441  2  AE 10 02       ldx fat32_readbuffer+16   ; number of FATs
00C444  2               uskipfatsloop:
00C444  2  18             clc
00C445  2  A5 C2          lda fat32_datastart
00C447  2  6D 24 02       adc fat32_readbuffer+36 ; fatsize 0
00C44A  2  85 C2          sta fat32_datastart
00C44C  2  A5 C3          lda fat32_datastart+1
00C44E  2  6D 25 02       adc fat32_readbuffer+37 ; fatsize 1
00C451  2  85 C3          sta fat32_datastart+1
00C453  2  A5 C4          lda fat32_datastart+2
00C455  2  6D 26 02       adc fat32_readbuffer+38 ; fatsize 2
00C458  2  85 C4          sta fat32_datastart+2
00C45A  2  A5 C5          lda fat32_datastart+3
00C45C  2  6D 27 02       adc fat32_readbuffer+39 ; fatsize 3
00C45F  2  85 C5          sta fat32_datastart+3
00C461  2  CA             dex
00C462  2  D0 E0          bne uskipfatsloop
00C464  2               
00C464  2                 ; Sectors-per-cluster is a power of two from 1 to 128
00C464  2  AD 0D 02       lda fat32_readbuffer+13
00C467  2  85 CA          sta fat32_sectorspercluster
00C469  2               
00C469  2                 ; Remember the root cluster
00C469  2  AD 2C 02       lda fat32_readbuffer+44
00C46C  2  85 C6          sta fat32_rootcluster
00C46E  2  AD 2D 02       lda fat32_readbuffer+45
00C471  2  85 C7          sta fat32_rootcluster+1
00C473  2  AD 2E 02       lda fat32_readbuffer+46
00C476  2  85 C8          sta fat32_rootcluster+2
00C478  2  AD 2F 02       lda fat32_readbuffer+47
00C47B  2  85 C9          sta fat32_rootcluster+3
00C47D  2               
00C47D  2  18             clc
00C47E  2  60             rts
00C47F  2               
00C47F  2               uerror:
00C47F  2  38             sec
00C480  2  60             rts
00C481  2               
00C481  2               
00C481  2               fat32_seekcluster:
00C481  2                 ; Gets ready to read fat32_nextcluster, and advances it according to the FAT
00C481  2               
00C481  2                 ; FAT sector = (cluster*4) / 512 = (cluster*2) / 256
00C481  2  A5 CE          lda fat32_nextcluster
00C483  2  0A             asl
00C484  2  A5 CF          lda fat32_nextcluster+1
00C486  2  2A             rol
00C487  2  85 03          sta zp_sd_currentsector
00C489  2  A5 D0          lda fat32_nextcluster+2
00C48B  2  2A             rol
00C48C  2  85 04          sta zp_sd_currentsector+1
00C48E  2  A5 D1          lda fat32_nextcluster+3
00C490  2  2A             rol
00C491  2  85 05          sta zp_sd_currentsector+2
00C493  2                 ; note: cluster numbers never have the top bit set, so no carry can occur
00C493  2               
00C493  2                 ; Add FAT starting sector
00C493  2  A5 03          lda zp_sd_currentsector
00C495  2  65 BE          adc fat32_fatstart
00C497  2  85 03          sta zp_sd_currentsector
00C499  2  A5 04          lda zp_sd_currentsector+1
00C49B  2  65 BF          adc fat32_fatstart+1
00C49D  2  85 04          sta zp_sd_currentsector+1
00C49F  2  A5 05          lda zp_sd_currentsector+2
00C4A1  2  65 C0          adc fat32_fatstart+2
00C4A3  2  85 05          sta zp_sd_currentsector+2
00C4A5  2  A9 00          lda #0
00C4A7  2  65 C1          adc fat32_fatstart+3
00C4A9  2  85 06          sta zp_sd_currentsector+3
00C4AB  2               
00C4AB  2                 ; Target buffer
00C4AB  2  A9 00          lda #<fat32_readbuffer
00C4AD  2  85 01          sta zp_sd_address
00C4AF  2  A9 02          lda #>fat32_readbuffer
00C4B1  2  85 02          sta zp_sd_address+1
00C4B3  2               
00C4B3  2                 ; Read the sector from the FAT
00C4B3  2  20 B5 C2       jsr sd_readsector
00C4B6  2               
00C4B6  2                 ; Before using this FAT data, set currentsector ready to read the cluster itself
00C4B6  2                 ; We need to multiply the cluster number minus two by the number of sectors per
00C4B6  2                 ; cluster, then add the data region start sector
00C4B6  2               
00C4B6  2                 ; Subtract two from cluster number
00C4B6  2  38             sec
00C4B7  2  A5 CE          lda fat32_nextcluster
00C4B9  2  E9 02          sbc #2
00C4BB  2  85 03          sta zp_sd_currentsector
00C4BD  2  A5 CF          lda fat32_nextcluster+1
00C4BF  2  E9 00          sbc #0
00C4C1  2  85 04          sta zp_sd_currentsector+1
00C4C3  2  A5 D0          lda fat32_nextcluster+2
00C4C5  2  E9 00          sbc #0
00C4C7  2  85 05          sta zp_sd_currentsector+2
00C4C9  2  A5 D1          lda fat32_nextcluster+3
00C4CB  2  E9 00          sbc #0
00C4CD  2  85 06          sta zp_sd_currentsector+3
00C4CF  2               
00C4CF  2                 ; Multiply by sectors-per-cluster which is a power of two between 1 and 128
00C4CF  2  A5 CA          lda fat32_sectorspercluster
00C4D1  2               uspcshiftloop:
00C4D1  2  4A             lsr
00C4D2  2  B0 0B          bcs uspcshiftloopdone
00C4D4  2  06 03          asl zp_sd_currentsector
00C4D6  2  26 04          rol zp_sd_currentsector+1
00C4D8  2  26 05          rol zp_sd_currentsector+2
00C4DA  2  26 06          rol zp_sd_currentsector+3
00C4DC  2  4C D1 C4       jmp uspcshiftloop
00C4DF  2               uspcshiftloopdone:
00C4DF  2               
00C4DF  2                 ; Add the data region start sector
00C4DF  2  18             clc
00C4E0  2  A5 03          lda zp_sd_currentsector
00C4E2  2  65 C2          adc fat32_datastart
00C4E4  2  85 03          sta zp_sd_currentsector
00C4E6  2  A5 04          lda zp_sd_currentsector+1
00C4E8  2  65 C3          adc fat32_datastart+1
00C4EA  2  85 04          sta zp_sd_currentsector+1
00C4EC  2  A5 05          lda zp_sd_currentsector+2
00C4EE  2  65 C4          adc fat32_datastart+2
00C4F0  2  85 05          sta zp_sd_currentsector+2
00C4F2  2  A5 06          lda zp_sd_currentsector+3
00C4F4  2  65 C5          adc fat32_datastart+3
00C4F6  2  85 06          sta zp_sd_currentsector+3
00C4F8  2               
00C4F8  2                 ; That's now ready for later code to read this sector in - tell it how many consecutive
00C4F8  2                 ; sectors it can now read
00C4F8  2  A5 CA          lda fat32_sectorspercluster
00C4FA  2  85 CB          sta fat32_pendingsectors
00C4FC  2               
00C4FC  2                 ; Now go back to looking up the next cluster in the chain
00C4FC  2                 ; Find the offset to this cluster's entry in the FAT sector we loaded earlier
00C4FC  2               
00C4FC  2                 ; Offset = (cluster*4) & 511 = (cluster & 127) * 4
00C4FC  2  A5 CE          lda fat32_nextcluster
00C4FE  2  29 7F          and #$7f
00C500  2  0A             asl
00C501  2  0A             asl
00C502  2  A8             tay ; Y = low byte of offset
00C503  2               
00C503  2                 ; Add the potentially carried bit to the high byte of the address
00C503  2  A5 02          lda zp_sd_address+1
00C505  2  69 00          adc #0
00C507  2  85 02          sta zp_sd_address+1
00C509  2               
00C509  2                 ; Copy out the next cluster in the chain for later use
00C509  2  B1 01          lda (zp_sd_address),y
00C50B  2  85 CE          sta fat32_nextcluster
00C50D  2  C8             iny
00C50E  2  B1 01          lda (zp_sd_address),y
00C510  2  85 CF          sta fat32_nextcluster+1
00C512  2  C8             iny
00C513  2  B1 01          lda (zp_sd_address),y
00C515  2  85 D0          sta fat32_nextcluster+2
00C517  2  C8             iny
00C518  2  B1 01          lda (zp_sd_address),y
00C51A  2  29 0F          and #$0f
00C51C  2  85 D1          sta fat32_nextcluster+3
00C51E  2               
00C51E  2                 ; See if it's the end of the chain
00C51E  2  09 F0          ora #$f0
00C520  2  25 D0          and fat32_nextcluster+2
00C522  2  25 CF          and fat32_nextcluster+1
00C524  2  C9 FF          cmp #$ff
00C526  2  D0 08          bne unotendofchain
00C528  2  A5 CE          lda fat32_nextcluster
00C52A  2  C9 F8          cmp #$f8
00C52C  2  90 02          bcc unotendofchain
00C52E  2               
00C52E  2                 ; It's the end of the chain, set the top bits so that we can tell this later on
00C52E  2  85 D1          sta fat32_nextcluster+3
00C530  2               unotendofchain:
00C530  2               
00C530  2  60             rts
00C531  2               
00C531  2               
00C531  2               fat32_readnextsector:
00C531  2                 ; Reads the next sector from a cluster chain into the buffer at fat32_addressu
00C531  2                 ;
00C531  2                 ; Advances the current sector ready for the next read and looks up the next cluster
00C531  2                 ; in the chain when necessaryu
00C531  2                 ;
00C531  2                 ; On return, carry is clear if data was read, or set if the cluster chain has endedu
00C531  2               
00C531  2                 ; Maybe there are pending sectors in the current cluster
00C531  2  A5 CB          lda fat32_pendingsectors
00C533  2  D0 07          bne ureadsector
00C535  2               
00C535  2                 ; No pending sectors, check for end of cluster chain
00C535  2  A5 D1          lda fat32_nextcluster+3
00C537  2  30 20          bmi uendofchain
00C539  2               
00C539  2                 ; Prepare to read the next cluster
00C539  2  20 81 C4       jsr fat32_seekcluster
00C53C  2               
00C53C  2               ureadsector:
00C53C  2  C6 CB          dec fat32_pendingsectors
00C53E  2               
00C53E  2                 ; Set up target address
00C53E  2  A5 CC          lda fat32_address
00C540  2  85 01          sta zp_sd_address
00C542  2  A5 CD          lda fat32_address+1
00C544  2  85 02          sta zp_sd_address+1
00C546  2               
00C546  2                 ; Read the sector
00C546  2  20 B5 C2       jsr sd_readsector
00C549  2               
00C549  2                 ; Advance to next sector
00C549  2  E6 03          inc zp_sd_currentsector
00C54B  2  D0 0A          bne usectorincrementdone
00C54D  2  E6 04          inc zp_sd_currentsector+1
00C54F  2  D0 06          bne usectorincrementdone
00C551  2  E6 05          inc zp_sd_currentsector+2
00C553  2  D0 02          bne usectorincrementdone
00C555  2  E6 06          inc zp_sd_currentsector+3
00C557  2               usectorincrementdone:
00C557  2               
00C557  2                 ; Success - clear carry and return
00C557  2  18             clc
00C558  2  60             rts
00C559  2               
00C559  2               uendofchain:
00C559  2                 ; End of chain - set carry and return
00C559  2  38             sec
00C55A  2  60             rts
00C55B  2               
00C55B  2               fat32_writenextsector:
00C55B  2                 ; Writes the next sector from a cluster chain into the buffer at fat32_address.
00C55B  2                 ;
00C55B  2                 ; Advances the current sector ready for the next write and looks up the next cluster
00C55B  2                 ; in the chain when necessary.
00C55B  2                 ;
00C55B  2                 ; On return, data was written.
00C55B  2               
00C55B  2                 ; Maybe there are pending sectors in the current cluster
00C55B  2  A5 CB          lda fat32_pendingsectors
00C55D  2  D0 07          bne writesector
00C55F  2               
00C55F  2                 ; No pending sectors, check for end of cluster chain
00C55F  2  A5 D1          lda fat32_nextcluster+3
00C561  2  30 20          bmi endofchainn
00C563  2               
00C563  2                 ; Prepare to write the next cluster
00C563  2  20 81 C4       jsr fat32_seekcluster
00C566  2                 ; BUG do i use this? or do i need to make a whole other thing so that I can use fat32_file_write..?
00C566  2               
00C566  2               writesector:
00C566  2  C6 CB          dec fat32_pendingsectors
00C568  2               
00C568  2                 ; Set up target address
00C568  2  A5 CC          lda fat32_address
00C56A  2  85 01          sta zp_sd_address
00C56C  2  A5 CD          lda fat32_address+1
00C56E  2  85 02          sta zp_sd_address+1
00C570  2               
00C570  2                 ; Write the sector
00C570  2  20 F7 C2       jsr sd_writesector
00C573  2               
00C573  2                 ; Advance to next sector
00C573  2  E6 03          inc zp_sd_currentsector
00C575  2  D0 0A          bne ursectorincrementdone
00C577  2  E6 04          inc zp_sd_currentsector+1
00C579  2  D0 06          bne ursectorincrementdone
00C57B  2  E6 05          inc zp_sd_currentsector+2
00C57D  2  D0 02          bne ursectorincrementdone
00C57F  2  E6 06          inc zp_sd_currentsector+3
00C581  2               ursectorincrementdone:
00C581  2               
00C581  2                 ; Success - clear carry and return
00C581  2  18             clc
00C582  2  60             rts
00C583  2               
00C583  2               endofchainn:
00C583  2                 ; End of chain - set carry and return
00C583  2  38             sec
00C584  2  60             rts
00C585  2               
00C585  2               fat32_openroot:
00C585  2                 ; Prepare to read the root directory
00C585  2               
00C585  2  A5 C6          lda fat32_rootcluster
00C587  2  85 CE          sta fat32_nextcluster
00C589  2  A5 C7          lda fat32_rootcluster+1
00C58B  2  85 CF          sta fat32_nextcluster+1
00C58D  2  A5 C8          lda fat32_rootcluster+2
00C58F  2  85 D0          sta fat32_nextcluster+2
00C591  2  A5 C9          lda fat32_rootcluster+3
00C593  2  85 D1          sta fat32_nextcluster+3
00C595  2               
00C595  2  20 81 C4       jsr fat32_seekcluster
00C598  2               
00C598  2                 ; Set the pointer to a large value so we always read a sector the first time through
00C598  2  A9 FF          lda #$ff
00C59A  2  85 02          sta zp_sd_address+1
00C59C  2               
00C59C  2  60             rts
00C59D  2               
00C59D  2                 ; BUG this is called after finalizing the filename, but I think its only ment for reading. hmm do i need to make another one for writing???!
00C59D  2               fat32_opendirent:
00C59D  2                 ; Prepare to read from a file or directory based on a dirent
00C59D  2                 ;
00C59D  2                 ; Point zp_sd_address at the dirent
00C59D  2               
00C59D  2                 ; Remember file size in bytes remaining
00C59D  2  A0 1C          ldy #28
00C59F  2  B1 01          lda (zp_sd_address),y
00C5A1  2  85 D2          sta fat32_bytesremaining
00C5A3  2  C8             iny
00C5A4  2  B1 01          lda (zp_sd_address),y
00C5A6  2  85 D3          sta fat32_bytesremaining+1
00C5A8  2  C8             iny
00C5A9  2  B1 01          lda (zp_sd_address),y
00C5AB  2  85 D4          sta fat32_bytesremaining+2
00C5AD  2  C8             iny
00C5AE  2  B1 01          lda (zp_sd_address),y
00C5B0  2  85 D5          sta fat32_bytesremaining+3
00C5B2  2               
00C5B2  2                 ; Seek to first cluster
00C5B2  2  A0 1A          ldy #26
00C5B4  2  B1 01          lda (zp_sd_address),y
00C5B6  2  85 CE          sta fat32_nextcluster
00C5B8  2  C8             iny
00C5B9  2  B1 01          lda (zp_sd_address),y
00C5BB  2  85 CF          sta fat32_nextcluster+1
00C5BD  2  A0 14          ldy #20
00C5BF  2  B1 01          lda (zp_sd_address),y
00C5C1  2  85 D0          sta fat32_nextcluster+2
00C5C3  2  C8             iny
00C5C4  2  B1 01          lda (zp_sd_address),y
00C5C6  2  85 D1          sta fat32_nextcluster+3
00C5C8  2               
00C5C8  2  20 81 C4       jsr fat32_seekcluster
00C5CB  2               
00C5CB  2                 ; Set the pointer to a large value so we always read a sector the first time through
00C5CB  2  A9 FF          lda #$ff
00C5CD  2  85 02          sta zp_sd_address+1
00C5CF  2               
00C5CF  2  60             rts
00C5D0  2               
00C5D0  2               
00C5D0  2               fat32_readdirent:
00C5D0  2                 ; Read a directory entry from the open directory
00C5D0  2                 ;
00C5D0  2                 ; On exit the carry is set if there were no more directory entriesu
00C5D0  2                 ;
00C5D0  2                 ; Otherwise, A is set to the file's attribute byte and
00C5D0  2                 ; zp_sd_address points at the returned directory entryu
00C5D0  2                 ; LFNs and empty entries are ignored automaticallyu
00C5D0  2               
00C5D0  2                 ; Increment pointer by 32 to point to next entry
00C5D0  2  18             clc
00C5D1  2  A5 01          lda zp_sd_address
00C5D3  2  69 20          adc #32
00C5D5  2  85 01          sta zp_sd_address
00C5D7  2  A5 02          lda zp_sd_address+1
00C5D9  2  69 00          adc #0
00C5DB  2  85 02          sta zp_sd_address+1
00C5DD  2               
00C5DD  2                 ; If it's not at the end of the buffer, we have data already
00C5DD  2  C9 04          cmp #>(fat32_readbuffer+$200)
00C5DF  2  90 0F          bcc ugotdata
00C5E1  2               
00C5E1  2                 ; Read another sector
00C5E1  2  A9 00          lda #<fat32_readbuffer
00C5E3  2  85 CC          sta fat32_address
00C5E5  2  A9 02          lda #>fat32_readbuffer
00C5E7  2  85 CD          sta fat32_address+1
00C5E9  2               
00C5E9  2  20 31 C5       jsr fat32_readnextsector
00C5EC  2  90 02          bcc ugotdata
00C5EE  2               
00C5EE  2               uendofdirectory:
00C5EE  2  38             sec
00C5EF  2  60             rts
00C5F0  2               
00C5F0  2               ugotdata:
00C5F0  2                 ; Check first character
00C5F0  2  A0 00          ldy #0
00C5F2  2  B1 01          lda (zp_sd_address),y
00C5F4  2               
00C5F4  2                 ; End of directory => abort
00C5F4  2  F0 F8          beq uendofdirectory
00C5F6  2               
00C5F6  2                 ; Empty entry => start again
00C5F6  2  C9 E5          cmp #$e5
00C5F8  2  F0 D6          beq fat32_readdirent
00C5FA  2               
00C5FA  2                 ; Check attributes
00C5FA  2  A0 0B          ldy #11
00C5FC  2  B1 01          lda (zp_sd_address),y
00C5FE  2  29 3F          and #$3f
00C600  2  C9 0F          cmp #$0f ; LFN => start again
00C602  2  F0 CC          beq fat32_readdirent
00C604  2               
00C604  2                 ; Yield this result
00C604  2  18             clc
00C605  2  60             rts
00C606  2               
00C606  2               
00C606  2               fat32_finddirent:
00C606  2                 ; Finds a particular directory entryu  X,Y point to the 11-character filename to seeku
00C606  2                 ; The directory should already be open for iterationu
00C606  2               
00C606  2                 ; Form ZP pointer to user's filename
00C606  2  86 D2          stx fat32_filenamepointer
00C608  2  84 D3          sty fat32_filenamepointer+1
00C60A  2               
00C60A  2                 ; Iterate until name is found or end of directory
00C60A  2               udirentloop:
00C60A  2  20 D0 C5       jsr fat32_readdirent
00C60D  2  A0 0A          ldy #10
00C60F  2  90 01          bcc ucomparenameloop
00C611  2  60             rts ; with carry set
00C612  2               
00C612  2               ucomparenameloop:
00C612  2  B1 01          lda (zp_sd_address),y
00C614  2  D1 D2          cmp (fat32_filenamepointer),y
00C616  2  D0 F2          bne udirentloop ; no match
00C618  2  88             dey
00C619  2  10 F7          bpl ucomparenameloop
00C61B  2               
00C61B  2                 ; Found it
00C61B  2  18             clc
00C61C  2  60             rts
00C61D  2               
00C61D  2               
00C61D  2               fat32_file_readbyte:
00C61D  2                 ; Read a byte from an open file
00C61D  2                 ;
00C61D  2                 ; The byte is returned in A with C clear; or if end-of-file was reached, C is set instead
00C61D  2               
00C61D  2  38             sec
00C61E  2               
00C61E  2                 ; Is there any data to read at all?
00C61E  2  A5 D2          lda fat32_bytesremaining
00C620  2  05 D3          ora fat32_bytesremaining+1
00C622  2  05 D4          ora fat32_bytesremaining+2
00C624  2  05 D5          ora fat32_bytesremaining+3
00C626  2  F0 3D          beq urts
00C628  2               
00C628  2                 ; Decrement the remaining byte count
00C628  2  A5 D2          lda fat32_bytesremaining
00C62A  2  E9 01          sbc #1
00C62C  2  85 D2          sta fat32_bytesremaining
00C62E  2  A5 D3          lda fat32_bytesremaining+1
00C630  2  E9 00          sbc #0
00C632  2  85 D3          sta fat32_bytesremaining+1
00C634  2  A5 D4          lda fat32_bytesremaining+2
00C636  2  E9 00          sbc #0
00C638  2  85 D4          sta fat32_bytesremaining+2
00C63A  2  A5 D5          lda fat32_bytesremaining+3
00C63C  2  E9 00          sbc #0
00C63E  2  85 D5          sta fat32_bytesremaining+3
00C640  2               
00C640  2                 ; Need to read a new sector?
00C640  2  A5 02          lda zp_sd_address+1
00C642  2  C9 04          cmp #>(fat32_readbuffer+$200)
00C644  2  90 0D          bcc uegotdata
00C646  2               
00C646  2                 ; Read another sector
00C646  2  A9 00          lda #<fat32_readbuffer
00C648  2  85 CC          sta fat32_address
00C64A  2  A9 02          lda #>fat32_readbuffer
00C64C  2  85 CD          sta fat32_address+1
00C64E  2               
00C64E  2  20 31 C5       jsr fat32_readnextsector
00C651  2  B0 12          bcs urts                    ; this shouldn't happen
00C653  2               
00C653  2               uegotdata:
00C653  2  A0 00          ldy #0
00C655  2  B1 01          lda (zp_sd_address),y
00C657  2               
00C657  2  E6 01          inc zp_sd_address
00C659  2  D0 0A          bne urts
00C65B  2  E6 02          inc zp_sd_address+1
00C65D  2  D0 06          bne urts
00C65F  2  E6 03          inc zp_sd_address+2
00C661  2  D0 02          bne urts
00C663  2  E6 04          inc zp_sd_address+3
00C665  2               
00C665  2               urts:
00C665  2  60             rts
00C666  2               
00C666  2               
00C666  2               fat32_file_read:
00C666  2                 ; Read a whole file into memoryu  It's assumed the file has just been opened
00C666  2                 ; and no data has been read yetu
00C666  2                 ;
00C666  2                 ; Also we read whole sectors, so data in the target region beyond the end of the
00C666  2                 ; file may get overwritten, up to the next 512-byte boundaryu
00C666  2                 ;
00C666  2                 ; And we don't properly support 64k+ files, as it's unnecessary complication given
00C666  2                 ; the 6502's small address space
00C666  2               
00C666  2                 ; Round the size up to the next whole sector
00C666  2  A5 D2          lda fat32_bytesremaining
00C668  2  C9 01          cmp #1                      ; set carry if bottom 8 bits not zero
00C66A  2  A5 D3          lda fat32_bytesremaining+1
00C66C  2  69 00          adc #0                      ; add carry, if any
00C66E  2  4A             lsr                         ; divide by 2
00C66F  2  69 00          adc #0                      ; round up
00C671  2               
00C671  2                 ; No data?
00C671  2  F0 12          beq udone
00C673  2               
00C673  2                 ; Store sector count - not a byte count any more
00C673  2  85 D2          sta fat32_bytesremaining
00C675  2               
00C675  2                 ; Read entire sectors to the user-supplied buffer
00C675  2               uwholesectorreadloop:
00C675  2                 ; Read a sector to fat32_address
00C675  2  20 31 C5       jsr fat32_readnextsector
00C678  2               
00C678  2                 ; Advance fat32_address by 512 bytes
00C678  2  A5 CD          lda fat32_address+1
00C67A  2  69 02          adc #2                      ; carry already clear
00C67C  2  85 CD          sta fat32_address+1
00C67E  2               
00C67E  2  A6 D2          ldx fat32_bytesremaining    ; note - actually loads sectors remaining
00C680  2  CA             dex
00C681  2  86 D2          stx fat32_bytesremaining    ; note - actually stores sectors remaining
00C683  2               
00C683  2  D0 F0          bne uwholesectorreadloop
00C685  2               
00C685  2               udone:
00C685  2  60             rts
00C686  2               
00C686  2               fat32_file_write:
00C686  2                 ; Write a whole file from memoryu  It's assumed the file has just been opened
00C686  2                 ; and no data has been written yet.
00C686  2                 ;
00C686  2                 ; Also we write whole sectors, so data in the target region beyond the end of the
00C686  2                 ; file may get overwritten, up to the next 512-byte boundary.
00C686  2                 ;
00C686  2                 ; And we don't properly support 64k+ files, as it's unnecessary complication given
00C686  2                 ; the 6502's small address space
00C686  2               
00C686  2                 ; Round the size up to the next whole sector
00C686  2  A5 D2          lda fat32_bytesremaining
00C688  2  C9 01          cmp #1                      ; set carry if bottom 8 bits not zero
00C68A  2  A5 D3          lda fat32_bytesremaining+1
00C68C  2  69 00          adc #0                      ; add carry, if any
00C68E  2  4A             lsr                         ; divide by 2
00C68F  2  69 00          adc #0                      ; round up
00C691  2               
00C691  2                 ; No data?
00C691  2  F0 12          beq urdone
00C693  2               
00C693  2                 ; Store sector count - not a byte count any more
00C693  2  85 D2          sta fat32_bytesremaining
00C695  2               
00C695  2                 ; Write entire sectors from the user-supplied buffer
00C695  2               wholesectorwriteloop:
00C695  2                 ; Write a sector from fat32_address
00C695  2  20 5B C5       jsr fat32_writenextsector
00C698  2               
00C698  2                 ; Advance fat32_address by 512 bytes
00C698  2  A5 CD          lda fat32_address+1
00C69A  2  69 02          adc #2                      ; carry already clear
00C69C  2  85 CD          sta fat32_address+1
00C69E  2               
00C69E  2  A6 D2          ldx fat32_bytesremaining    ; note - actually loads sectors remaining
00C6A0  2  CA             dex
00C6A1  2  86 D2          stx fat32_bytesremaining    ; note - actually stores sectors remaining
00C6A3  2               
00C6A3  2  D0 F0          bne wholesectorwriteloop
00C6A5  2               
00C6A5  2               urdone:
00C6A5  2  60             rts
00C6A6  2               
00C6A6  2               
00C6A6  2               
00C6A6  1                 	.include "libacia.s"
00C6A6  2               ;       ------------------ 6551 ACIA Subroutine Library -------------------
00C6A6  2               ; Includes:
00C6A6  2               ; acia_init       - Initializes the ACIA
00C6A6  2               ; print_hex_acia  - Prints a hex value in A
00C6A6  2               ; crlf		  - Prints <CR> followed by <LF>
00C6A6  2               ; clear_display   - Sends a <CLS> command
00C6A6  2               ; txpoll          - Polls the TX bit to see if the ACIA is ready
00C6A6  2               ; print_chara     - Prints a Character that is stored in A
00C6A6  2               ; print_char_acia - Same as print_chara
00C6A6  2               ; ascii_home      - Home the cursor
00C6A6  2               ; w_acia_full     - Print a NULL-Termintated String with >HIGH in Y and <LOW in X
00C6A6  2               
00C6A6  2               acia_init:
00C6A6  2  48             pha
00C6A7  2  A9 0B          lda #%00001011          ; No parity, no echo, no interrupt
00C6A9  2  8D 02 80       sta $8002
00C6AC  2  A9 1F          lda #%00011111          ; 1 stop bit, 8 data bits, 19200 baud
00C6AE  2  8D 03 80       sta $8003
00C6B1  2  68             pla
00C6B2  2  60             rts
00C6B3  2               
00C6B3  2               print_hex_acia:
00C6B3  2  48             pha
00C6B4  2  6A             ror
00C6B5  2  6A             ror
00C6B6  2  6A             ror
00C6B7  2  6A             ror
00C6B8  2  20 BC C6       jsr print_nybble   ; This is just som usful hex cod
00C6BB  2  68             pla
00C6BC  2               print_nybble:
00C6BC  2  29 0F          and #15
00C6BE  2  C9 0A          cmp #10
00C6C0  2  30 02          bmi cskipletter
00C6C2  2  69 06          adc #6
00C6C4  2               cskipletter:
00C6C4  2  69 30          adc #48
00C6C6  2                ; jsr print_char
00C6C6  2  20 FA C6       jsr print_chara
00C6C9  2  60             rts
00C6CA  2               
00C6CA  2               crlf:
00C6CA  2  48             pha
00C6CB  2  8A             txa
00C6CC  2  48             pha
00C6CD  2  98             tya
00C6CE  2  48             pha
00C6CF  2  A9 0D          lda #$0d
00C6D1  2  20 FA C6       jsr print_chara
00C6D4  2  A9 0A          lda #$0a
00C6D6  2  20 FA C6       jsr print_chara
00C6D9  2  68             pla
00C6DA  2  A8             tay
00C6DB  2  68             pla
00C6DC  2  AA             tax
00C6DD  2  68             pla
00C6DE  2  60             rts
00C6DF  2               
00C6DF  2               cleardisplay:
00C6DF  2  48             pha
00C6E0  2  20 EA C6       jsr txpoll  ; Poll the TX bit
00C6E3  2  A9 0C          lda #12     ; Print decimal 12 (CLS)
00C6E5  2  8D 00 80       sta $8000
00C6E8  2  68             pla
00C6E9  2  60             rts
00C6EA  2               
00C6EA  2               txpoll:
00C6EA  2  AD 01 80       lda $8001
00C6ED  2  29 10          and #$10    ; Poll the TX bit
00C6EF  2  F0 F9          beq txpoll
00C6F1  2  60             rts
00C6F2  2               
00C6F2  2               rxpoll:
00C6F2  2  AD 01 80       lda $8001
00C6F5  2  29 08          and #$08    ; Poll the RX bit
00C6F7  2  F0 F9          beq rxpoll
00C6F9  2  60             rts
00C6FA  2               
00C6FA  2               
00C6FA  2               print_chara:
00C6FA  2  48             pha
00C6FB  2  20 EA C6       jsr txpoll  ; Poll the TX bit
00C6FE  2  68             pla
00C6FF  2  8D 00 80       sta $8000   ; Print character from A
00C702  2  60             rts
00C703  2               
00C703  2               print_char_acia:
00C703  2  4C FA C6       jmp print_chara  ; Same as "print_chara"
00C706  2               
00C706  2               ascii_home:
00C706  2  48             pha
00C707  2  A9 01          lda #1
00C709  2  20 FA C6       jsr print_chara  ; Print 1 (HOME)
00C70C  2  68             pla
00C70D  2  60             rts
00C70E  2               
00C70E  2               w_acia_full:
00C70E  2  48             pha
00C70F  2  A5 FF          lda $ff
00C711  2  48             pha        ; Push Previous States onto the stack
00C712  2  A5 FE          lda $fe
00C714  2  48             pha
00C715  2  84 FF          sty $ff    ; Set Y as the Upper Address (8-15)
00C717  2  86 FE          stx $fe    ; Set X as the Lower Adderss (0-7)
00C719  2  A0 00          ldy #0
00C71B  2               acia_man:
00C71B  2  20 EA C6       jsr txpoll   ; Poll TX
00C71E  2  B1 FE          lda ($fe),y  ; Load the Address
00C720  2  8D 00 80       sta $8000    ; Print what is at the address
00C723  2  F0 04          beq endwacia ; If Done, End
00C725  2  C8             iny          ; Next Character
00C726  2  4C 1B C7       jmp acia_man ; Back to the top
00C729  2               endwacia:
00C729  2  68             pla
00C72A  2  85 FE          sta $fe
00C72C  2  68             pla          ; Restore Variables
00C72D  2  85 FF          sta $ff
00C72F  2  68             pla
00C730  2  60             rts
00C731  2               
00C731  1               	.include "errors.s"
00C731  2               error_sound:
00C731  2  78           	sei
00C732  2  20 6D C7     	jsr clear_sid
00C735  2  A9 0F        	lda #$0f
00C737  2  8D 18 B8     	sta $b818
00C73A  2  A9 E7        	lda #$e7
00C73C  2  8D 02 B8     	sta $b802
00C73F  2  A9 0F        	lda #$0f
00C741  2  8D 05 B8     	sta $b805
00C744  2  A9 00        	lda #$00 ; cheezy error sound that takes no memory (sad)
00C746  2  8D 06 B8     	sta $b806
00C749  2  A9 50        	lda #$50
00C74B  2  8D 00 B8     	sta $b800
00C74E  2  A9 50        	lda #$50
00C750  2  8D 01 B8     	sta $b801
00C753  2  A9 41        	lda #$41
00C755  2  8D 04 B8     	sta $b804
00C758  2               
00C758  2               outer:
00C758  2  A0 FF        	ldy #$ff
00C75A  2               inner:
00C75A  2  A2 FF        	ldx #$ff
00C75C  2               
00C75C  2               innerloop:
00C75C  2  CA           	dex
00C75D  2  EA           	nop
00C75E  2  EA           	nop
00C75F  2  EA           	nop
00C760  2  EA           	nop
00C761  2  D0 F9        	bne innerloop
00C763  2               
00C763  2  88           	dey
00C764  2  F0 03        	beq ende
00C766  2  4C 5A C7     	jmp inner
00C769  2               ende:
00C769  2  20 6D C7     	jsr clear_sid
00C76C  2  60           	rts
00C76D  2               
00C76D  2               clear_sid:
00C76D  2  A2 17        	ldx #$17
00C76F  2  A9 00        	lda #0
00C771  2               csid:
00C771  2  9D 00 B8     	sta $B800,X
00C774  2  CA           	dex
00C775  2  D0 FA        	bne csid
00C777  2  60           	rts
00C778  2               
00C778  2               
00C778  1               dirname:
00C778  1  46 4F 4C 44  	.asciiz "FOLDER     "
00C77C  1  45 52 20 20  
00C780  1  20 20 20 00  
00C784  1               errormsg:
00C784  1  0D 0A 45 52  	.byte CR,LF,"ERROR!",CR,LF
00C788  1  52 4F 52 21  
00C78C  1  0D 0A        
00C78E  1  00           	.byte 0
00C78F  1               
00C78F  1               ; generic stack and memory management code
00C78F  1               ; this code is identical across all versions of
00C78F  1               ; BASIC
00C78F  1               ; ----------------------------------------------------------------------------
00C78F  1               ; CALLED BY "NEXT" AND "FOR" TO SCAN THROUGH
00C78F  1               ; THE STACK FOR A FRAME WITH THE SAME VARIABLE.
00C78F  1               ;
00C78F  1               ; (FORPNT) = ADDRESS OF VARIABLE IF "FOR" OR "NEXT"
00C78F  1               ; 	= $XXFF IF CALLED FROM "RETURN"
00C78F  1               ; 	<<< BUG: SHOULD BE $FFXX >>>
00C78F  1               ;
00C78F  1               ;	RETURNS .NE. IF VARIABLE NOT FOUND,
00C78F  1               ;	(X) = STACK PNTR AFTER SKIPPING ALL FRAMES
00C78F  1               ;
00C78F  1               ;	.EQ. IF FOUND
00C78F  1               ;	(X) = STACK PNTR OF FRAME FOUND
00C78F  1               ; ----------------------------------------------------------------------------
00C78F  1               GTFORPNT:
00C78F  1  BA                   tsx
00C790  1  E8                   inx
00C791  1  E8                   inx
00C792  1  E8                   inx
00C793  1  E8                   inx
00C794  1               L2279:
00C794  1  BD 01 01             lda     STACK+1,x
00C797  1  C9 81                cmp     #$81
00C799  1  D0 21                bne     L22A1
00C79B  1  A5 98                lda     FORPNT+1
00C79D  1  D0 0A                bne     L228E
00C79F  1  BD 02 01             lda     STACK+2,x
00C7A2  1  85 97                sta     FORPNT
00C7A4  1  BD 03 01             lda     STACK+3,x
00C7A7  1  85 98                sta     FORPNT+1
00C7A9  1               L228E:
00C7A9  1  DD 03 01             cmp     STACK+3,x
00C7AC  1  D0 07                bne     L229A
00C7AE  1  A5 97                lda     FORPNT
00C7B0  1  DD 02 01             cmp     STACK+2,x
00C7B3  1  F0 07                beq     L22A1
00C7B5  1               L229A:
00C7B5  1  8A                   txa
00C7B6  1  18                   clc
00C7B7  1  69 10                adc     #BYTES_PER_FRAME
00C7B9  1  AA                   tax
00C7BA  1  D0 D8                bne     L2279
00C7BC  1               L22A1:
00C7BC  1  60                   rts
00C7BD  1               ; ----------------------------------------------------------------------------
00C7BD  1               ; MOVE BLOCK OF MEMORY UP
00C7BD  1               ;
00C7BD  1               ; ON ENTRY:
00C7BD  1               ;	(Y,A) = (HIGHDS) = DESTINATION END+1
00C7BD  1               ;	(LOWTR) = LOWEST ADDRESS OF SOURCE
00C7BD  1               ;	(HIGHTR) = HIGHEST SOURCE ADDRESS+1
00C7BD  1               ; ----------------------------------------------------------------------------
00C7BD  1               BLTU:
00C7BD  1  20 0D C8             jsr     REASON
00C7C0  1  85 7F                sta     STREND
00C7C2  1  84 80                sty     STREND+1
00C7C4  1               BLTU2:
00C7C4  1  38                   sec
00C7C5  1  A5 A6                lda     HIGHTR
00C7C7  1  E5 AA                sbc     LOWTR
00C7C9  1  85 71                sta     INDEX
00C7CB  1  A8                   tay
00C7CC  1  A5 A7                lda     HIGHTR+1
00C7CE  1  E5 AB                sbc     LOWTR+1
00C7D0  1  AA                   tax
00C7D1  1  E8                   inx
00C7D2  1  98                   tya
00C7D3  1  F0 23                beq     L22DD
00C7D5  1  A5 A6                lda     HIGHTR
00C7D7  1  38                   sec
00C7D8  1  E5 71                sbc     INDEX
00C7DA  1  85 A6                sta     HIGHTR
00C7DC  1  B0 03                bcs     L22C6
00C7DE  1  C6 A7                dec     HIGHTR+1
00C7E0  1  38                   sec
00C7E1  1               L22C6:
00C7E1  1  A5 A4                lda     HIGHDS
00C7E3  1  E5 71                sbc     INDEX
00C7E5  1  85 A4                sta     HIGHDS
00C7E7  1  B0 08                bcs     L22D6
00C7E9  1  C6 A5                dec     HIGHDS+1
00C7EB  1  90 04                bcc     L22D6
00C7ED  1               L22D2:
00C7ED  1  B1 A6                lda     (HIGHTR),y
00C7EF  1  91 A4                sta     (HIGHDS),y
00C7F1  1               L22D6:
00C7F1  1  88                   dey
00C7F2  1  D0 F9                bne     L22D2
00C7F4  1  B1 A6                lda     (HIGHTR),y
00C7F6  1  91 A4                sta     (HIGHDS),y
00C7F8  1               L22DD:
00C7F8  1  C6 A7                dec     HIGHTR+1
00C7FA  1  C6 A5                dec     HIGHDS+1
00C7FC  1  CA                   dex
00C7FD  1  D0 F2                bne     L22D6
00C7FF  1  60                   rts
00C800  1               ; ----------------------------------------------------------------------------
00C800  1               ; CHECK IF ENOUGH ROOM LEFT ON STACK
00C800  1               ; FOR "FOR", "GOSUB", OR EXPRESSION EVALUATION
00C800  1               ; ----------------------------------------------------------------------------
00C800  1               CHKMEM:
00C800  1  0A                   asl     a
00C801  1  69 33                adc     #SPACE_FOR_GOSUB
00C803  1  B0 35                bcs     MEMERR
00C805  1  85 71                sta     INDEX
00C807  1  BA                   tsx
00C808  1  E4 71                cpx     INDEX
00C80A  1  90 2E                bcc     MEMERR
00C80C  1  60                   rts
00C80D  1               ; ----------------------------------------------------------------------------
00C80D  1               ; CHECK IF ENOUGH ROOM BETWEEN ARRAYS AND STRINGS
00C80D  1               ; (Y,A) = ADDR ARRAYS NEED TO GROW TO
00C80D  1               ; ----------------------------------------------------------------------------
00C80D  1               REASON:
00C80D  1  C4 82                cpy     FRETOP+1
00C80F  1  90 28                bcc     L231E
00C811  1  D0 04                bne     L22FC
00C813  1  C5 81                cmp     FRETOP
00C815  1  90 22                bcc     L231E
00C817  1               L22FC:
00C817  1  48                   pha
00C818  1  A2 08                ldx     #FAC-TEMP1-1
00C81A  1  98                   tya
00C81B  1               L2300:
00C81B  1  48                   pha
00C81C  1  B5 A3                lda     TEMP1,x
00C81E  1  CA                   dex
00C81F  1  10 FA                bpl     L2300
00C821  1  20 29 D7             jsr     GARBAG
00C824  1  A2 F8                ldx     #TEMP1-FAC+1+256
00C826  1               L230B:
00C826  1  68                   pla
00C827  1  95 AC                sta     FAC,x
00C829  1  E8                   inx
00C82A  1  30 FA                bmi     L230B
00C82C  1  68                   pla
00C82D  1  A8                   tay
00C82E  1  68                   pla
00C82F  1  C4 82                cpy     FRETOP+1
00C831  1  90 06                bcc     L231E
00C833  1  D0 05                bne     MEMERR
00C835  1  C5 81                cmp     FRETOP
00C837  1  B0 01                bcs     MEMERR
00C839  1               L231E:
00C839  1  60                   rts
00C83A  1               MEMERR:
00C83A  1  A2 0C                ldx     #ERR_MEMFULL
00C83C  1               ; ----------------------------------------------------------------------------
00C83C  1               ; HANDLE AN ERROR
00C83C  1               ;
00C83C  1               ; (X)=OFFSET IN ERROR MESSAGE TABLE
00C83C  1               ; (ERRFLG) > 128 IF "ON ERR" TURNED ON
00C83C  1               ; (CURLIN+1) = $FF IF IN DIRECT MODE
00C83C  1               ; ----------------------------------------------------------------------------
00C83C  1               ERROR:
00C83C  1  46 64                lsr     Z14
00C83E  1  20 4E CE             jsr     CRDO
00C841  1  20 C5 CE             jsr     OUTQUES
00C844  1  BD 64 C1             lda     ERROR_MESSAGES,x
00C847  1  20 C7 CE             jsr     OUTDO
00C84A  1  BD 65 C1             lda     ERROR_MESSAGES+1,x
00C84D  1  20 C7 CE             jsr     OUTDO
00C850  1  20 7F CA             jsr     STKINI
00C853  1  A9 86                lda     #<QT_ERROR
00C855  1  A0 C1                ldy     #>QT_ERROR
00C857  1               ; ----------------------------------------------------------------------------
00C857  1               ; PRINT STRING AT (Y,A)
00C857  1               ; PRINT CURRENT LINE # UNLESS IN DIRECT MODE
00C857  1               ; FALL INTO WARM RESTART
00C857  1               ; ----------------------------------------------------------------------------
00C857  1               PRINT_ERROR_LINNUM:
00C857  1  20 A5 CE             jsr     STROUT
00C85A  1  A4 88                ldy     CURLIN+1
00C85C  1  C8                   iny
00C85D  1  F0 03                beq     RESTART
00C85F  1  20 35 DF             jsr     INPRT
00C862  1               ; ----------------------------------------------------------------------------
00C862  1               ; WARM RESTART ENTRY
00C862  1               ; ----------------------------------------------------------------------------
00C862  1               RESTART:
00C862  1  46 64                lsr     Z14
00C864  1  A9 92                lda     #<QT_OK
00C866  1  A0 C1                ldy     #>QT_OK
00C868  1  20 0A 00             jsr     GOSTROUT
00C86B  1               L2351:
00C86B  1  20 45 C9             jsr     INLIN
00C86E  1  86 DD                stx     TXTPTR
00C870  1  84 DE                sty     TXTPTR+1
00C872  1  20 D6 00             jsr     CHRGET
00C875  1               ; bug in pre-1.1: CHRGET sets Z on '\0'
00C875  1               ; and ':' - a line starting with ':' in
00C875  1               ; direct mode gets ignored
00C875  1  F0 F4                beq     L2351
00C877  1  A2 FF                ldx     #$FF
00C879  1  86 88                stx     CURLIN+1
00C87B  1  90 06                bcc     NUMBERED_LINE
00C87D  1  20 94 C9             jsr     PARSE_INPUT_LINE
00C880  1  4C E4 CB             jmp     NEWSTT2
00C883  1               ; ----------------------------------------------------------------------------
00C883  1               ; HANDLE NUMBERED LINE
00C883  1               ; ----------------------------------------------------------------------------
00C883  1               NUMBERED_LINE:
00C883  1  20 61 CD             jsr     LINGET
00C886  1  20 94 C9             jsr     PARSE_INPUT_LINE
00C889  1  84 5D                sty     EOLPNTR
00C88B  1  20 20 CA             jsr     FNDLIN
00C88E  1  90 44                bcc     PUT_NEW_LINE
00C890  1  A0 01                ldy     #$01
00C892  1  B1 AA                lda     (LOWTR),y
00C894  1  85 72                sta     INDEX+1
00C896  1  A5 7B                lda     VARTAB
00C898  1  85 71                sta     INDEX
00C89A  1  A5 AB                lda     LOWTR+1
00C89C  1  85 74                sta     DEST+1
00C89E  1  A5 AA                lda     LOWTR
00C8A0  1  88                   dey
00C8A1  1  F1 AA                sbc     (LOWTR),y
00C8A3  1  18                   clc
00C8A4  1  65 7B                adc     VARTAB
00C8A6  1  85 7B                sta     VARTAB
00C8A8  1  85 73                sta     DEST
00C8AA  1  A5 7C                lda     VARTAB+1
00C8AC  1  69 FF                adc     #$FF
00C8AE  1  85 7C                sta     VARTAB+1
00C8B0  1  E5 AB                sbc     LOWTR+1
00C8B2  1  AA                   tax
00C8B3  1  38                   sec
00C8B4  1  A5 AA                lda     LOWTR
00C8B6  1  E5 7B                sbc     VARTAB
00C8B8  1  A8                   tay
00C8B9  1  B0 03                bcs     L23A5
00C8BB  1  E8                   inx
00C8BC  1  C6 74                dec     DEST+1
00C8BE  1               L23A5:
00C8BE  1  18                   clc
00C8BF  1  65 71                adc     INDEX
00C8C1  1  90 03                bcc     L23AD
00C8C3  1  C6 72                dec     INDEX+1
00C8C5  1  18                   clc
00C8C6  1               L23AD:
00C8C6  1  B1 71                lda     (INDEX),y
00C8C8  1  91 73                sta     (DEST),y
00C8CA  1  C8                   iny
00C8CB  1  D0 F9                bne     L23AD
00C8CD  1  E6 72                inc     INDEX+1
00C8CF  1  E6 74                inc     DEST+1
00C8D1  1  CA                   dex
00C8D2  1  D0 F2                bne     L23AD
00C8D4  1               ; ----------------------------------------------------------------------------
00C8D4  1               PUT_NEW_LINE:
00C8D4  1  A5 13                lda     INPUTBUFFER
00C8D6  1  F0 2F                beq     FIX_LINKS
00C8D8  1  A5 85                lda     MEMSIZ
00C8DA  1  A4 86                ldy     MEMSIZ+1
00C8DC  1  85 81                sta     FRETOP
00C8DE  1  84 82                sty     FRETOP+1
00C8E0  1  A5 7B                lda     VARTAB
00C8E2  1  85 A6                sta     HIGHTR
00C8E4  1  65 5D                adc     EOLPNTR
00C8E6  1  85 A4                sta     HIGHDS
00C8E8  1  A4 7C                ldy     VARTAB+1
00C8EA  1  84 A7                sty     HIGHTR+1
00C8EC  1  90 01                bcc     L23D6
00C8EE  1  C8                   iny
00C8EF  1               L23D6:
00C8EF  1  84 A5                sty     HIGHDS+1
00C8F1  1  20 BD C7             jsr     BLTU
00C8F4  1  A5 7F                lda     STREND
00C8F6  1  A4 80                ldy     STREND+1
00C8F8  1  85 7B                sta     VARTAB
00C8FA  1  84 7C                sty     VARTAB+1
00C8FC  1  A4 5D                ldy     EOLPNTR
00C8FE  1  88                   dey
00C8FF  1               ; ---COPY LINE INTO PROGRAM-------
00C8FF  1               L23E6:
00C8FF  1  B9 0F 00             lda     INPUTBUFFER-4,y
00C902  1  91 AA                sta     (LOWTR),y
00C904  1  88                   dey
00C905  1  10 F8                bpl     L23E6
00C907  1               ; ----------------------------------------------------------------------------
00C907  1               ; CLEAR ALL VARIABLES
00C907  1               ; RE-ESTABLISH ALL FORWARD LINKS
00C907  1               ; ----------------------------------------------------------------------------
00C907  1               FIX_LINKS:
00C907  1  20 65 CA             jsr     SETPTRS
00C90A  1  A5 79                lda     TXTTAB
00C90C  1  A4 7A                ldy     TXTTAB+1
00C90E  1  85 71                sta     INDEX
00C910  1  84 72                sty     INDEX+1
00C912  1  18                   clc
00C913  1               L23FA:
00C913  1  A0 01                ldy     #$01
00C915  1  B1 71                lda     (INDEX),y
00C917  1  D0 03 4C 6B          jeq     L2351
00C91B  1  C8           
00C91C  1               
00C91C  1  A0 04                ldy     #$04
00C91E  1               L2405:
00C91E  1  C8                   iny
00C91F  1  B1 71                lda     (INDEX),y
00C921  1  D0 FB                bne     L2405
00C923  1  C8                   iny
00C924  1  98                   tya
00C925  1  65 71                adc     INDEX
00C927  1  AA                   tax
00C928  1  A0 00                ldy     #$00
00C92A  1  91 71                sta     (INDEX),y
00C92C  1  A5 72                lda     INDEX+1
00C92E  1  69 00                adc     #$00
00C930  1  C8                   iny
00C931  1  91 71                sta     (INDEX),y
00C933  1  86 71                stx     INDEX
00C935  1  85 72                sta     INDEX+1
00C937  1  90 DA                bcc     L23FA	; always
00C939  1               ; ----------------------------------------------------------------------------
00C939  1               L2420:
00C939  1  20 C7 CE             jsr     OUTDO
00C93C  1  CA                   dex
00C93D  1  10 08                bpl     INLIN2
00C93F  1               L2423:
00C93F  1  20 C7 CE             jsr     OUTDO
00C942  1  20 4E CE             jsr     CRDO
00C945  1               ; ----------------------------------------------------------------------------
00C945  1               ; READ A LINE, AND STRIP OFF SIGN BITS
00C945  1               ; ----------------------------------------------------------------------------
00C945  1               INLIN:
00C945  1  A2 00                ldx     #$00
00C947  1               INLIN2:
00C947  1  20 74 C9             jsr     GETLN
00C94A  1  C9 07                cmp     #$07
00C94C  1  F0 14                beq     L2443
00C94E  1  C9 0D                cmp     #$0D
00C950  1  F0 1F                beq     L2453
00C952  1  C9 08                cmp     #$08 ; BACKSPACE
00C954  1  F0 E3                beq     L2420
00C956  1  C9 20                cmp     #$20
00C958  1  90 ED                bcc     INLIN2
00C95A  1  C9 7D                cmp     #$7D
00C95C  1  B0 E9                bcs     INLIN2
00C95E  1  C9 40                cmp     #$40 ; @
00C960  1  F0 DD                beq     L2423
00C962  1               L2443:
00C962  1  E0 47                cpx     #$47
00C964  1  B0 04                bcs     L244C
00C966  1  95 13                sta     INPUTBUFFER,x
00C968  1  E8                   inx
00C969  1  2C                   .byte   $2C
00C96A  1               L244C:
00C96A  1  A9 07                lda     #$07 ; BEL
00C96C  1  20 C7 CE             jsr     OUTDO
00C96F  1  D0 D6                bne     INLIN2
00C971  1               L2453:
00C971  1  4C 48 CE             jmp     L29B9
00C974  1               GETLN:
00C974  1  20 74 FF             jsr     MONRDKEY
00C977  1  EA                   nop
00C978  1  EA                   nop
00C979  1  EA                   nop
00C97A  1  EA                   nop
00C97B  1  EA                   nop
00C97C  1  EA                   nop
00C97D  1  EA                   nop
00C97E  1  EA                   nop
00C97F  1  EA                   nop
00C980  1  EA                   nop
00C981  1  EA                   nop
00C982  1  EA                   nop
00C983  1  EA                   nop
00C984  1  EA                   nop
00C985  1  29 7F                and     #$7F
00C987  1               RDKEY:
00C987  1  C9 0F                cmp     #$0F
00C989  1  D0 08                bne     L2465
00C98B  1  48                   pha
00C98C  1  A5 64                lda     Z14
00C98E  1  49 FF                eor     #$FF
00C990  1  85 64                sta     Z14
00C992  1  68                   pla
00C993  1               L2465:
00C993  1  60                   rts
00C994  1               ; ----------------------------------------------------------------------------
00C994  1               ; TOKENIZE THE INPUT LINE
00C994  1               ; ----------------------------------------------------------------------------
00C994  1               PARSE_INPUT_LINE:
00C994  1  A6 DD                ldx     TXTPTR
00C996  1  A0 04                ldy     #$04
00C998  1  84 60                sty     DATAFLG
00C99A  1               L246C:
00C99A  1  B5 00                lda     INPUTBUFFERX,x
00C99C  1  C9 20                cmp     #$20
00C99E  1  F0 3A                beq     L24AC
00C9A0  1  85 5C                sta     ENDCHR
00C9A2  1  C9 22                cmp     #$22
00C9A4  1  F0 58                beq     L24D0
00C9A6  1  24 60                bit     DATAFLG
00C9A8  1  70 30                bvs     L24AC
00C9AA  1  C9 3F                cmp     #$3F
00C9AC  1  D0 04                bne     L2484
00C9AE  1  A9 97                lda     #TOKEN_PRINT
00C9B0  1  D0 28                bne     L24AC
00C9B2  1               L2484:
00C9B2  1  C9 30                cmp     #$30
00C9B4  1  90 04                bcc     L248C
00C9B6  1  C9 3C                cmp     #$3C
00C9B8  1  90 20                bcc     L24AC
00C9BA  1               ; ----------------------------------------------------------------------------
00C9BA  1               ; SEARCH TOKEN NAME TABLE FOR MATCH STARTING
00C9BA  1               ; WITH CURRENT CHAR FROM INPUT LINE
00C9BA  1               ; ----------------------------------------------------------------------------
00C9BA  1               L248C:
00C9BA  1  84 BA                sty     STRNG2
00C9BC  1  A0 00                ldy     #$00
00C9BE  1  84 5D                sty     EOLPNTR
00C9C0  1  88                   dey
00C9C1  1  86 DD                stx     TXTPTR
00C9C3  1  CA                   dex
00C9C4  1               L2496:
00C9C4  1  C8                   iny
00C9C5  1               L2497:
00C9C5  1  E8                   inx
00C9C6  1               L2498:
00C9C6  1  B5 00                lda     INPUTBUFFERX,x
00C9C8  1  C9 20                cmp     #$20
00C9CA  1  F0 F9                beq     L2497
00C9CC  1  38                   sec
00C9CD  1  F9 84 C0             sbc     TOKEN_NAME_TABLE,y
00C9D0  1  F0 F2                beq     L2496
00C9D2  1  C9 80                cmp     #$80
00C9D4  1  D0 2F                bne     L24D7
00C9D6  1  05 5D                ora     EOLPNTR
00C9D8  1               ; ----------------------------------------------------------------------------
00C9D8  1               ; STORE CHARACTER OR TOKEN IN OUTPUT LINE
00C9D8  1               ; ----------------------------------------------------------------------------
00C9D8  1               L24AA:
00C9D8  1  A4 BA                ldy     STRNG2
00C9DA  1               L24AC:
00C9DA  1  E8                   inx
00C9DB  1  C8                   iny
00C9DC  1  99 0E 00             sta     INPUTBUFFER-5,y
00C9DF  1  B9 0E 00             lda     INPUTBUFFER-5,y
00C9E2  1  F0 34                beq     L24EA
00C9E4  1  38                   sec
00C9E5  1  E9 3A                sbc     #$3A
00C9E7  1  F0 04                beq     L24BF
00C9E9  1  C9 49                cmp     #$49
00C9EB  1  D0 02                bne     L24C1
00C9ED  1               L24BF:
00C9ED  1  85 60                sta     DATAFLG
00C9EF  1               L24C1:
00C9EF  1  38                   sec
00C9F0  1  E9 54                sbc     #TOKEN_REM-':'
00C9F2  1  D0 A6                bne     L246C
00C9F4  1  85 5C                sta     ENDCHR
00C9F6  1               ; ----------------------------------------------------------------------------
00C9F6  1               ; HANDLE LITERAL (BETWEEN QUOTES) OR REMARK,
00C9F6  1               ; BY COPYING CHARS UP TO ENDCHR.
00C9F6  1               ; ----------------------------------------------------------------------------
00C9F6  1               L24C8:
00C9F6  1  B5 00                lda     INPUTBUFFERX,x
00C9F8  1  F0 E0                beq     L24AC
00C9FA  1  C5 5C                cmp     ENDCHR
00C9FC  1  F0 DC                beq     L24AC
00C9FE  1               L24D0:
00C9FE  1  C8                   iny
00C9FF  1  99 0E 00             sta     INPUTBUFFER-5,y
00CA02  1  E8                   inx
00CA03  1  D0 F1                bne     L24C8
00CA05  1               ; ----------------------------------------------------------------------------
00CA05  1               ; ADVANCE POINTER TO NEXT TOKEN NAME
00CA05  1               ; ----------------------------------------------------------------------------
00CA05  1               L24D7:
00CA05  1  A6 DD                ldx     TXTPTR
00CA07  1  E6 5D                inc     EOLPNTR
00CA09  1               L24DB:
00CA09  1  C8                   iny
00CA0A  1  B9 83 C0             lda     MATHTBL+28+1,y
00CA0D  1  10 FA                bpl     L24DB
00CA0F  1  B9 84 C0             lda     TOKEN_NAME_TABLE,y
00CA12  1  D0 B2                bne     L2498
00CA14  1  B5 00                lda     INPUTBUFFERX,x
00CA16  1  10 C0                bpl     L24AA
00CA18  1               ; ---END OF LINE------------------
00CA18  1               L24EA:
00CA18  1  99 10 00             sta     INPUTBUFFER-3,y
00CA1B  1  A9 12                lda     #<INPUTBUFFER-1
00CA1D  1  85 DD                sta     TXTPTR
00CA1F  1  60                   rts
00CA20  1               ; ----------------------------------------------------------------------------
00CA20  1               ; SEARCH FOR LINE
00CA20  1               ;
00CA20  1               ; (LINNUM) = LINE # TO FIND
00CA20  1               ; IF NOT FOUND:  CARRY = 0
00CA20  1               ;	LOWTR POINTS AT NEXT LINE
00CA20  1               ; IF FOUND:      CARRY = 1
00CA20  1               ;	LOWTR POINTS AT LINE
00CA20  1               ; ----------------------------------------------------------------------------
00CA20  1               FNDLIN:
00CA20  1  A5 79                lda     TXTTAB
00CA22  1  A6 7A                ldx     TXTTAB+1
00CA24  1               FL1:
00CA24  1  A0 01                ldy     #$01
00CA26  1  85 AA                sta     LOWTR
00CA28  1  86 AB                stx     LOWTR+1
00CA2A  1  B1 AA                lda     (LOWTR),y
00CA2C  1  F0 1F                beq     L251F
00CA2E  1  C8                   iny
00CA2F  1  C8                   iny
00CA30  1  A5 12                lda     LINNUM+1
00CA32  1  D1 AA                cmp     (LOWTR),y
00CA34  1  90 18                bcc     L2520
00CA36  1  F0 03                beq     L250D
00CA38  1  88                   dey
00CA39  1  D0 09                bne     L2516
00CA3B  1               L250D:
00CA3B  1  A5 11                lda     LINNUM
00CA3D  1  88                   dey
00CA3E  1  D1 AA                cmp     (LOWTR),y
00CA40  1  90 0C                bcc     L2520
00CA42  1  F0 0A                beq     L2520
00CA44  1               L2516:
00CA44  1  88                   dey
00CA45  1  B1 AA                lda     (LOWTR),y
00CA47  1  AA                   tax
00CA48  1  88                   dey
00CA49  1  B1 AA                lda     (LOWTR),y
00CA4B  1  B0 D7                bcs     FL1
00CA4D  1               L251F:
00CA4D  1  18                   clc
00CA4E  1               L2520:
00CA4E  1  60                   rts
00CA4F  1               ; ----------------------------------------------------------------------------
00CA4F  1               ; "NEW" STATEMENT
00CA4F  1               ; ----------------------------------------------------------------------------
00CA4F  1               NEW:
00CA4F  1  D0 FD                bne     L2520
00CA51  1               SCRTCH:
00CA51  1  A9 00                lda     #$00
00CA53  1  A8                   tay
00CA54  1  91 79                sta     (TXTTAB),y
00CA56  1  C8                   iny
00CA57  1  91 79                sta     (TXTTAB),y
00CA59  1  A5 79                lda     TXTTAB
00CA5B  1  69 02                adc     #$02
00CA5D  1  85 7B                sta     VARTAB
00CA5F  1  A5 7A                lda     TXTTAB+1
00CA61  1  69 00                adc     #$00
00CA63  1  85 7C                sta     VARTAB+1
00CA65  1               ; ----------------------------------------------------------------------------
00CA65  1               SETPTRS:
00CA65  1  20 95 CA             jsr     STXTPT
00CA68  1               ; ----------------------------------------------------------------------------
00CA68  1               ; "CLEAR" STATEMENT
00CA68  1               ; ----------------------------------------------------------------------------
00CA68  1               CLEARC:
00CA68  1  A5 85                lda     MEMSIZ
00CA6A  1  A4 86                ldy     MEMSIZ+1
00CA6C  1  85 81                sta     FRETOP
00CA6E  1  84 82                sty     FRETOP+1
00CA70  1  A5 7B                lda     VARTAB
00CA72  1  A4 7C                ldy     VARTAB+1
00CA74  1  85 7D                sta     ARYTAB
00CA76  1  84 7E                sty     ARYTAB+1
00CA78  1  85 7F                sta     STREND
00CA7A  1  84 80                sty     STREND+1
00CA7C  1  20 08 CC             jsr     RESTORE
00CA7F  1               ; ----------------------------------------------------------------------------
00CA7F  1               STKINI:
00CA7F  1  A2 68                ldx     #TEMPST
00CA81  1  86 65                stx     TEMPPT
00CA83  1  68                   pla
00CA84  1  8D FD 01             sta     STACK+STACK_TOP+1
00CA87  1  68                   pla
00CA88  1  8D FE 01             sta     STACK+STACK_TOP+2
00CA8B  1  A2 FC                ldx     #STACK_TOP
00CA8D  1  9A                   txs
00CA8E  1  A9 00                lda     #$00
00CA90  1  85 8C                sta     OLDTEXT+1
00CA92  1  85 61                sta     SUBFLG
00CA94  1               L256A:
00CA94  1  60                   rts
00CA95  1               ; ----------------------------------------------------------------------------
00CA95  1               ; SET TXTPTR TO BEGINNING OF PROGRAM
00CA95  1               ; ----------------------------------------------------------------------------
00CA95  1               STXTPT:
00CA95  1  18                   clc
00CA96  1  A5 79                lda     TXTTAB
00CA98  1  69 FF                adc     #$FF
00CA9A  1  85 DD                sta     TXTPTR
00CA9C  1  A5 7A                lda     TXTTAB+1
00CA9E  1  69 FF                adc     #$FF
00CAA0  1  85 DE                sta     TXTPTR+1
00CAA2  1  60                   rts
00CAA3  1               ; ----------------------------------------------------------------------------
00CAA3  1               ; ----------------------------------------------------------------------------
00CAA3  1               ; "LIST" STATEMENT
00CAA3  1               ; ----------------------------------------------------------------------------
00CAA3  1               LIST:
00CAA3  1  90 06                bcc     L2581
00CAA5  1  F0 04                beq     L2581
00CAA7  1  C9 A4                cmp     #TOKEN_MINUS
00CAA9  1  D0 E9                bne     L256A
00CAAB  1               L2581:
00CAAB  1  20 61 CD             jsr     LINGET
00CAAE  1  20 20 CA             jsr     FNDLIN
00CAB1  1  20 DC 00             jsr     CHRGOT
00CAB4  1  F0 0C                beq     L2598
00CAB6  1  C9 A4                cmp     #TOKEN_MINUS
00CAB8  1  D0 94                bne     L2520
00CABA  1  20 D6 00             jsr     CHRGET
00CABD  1  20 61 CD             jsr     LINGET
00CAC0  1  D0 8C                bne     L2520
00CAC2  1               L2598:
00CAC2  1  68                   pla
00CAC3  1  68                   pla
00CAC4  1  A5 11                lda     LINNUM
00CAC6  1  05 12                ora     LINNUM+1
00CAC8  1  D0 06                bne     L25A6
00CACA  1  A9 FF                lda     #$FF
00CACC  1  85 11                sta     LINNUM
00CACE  1  85 12                sta     LINNUM+1
00CAD0  1               L25A6:
00CAD0  1  A0 01                ldy     #$01
00CAD2  1  84 60                sty     DATAFLG
00CAD4  1  B1 AA                lda     (LOWTRX),y
00CAD6  1  F0 41                beq     L25E5
00CAD8  1  20 17 CC             jsr     ISCNTC
00CADB  1  20 4E CE             jsr     CRDO
00CADE  1  C8                   iny
00CADF  1  B1 AA                lda     (LOWTRX),y
00CAE1  1  AA                   tax
00CAE2  1  C8                   iny
00CAE3  1  B1 AA                lda     (LOWTRX),y
00CAE5  1  C5 12                cmp     LINNUM+1
00CAE7  1  D0 04                bne     L25C1
00CAE9  1  E4 11                cpx     LINNUM
00CAEB  1  F0 02                beq     L25C3
00CAED  1               L25C1:
00CAED  1  B0 2A                bcs     L25E5
00CAEF  1               ; ---LIST ONE LINE----------------
00CAEF  1               L25C3:
00CAEF  1  84 97                sty     FORPNT
00CAF1  1  20 40 DF             jsr     LINPRT
00CAF4  1  A9 20                lda     #$20
00CAF6  1               L25CA:
00CAF6  1  A4 97                ldy     FORPNT
00CAF8  1  29 7F                and     #$7F
00CAFA  1               L25CE:
00CAFA  1  20 C7 CE             jsr     OUTDO
00CAFD  1  C9 22                cmp     #$22
00CAFF  1  D0 06                bne     LA519
00CB01  1  A5 60                lda     DATAFLG
00CB03  1  49 FF                eor     #$FF
00CB05  1  85 60                sta     DATAFLG
00CB07  1               LA519:
00CB07  1  C8                   iny
00CB08  1  B1 AA                lda     (LOWTRX),y
00CB0A  1  D0 10                bne     L25E8
00CB0C  1  A8                   tay
00CB0D  1  B1 AA                lda     (LOWTRX),y
00CB0F  1  AA                   tax
00CB10  1  C8                   iny
00CB11  1  B1 AA                lda     (LOWTRX),y
00CB13  1  86 AA                stx     LOWTRX
00CB15  1  85 AB                sta     LOWTRX+1
00CB17  1  D0 B7                bne     L25A6
00CB19  1               L25E5:
00CB19  1  4C 62 C8             jmp     RESTART
00CB1C  1               L25E8:
00CB1C  1  10 DC                bpl     L25CE
00CB1E  1  C9 FF                cmp     #$FF
00CB20  1  F0 D8                beq     L25CE
00CB22  1  24 60                bit     DATAFLG
00CB24  1  30 D4                bmi     L25CE
00CB26  1  38                   sec
00CB27  1  E9 7F                sbc     #$7F
00CB29  1  AA                   tax
00CB2A  1  84 97                sty     FORPNT
00CB2C  1  A0 FF                ldy     #$FF
00CB2E  1               L25F2:
00CB2E  1  CA                   dex
00CB2F  1  F0 08                beq     L25FD
00CB31  1               L25F5:
00CB31  1  C8                   iny
00CB32  1  B9 84 C0             lda     TOKEN_NAME_TABLE,y
00CB35  1  10 FA                bpl     L25F5
00CB37  1  30 F5                bmi     L25F2
00CB39  1               L25FD:
00CB39  1  C8                   iny
00CB3A  1  B9 84 C0             lda     TOKEN_NAME_TABLE,y
00CB3D  1  30 B7                bmi     L25CA
00CB3F  1  20 C7 CE             jsr     OUTDO
00CB42  1  D0 F5                bne     L25FD	; always
00CB44  1               ; ----------------------------------------------------------------------------
00CB44  1               ; "FOR" STATEMENT
00CB44  1               ;
00CB44  1               ; FOR PUSHES 18 BYTES ON THE STACK:
00CB44  1               ; 2 -- TXTPTR
00CB44  1               ; 2 -- LINE NUMBER
00CB44  1               ; 5 -- INITIAL (CURRENT)  FOR VARIABLE VALUE
00CB44  1               ; 1 -- STEP SIGN
00CB44  1               ; 5 -- STEP VALUE
00CB44  1               ; 2 -- ADDRESS OF FOR VARIABLE IN VARTAB
00CB44  1               ; 1 -- FOR TOKEN ($81)
00CB44  1               ; ----------------------------------------------------------------------------
00CB44  1               FOR:
00CB44  1  A9 80                lda     #$80
00CB46  1  85 61                sta     SUBFLG
00CB48  1  20 9B CD             jsr     LET
00CB4B  1  20 8F C7             jsr     GTFORPNT
00CB4E  1  D0 05                bne     L2619
00CB50  1  8A                   txa
00CB51  1  69 0D                adc     #FOR_STACK1
00CB53  1  AA                   tax
00CB54  1  9A                   txs
00CB55  1               L2619:
00CB55  1  68                   pla
00CB56  1  68                   pla
00CB57  1  A9 08                lda     #FOR_STACK2
00CB59  1  20 00 C8             jsr     CHKMEM
00CB5C  1  20 FC CC             jsr     DATAN
00CB5F  1  18                   clc
00CB60  1  98                   tya
00CB61  1  65 DD                adc     TXTPTR
00CB63  1  48                   pha
00CB64  1  A5 DE                lda     TXTPTR+1
00CB66  1  69 00                adc     #$00
00CB68  1  48                   pha
00CB69  1  A5 88                lda     CURLIN+1
00CB6B  1  48                   pha
00CB6C  1  A5 87                lda     CURLIN
00CB6E  1  48                   pha
00CB6F  1  A9 9D                lda     #TOKEN_TO
00CB71  1  20 E5 D1             jsr     SYNCHR
00CB74  1  20 92 D0             jsr     CHKNUM
00CB77  1  20 8F D0             jsr     FRMNUM
00CB7A  1  A5 B0                lda     FACSIGN
00CB7C  1  09 7F                ora     #$7F
00CB7E  1  25 AD                and     FAC+1
00CB80  1  85 AD                sta     FAC+1
00CB82  1  A9 8D                lda     #<STEP
00CB84  1  A0 CB                ldy     #>STEP
00CB86  1  85 71                sta     INDEX
00CB88  1  84 72                sty     INDEX+1
00CB8A  1  4C 48 D1             jmp     FRM_STACK3
00CB8D  1               ; ----------------------------------------------------------------------------
00CB8D  1               ; "STEP" PHRASE OF "FOR" STATEMENT
00CB8D  1               ; ----------------------------------------------------------------------------
00CB8D  1               STEP:
00CB8D  1  A9 7E                lda     #<CON_ONE
00CB8F  1  A0 DB                ldy     #>CON_ONE
00CB91  1  20 2D DD             jsr     LOAD_FAC_FROM_YA
00CB94  1  20 DC 00             jsr     CHRGOT
00CB97  1  C9 A2                cmp     #TOKEN_STEP
00CB99  1  D0 06                bne     L2665
00CB9B  1  20 D6 00             jsr     CHRGET
00CB9E  1  20 8F D0             jsr     FRMNUM
00CBA1  1               L2665:
00CBA1  1  20 AC DD             jsr     SIGN
00CBA4  1  20 3D D1             jsr     FRM_STACK2
00CBA7  1  A5 98                lda     FORPNT+1
00CBA9  1  48                   pha
00CBAA  1  A5 97                lda     FORPNT
00CBAC  1  48                   pha
00CBAD  1  A9 81                lda     #$81
00CBAF  1  48                   pha
00CBB0  1               ; ----------------------------------------------------------------------------
00CBB0  1               ; PERFORM NEXT STATEMENT
00CBB0  1               ; ----------------------------------------------------------------------------
00CBB0  1               NEWSTT:
00CBB0  1  20 17 CC             jsr     ISCNTC
00CBB3  1  A5 DD                lda     TXTPTR
00CBB5  1  A4 DE                ldy     TXTPTR+1
00CBB7  1  F0 06                beq     L2683
00CBB9  1  85 8B                sta     OLDTEXT
00CBBB  1  84 8C                sty     OLDTEXT+1
00CBBD  1  A0 00                ldy     #$00
00CBBF  1               L2683:
00CBBF  1  B1 DD                lda     (TXTPTR),y
00CBC1  1  F0 07                beq     LA5DC	; old: 1 cycle more on generic case
00CBC3  1  C9 3A                cmp     #$3A
00CBC5  1  F0 1D                beq     NEWSTT2
00CBC7  1               SYNERR1:
00CBC7  1  4C EE D1             jmp     SYNERR
00CBCA  1               LA5DC:
00CBCA  1  A0 02                ldy     #$02
00CBCC  1  B1 DD                lda     (TXTPTR),y
00CBCE  1  18                   clc
00CBCF  1  F0 62                beq     L2701
00CBD1  1  C8                   iny
00CBD2  1  B1 DD                lda     (TXTPTR),y
00CBD4  1  85 87                sta     CURLIN
00CBD6  1  C8                   iny
00CBD7  1  B1 DD                lda     (TXTPTR),y
00CBD9  1  85 88                sta     CURLIN+1
00CBDB  1  98                   tya
00CBDC  1  65 DD                adc     TXTPTR
00CBDE  1  85 DD                sta     TXTPTR
00CBE0  1  90 02                bcc     NEWSTT2
00CBE2  1  E6 DE                inc     TXTPTR+1
00CBE4  1               NEWSTT2:
00CBE4  1  20 D6 00             jsr     CHRGET
00CBE7  1  20 ED CB             jsr     EXECUTE_STATEMENT
00CBEA  1  4C B0 CB             jmp     NEWSTT
00CBED  1               ; ----------------------------------------------------------------------------
00CBED  1               ; EXECUTE A STATEMENT
00CBED  1               ;
00CBED  1               ; (A) IS FIRST CHAR OF STATEMENT
00CBED  1               ; CARRY IS SET
00CBED  1               ; ----------------------------------------------------------------------------
00CBED  1               EXECUTE_STATEMENT:
00CBED  1  F0 6D                beq     RET1
00CBEF  1  38                   sec
00CBF0  1               EXECUTE_STATEMENT1:
00CBF0  1  E9 80                sbc     #$80
00CBF2  1  B0 03 4C 9B          jcc     LET	; old: 1 cycle more on instr.
00CBF6  1  CD           
00CBF7  1               
00CBF7  1  C9 1C                cmp     #NUM_TOKENS
00CBF9  1  B0 CC                bcs     SYNERR1
00CBFB  1  0A                   asl     a
00CBFC  1  A8                   tay
00CBFD  1  B9 01 C0             lda     TOKEN_ADDRESS_TABLE+1,y
00CC00  1  48                   pha
00CC01  1  B9 00 C0             lda     TOKEN_ADDRESS_TABLE,y
00CC04  1  48                   pha
00CC05  1  4C D6 00             jmp     CHRGET
00CC08  1               ; ----------------------------------------------------------------------------
00CC08  1               ; "RESTORE" STATEMENT
00CC08  1               ; ----------------------------------------------------------------------------
00CC08  1               RESTORE:
00CC08  1  38                   sec
00CC09  1  A5 79                lda     TXTTAB
00CC0B  1  E9 01                sbc     #$01
00CC0D  1  A4 7A                ldy     TXTTAB+1
00CC0F  1  B0 01                bcs     SETDA
00CC11  1  88                   dey
00CC12  1               SETDA:
00CC12  1  85 8F                sta     DATPTR
00CC14  1  84 90                sty     DATPTR+1
00CC16  1  60                   rts
00CC17  1               ; ----------------------------------------------------------------------------
00CC17  1               ; SEE IF CONTROL-C TYPED
00CC17  1               ; ----------------------------------------------------------------------------
00CC17  1               
00CC17  1               ISCNTC:
00CC17  1               ; MODIFIED CALL BY G.SEARLE FROM THE ORIGINAL OSI CODE
00CC17  1  20 84 FF             jsr     MONISCNTC
00CC1A  1               ; runs into "STOP"
00CC1A  1               ; ----------------------------------------------------------------------------
00CC1A  1               ; "STOP" STATEMENT
00CC1A  1               ; ----------------------------------------------------------------------------
00CC1A  1               STOP:
00CC1A  1  B0 01                bcs     END2
00CC1C  1               ; ----------------------------------------------------------------------------
00CC1C  1               ; "END" STATEMENT
00CC1C  1               ; ----------------------------------------------------------------------------
00CC1C  1               END:
00CC1C  1  18                   clc
00CC1D  1               END2:
00CC1D  1  D0 3D                bne     RET1
00CC1F  1  A5 DD                lda     TXTPTR
00CC21  1  A4 DE                ldy     TXTPTR+1
00CC23  1  F0 0C                beq     END4
00CC25  1  85 8B                sta     OLDTEXT
00CC27  1  84 8C                sty     OLDTEXT+1
00CC29  1               CONTROL_C_TYPED:
00CC29  1  A5 87                lda     CURLIN
00CC2B  1  A4 88                ldy     CURLIN+1
00CC2D  1  85 89                sta     OLDLIN
00CC2F  1  84 8A                sty     OLDLIN+1
00CC31  1               END4:
00CC31  1  68                   pla
00CC32  1  68                   pla
00CC33  1               L2701:
00CC33  1  A9 99                lda     #<QT_BREAK
00CC35  1  A0 C1                ldy     #>QT_BREAK
00CC37  1  A2 00                ldx     #$00
00CC39  1  86 64                stx     Z14
00CC3B  1  90 03                bcc     L270E
00CC3D  1  4C 57 C8             jmp     PRINT_ERROR_LINNUM
00CC40  1               L270E:
00CC40  1  4C 62 C8             jmp     RESTART
00CC43  1               ; ----------------------------------------------------------------------------
00CC43  1               ; "CONT" COMMAND
00CC43  1               ; ----------------------------------------------------------------------------
00CC43  1               CONT:
00CC43  1  D0 17                bne     RET1
00CC45  1  A2 1E                ldx     #ERR_CANTCONT
00CC47  1  A4 8C                ldy     OLDTEXT+1
00CC49  1  D0 03                bne     L271C
00CC4B  1  4C 3C C8             jmp     ERROR
00CC4E  1               L271C:
00CC4E  1  A5 8B                lda     OLDTEXT
00CC50  1  85 DD                sta     TXTPTR
00CC52  1  84 DE                sty     TXTPTR+1
00CC54  1  A5 89                lda     OLDLIN
00CC56  1  A4 8A                ldy     OLDLIN+1
00CC58  1  85 87                sta     CURLIN
00CC5A  1  84 88                sty     CURLIN+1
00CC5C  1               RET1:
00CC5C  1  60                   rts
00CC5D  1               NULL:
00CC5D  1  20 90 D9             jsr     GETBYT
00CC60  1  D0 FA                bne     RET1
00CC62  1  E8                   inx
00CC63  1  E0 0A                cpx     #NULL_MAX
00CC65  1  B0 04                bcs     L2739
00CC67  1  CA                   dex
00CC68  1  86 0D                stx     Z15
00CC6A  1  60                   rts
00CC6B  1               L2739:
00CC6B  1  4C 6A D4             jmp     IQERR
00CC6E  1               CLEAR:
00CC6E  1  D0 EC                bne     RET1
00CC70  1  4C 68 CA             jmp     CLEARC
00CC73  1               ; ----------------------------------------------------------------------------
00CC73  1               ; "RUN" COMMAND
00CC73  1               ; ----------------------------------------------------------------------------
00CC73  1               RUN:
00CC73  1  D0 03                bne     L27CF
00CC75  1  4C 65 CA             jmp     SETPTRS
00CC78  1               L27CF:
00CC78  1  20 68 CA             jsr     CLEARC
00CC7B  1  4C 92 CC             jmp     L27E9
00CC7E  1               ; ----------------------------------------------------------------------------
00CC7E  1               ; "GOSUB" STATEMENT
00CC7E  1               ;
00CC7E  1               ; LEAVES 7 BYTES ON STACK:
00CC7E  1               ; 2 -- RETURN ADDRESS (NEWSTT)
00CC7E  1               ; 2 -- TXTPTR
00CC7E  1               ; 2 -- LINE #
00CC7E  1               ; 1 -- GOSUB TOKEN
00CC7E  1               ; ----------------------------------------------------------------------------
00CC7E  1               GOSUB:
00CC7E  1  A9 03                lda     #$03
00CC80  1  20 00 C8             jsr     CHKMEM
00CC83  1  A5 DE                lda     TXTPTR+1
00CC85  1  48                   pha
00CC86  1  A5 DD                lda     TXTPTR
00CC88  1  48                   pha
00CC89  1  A5 88                lda     CURLIN+1
00CC8B  1  48                   pha
00CC8C  1  A5 87                lda     CURLIN
00CC8E  1  48                   pha
00CC8F  1  A9 8C                lda     #TOKEN_GOSUB
00CC91  1  48                   pha
00CC92  1               L27E9:
00CC92  1  20 DC 00             jsr     CHRGOT
00CC95  1  20 9B CC             jsr     GOTO
00CC98  1  4C B0 CB             jmp     NEWSTT
00CC9B  1               ; ----------------------------------------------------------------------------
00CC9B  1               ; "GOTO" STATEMENT
00CC9B  1               ; ALSO USED BY "RUN" AND "GOSUB"
00CC9B  1               ; ----------------------------------------------------------------------------
00CC9B  1               GOTO:
00CC9B  1  20 61 CD             jsr     LINGET
00CC9E  1  20 FF CC             jsr     REMN
00CCA1  1  A5 88                lda     CURLIN+1
00CCA3  1  C5 12                cmp     LINNUM+1
00CCA5  1  B0 0B                bcs     L2809
00CCA7  1  98                   tya
00CCA8  1  38                   sec
00CCA9  1  65 DD                adc     TXTPTR
00CCAB  1  A6 DE                ldx     TXTPTR+1
00CCAD  1  90 07                bcc     L280D
00CCAF  1  E8                   inx
00CCB0  1  B0 04                bcs     L280D
00CCB2  1               L2809:
00CCB2  1  A5 79                lda     TXTTAB
00CCB4  1  A6 7A                ldx     TXTTAB+1
00CCB6  1               L280D:
00CCB6  1  20 24 CA             jsr     FL1
00CCB9  1  90 1E                bcc     UNDERR
00CCBB  1  A5 AA                lda     LOWTRX
00CCBD  1  E9 01                sbc     #$01
00CCBF  1  85 DD                sta     TXTPTR
00CCC1  1  A5 AB                lda     LOWTRX+1
00CCC3  1  E9 00                sbc     #$00
00CCC5  1  85 DE                sta     TXTPTR+1
00CCC7  1               L281E:
00CCC7  1  60                   rts
00CCC8  1               ; ----------------------------------------------------------------------------
00CCC8  1               ; "POP" AND "RETURN" STATEMENTS
00CCC8  1               ; ----------------------------------------------------------------------------
00CCC8  1               POP:
00CCC8  1  D0 FD                bne     L281E
00CCCA  1  A9 FF                lda     #$FF
00CCCC  1  85 97                sta     FORPNT
00CCCE  1  20 8F C7             jsr     GTFORPNT
00CCD1  1  9A                   txs
00CCD2  1  C9 8C                cmp     #TOKEN_GOSUB
00CCD4  1  F0 0B                beq     RETURN
00CCD6  1  A2 04                ldx     #ERR_NOGOSUB
00CCD8  1  2C                   .byte   $2C
00CCD9  1               UNDERR:
00CCD9  1  A2 0E                ldx     #ERR_UNDEFSTAT
00CCDB  1  4C 3C C8             jmp     ERROR
00CCDE  1               ; ----------------------------------------------------------------------------
00CCDE  1               SYNERR2:
00CCDE  1  4C EE D1             jmp     SYNERR
00CCE1  1               ; ----------------------------------------------------------------------------
00CCE1  1               RETURN:
00CCE1  1  68                   pla
00CCE2  1  68                   pla
00CCE3  1  85 87                sta     CURLIN
00CCE5  1  68                   pla
00CCE6  1  85 88                sta     CURLIN+1
00CCE8  1  68                   pla
00CCE9  1  85 DD                sta     TXTPTR
00CCEB  1  68                   pla
00CCEC  1  85 DE                sta     TXTPTR+1
00CCEE  1               ; ----------------------------------------------------------------------------
00CCEE  1               ; "DATA" STATEMENT
00CCEE  1               ; EXECUTED BY SKIPPING TO NEXT COLON OR EOL
00CCEE  1               ; ----------------------------------------------------------------------------
00CCEE  1               DATA:
00CCEE  1  20 FC CC             jsr     DATAN
00CCF1  1               ; ----------------------------------------------------------------------------
00CCF1  1               ; ADD (Y) TO TXTPTR
00CCF1  1               ; ----------------------------------------------------------------------------
00CCF1  1               ADDON:
00CCF1  1  98                   tya
00CCF2  1  18                   clc
00CCF3  1  65 DD                adc     TXTPTR
00CCF5  1  85 DD                sta     TXTPTR
00CCF7  1  90 02                bcc     L2852
00CCF9  1  E6 DE                inc     TXTPTR+1
00CCFB  1               L2852:
00CCFB  1  60                   rts
00CCFC  1               ; ----------------------------------------------------------------------------
00CCFC  1               ; SCAN AHEAD TO NEXT ":" OR EOL
00CCFC  1               ; ----------------------------------------------------------------------------
00CCFC  1               DATAN:
00CCFC  1  A2 3A                ldx     #$3A
00CCFE  1  2C                   .byte   $2C
00CCFF  1               REMN:
00CCFF  1  A2 00                ldx     #$00
00CD01  1  86 5B                stx     CHARAC
00CD03  1  A0 00                ldy     #$00
00CD05  1  84 5C                sty     ENDCHR
00CD07  1               L285E:
00CD07  1  A5 5C                lda     ENDCHR
00CD09  1  A6 5B                ldx     CHARAC
00CD0B  1  85 5B                sta     CHARAC
00CD0D  1  86 5C                stx     ENDCHR
00CD0F  1               L2866:
00CD0F  1  B1 DD                lda     (TXTPTR),y
00CD11  1  F0 E8                beq     L2852
00CD13  1  C5 5C                cmp     ENDCHR
00CD15  1  F0 E4                beq     L2852
00CD17  1  C8                   iny
00CD18  1  C9 22                cmp     #$22
00CD1A  1  F0 EB                beq     L285E; old: swap & cont is faster
00CD1C  1  D0 F1                bne     L2866
00CD1E  1               ; ----------------------------------------------------------------------------
00CD1E  1               ; "IF" STATEMENT
00CD1E  1               ; ----------------------------------------------------------------------------
00CD1E  1               IF:
00CD1E  1  20 A3 D0             jsr     FRMEVL
00CD21  1  20 DC 00             jsr     CHRGOT
00CD24  1  C9 88                cmp     #TOKEN_GOTO
00CD26  1  F0 05                beq     L2884
00CD28  1  A9 A0                lda     #TOKEN_THEN
00CD2A  1  20 E5 D1             jsr     SYNCHR
00CD2D  1               L2884:
00CD2D  1  A5 AC                lda     FAC
00CD2F  1  D0 05                bne     L288D
00CD31  1               ; ----------------------------------------------------------------------------
00CD31  1               ; "REM" STATEMENT, OR FALSE "IF" STATEMENT
00CD31  1               ; ----------------------------------------------------------------------------
00CD31  1               REM:
00CD31  1  20 FF CC             jsr     REMN
00CD34  1  F0 BB                beq     ADDON
00CD36  1               L288D:
00CD36  1  20 DC 00             jsr     CHRGOT
00CD39  1  B0 03                bcs     L2895
00CD3B  1  4C 9B CC             jmp     GOTO
00CD3E  1               L2895:
00CD3E  1  4C ED CB             jmp     EXECUTE_STATEMENT
00CD41  1               ; ----------------------------------------------------------------------------
00CD41  1               ; "ON" STATEMENT
00CD41  1               ;
00CD41  1               ; ON <EXP> GOTO <LIST>
00CD41  1               ; ON <EXP> GOSUB <LIST>
00CD41  1               ; ----------------------------------------------------------------------------
00CD41  1               ON:
00CD41  1  20 90 D9             jsr     GETBYT
00CD44  1  48                   pha
00CD45  1  C9 8C                cmp     #TOKEN_GOSUB
00CD47  1  F0 04                beq     L28A4
00CD49  1               L28A0:
00CD49  1  C9 88                cmp     #TOKEN_GOTO
00CD4B  1  D0 91                bne     SYNERR2
00CD4D  1               L28A4:
00CD4D  1  C6 AF                dec     FAC_LAST
00CD4F  1  D0 04                bne     L28AC
00CD51  1  68                   pla
00CD52  1  4C F0 CB             jmp     EXECUTE_STATEMENT1
00CD55  1               L28AC:
00CD55  1  20 D6 00             jsr     CHRGET
00CD58  1  20 61 CD             jsr     LINGET
00CD5B  1  C9 2C                cmp     #$2C
00CD5D  1  F0 EE                beq     L28A4
00CD5F  1  68                   pla
00CD60  1               L28B7:
00CD60  1  60                   rts
00CD61  1               ; ----------------------------------------------------------------------------
00CD61  1               ; CONVERT LINE NUMBER
00CD61  1               ; ----------------------------------------------------------------------------
00CD61  1               LINGET:
00CD61  1  A2 00                ldx     #$00
00CD63  1  86 11                stx     LINNUM
00CD65  1  86 12                stx     LINNUM+1
00CD67  1               L28BE:
00CD67  1  B0 F7                bcs     L28B7
00CD69  1  E9 2F                sbc     #$2F
00CD6B  1  85 5B                sta     CHARAC
00CD6D  1  A5 12                lda     LINNUM+1
00CD6F  1  85 71                sta     INDEX
00CD71  1  C9 19                cmp     #$19
00CD73  1  B0 D4                bcs     L28A0
00CD75  1               ; <<<<<DANGEROUS CODE>>>>>
00CD75  1               ; NOTE THAT IF (A) = $AB ON THE LINE ABOVE,
00CD75  1               ; ON.1 WILL COMPARE = AND CAUSE A CATASTROPHIC
00CD75  1               ; JUMP TO $22D9 (FOR GOTO), OR OTHER LOCATIONS
00CD75  1               ; FOR OTHER CALLS TO LINGET.
00CD75  1               ;
00CD75  1               ; YOU CAN SEE THIS IS YOU FIRST PUT "BRK" IN $22D9,
00CD75  1               ; THEN TYPE "GO TO 437761".
00CD75  1               ;
00CD75  1               ; ANY VALUE FROM 437760 THROUGH 440319 WILL CAUSE
00CD75  1               ; THE PROBLEM.  ($AB00 - $ABFF)
00CD75  1               ; <<<<<DANGEROUS CODE>>>>>
00CD75  1  A5 11                lda     LINNUM
00CD77  1  0A                   asl     a
00CD78  1  26 71                rol     INDEX
00CD7A  1  0A                   asl     a
00CD7B  1  26 71                rol     INDEX
00CD7D  1  65 11                adc     LINNUM
00CD7F  1  85 11                sta     LINNUM
00CD81  1  A5 71                lda     INDEX
00CD83  1  65 12                adc     LINNUM+1
00CD85  1  85 12                sta     LINNUM+1
00CD87  1  06 11                asl     LINNUM
00CD89  1  26 12                rol     LINNUM+1
00CD8B  1  A5 11                lda     LINNUM
00CD8D  1  65 5B                adc     CHARAC
00CD8F  1  85 11                sta     LINNUM
00CD91  1  90 02                bcc     L28EC
00CD93  1  E6 12                inc     LINNUM+1
00CD95  1               L28EC:
00CD95  1  20 D6 00             jsr     CHRGET
00CD98  1  4C 67 CD             jmp     L28BE
00CD9B  1               ; ----------------------------------------------------------------------------
00CD9B  1               ; "LET" STATEMENT
00CD9B  1               ;
00CD9B  1               ; LET <VAR> = <EXP>
00CD9B  1               ; <VAR> = <EXP>
00CD9B  1               ; ----------------------------------------------------------------------------
00CD9B  1               LET:
00CD9B  1  20 ED D2             jsr     PTRGET
00CD9E  1  85 97                sta     FORPNT
00CDA0  1  84 98                sty     FORPNT+1
00CDA2  1  A9 AB                lda     #TOKEN_EQUAL
00CDA4  1  20 E5 D1             jsr     SYNCHR
00CDA7  1  A5 5F                lda     VALTYP
00CDA9  1  48                   pha
00CDAA  1  20 A3 D0             jsr     FRMEVL
00CDAD  1  68                   pla
00CDAE  1  2A                   rol     a
00CDAF  1  20 95 D0             jsr     CHKVAL
00CDB2  1  D0 03                bne     LETSTRING
00CDB4  1               ; ----------------------------------------------------------------------------
00CDB4  1               ; REAL VARIABLE = EXPRESSION
00CDB4  1               ; ----------------------------------------------------------------------------
00CDB4  1  4C 56 DD             jmp     SETFOR
00CDB7  1               LETSTRING:
00CDB7  1               ; ----------------------------------------------------------------------------
00CDB7  1               ; INSTALL STRING, DESCRIPTOR ADDRESS IS AT FAC+3,4
00CDB7  1               ; ----------------------------------------------------------------------------
00CDB7  1  A0 02                ldy     #$02
00CDB9  1  B1 AE                lda     (FAC_LAST-1),y
00CDBB  1  C5 82                cmp     FRETOP+1
00CDBD  1  90 17                bcc     L2946
00CDBF  1  D0 07                bne     L2938
00CDC1  1  88                   dey
00CDC2  1  B1 AE                lda     (FAC_LAST-1),y
00CDC4  1  C5 81                cmp     FRETOP
00CDC6  1  90 0E                bcc     L2946
00CDC8  1               L2938:
00CDC8  1  A4 AF                ldy     FAC_LAST
00CDCA  1  C4 7C                cpy     VARTAB+1
00CDCC  1  90 08                bcc     L2946
00CDCE  1  D0 0D                bne     L294D
00CDD0  1  A5 AE                lda     FAC_LAST-1
00CDD2  1  C5 7B                cmp     VARTAB
00CDD4  1  B0 07                bcs     L294D
00CDD6  1               L2946:
00CDD6  1  A5 AE                lda     FAC_LAST-1
00CDD8  1  A4 AF                ldy     FAC_LAST
00CDDA  1  4C F3 CD             jmp     L2963
00CDDD  1               L294D:
00CDDD  1  A0 00                ldy     #$00
00CDDF  1  B1 AE                lda     (FAC_LAST-1),y
00CDE1  1  20 7E D6             jsr     STRINI
00CDE4  1  A5 9E                lda     DSCPTR
00CDE6  1  A4 9F                ldy     DSCPTR+1
00CDE8  1  85 B8                sta     STRNG1
00CDEA  1  84 B9                sty     STRNG1+1
00CDEC  1  20 6C D8             jsr     MOVINS
00CDEF  1  A9 AC                lda     #FAC
00CDF1  1  A0 00                ldy     #$00
00CDF3  1               L2963:
00CDF3  1  85 9E                sta     DSCPTR
00CDF5  1  84 9F                sty     DSCPTR+1
00CDF7  1  20 CD D8             jsr     FRETMS
00CDFA  1  A0 00                ldy     #$00
00CDFC  1  B1 9E                lda     (DSCPTR),y
00CDFE  1  91 97                sta     (FORPNT),y
00CE00  1  C8                   iny
00CE01  1  B1 9E                lda     (DSCPTR),y
00CE03  1  91 97                sta     (FORPNT),y
00CE05  1  C8                   iny
00CE06  1  B1 9E                lda     (DSCPTR),y
00CE08  1  91 97                sta     (FORPNT),y
00CE0A  1  60                   rts
00CE0B  1               PRSTRING:
00CE0B  1  20 A8 CE             jsr     STRPRT
00CE0E  1               L297E:
00CE0E  1  20 DC 00             jsr     CHRGOT
00CE11  1               ; ----------------------------------------------------------------------------
00CE11  1               ; "PRINT" STATEMENT
00CE11  1               ; ----------------------------------------------------------------------------
00CE11  1               PRINT:
00CE11  1  F0 3B                beq     CRDO
00CE13  1               PRINT2:
00CE13  1  F0 57                beq     L29DD
00CE15  1  C9 9C                cmp     #TOKEN_TAB
00CE17  1  F0 6B                beq     L29F5
00CE19  1  C9 9F                cmp     #TOKEN_SPC
00CE1B  1  F0 67                beq     L29F5
00CE1D  1  C9 2C                cmp     #','
00CE1F  1  F0 4C                beq     L29DE
00CE21  1  C9 3B                cmp     #$3B
00CE23  1  F0 7A                beq     L2A0D
00CE25  1  20 A3 D0             jsr     FRMEVL
00CE28  1  24 5F                bit     VALTYP
00CE2A  1  30 DF                bmi     PRSTRING
00CE2C  1  20 50 DF             jsr     FOUT
00CE2F  1  20 90 D6             jsr     STRLIT
00CE32  1  A0 00                ldy     #$00
00CE34  1  B1 AE                lda     (FAC_LAST-1),y
00CE36  1  18                   clc
00CE37  1  65 0E                adc     POSX
00CE39  1  C5 0F                cmp     Z17
00CE3B  1  90 03                bcc     L29B1
00CE3D  1  20 4E CE             jsr     CRDO
00CE40  1               L29B1:
00CE40  1  20 A8 CE             jsr     STRPRT
00CE43  1  20 C2 CE             jsr     OUTSP
00CE46  1  D0 C6                bne     L297E ; branch always
00CE48  1               L29B9:
00CE48  1  A0 00                ldy     #$00
00CE4A  1  94 13                sty     INPUTBUFFER,x
00CE4C  1  A2 12                ldx     #LINNUM+1
00CE4E  1               CRDO:
00CE4E  1  A9 0D                lda     #CRLF_1
00CE50  1  85 0E                sta     POSX
00CE52  1  20 C7 CE             jsr     OUTDO
00CE55  1  A9 0A                lda     #CRLF_2
00CE57  1  20 C7 CE             jsr     OUTDO
00CE5A  1               PRINTNULLS:
00CE5A  1  8A                   txa
00CE5B  1  48                   pha
00CE5C  1  A6 0D                ldx     Z15
00CE5E  1  F0 08                beq     L29D9
00CE60  1  A9 00                lda     #$00
00CE62  1               L29D3:
00CE62  1  20 C7 CE             jsr     OUTDO
00CE65  1  CA                   dex
00CE66  1  D0 FA                bne     L29D3
00CE68  1               L29D9:
00CE68  1  86 0E                stx     POSX
00CE6A  1  68                   pla
00CE6B  1  AA                   tax
00CE6C  1               L29DD:
00CE6C  1  60                   rts
00CE6D  1               L29DE:
00CE6D  1  A5 0E                lda     POSX
00CE6F  1  C5 10                cmp     Z18
00CE71  1  90 06                bcc     L29EA
00CE73  1  20 4E CE             jsr     CRDO
00CE76  1  4C 9F CE             jmp     L2A0D
00CE79  1               L29EA:
00CE79  1  38                   sec
00CE7A  1               L29EB:
00CE7A  1  E9 0E                sbc     #$0E
00CE7C  1  B0 FC                bcs     L29EB
00CE7E  1  49 FF                eor     #$FF
00CE80  1  69 01                adc     #$01
00CE82  1  D0 14                bne     L2A08
00CE84  1               L29F5:
00CE84  1  48                   pha
00CE85  1  20 8D D9             jsr     GTBYTC
00CE88  1  C9 29                cmp     #')'
00CE8A  1  D0 66                bne     SYNERR4
00CE8C  1  68                   pla
00CE8D  1  C9 9C                cmp     #TOKEN_TAB
00CE8F  1  D0 08                bne     L2A0A
00CE91  1  8A                   txa
00CE92  1  E5 0E                sbc     POSX
00CE94  1  90 09                bcc     L2A0D
00CE96  1  F0 07                beq     L2A0D
00CE98  1               L2A08:
00CE98  1  AA                   tax
00CE99  1               L2A0A:
00CE99  1  20 C2 CE             jsr     OUTSP
00CE9C  1  CA                   dex
00CE9D  1  D0 FA                bne     L2A0A
00CE9F  1               L2A0D:
00CE9F  1  20 D6 00             jsr     CHRGET
00CEA2  1  4C 13 CE             jmp     PRINT2
00CEA5  1               ; ----------------------------------------------------------------------------
00CEA5  1               ; PRINT STRING AT (Y,A)
00CEA5  1               ; ----------------------------------------------------------------------------
00CEA5  1               STROUT:
00CEA5  1  20 90 D6             jsr     STRLIT
00CEA8  1               ; ----------------------------------------------------------------------------
00CEA8  1               ; PRINT STRING AT (FACMO,FACLO)
00CEA8  1               ; ----------------------------------------------------------------------------
00CEA8  1               STRPRT:
00CEA8  1  20 98 D8             jsr     FREFAC
00CEAB  1  AA                   tax
00CEAC  1  A0 00                ldy     #$00
00CEAE  1  E8                   inx
00CEAF  1               L2A22:
00CEAF  1  CA                   dex
00CEB0  1  F0 BA                beq     L29DD
00CEB2  1  B1 71                lda     (INDEX),y
00CEB4  1  20 C7 CE             jsr     OUTDO
00CEB7  1  C8                   iny
00CEB8  1  C9 0D                cmp     #$0D
00CEBA  1  D0 F3                bne     L2A22
00CEBC  1  20 5A CE             jsr     PRINTNULLS
00CEBF  1  4C AF CE             jmp     L2A22
00CEC2  1               ; ----------------------------------------------------------------------------
00CEC2  1               OUTSP:
00CEC2  1  A9 20                lda     #$20
00CEC4  1  2C                   .byte   $2C
00CEC5  1               OUTQUES:
00CEC5  1  A9 3F                lda     #$3F
00CEC7  1               ; ----------------------------------------------------------------------------
00CEC7  1               ; PRINT CHAR FROM (A)
00CEC7  1               ; ----------------------------------------------------------------------------
00CEC7  1               OUTDO:
00CEC7  1  24 64                bit     Z14
00CEC9  1  30 18                bmi     L2A56
00CECB  1               ; Commodore forgot to remove this in CBM1
00CECB  1  48                   pha
00CECC  1  C9 20                cmp     #$20
00CECE  1  90 0B                bcc     L2A4E
00CED0  1  A5 0E                lda     POSX
00CED2  1  C5 0F                cmp     Z17
00CED4  1  D0 03                bne     L2A4C
00CED6  1  20 4E CE             jsr     CRDO
00CED9  1               L2A4C:
00CED9  1  E6 0E                inc     POSX
00CEDB  1               L2A4E:
00CEDB  1               ; Commodore forgot to remove this in CBM1
00CEDB  1  68                   pla
00CEDC  1  20 65 FF             jsr     MONCOUT
00CEDF  1  EA                   nop
00CEE0  1  EA                   nop
00CEE1  1  EA                   nop
00CEE2  1  EA                   nop
00CEE3  1               L2A56:
00CEE3  1  29 FF                and     #$FF
00CEE5  1  60                   rts
00CEE6  1               ; ----------------------------------------------------------------------------
00CEE6  1               ; ???
00CEE6  1               ; ----------------------------------------------------------------------------
00CEE6  1               ; ----------------------------------------------------------------------------
00CEE6  1               ; INPUT CONVERSION ERROR:  ILLEGAL CHARACTER
00CEE6  1               ; IN NUMERIC FIELD.  MUST DISTINGUISH
00CEE6  1               ; BETWEEN INPUT, READ, AND GET
00CEE6  1               ; ----------------------------------------------------------------------------
00CEE6  1               INPUTERR:
00CEE6  1  A5 62                lda     INPUTFLG
00CEE8  1  F0 0B                beq     RESPERR	; INPUT
00CEEA  1               ; without this, it treats GET errors
00CEEA  1               ; like READ errors
00CEEA  1  A5 8D                lda     Z8C
00CEEC  1  A4 8E                ldy     Z8C+1
00CEEE  1  85 87                sta     CURLIN
00CEF0  1  84 88                sty     CURLIN+1
00CEF2  1               SYNERR4:
00CEF2  1  4C EE D1             jmp     SYNERR
00CEF5  1               RESPERR:
00CEF5  1  A9 0F                lda     #<ERRREENTRY
00CEF7  1  A0 D0                ldy     #>ERRREENTRY
00CEF9  1  20 A5 CE             jsr     STROUT
00CEFC  1  A5 8B                lda     OLDTEXT
00CEFE  1  A4 8C                ldy     OLDTEXT+1
00CF00  1  85 DD                sta     TXTPTR
00CF02  1  84 DE                sty     TXTPTR+1
00CF04  1  60                   rts
00CF05  1               ; ----------------------------------------------------------------------------
00CF05  1               ; "GET" STATEMENT
00CF05  1               ; ----------------------------------------------------------------------------
00CF05  1               GET:
00CF05  1               ; ----------------------------------------------------------------------------
00CF05  1               ; "INPUT#" STATEMENT
00CF05  1               ; ----------------------------------------------------------------------------
00CF05  1               ; ----------------------------------------------------------------------------
00CF05  1               ; "INPUT" STATEMENT
00CF05  1               ; ----------------------------------------------------------------------------
00CF05  1               INPUT:
00CF05  1  46 64                lsr     Z14
00CF07  1  C9 22                cmp     #$22
00CF09  1  D0 0B                bne     L2A9E
00CF0B  1  20 A3 D1             jsr     STRTXT
00CF0E  1  A9 3B                lda     #$3B
00CF10  1  20 E5 D1             jsr     SYNCHR
00CF13  1  20 A8 CE             jsr     STRPRT
00CF16  1               L2A9E:
00CF16  1  20 B6 D5             jsr     ERRDIR
00CF19  1  A9 2C                lda     #$2C
00CF1B  1  85 12                sta     INPUTBUFFER-1
00CF1D  1  20 28 CF             jsr     NXIN
00CF20  1  A5 13                lda     INPUTBUFFER
00CF22  1  D0 12                bne     L2ABE
00CF24  1  18                   clc
00CF25  1  4C 29 CC             jmp     CONTROL_C_TYPED
00CF28  1               NXIN:
00CF28  1  20 C5 CE             jsr     OUTQUES	; '?'
00CF2B  1  20 C2 CE             jsr     OUTSP
00CF2E  1  4C 45 C9             jmp     INLIN
00CF31  1               ; ----------------------------------------------------------------------------
00CF31  1               ; "GETC" STATEMENT
00CF31  1               ; ----------------------------------------------------------------------------
00CF31  1               ; ----------------------------------------------------------------------------
00CF31  1               ; "READ" STATEMENT
00CF31  1               ; ----------------------------------------------------------------------------
00CF31  1               READ:
00CF31  1  A6 8F                ldx     DATPTR
00CF33  1  A4 90                ldy     DATPTR+1
00CF35  1               ; AppleSoft II, too
00CF35  1  A9                   .byte   $A9	; LDA #$98
00CF36  1               L2ABE:
00CF36  1  98                   tya
00CF37  1               ; ----------------------------------------------------------------------------
00CF37  1               ; PROCESS INPUT LIST
00CF37  1               ;
00CF37  1               ; (Y,X) IS ADDRESS OF INPUT DATA STRING
00CF37  1               ; (A) = VALUE FOR INPUTFLG:  $00 FOR INPUT
00CF37  1               ; 				$40 FOR GET
00CF37  1               ;				$98 FOR READ
00CF37  1               ; ----------------------------------------------------------------------------
00CF37  1  85 62                sta     INPUTFLG
00CF39  1  86 91                stx     INPTR
00CF3B  1  84 92                sty     INPTR+1
00CF3D  1               PROCESS_INPUT_ITEM:
00CF3D  1  20 ED D2             jsr     PTRGET
00CF40  1  85 97                sta     FORPNT
00CF42  1  84 98                sty     FORPNT+1
00CF44  1  A5 DD                lda     TXTPTR
00CF46  1  A4 DE                ldy     TXTPTR+1
00CF48  1  85 11                sta     TXPSV
00CF4A  1  84 12                sty     TXPSV+1
00CF4C  1  A6 91                ldx     INPTR
00CF4E  1  A4 92                ldy     INPTR+1
00CF50  1  86 DD                stx     TXTPTR
00CF52  1  84 DE                sty     TXTPTR+1
00CF54  1  20 DC 00             jsr     CHRGOT
00CF57  1  D0 0E                bne     INSTART
00CF59  1  24 62                bit     INPUTFLG
00CF5B  1               ; BUG: The beq/bne L2AF8 below is supposed
00CF5B  1               ; to be always taken. For this to happen,
00CF5B  1               ; the last load must be a 0 for beq
00CF5B  1               ; and != 0 for bne. The original Microsoft
00CF5B  1               ; code had ldx/ldy/bne here, which was only
00CF5B  1               ; correct for a non-ZP INPUTBUFFER. Commodore
00CF5B  1               ; fixed it in CBMBASIC V1 by swapping the
00CF5B  1               ; ldx and the ldy. It was broken on KIM,
00CF5B  1               ; but okay on APPLE and CBM2, because
00CF5B  1               ; these used a non-ZP INPUTBUFFER.
00CF5B  1               ; Microsoft fixed this somewhere after KIM
00CF5B  1               ; and before MICROTAN, by using beq instead
00CF5B  1               ; of bne in the ZP case.
00CF5B  1  30 62                bmi     FINDATA
00CF5D  1  20 C5 CE             jsr     OUTQUES
00CF60  1  20 28 CF             jsr     NXIN
00CF63  1  86 DD                stx     TXTPTR
00CF65  1  84 DE                sty     TXTPTR+1
00CF67  1               ; ----------------------------------------------------------------------------
00CF67  1               INSTART:
00CF67  1  20 D6 00             jsr     CHRGET
00CF6A  1  24 5F                bit     VALTYP
00CF6C  1  10 24                bpl     L2B34
00CF6E  1  85 5B                sta     CHARAC
00CF70  1  C9 22                cmp     #$22
00CF72  1  F0 07                beq     L2B1D
00CF74  1  A9 3A                lda     #$3A
00CF76  1  85 5B                sta     CHARAC
00CF78  1  A9 2C                lda     #$2C
00CF7A  1  18                   clc
00CF7B  1               L2B1D:
00CF7B  1  85 5C                sta     ENDCHR
00CF7D  1  A5 DD                lda     TXTPTR
00CF7F  1  A4 DE                ldy     TXTPTR+1
00CF81  1  69 00                adc     #$00
00CF83  1  90 01                bcc     L2B28
00CF85  1  C8                   iny
00CF86  1               L2B28:
00CF86  1  20 96 D6             jsr     STRLT2
00CF89  1  20 D5 D9             jsr     POINT
00CF8C  1  20 B7 CD             jsr     LETSTRING
00CF8F  1  4C 98 CF             jmp     INPUT_MORE
00CF92  1               ; ----------------------------------------------------------------------------
00CF92  1               L2B34:
00CF92  1  20 69 DE             jsr     FIN
00CF95  1  20 56 DD             jsr     SETFOR
00CF98  1               ; ----------------------------------------------------------------------------
00CF98  1               INPUT_MORE:
00CF98  1  20 DC 00             jsr     CHRGOT
00CF9B  1  F0 07                beq     L2B48
00CF9D  1  C9 2C                cmp     #$2C
00CF9F  1  F0 03                beq     L2B48
00CFA1  1  4C E6 CE             jmp     INPUTERR
00CFA4  1               L2B48:
00CFA4  1  A5 DD                lda     TXTPTR
00CFA6  1  A4 DE                ldy     TXTPTR+1
00CFA8  1  85 91                sta     INPTR
00CFAA  1  84 92                sty     INPTR+1
00CFAC  1  A5 11                lda     TXPSV
00CFAE  1  A4 12                ldy     TXPSV+1
00CFB0  1  85 DD                sta     TXTPTR
00CFB2  1  84 DE                sty     TXTPTR+1
00CFB4  1  20 DC 00             jsr     CHRGOT
00CFB7  1  F0 2C                beq     INPDONE
00CFB9  1  20 E3 D1             jsr     CHKCOM
00CFBC  1  4C 3D CF             jmp     PROCESS_INPUT_ITEM
00CFBF  1               ; ----------------------------------------------------------------------------
00CFBF  1               FINDATA:
00CFBF  1  20 FC CC             jsr     DATAN
00CFC2  1  C8                   iny
00CFC3  1  AA                   tax
00CFC4  1  D0 12                bne     L2B7C
00CFC6  1  A2 06                ldx     #ERR_NODATA
00CFC8  1  C8                   iny
00CFC9  1  B1 DD                lda     (TXTPTR),y
00CFCB  1  F0 69                beq     GERR
00CFCD  1  C8                   iny
00CFCE  1  B1 DD                lda     (TXTPTR),y
00CFD0  1  85 8D                sta     Z8C
00CFD2  1  C8                   iny
00CFD3  1  B1 DD                lda     (TXTPTR),y
00CFD5  1  C8                   iny
00CFD6  1  85 8E                sta     Z8C+1
00CFD8  1               L2B7C:
00CFD8  1  B1 DD                lda     (TXTPTR),y
00CFDA  1  AA                   tax
00CFDB  1  20 F1 CC             jsr     ADDON
00CFDE  1  E0 83                cpx     #$83
00CFE0  1  D0 DD                bne     FINDATA
00CFE2  1  4C 67 CF             jmp     INSTART
00CFE5  1               ; ---NO MORE INPUT REQUESTED------
00CFE5  1               INPDONE:
00CFE5  1  A5 91                lda     INPTR
00CFE7  1  A4 92                ldy     INPTR+1
00CFE9  1  A6 62                ldx     INPUTFLG
00CFEB  1  F0 03                beq     L2B94 ; INPUT
00CFED  1  4C 12 CC             jmp     SETDA
00CFF0  1               L2B94:
00CFF0  1  A0 00                ldy     #$00
00CFF2  1  B1 91                lda     (INPTR),y
00CFF4  1  F0 07                beq     L2BA1
00CFF6  1  A9 FE                lda     #<ERREXTRA
00CFF8  1  A0 CF                ldy     #>ERREXTRA
00CFFA  1  4C A5 CE             jmp     STROUT
00CFFD  1               L2BA1:
00CFFD  1  60                   rts
00CFFE  1               ; ----------------------------------------------------------------------------
00CFFE  1               ERREXTRA:
00CFFE  1  3F 45 58 54          .byte   "?EXTRA IGNORED"
00D002  1  52 41 20 49  
00D006  1  47 4E 4F 52  
00D00C  1               
00D00C  1               
00D00C  1  0D 0A 00             .byte   $0D,$0A,$00
00D00F  1               ERRREENTRY:
00D00F  1  3F 52 45 44          .byte   "?REDO FROM START"
00D013  1  4F 20 46 52  
00D017  1  4F 4D 20 53  
00D01F  1               
00D01F  1               
00D01F  1  0D 0A 00             .byte   $0D,$0A,$00
00D022  1               ; ----------------------------------------------------------------------------
00D022  1               ; "NEXT" STATEMENT
00D022  1               ; ----------------------------------------------------------------------------
00D022  1               NEXT:
00D022  1  D0 04                bne     NEXT1
00D024  1  A0 00                ldy     #$00
00D026  1  F0 03                beq     NEXT2
00D028  1               NEXT1:
00D028  1  20 ED D2             jsr     PTRGET
00D02B  1               NEXT2:
00D02B  1  85 97                sta     FORPNT
00D02D  1  84 98                sty     FORPNT+1
00D02F  1  20 8F C7             jsr     GTFORPNT
00D032  1  F0 04                beq     NEXT3
00D034  1  A2 00                ldx     #$00
00D036  1               GERR:
00D036  1  F0 68                beq     JERROR
00D038  1               NEXT3:
00D038  1  9A                   txs
00D039  1  E8                   inx
00D03A  1  E8                   inx
00D03B  1  E8                   inx
00D03C  1  E8                   inx
00D03D  1  8A                   txa
00D03E  1  E8                   inx
00D03F  1  E8                   inx
00D040  1  E8                   inx
00D041  1  E8                   inx
00D042  1  E8                   inx
00D043  1  86 73                stx     DEST
00D045  1  A0 01                ldy     #>STACK
00D047  1  20 2D DD             jsr     LOAD_FAC_FROM_YA
00D04A  1  BA                   tsx
00D04B  1  BD 08 01             lda     STACK+BYTES_FP+4,x
00D04E  1  85 B0                sta     FACSIGN
00D050  1  A5 97                lda     FORPNT
00D052  1  A4 98                ldy     FORPNT+1
00D054  1  20 4E DA             jsr     FADD
00D057  1  20 56 DD             jsr     SETFOR
00D05A  1  A0 01                ldy     #>STACK
00D05C  1  20 DC DD             jsr     FCOMP2
00D05F  1  BA                   tsx
00D060  1  38                   sec
00D061  1  FD 08 01             sbc     STACK+BYTES_FP+4,x
00D064  1  F0 17                beq     L2C22
00D066  1  BD 0D 01             lda     STACK+2*BYTES_FP+5,x
00D069  1  85 87                sta     CURLIN
00D06B  1  BD 0E 01             lda     STACK+2*BYTES_FP+6,x
00D06E  1  85 88                sta     CURLIN+1
00D070  1  BD 10 01             lda     STACK+2*BYTES_FP+8,x
00D073  1  85 DD                sta     TXTPTR
00D075  1  BD 0F 01             lda     STACK+2*BYTES_FP+7,x
00D078  1  85 DE                sta     TXTPTR+1
00D07A  1               L2C1F:
00D07A  1  4C B0 CB             jmp     NEWSTT
00D07D  1               L2C22:
00D07D  1  8A                   txa
00D07E  1  69 0F                adc     #2*BYTES_FP+7
00D080  1  AA                   tax
00D081  1  9A                   txs
00D082  1  20 DC 00             jsr     CHRGOT
00D085  1  C9 2C                cmp     #$2C
00D087  1  D0 F1                bne     L2C1F
00D089  1  20 D6 00             jsr     CHRGET
00D08C  1  20 28 D0             jsr     NEXT1
00D08F  1               ; ----------------------------------------------------------------------------
00D08F  1               ; EVALUATE EXPRESSION, MAKE SURE IT IS NUMERIC
00D08F  1               ; ----------------------------------------------------------------------------
00D08F  1               FRMNUM:
00D08F  1  20 A3 D0             jsr     FRMEVL
00D092  1               ; ----------------------------------------------------------------------------
00D092  1               ; MAKE SURE (FAC) IS NUMERIC
00D092  1               ; ----------------------------------------------------------------------------
00D092  1               CHKNUM:
00D092  1  18                   clc
00D093  1  24                   .byte   $24
00D094  1               ; ----------------------------------------------------------------------------
00D094  1               ; MAKE SURE (FAC) IS STRING
00D094  1               ; ----------------------------------------------------------------------------
00D094  1               CHKSTR:
00D094  1  38                   sec
00D095  1               ; ----------------------------------------------------------------------------
00D095  1               ; MAKE SURE (FAC) IS CORRECT TYPE
00D095  1               ; IF C=0, TYPE MUST BE NUMERIC
00D095  1               ; IF C=1, TYPE MUST BE STRING
00D095  1               ; ----------------------------------------------------------------------------
00D095  1               CHKVAL:
00D095  1  24 5F                bit     VALTYP
00D097  1  30 03                bmi     L2C41
00D099  1  B0 03                bcs     L2C43
00D09B  1               L2C40:
00D09B  1  60                   rts
00D09C  1               L2C41:
00D09C  1  B0 FD                bcs     L2C40
00D09E  1               L2C43:
00D09E  1  A2 18                ldx     #ERR_BADTYPE
00D0A0  1               JERROR:
00D0A0  1  4C 3C C8             jmp     ERROR
00D0A3  1               ; ----------------------------------------------------------------------------
00D0A3  1               ; EVALUATE THE EXPRESSION AT TXTPTR, LEAVING THE
00D0A3  1               ; RESULT IN FAC.  WORKS FOR BOTH STRING AND NUMERIC
00D0A3  1               ; EXPRESSIONS.
00D0A3  1               ; ----------------------------------------------------------------------------
00D0A3  1               FRMEVL:
00D0A3  1  A6 DD                ldx     TXTPTR
00D0A5  1  D0 02                bne     L2C4E
00D0A7  1  C6 DE                dec     TXTPTR+1
00D0A9  1               L2C4E:
00D0A9  1  C6 DD                dec     TXTPTR
00D0AB  1  A2 00                ldx     #$00
00D0AD  1  24                   .byte   $24
00D0AE  1               FRMEVL1:
00D0AE  1  48                   pha
00D0AF  1  8A                   txa
00D0B0  1  48                   pha
00D0B1  1  A9 01                lda     #$01
00D0B3  1  20 00 C8             jsr     CHKMEM
00D0B6  1  20 82 D1             jsr     FRM_ELEMENT
00D0B9  1  A9 00                lda     #$00
00D0BB  1  85 9B                sta     CPRTYP
00D0BD  1               FRMEVL2:
00D0BD  1  20 DC 00             jsr     CHRGOT
00D0C0  1               L2C65:
00D0C0  1  38                   sec
00D0C1  1  E9 AA                sbc     #TOKEN_GREATER
00D0C3  1  90 17                bcc     L2C81
00D0C5  1  C9 03                cmp     #$03
00D0C7  1  B0 13                bcs     L2C81
00D0C9  1  C9 01                cmp     #$01
00D0CB  1  2A                   rol     a
00D0CC  1  49 01                eor     #$01
00D0CE  1  45 9B                eor     CPRTYP
00D0D0  1  C5 9B                cmp     CPRTYP
00D0D2  1  90 61                bcc     SNTXERR
00D0D4  1  85 9B                sta     CPRTYP
00D0D6  1  20 D6 00             jsr     CHRGET
00D0D9  1  4C C0 D0             jmp     L2C65
00D0DC  1               L2C81:
00D0DC  1  A6 9B                ldx     CPRTYP
00D0DE  1  D0 2C                bne     FRM_RELATIONAL
00D0E0  1  B0 78                bcs     L2D02
00D0E2  1  69 07                adc     #$07
00D0E4  1  90 74                bcc     L2D02
00D0E6  1  65 5F                adc     VALTYP
00D0E8  1  D0 03                bne     L2C92
00D0EA  1  4C 2F D8             jmp     CAT
00D0ED  1               L2C92:
00D0ED  1  69 FF                adc     #$FF
00D0EF  1  85 71                sta     INDEX
00D0F1  1  0A                   asl     a
00D0F2  1  65 71                adc     INDEX
00D0F4  1  A8                   tay
00D0F5  1               FRM_PRECEDENCE_TEST:
00D0F5  1  68                   pla
00D0F6  1  D9 66 C0             cmp     MATHTBL,y
00D0F9  1  B0 64                bcs     FRM_PERFORM1
00D0FB  1  20 92 D0             jsr     CHKNUM
00D0FE  1               L2CA3:
00D0FE  1  48                   pha
00D0FF  1               L2CA4:
00D0FF  1  20 25 D1             jsr     FRM_RECURSE
00D102  1  68                   pla
00D103  1  A4 99                ldy     LASTOP
00D105  1  10 17                bpl     PREFNC
00D107  1  AA                   tax
00D108  1  F0 53                beq     GOEX
00D10A  1  D0 5C                bne     FRM_PERFORM2
00D10C  1               ; ----------------------------------------------------------------------------
00D10C  1               ; FOUND ONE OR MORE RELATIONAL OPERATORS <,=,>
00D10C  1               ; ----------------------------------------------------------------------------
00D10C  1               FRM_RELATIONAL:
00D10C  1  46 5F                lsr     VALTYP
00D10E  1  8A                   txa
00D10F  1  2A                   rol     a
00D110  1  A6 DD                ldx     TXTPTR
00D112  1  D0 02                bne     L2CBB
00D114  1  C6 DE                dec     TXTPTR+1
00D116  1               L2CBB:
00D116  1  C6 DD                dec     TXTPTR
00D118  1  A0 1B                ldy     #$1B
00D11A  1  85 9B                sta     CPRTYP
00D11C  1  D0 D7                bne     FRM_PRECEDENCE_TEST
00D11E  1               PREFNC:
00D11E  1  D9 66 C0             cmp     MATHTBL,y
00D121  1  B0 45                bcs     FRM_PERFORM2
00D123  1  90 D9                bcc     L2CA3
00D125  1               ; ----------------------------------------------------------------------------
00D125  1               ; STACK THIS OPERATION AND CALL FRMEVL FOR
00D125  1               ; ANOTHER ONE
00D125  1               ; ----------------------------------------------------------------------------
00D125  1               FRM_RECURSE:
00D125  1  B9 68 C0             lda     MATHTBL+2,y
00D128  1  48                   pha
00D129  1  B9 67 C0             lda     MATHTBL+1,y
00D12C  1  48                   pha
00D12D  1  20 38 D1             jsr     FRM_STACK1
00D130  1  A5 9B                lda     CPRTYP
00D132  1  4C AE D0             jmp     FRMEVL1
00D135  1               SNTXERR:
00D135  1  4C EE D1             jmp     SYNERR
00D138  1               ; ----------------------------------------------------------------------------
00D138  1               ; STACK (FAC)
00D138  1               ; THREE ENTRY POINTS:
00D138  1               ; 	1, FROM FRMEVL
00D138  1               ;	2, FROM "STEP"
00D138  1               ;	3, FROM "FOR"
00D138  1               ; ----------------------------------------------------------------------------
00D138  1               FRM_STACK1:
00D138  1  A5 B0                lda     FACSIGN
00D13A  1  BE 66 C0             ldx     MATHTBL,y
00D13D  1               ; ----------------------------------------------------------------------------
00D13D  1               ; ENTER HERE FROM "STEP", TO PUSH STEP SIGN AND VALUE
00D13D  1               ; ----------------------------------------------------------------------------
00D13D  1               FRM_STACK2:
00D13D  1  A8                   tay
00D13E  1  68                   pla
00D13F  1  85 71                sta     INDEX
00D141  1  E6 71                inc     INDEX ; bug: assumes not on page boundary
00D143  1               ; bug exists on AppleSoft II
00D143  1  68                   pla
00D144  1  85 72                sta     INDEX+1
00D146  1  98                   tya
00D147  1  48                   pha
00D148  1               ; ----------------------------------------------------------------------------
00D148  1               ; ENTER HERE FROM "FOR", WITH (INDEX) = STEP,
00D148  1               ; TO PUSH INITIAL VALUE OF "FOR" VARIABLE
00D148  1               ; ----------------------------------------------------------------------------
00D148  1               FRM_STACK3:
00D148  1  20 9C DD             jsr     ROUND_FAC
00D14B  1  A5 AF                lda     FAC+3
00D14D  1  48                   pha
00D14E  1  A5 AE                lda     FAC+2
00D150  1  48                   pha
00D151  1  A5 AD                lda     FAC+1
00D153  1  48                   pha
00D154  1  A5 AC                lda     FAC
00D156  1  48                   pha
00D157  1  6C 71 00             jmp     (INDEX)
00D15A  1               L2D02:
00D15A  1  A0 FF                ldy     #$FF
00D15C  1  68                   pla
00D15D  1               GOEX:
00D15D  1  F0 20                beq     EXIT
00D15F  1               ; ----------------------------------------------------------------------------
00D15F  1               ; PERFORM STACKED OPERATION
00D15F  1               ;
00D15F  1               ; (A) = PRECEDENCE BYTE
00D15F  1               ; STACK:  1 -- CPRMASK
00D15F  1               ;	5 -- (ARG)
00D15F  1               ;	2 -- ADDR OF PERFORMER
00D15F  1               ; ----------------------------------------------------------------------------
00D15F  1               FRM_PERFORM1:
00D15F  1  C9 64                cmp     #$64
00D161  1  F0 03                beq     L2D0E
00D163  1  20 92 D0             jsr     CHKNUM
00D166  1               L2D0E:
00D166  1  84 99                sty     LASTOP
00D168  1               FRM_PERFORM2:
00D168  1  68                   pla
00D169  1  4A                   lsr     a
00D16A  1  85 63                sta     CPRMASK
00D16C  1  68                   pla
00D16D  1  85 B3                sta     ARG
00D16F  1  68                   pla
00D170  1  85 B4                sta     ARG+1
00D172  1  68                   pla
00D173  1  85 B5                sta     ARG+2
00D175  1  68                   pla
00D176  1  85 B6                sta     ARG+3
00D178  1  68                   pla
00D179  1  85 B7                sta     ARGSIGN
00D17B  1  45 B0                eor     FACSIGN
00D17D  1  85 B8                sta     SGNCPR
00D17F  1               EXIT:
00D17F  1  A5 AC                lda     FAC
00D181  1  60                   rts
00D182  1               ; ----------------------------------------------------------------------------
00D182  1               ; GET ELEMENT IN EXPRESSION
00D182  1               ;
00D182  1               ; GET VALUE OF VARIABLE OR NUMBER AT TXTPNT, OR POINT
00D182  1               ; TO STRING DESCRIPTOR IF A STRING, AND PUT IN FAC.
00D182  1               ; ----------------------------------------------------------------------------
00D182  1               FRM_ELEMENT:
00D182  1  A9 00                lda     #$00
00D184  1  85 5F                sta     VALTYP
00D186  1               L2D31:
00D186  1  20 D6 00             jsr     CHRGET
00D189  1  B0 03                bcs     L2D39
00D18B  1               L2D36:
00D18B  1  4C 69 DE             jmp     FIN
00D18E  1               L2D39:
00D18E  1  20 63 D3             jsr     ISLETC
00D191  1  B0 67                bcs     FRM_VARIABLE
00D193  1               CON_PI:
00D193  1  C9 2E                cmp     #$2E
00D195  1  F0 F4                beq     L2D36
00D197  1  C9 A4                cmp     #TOKEN_MINUS
00D199  1  F0 58                beq     MIN
00D19B  1  C9 A3                cmp     #TOKEN_PLUS
00D19D  1  F0 E7                beq     L2D31
00D19F  1  C9 22                cmp     #$22
00D1A1  1  D0 0F                bne     NOT_
00D1A3  1               ; ----------------------------------------------------------------------------
00D1A3  1               ; STRING CONSTANT ELEMENT
00D1A3  1               ;
00D1A3  1               ; SET Y,A = (TXTPTR)+CARRY
00D1A3  1               ; ----------------------------------------------------------------------------
00D1A3  1               STRTXT:
00D1A3  1  A5 DD                lda     TXTPTR
00D1A5  1  A4 DE                ldy     TXTPTR+1
00D1A7  1  69 00                adc     #$00
00D1A9  1  90 01                bcc     L2D57
00D1AB  1  C8                   iny
00D1AC  1               L2D57:
00D1AC  1  20 90 D6             jsr     STRLIT
00D1AF  1  4C D5 D9             jmp     POINT
00D1B2  1               ; ----------------------------------------------------------------------------
00D1B2  1               ; "NOT" FUNCTION
00D1B2  1               ; IF FAC=0, RETURN FAC=1
00D1B2  1               ; IF FAC<>0, RETURN FAC=0
00D1B2  1               ; ----------------------------------------------------------------------------
00D1B2  1               NOT_:
00D1B2  1  C9 A1                cmp     #TOKEN_NOT
00D1B4  1  D0 13                bne     L2D74
00D1B6  1  A0 18                ldy     #$18
00D1B8  1  D0 3B                bne     EQUL
00D1BA  1               ; ----------------------------------------------------------------------------
00D1BA  1               ; COMPARISON FOR EQUALITY (= OPERATOR)
00D1BA  1               ; ALSO USED TO EVALUATE "NOT" FUNCTION
00D1BA  1               ; ----------------------------------------------------------------------------
00D1BA  1               EQUOP:
00D1BA  1  20 E7 D3             jsr     AYINT
00D1BD  1  A5 AF                lda     FAC_LAST
00D1BF  1  49 FF                eor     #$FF
00D1C1  1  A8                   tay
00D1C2  1  A5 AE                lda     FAC_LAST-1
00D1C4  1  49 FF                eor     #$FF
00D1C6  1  4C A3 D5             jmp     GIVAYF
00D1C9  1               L2D74:
00D1C9  1  C9 9E                cmp     #TOKEN_FN
00D1CB  1  D0 03                bne     L2D7B
00D1CD  1  4C 00 D6             jmp     L31F3
00D1D0  1               L2D7B:
00D1D0  1  C9 AD                cmp     #TOKEN_SGN
00D1D2  1  90 03                bcc     PARCHK
00D1D4  1  4C 09 D2             jmp     UNARY
00D1D7  1               ; ----------------------------------------------------------------------------
00D1D7  1               ; EVALUATE "(EXPRESSION)"
00D1D7  1               ; ----------------------------------------------------------------------------
00D1D7  1               PARCHK:
00D1D7  1  20 E0 D1             jsr     CHKOPN
00D1DA  1  20 A3 D0             jsr     FRMEVL
00D1DD  1               CHKCLS:
00D1DD  1  A9 29                lda     #$29
00D1DF  1  2C                   .byte   $2C
00D1E0  1               CHKOPN:
00D1E0  1  A9 28                lda     #$28
00D1E2  1  2C                   .byte   $2C
00D1E3  1               CHKCOM:
00D1E3  1  A9 2C                lda     #$2C
00D1E5  1               ; ----------------------------------------------------------------------------
00D1E5  1               ; UNLESS CHAR AT TXTPTR = (A), SYNTAX ERROR
00D1E5  1               ; ----------------------------------------------------------------------------
00D1E5  1               SYNCHR:	; XXX all CBM code calls SYNCHR instead of CHKCOM
00D1E5  1  A0 00                ldy     #$00
00D1E7  1  D1 DD                cmp     (TXTPTR),y
00D1E9  1  D0 03                bne     SYNERR
00D1EB  1  4C D6 00             jmp     CHRGET
00D1EE  1               ; ----------------------------------------------------------------------------
00D1EE  1               SYNERR:
00D1EE  1  A2 02                ldx     #ERR_SYNTAX
00D1F0  1  4C 3C C8             jmp     ERROR
00D1F3  1               ; ----------------------------------------------------------------------------
00D1F3  1               MIN:
00D1F3  1  A0 15                ldy     #$15
00D1F5  1               EQUL:
00D1F5  1  68                   pla
00D1F6  1  68                   pla
00D1F7  1  4C FF D0             jmp     L2CA4
00D1FA  1               ; ----------------------------------------------------------------------------
00D1FA  1               FRM_VARIABLE:
00D1FA  1  20 ED D2             jsr     PTRGET
00D1FD  1               FRM_VARIABLE_CALL	= *-1
00D1FD  1  85 AE                sta     FAC_LAST-1
00D1FF  1  84 AF                sty     FAC_LAST
00D201  1  A6 5F                ldx     VALTYP
00D203  1  F0 01                beq     L2DB1
00D205  1               ; bugfix?
00D205  1               ; fixed on AppleSoft II, not on any CBM
00D205  1  60                   rts
00D206  1               L2DB1:
00D206  1  4C 2D DD             jmp     LOAD_FAC_FROM_YA
00D209  1               ; ----------------------------------------------------------------------------
00D209  1               UNARY:
00D209  1  0A                   asl     a
00D20A  1  48                   pha
00D20B  1  AA                   tax
00D20C  1  20 D6 00             jsr     CHRGET
00D20F  1  E0 81                cpx     #<(TOKEN_LEFTSTR*2-1)
00D211  1  90 20                bcc     L2DEF
00D213  1  20 E0 D1             jsr     CHKOPN
00D216  1  20 A3 D0             jsr     FRMEVL
00D219  1  20 E3 D1             jsr     CHKCOM
00D21C  1  20 94 D0             jsr     CHKSTR
00D21F  1  68                   pla
00D220  1  AA                   tax
00D221  1  A5 AF                lda     FAC_LAST
00D223  1  48                   pha
00D224  1  A5 AE                lda     FAC_LAST-1
00D226  1  48                   pha
00D227  1  8A                   txa
00D228  1  48                   pha
00D229  1  20 90 D9             jsr     GETBYT
00D22C  1  68                   pla
00D22D  1  A8                   tay
00D22E  1  8A                   txa
00D22F  1  48                   pha
00D230  1  4C 38 D2             jmp     L2DF4
00D233  1               L2DEF:
00D233  1  20 D7 D1             jsr     PARCHK
00D236  1  68                   pla
00D237  1  A8                   tay
00D238  1               L2DF4:
00D238  1  B9 DE BF             lda     UNFNC+($80-TOKEN_SGN)*2,y
00D23B  1  85 A2                sta     JMPADRS+1
00D23D  1  B9 DF BF             lda     UNFNC+($80-TOKEN_SGN)*2+1,y
00D240  1  85 A3                sta     JMPADRS+2
00D242  1  20 A1 00             jsr     JMPADRS
00D245  1  4C 92 D0             jmp     CHKNUM
00D248  1               ; ----------------------------------------------------------------------------
00D248  1               OR:
00D248  1  A0 FF                ldy     #$FF
00D24A  1  2C                   .byte   $2C
00D24B  1               ; ----------------------------------------------------------------------------
00D24B  1               TAND:
00D24B  1  A0 00                ldy     #$00
00D24D  1  84 5D                sty     EOLPNTR
00D24F  1  20 E7 D3             jsr     AYINT
00D252  1  A5 AE                lda     FAC_LAST-1
00D254  1  45 5D                eor     EOLPNTR
00D256  1  85 5B                sta     CHARAC
00D258  1  A5 AF                lda     FAC_LAST
00D25A  1  45 5D                eor     EOLPNTR
00D25C  1  85 5C                sta     ENDCHR
00D25E  1  20 7D DD             jsr     COPY_ARG_TO_FAC
00D261  1  20 E7 D3             jsr     AYINT
00D264  1  A5 AF                lda     FAC_LAST
00D266  1  45 5D                eor     EOLPNTR
00D268  1  25 5C                and     ENDCHR
00D26A  1  45 5D                eor     EOLPNTR
00D26C  1  A8                   tay
00D26D  1  A5 AE                lda     FAC_LAST-1
00D26F  1  45 5D                eor     EOLPNTR
00D271  1  25 5B                and     CHARAC
00D273  1  45 5D                eor     EOLPNTR
00D275  1  4C A3 D5             jmp     GIVAYF
00D278  1               ; ----------------------------------------------------------------------------
00D278  1               ; PERFORM RELATIONAL OPERATIONS
00D278  1               ; ----------------------------------------------------------------------------
00D278  1               RELOPS:
00D278  1  20 95 D0             jsr     CHKVAL
00D27B  1  B0 13                bcs     STRCMP
00D27D  1  A5 B7                lda     ARGSIGN
00D27F  1  09 7F                ora     #$7F
00D281  1  25 B4                and     ARG+1
00D283  1  85 B4                sta     ARG+1
00D285  1  A9 B3                lda     #<ARG
00D287  1  A0 00                ldy     #$00
00D289  1  20 DA DD             jsr     FCOMP
00D28C  1  AA                   tax
00D28D  1  4C C3 D2             jmp     NUMCMP
00D290  1               ; ----------------------------------------------------------------------------
00D290  1               ; STRING COMPARISON
00D290  1               ; ----------------------------------------------------------------------------
00D290  1               STRCMP:
00D290  1  A9 00                lda     #$00
00D292  1  85 5F                sta     VALTYP
00D294  1  C6 9B                dec     CPRTYP
00D296  1  20 98 D8             jsr     FREFAC
00D299  1  85 AC                sta     FAC
00D29B  1  86 AD                stx     FAC+1
00D29D  1  84 AE                sty     FAC+2
00D29F  1  A5 B5                lda     ARG_LAST-1
00D2A1  1  A4 B6                ldy     ARG_LAST
00D2A3  1  20 9C D8             jsr     FRETMP
00D2A6  1  86 B5                stx     ARG_LAST-1
00D2A8  1  84 B6                sty     ARG_LAST
00D2AA  1  AA                   tax
00D2AB  1  38                   sec
00D2AC  1  E5 AC                sbc     FAC
00D2AE  1  F0 08                beq     L2E74
00D2B0  1  A9 01                lda     #$01
00D2B2  1  90 04                bcc     L2E74
00D2B4  1  A6 AC                ldx     FAC
00D2B6  1  A9 FF                lda     #$FF
00D2B8  1               L2E74:
00D2B8  1  85 B0                sta     FACSIGN
00D2BA  1  A0 FF                ldy     #$FF
00D2BC  1  E8                   inx
00D2BD  1               STRCMP1:
00D2BD  1  C8                   iny
00D2BE  1  CA                   dex
00D2BF  1  D0 07                bne     L2E84
00D2C1  1  A6 B0                ldx     FACSIGN
00D2C3  1               NUMCMP:
00D2C3  1  30 0F                bmi     CMPDONE
00D2C5  1  18                   clc
00D2C6  1  90 0C                bcc     CMPDONE
00D2C8  1               L2E84:
00D2C8  1  B1 B5                lda     (ARG_LAST-1),y
00D2CA  1  D1 AD                cmp     (FAC+1),y
00D2CC  1  F0 EF                beq     STRCMP1
00D2CE  1  A2 FF                ldx     #$FF
00D2D0  1  B0 02                bcs     CMPDONE
00D2D2  1  A2 01                ldx     #$01
00D2D4  1               CMPDONE:
00D2D4  1  E8                   inx
00D2D5  1  8A                   txa
00D2D6  1  2A                   rol     a
00D2D7  1  25 63                and     CPRMASK
00D2D9  1  F0 02                beq     L2E99
00D2DB  1  A9 FF                lda     #$FF
00D2DD  1               L2E99:
00D2DD  1  4C BD DD             jmp     FLOAT
00D2E0  1               ; ----------------------------------------------------------------------------
00D2E0  1               ; "DIM" STATEMENT
00D2E0  1               ; ----------------------------------------------------------------------------
00D2E0  1               NXDIM:
00D2E0  1  20 E3 D1             jsr     CHKCOM
00D2E3  1               DIM:
00D2E3  1  AA                   tax
00D2E4  1  20 F2 D2             jsr     PTRGET2
00D2E7  1  20 DC 00             jsr     CHRGOT
00D2EA  1  D0 F4                bne     NXDIM
00D2EC  1  60                   rts
00D2ED  1               ; ----------------------------------------------------------------------------
00D2ED  1               ; PTRGET -- GENERAL VARIABLE SCAN
00D2ED  1               ;
00D2ED  1               ; SCANS VARIABLE NAME AT TXTPTR, AND SEARCHES THE
00D2ED  1               ; VARTAB AND ARYTAB FOR THE NAME.
00D2ED  1               ; IF NOT FOUND, CREATE VARIABLE OF APPROPRIATE TYPE.
00D2ED  1               ; RETURN WITH ADDRESS IN VARPNT AND Y,A
00D2ED  1               ;
00D2ED  1               ; ACTUAL ACTIVITY CONTROLLED SOMEWHAT BY TWO FLAGS:
00D2ED  1               ;	DIMFLG -- NONZERO IF CALLED FROM "DIM"
00D2ED  1               ;		ELSE = 0
00D2ED  1               ;
00D2ED  1               ;	SUBFLG -- = $00
00D2ED  1               ;		= $40 IF CALLED FROM "GETARYPT"
00D2ED  1               ; ----------------------------------------------------------------------------
00D2ED  1               PTRGET:
00D2ED  1  A2 00                ldx     #$00
00D2EF  1  20 DC 00             jsr     CHRGOT
00D2F2  1               PTRGET2:
00D2F2  1  86 5E                stx     DIMFLG
00D2F4  1               PTRGET3:
00D2F4  1  85 93                sta     VARNAM
00D2F6  1  20 DC 00             jsr     CHRGOT
00D2F9  1  20 63 D3             jsr     ISLETC
00D2FC  1  B0 03                bcs     NAMOK
00D2FE  1  4C EE D1             jmp     SYNERR
00D301  1               NAMOK:
00D301  1  A2 00                ldx     #$00
00D303  1  86 5F                stx     VALTYP
00D305  1  20 D6 00             jsr     CHRGET
00D308  1  90 05                bcc     L2ECD
00D30A  1  20 63 D3             jsr     ISLETC
00D30D  1  90 0B                bcc     L2ED8
00D30F  1               L2ECD:
00D30F  1  AA                   tax
00D310  1               L2ECE:
00D310  1  20 D6 00             jsr     CHRGET
00D313  1  90 FB                bcc     L2ECE
00D315  1  20 63 D3             jsr     ISLETC
00D318  1  B0 F6                bcs     L2ECE
00D31A  1               L2ED8:
00D31A  1  C9 24                cmp     #$24
00D31C  1  D0 0B                bne     L2EF9
00D31E  1  A9 FF                lda     #$FF
00D320  1  85 5F                sta     VALTYP
00D322  1  8A                   txa
00D323  1  09 80                ora     #$80
00D325  1  AA                   tax
00D326  1  20 D6 00             jsr     CHRGET
00D329  1               L2EF9:
00D329  1  86 94                stx     VARNAM+1
00D32B  1  38                   sec
00D32C  1  05 61                ora     SUBFLG
00D32E  1  E9 28                sbc     #$28
00D330  1  D0 03                bne     L2F05
00D332  1  4C F9 D3             jmp     ARRAY
00D335  1               L2F05:
00D335  1  A9 00                lda     #$00
00D337  1  85 61                sta     SUBFLG
00D339  1  A5 7B                lda     VARTAB
00D33B  1  A6 7C                ldx     VARTAB+1
00D33D  1  A0 00                ldy     #$00
00D33F  1               L2F0F:
00D33F  1  86 AB                stx     LOWTR+1
00D341  1               L2F11:
00D341  1  85 AA                sta     LOWTR
00D343  1  E4 7E                cpx     ARYTAB+1
00D345  1  D0 04                bne     L2F1B
00D347  1  C5 7D                cmp     ARYTAB
00D349  1  F0 22                beq     NAMENOTFOUND
00D34B  1               L2F1B:
00D34B  1  A5 93                lda     VARNAM
00D34D  1  D1 AA                cmp     (LOWTR),y
00D34F  1  D0 08                bne     L2F29
00D351  1  A5 94                lda     VARNAM+1
00D353  1  C8                   iny
00D354  1  D1 AA                cmp     (LOWTR),y
00D356  1  F0 61                beq     SET_VARPNT_AND_YA
00D358  1  88                   dey
00D359  1               L2F29:
00D359  1  18                   clc
00D35A  1  A5 AA                lda     LOWTR
00D35C  1  69 06                adc     #BYTES_PER_VARIABLE
00D35E  1  90 E1                bcc     L2F11
00D360  1  E8                   inx
00D361  1  D0 DC                bne     L2F0F
00D363  1               ; ----------------------------------------------------------------------------
00D363  1               ; CHECK IF (A) IS ASCII LETTER A-Z
00D363  1               ;
00D363  1               ; RETURN CARRY = 1 IF A-Z
00D363  1               ;	= 0 IF NOT
00D363  1               ; ----------------------------------------------------------------------------
00D363  1               ISLETC:
00D363  1  C9 41                cmp     #$41
00D365  1  90 05                bcc     L2F3C
00D367  1  E9 5B                sbc     #$5B
00D369  1  38                   sec
00D36A  1  E9 A5                sbc     #$A5
00D36C  1               L2F3C:
00D36C  1  60                   rts
00D36D  1               ; ----------------------------------------------------------------------------
00D36D  1               ; VARIABLE NOT FOUND, SO MAKE ONE
00D36D  1               ; ----------------------------------------------------------------------------
00D36D  1               NAMENOTFOUND:
00D36D  1  68                   pla
00D36E  1  48                   pha
00D36F  1  C9 FC                cmp     #<FRM_VARIABLE_CALL
00D371  1  D0 07                bne     MAKENEWVARIABLE
00D373  1  A9 78                lda     #<C_ZERO
00D375  1  A0 D3                ldy     #>C_ZERO
00D377  1  60                   rts
00D378  1               ; ----------------------------------------------------------------------------
00D378  1               C_ZERO:
00D378  1  00 00                .byte   $00,$00
00D37A  1               ; ----------------------------------------------------------------------------
00D37A  1               ; MAKE A NEW SIMPLE VARIABLE
00D37A  1               ;
00D37A  1               ; MOVE ARRAYS UP 7 BYTES TO MAKE ROOM FOR NEW VARIABLE
00D37A  1               ; ENTER 7-BYTE VARIABLE DATA IN THE HOLE
00D37A  1               ; ----------------------------------------------------------------------------
00D37A  1               MAKENEWVARIABLE:
00D37A  1  A5 7D                lda     ARYTAB
00D37C  1  A4 7E                ldy     ARYTAB+1
00D37E  1  85 AA                sta     LOWTR
00D380  1  84 AB                sty     LOWTR+1
00D382  1  A5 7F                lda     STREND
00D384  1  A4 80                ldy     STREND+1
00D386  1  85 A6                sta     HIGHTR
00D388  1  84 A7                sty     HIGHTR+1
00D38A  1  18                   clc
00D38B  1  69 06                adc     #BYTES_PER_VARIABLE
00D38D  1  90 01                bcc     L2F68
00D38F  1  C8                   iny
00D390  1               L2F68:
00D390  1  85 A4                sta     HIGHDS
00D392  1  84 A5                sty     HIGHDS+1
00D394  1  20 BD C7             jsr     BLTU
00D397  1  A5 A4                lda     HIGHDS
00D399  1  A4 A5                ldy     HIGHDS+1
00D39B  1  C8                   iny
00D39C  1  85 7D                sta     ARYTAB
00D39E  1  84 7E                sty     ARYTAB+1
00D3A0  1  A0 00                ldy     #$00
00D3A2  1  A5 93                lda     VARNAM
00D3A4  1  91 AA                sta     (LOWTR),y
00D3A6  1  C8                   iny
00D3A7  1  A5 94                lda     VARNAM+1
00D3A9  1  91 AA                sta     (LOWTR),y
00D3AB  1  A9 00                lda     #$00
00D3AD  1  C8                   iny
00D3AE  1  91 AA                sta     (LOWTR),y
00D3B0  1  C8                   iny
00D3B1  1  91 AA                sta     (LOWTR),y
00D3B3  1  C8                   iny
00D3B4  1  91 AA                sta     (LOWTR),y
00D3B6  1  C8                   iny
00D3B7  1  91 AA                sta     (LOWTR),y
00D3B9  1               ; ----------------------------------------------------------------------------
00D3B9  1               ; PUT ADDRESS OF VALUE OF VARIABLE IN VARPNT AND Y,A
00D3B9  1               ; ----------------------------------------------------------------------------
00D3B9  1               SET_VARPNT_AND_YA:
00D3B9  1  A5 AA                lda     LOWTR
00D3BB  1  18                   clc
00D3BC  1  69 02                adc     #$02
00D3BE  1  A4 AB                ldy     LOWTR+1
00D3C0  1  90 01                bcc     L2F9E
00D3C2  1  C8                   iny
00D3C3  1               L2F9E:
00D3C3  1  85 95                sta     VARPNT
00D3C5  1  84 96                sty     VARPNT+1
00D3C7  1  60                   rts
00D3C8  1               ; ----------------------------------------------------------------------------
00D3C8  1               ; COMPUTE ADDRESS OF FIRST VALUE IN ARRAY
00D3C8  1               ; ARYPNT = (LOWTR) + #DIMS*2 + 5
00D3C8  1               ; ----------------------------------------------------------------------------
00D3C8  1               GETARY:
00D3C8  1  A5 5D                lda     EOLPNTR
00D3CA  1  0A                   asl     a
00D3CB  1  69 05                adc     #$05
00D3CD  1  65 AA                adc     LOWTR
00D3CF  1  A4 AB                ldy     LOWTR+1
00D3D1  1  90 01                bcc     L2FAF
00D3D3  1  C8                   iny
00D3D4  1               L2FAF:
00D3D4  1  85 A4                sta     HIGHDS
00D3D6  1  84 A5                sty     HIGHDS+1
00D3D8  1  60                   rts
00D3D9  1               ; ----------------------------------------------------------------------------
00D3D9  1               NEG32768:
00D3D9  1  90 80 00 00          .byte   $90,$80,$00,$00
00D3DD  1               ; ----------------------------------------------------------------------------
00D3DD  1               ; EVALUATE NUMERIC FORMULA AT TXTPTR
00D3DD  1               ; CONVERTING RESULT TO INTEGER 0 <= X <= 32767
00D3DD  1               ; IN FAC+3,4
00D3DD  1               ; ----------------------------------------------------------------------------
00D3DD  1               MAKINT:
00D3DD  1  20 D6 00             jsr     CHRGET
00D3E0  1  20 8F D0             jsr     FRMNUM
00D3E3  1               ; ----------------------------------------------------------------------------
00D3E3  1               ; CONVERT FAC TO INTEGER
00D3E3  1               ; MUST BE POSITIVE AND LESS THAN 32768
00D3E3  1               ; ----------------------------------------------------------------------------
00D3E3  1               MKINT:
00D3E3  1  A5 B0                lda     FACSIGN
00D3E5  1  30 0D                bmi     MI1
00D3E7  1               ; ----------------------------------------------------------------------------
00D3E7  1               ; CONVERT FAC TO INTEGER
00D3E7  1               ; MUST BE -32767 <= FAC <= 32767
00D3E7  1               ; ----------------------------------------------------------------------------
00D3E7  1               AYINT:
00D3E7  1  A5 AC                lda     FAC
00D3E9  1  C9 90                cmp     #$90
00D3EB  1  90 09                bcc     MI2
00D3ED  1  A9 D9                lda     #<NEG32768
00D3EF  1  A0 D3                ldy     #>NEG32768
00D3F1  1  20 DA DD             jsr     FCOMP
00D3F4  1               MI1:
00D3F4  1  D0 74                bne     IQERR
00D3F6  1               MI2:
00D3F6  1  4C 13 DE             jmp     QINT
00D3F9  1               ; ----------------------------------------------------------------------------
00D3F9  1               ; LOCATE ARRAY ELEMENT OR CREATE AN ARRAY
00D3F9  1               ; ----------------------------------------------------------------------------
00D3F9  1               ARRAY:
00D3F9  1  A5 5E                lda     DIMFLG
00D3FB  1  48                   pha
00D3FC  1  A5 5F                lda     VALTYP
00D3FE  1  48                   pha
00D3FF  1  A0 00                ldy     #$00
00D401  1               L2FDE:
00D401  1  98                   tya
00D402  1  48                   pha
00D403  1  A5 94                lda     VARNAM+1
00D405  1  48                   pha
00D406  1  A5 93                lda     VARNAM
00D408  1  48                   pha
00D409  1  20 DD D3             jsr     MAKINT
00D40C  1  68                   pla
00D40D  1  85 93                sta     VARNAM
00D40F  1  68                   pla
00D410  1  85 94                sta     VARNAM+1
00D412  1  68                   pla
00D413  1  A8                   tay
00D414  1  BA                   tsx
00D415  1  BD 02 01             lda     STACK+2,x
00D418  1  48                   pha
00D419  1  BD 01 01             lda     STACK+1,x
00D41C  1  48                   pha
00D41D  1  A5 AE                lda     FAC_LAST-1
00D41F  1  9D 02 01             sta     STACK+2,x
00D422  1  A5 AF                lda     FAC_LAST
00D424  1  9D 01 01             sta     STACK+1,x
00D427  1  C8                   iny
00D428  1  20 DC 00             jsr     CHRGOT
00D42B  1  C9 2C                cmp     #$2C
00D42D  1  F0 D2                beq     L2FDE
00D42F  1  84 5D                sty     EOLPNTR
00D431  1  20 DD D1             jsr     CHKCLS
00D434  1  68                   pla
00D435  1  85 5F                sta     VALTYP
00D437  1  68                   pla
00D438  1  85 5E                sta     DIMFLG
00D43A  1               ; ----------------------------------------------------------------------------
00D43A  1               ; SEARCH ARRAY TABLE FOR THIS ARRAY NAME
00D43A  1               ; ----------------------------------------------------------------------------
00D43A  1  A6 7D                ldx     ARYTAB
00D43C  1  A5 7E                lda     ARYTAB+1
00D43E  1               L301F:
00D43E  1  86 AA                stx     LOWTR
00D440  1  85 AB                sta     LOWTR+1
00D442  1  C5 80                cmp     STREND+1
00D444  1  D0 04                bne     L302B
00D446  1  E4 7F                cpx     STREND
00D448  1  F0 39                beq     MAKE_NEW_ARRAY
00D44A  1               L302B:
00D44A  1  A0 00                ldy     #$00
00D44C  1  B1 AA                lda     (LOWTR),y
00D44E  1  C8                   iny
00D44F  1  C5 93                cmp     VARNAM
00D451  1  D0 06                bne     L303A
00D453  1  A5 94                lda     VARNAM+1
00D455  1  D1 AA                cmp     (LOWTR),y
00D457  1  F0 16                beq     USE_OLD_ARRAY
00D459  1               L303A:
00D459  1  C8                   iny
00D45A  1  B1 AA                lda     (LOWTR),y
00D45C  1  18                   clc
00D45D  1  65 AA                adc     LOWTR
00D45F  1  AA                   tax
00D460  1  C8                   iny
00D461  1  B1 AA                lda     (LOWTR),y
00D463  1  65 AB                adc     LOWTR+1
00D465  1  90 D7                bcc     L301F
00D467  1               ; ----------------------------------------------------------------------------
00D467  1               ; ERROR:  BAD SUBSCRIPTS
00D467  1               ; ----------------------------------------------------------------------------
00D467  1               SUBERR:
00D467  1  A2 10                ldx     #ERR_BADSUBS
00D469  1  2C                   .byte   $2C
00D46A  1               ; ----------------------------------------------------------------------------
00D46A  1               ; ERROR:  ILLEGAL QUANTITY
00D46A  1               ; ----------------------------------------------------------------------------
00D46A  1               IQERR:
00D46A  1  A2 08                ldx     #ERR_ILLQTY
00D46C  1               JER:
00D46C  1  4C 3C C8             jmp     ERROR
00D46F  1               ; ----------------------------------------------------------------------------
00D46F  1               ; FOUND THE ARRAY
00D46F  1               ; ----------------------------------------------------------------------------
00D46F  1               USE_OLD_ARRAY:
00D46F  1  A2 12                ldx     #ERR_REDIMD
00D471  1  A5 5E                lda     DIMFLG
00D473  1  D0 F7                bne     JER
00D475  1  20 C8 D3             jsr     GETARY
00D478  1  A5 5D                lda     EOLPNTR
00D47A  1  A0 04                ldy     #$04
00D47C  1  D1 AA                cmp     (LOWTR),y
00D47E  1  D0 E7                bne     SUBERR
00D480  1  4C 06 D5             jmp     FIND_ARRAY_ELEMENT
00D483  1               ; ----------------------------------------------------------------------------
00D483  1               ; CREATE A NEW ARRAY, UNLESS CALLED FROM GETARYPT
00D483  1               ; ----------------------------------------------------------------------------
00D483  1               MAKE_NEW_ARRAY:
00D483  1  20 C8 D3             jsr     GETARY
00D486  1  20 0D C8             jsr     REASON
00D489  1  A9 00                lda     #$00
00D48B  1  A8                   tay
00D48C  1  85 BB                sta     STRNG2+1
00D48E  1  A2 04                ldx     #BYTES_PER_ELEMENT
00D490  1  86 BA                stx     STRNG2
00D492  1  A5 93                lda     VARNAM
00D494  1  91 AA                sta     (LOWTR),y
00D496  1  C8                   iny
00D497  1  A5 94                lda     VARNAM+1
00D499  1  91 AA                sta     (LOWTR),y
00D49B  1  A5 5D                lda     EOLPNTR
00D49D  1  C8                   iny
00D49E  1  C8                   iny
00D49F  1  C8                   iny
00D4A0  1  91 AA                sta     (LOWTR),y
00D4A2  1               L308A:
00D4A2  1  A2 0B                ldx     #$0B
00D4A4  1  A9 00                lda     #$00
00D4A6  1  24 5E                bit     DIMFLG
00D4A8  1  50 08                bvc     L309A
00D4AA  1  68                   pla
00D4AB  1  18                   clc
00D4AC  1  69 01                adc     #$01
00D4AE  1  AA                   tax
00D4AF  1  68                   pla
00D4B0  1  69 00                adc     #$00
00D4B2  1               L309A:
00D4B2  1  C8                   iny
00D4B3  1  91 AA                sta     (LOWTR),y
00D4B5  1  C8                   iny
00D4B6  1  8A                   txa
00D4B7  1  91 AA                sta     (LOWTR),y
00D4B9  1  20 5E D5             jsr     MULTIPLY_SUBSCRIPT
00D4BC  1  86 BA                stx     STRNG2
00D4BE  1  85 BB                sta     STRNG2+1
00D4C0  1  A4 71                ldy     INDEX
00D4C2  1  C6 5D                dec     EOLPNTR
00D4C4  1  D0 DC                bne     L308A
00D4C6  1  65 A5                adc     HIGHDS+1
00D4C8  1  B0 5D                bcs     GME
00D4CA  1  85 A5                sta     HIGHDS+1
00D4CC  1  A8                   tay
00D4CD  1  8A                   txa
00D4CE  1  65 A4                adc     HIGHDS
00D4D0  1  90 03                bcc     L30BD
00D4D2  1  C8                   iny
00D4D3  1  F0 52                beq     GME
00D4D5  1               L30BD:
00D4D5  1  20 0D C8             jsr     REASON
00D4D8  1  85 7F                sta     STREND
00D4DA  1  84 80                sty     STREND+1
00D4DC  1  A9 00                lda     #$00
00D4DE  1  E6 BB                inc     STRNG2+1
00D4E0  1  A4 BA                ldy     STRNG2
00D4E2  1  F0 05                beq     L30D1
00D4E4  1               L30CC:
00D4E4  1  88                   dey
00D4E5  1  91 A4                sta     (HIGHDS),y
00D4E7  1  D0 FB                bne     L30CC
00D4E9  1               L30D1:
00D4E9  1  C6 A5                dec     HIGHDS+1
00D4EB  1  C6 BB                dec     STRNG2+1
00D4ED  1  D0 F5                bne     L30CC
00D4EF  1  E6 A5                inc     HIGHDS+1
00D4F1  1  38                   sec
00D4F2  1  A5 7F                lda     STREND
00D4F4  1  E5 AA                sbc     LOWTR
00D4F6  1  A0 02                ldy     #$02
00D4F8  1  91 AA                sta     (LOWTR),y
00D4FA  1  A5 80                lda     STREND+1
00D4FC  1  C8                   iny
00D4FD  1  E5 AB                sbc     LOWTR+1
00D4FF  1  91 AA                sta     (LOWTR),y
00D501  1  A5 5E                lda     DIMFLG
00D503  1  D0 58                bne     RTS9
00D505  1  C8                   iny
00D506  1               ; ----------------------------------------------------------------------------
00D506  1               ; FIND SPECIFIED ARRAY ELEMENT
00D506  1               ;
00D506  1               ; (LOWTR),Y POINTS AT # OF DIMS IN ARRAY DESCRIPTOR
00D506  1               ; THE SUBSCRIPTS ARE ALL ON THE STACK AS INTEGERS
00D506  1               ; ----------------------------------------------------------------------------
00D506  1               FIND_ARRAY_ELEMENT:
00D506  1  B1 AA                lda     (LOWTR),y
00D508  1  85 5D                sta     EOLPNTR
00D50A  1  A9 00                lda     #$00
00D50C  1  85 BA                sta     STRNG2
00D50E  1               L30F6:
00D50E  1  85 BB                sta     STRNG2+1
00D510  1  C8                   iny
00D511  1  68                   pla
00D512  1  AA                   tax
00D513  1  85 AE                sta     FAC_LAST-1
00D515  1  68                   pla
00D516  1  85 AF                sta     FAC_LAST
00D518  1  D1 AA                cmp     (LOWTR),y
00D51A  1  90 0E                bcc     FAE2
00D51C  1  D0 06                bne     GSE
00D51E  1  C8                   iny
00D51F  1  8A                   txa
00D520  1  D1 AA                cmp     (LOWTR),y
00D522  1  90 07                bcc     FAE3
00D524  1               ; ----------------------------------------------------------------------------
00D524  1               GSE:
00D524  1  4C 67 D4             jmp     SUBERR
00D527  1               GME:
00D527  1  4C 3A C8             jmp     MEMERR
00D52A  1               ; ----------------------------------------------------------------------------
00D52A  1               FAE2:
00D52A  1  C8                   iny
00D52B  1               FAE3:
00D52B  1  A5 BB                lda     STRNG2+1
00D52D  1  05 BA                ora     STRNG2
00D52F  1  18                   clc
00D530  1  F0 0A                beq     L3124
00D532  1  20 5E D5             jsr     MULTIPLY_SUBSCRIPT
00D535  1  8A                   txa
00D536  1  65 AE                adc     FAC_LAST-1
00D538  1  AA                   tax
00D539  1  98                   tya
00D53A  1  A4 71                ldy     INDEX
00D53C  1               L3124:
00D53C  1  65 AF                adc     FAC_LAST
00D53E  1  86 BA                stx     STRNG2
00D540  1  C6 5D                dec     EOLPNTR
00D542  1  D0 CA                bne     L30F6
00D544  1  06 BA                asl     STRNG2
00D546  1  2A                   rol     a
00D547  1  B0 DB                bcs     GSE
00D549  1  06 BA                asl     STRNG2
00D54B  1  2A                   rol     a
00D54C  1  B0 D6                bcs     GSE
00D54E  1  A8                   tay
00D54F  1  A5 BA                lda     STRNG2
00D551  1  65 A4                adc     HIGHDS
00D553  1  85 95                sta     VARPNT
00D555  1  98                   tya
00D556  1  65 A5                adc     HIGHDS+1
00D558  1  85 96                sta     VARPNT+1
00D55A  1  A8                   tay
00D55B  1  A5 95                lda     VARPNT
00D55D  1               RTS9:
00D55D  1  60                   rts
00D55E  1               ; ----------------------------------------------------------------------------
00D55E  1               ; MULTIPLY (STRNG2) BY ((LOWTR),Y)
00D55E  1               ; LEAVING PRODUCT IN A,X.  (HI-BYTE ALSO IN Y.)
00D55E  1               ; USED ONLY BY ARRAY SUBSCRIPT ROUTINES
00D55E  1               ; ----------------------------------------------------------------------------
00D55E  1               MULTIPLY_SUBSCRIPT:
00D55E  1  84 71                sty     INDEX
00D560  1  B1 AA                lda     (LOWTR),y
00D562  1  85 76                sta     RESULT_LAST-2
00D564  1  88                   dey
00D565  1  B1 AA                lda     (LOWTR),y
00D567  1  85 77                sta     RESULT_LAST-1
00D569  1  A9 10                lda     #$10
00D56B  1  85 A8                sta     INDX
00D56D  1  A2 00                ldx     #$00
00D56F  1  A0 00                ldy     #$00
00D571  1               L3163:
00D571  1  8A                   txa
00D572  1  0A                   asl     a
00D573  1  AA                   tax
00D574  1  98                   tya
00D575  1  2A                   rol     a
00D576  1  A8                   tay
00D577  1  B0 AE                bcs     GME
00D579  1  06 BA                asl     STRNG2
00D57B  1  26 BB                rol     STRNG2+1
00D57D  1  90 0B                bcc     L317C
00D57F  1  18                   clc
00D580  1  8A                   txa
00D581  1  65 76                adc     RESULT_LAST-2
00D583  1  AA                   tax
00D584  1  98                   tya
00D585  1  65 77                adc     RESULT_LAST-1
00D587  1  A8                   tay
00D588  1  B0 9D                bcs     GME
00D58A  1               L317C:
00D58A  1  C6 A8                dec     INDX
00D58C  1  D0 E3                bne     L3163
00D58E  1  60                   rts
00D58F  1               ; ----------------------------------------------------------------------------
00D58F  1               ; "FRE" FUNCTION
00D58F  1               ;
00D58F  1               ; COLLECTS GARBAGE AND RETURNS # BYTES OF MEMORY LEFT
00D58F  1               ; ----------------------------------------------------------------------------
00D58F  1               FRE:
00D58F  1  A5 5F                lda     VALTYP
00D591  1  F0 03                beq     L3188
00D593  1  20 98 D8             jsr     FREFAC
00D596  1               L3188:
00D596  1  20 29 D7             jsr     GARBAG
00D599  1  38                   sec
00D59A  1  A5 81                lda     FRETOP
00D59C  1  E5 7F                sbc     STREND
00D59E  1  A8                   tay
00D59F  1  A5 82                lda     FRETOP+1
00D5A1  1  E5 80                sbc     STREND+1
00D5A3  1               ; FALL INTO GIVAYF TO FLOAT THE VALUE
00D5A3  1               ; NOTE THAT VALUES OVER 32767 WILL RETURN AS NEGATIVE
00D5A3  1               ; ----------------------------------------------------------------------------
00D5A3  1               ; FLOAT THE SIGNED INTEGER IN A,Y
00D5A3  1               ; ----------------------------------------------------------------------------
00D5A3  1               GIVAYF:
00D5A3  1  A2 00                ldx     #$00
00D5A5  1  86 5F                stx     VALTYP
00D5A7  1  85 AD                sta     FAC+1
00D5A9  1  84 AE                sty     FAC+2
00D5AB  1  A2 90                ldx     #$90
00D5AD  1  4C C5 DD             jmp     FLOAT1
00D5B0  1               POS:
00D5B0  1  A4 0E                ldy     POSX
00D5B2  1               ; ----------------------------------------------------------------------------
00D5B2  1               ; FLOAT (Y) INTO FAC, GIVING VALUE 0-255
00D5B2  1               ; ----------------------------------------------------------------------------
00D5B2  1               SNGFLT:
00D5B2  1  A9 00                lda     #$00
00D5B4  1  F0 ED                beq     GIVAYF
00D5B6  1               ; ----------------------------------------------------------------------------
00D5B6  1               ; CHECK FOR DIRECT OR RUNNING MODE
00D5B6  1               ; GIVING ERROR IF DIRECT MODE
00D5B6  1               ; ----------------------------------------------------------------------------
00D5B6  1               ERRDIR:
00D5B6  1  A6 88                ldx     CURLIN+1
00D5B8  1  E8                   inx
00D5B9  1  D0 A2                bne     RTS9
00D5BB  1  A2 16                ldx     #ERR_ILLDIR
00D5BD  1               L31AF:
00D5BD  1  4C 3C C8             jmp     ERROR
00D5C0  1               DEF:
00D5C0  1  20 ED D5             jsr     FNC
00D5C3  1  20 B6 D5             jsr     ERRDIR
00D5C6  1  20 E0 D1             jsr     CHKOPN
00D5C9  1  A9 80                lda     #$80
00D5CB  1  85 61                sta     SUBFLG
00D5CD  1  20 ED D2             jsr     PTRGET
00D5D0  1  20 92 D0             jsr     CHKNUM
00D5D3  1  20 DD D1             jsr     CHKCLS
00D5D6  1  A9 AB                lda     #TOKEN_EQUAL
00D5D8  1  20 E5 D1             jsr     SYNCHR
00D5DB  1  A5 96                lda     VARPNT+1
00D5DD  1  48                   pha
00D5DE  1  A5 95                lda     VARPNT
00D5E0  1  48                   pha
00D5E1  1  A5 DE                lda     TXTPTR+1
00D5E3  1  48                   pha
00D5E4  1  A5 DD                lda     TXTPTR
00D5E6  1  48                   pha
00D5E7  1  20 EE CC             jsr     DATA
00D5EA  1  4C 5C D6             jmp     L3250
00D5ED  1               FNC:
00D5ED  1  A9 9E                lda     #TOKEN_FN
00D5EF  1  20 E5 D1             jsr     SYNCHR
00D5F2  1  09 80                ora     #$80
00D5F4  1  85 61                sta     SUBFLG
00D5F6  1  20 F4 D2             jsr     PTRGET3
00D5F9  1  85 9C                sta     FNCNAM
00D5FB  1  84 9D                sty     FNCNAM+1
00D5FD  1  4C 92 D0             jmp     CHKNUM
00D600  1               L31F3:
00D600  1  20 ED D5             jsr     FNC
00D603  1  A5 9D                lda     FNCNAM+1
00D605  1  48                   pha
00D606  1  A5 9C                lda     FNCNAM
00D608  1  48                   pha
00D609  1  20 D7 D1             jsr     PARCHK
00D60C  1  20 92 D0             jsr     CHKNUM
00D60F  1  68                   pla
00D610  1  85 9C                sta     FNCNAM
00D612  1  68                   pla
00D613  1  85 9D                sta     FNCNAM+1
00D615  1  A0 02                ldy     #$02
00D617  1  A2 20                ldx     #ERR_UNDEFFN
00D619  1  B1 9C                lda     (FNCNAM),y
00D61B  1  F0 A0                beq     L31AF
00D61D  1  85 95                sta     VARPNT
00D61F  1  AA                   tax
00D620  1  C8                   iny
00D621  1  B1 9C                lda     (FNCNAM),y
00D623  1  85 96                sta     VARPNT+1
00D625  1               L3219:
00D625  1  B1 95                lda     (VARPNT),y
00D627  1  48                   pha
00D628  1  88                   dey
00D629  1  10 FA                bpl     L3219
00D62B  1  A4 96                ldy     VARPNT+1
00D62D  1  20 5A DD             jsr     STORE_FAC_AT_YX_ROUNDED
00D630  1  A5 DE                lda     TXTPTR+1
00D632  1  48                   pha
00D633  1  A5 DD                lda     TXTPTR
00D635  1  48                   pha
00D636  1  B1 9C                lda     (FNCNAM),y
00D638  1  85 DD                sta     TXTPTR
00D63A  1  C8                   iny
00D63B  1  B1 9C                lda     (FNCNAM),y
00D63D  1  85 DE                sta     TXTPTR+1
00D63F  1  A5 96                lda     VARPNT+1
00D641  1  48                   pha
00D642  1  A5 95                lda     VARPNT
00D644  1  48                   pha
00D645  1  20 8F D0             jsr     FRMNUM
00D648  1  68                   pla
00D649  1  85 9C                sta     FNCNAM
00D64B  1  68                   pla
00D64C  1  85 9D                sta     FNCNAM+1
00D64E  1  20 DC 00             jsr     CHRGOT
00D651  1  F0 03                beq     L324A
00D653  1  4C EE D1             jmp     SYNERR
00D656  1               L324A:
00D656  1  68                   pla
00D657  1  85 DD                sta     TXTPTR
00D659  1  68                   pla
00D65A  1  85 DE                sta     TXTPTR+1
00D65C  1               L3250:
00D65C  1  A0 00                ldy     #$00
00D65E  1  68                   pla
00D65F  1  91 9C                sta     (FNCNAM),y
00D661  1  68                   pla
00D662  1  C8                   iny
00D663  1  91 9C                sta     (FNCNAM),y
00D665  1  68                   pla
00D666  1  C8                   iny
00D667  1  91 9C                sta     (FNCNAM),y
00D669  1  68                   pla
00D66A  1  C8                   iny
00D66B  1  91 9C                sta     (FNCNAM),y
00D66D  1  60                   rts
00D66E  1               ; ----------------------------------------------------------------------------
00D66E  1               ; "STR$" FUNCTION
00D66E  1               ; ----------------------------------------------------------------------------
00D66E  1               STR:
00D66E  1  20 92 D0             jsr     CHKNUM
00D671  1  A0 00                ldy     #$00
00D673  1  20 52 DF             jsr     FOUT1
00D676  1  68                   pla
00D677  1  68                   pla
00D678  1  A9 FF                lda     #$FF
00D67A  1  A0 00                ldy     #$00
00D67C  1  F0 12                beq     STRLIT
00D67E  1               ; ----------------------------------------------------------------------------
00D67E  1               ; GET SPACE AND MAKE DESCRIPTOR FOR STRING WHOSE
00D67E  1               ; ADDRESS IS IN FAC+3,4 AND WHOSE LENGTH IS IN A-REG
00D67E  1               ; ----------------------------------------------------------------------------
00D67E  1               STRINI:
00D67E  1  A6 AE                ldx     FAC_LAST-1
00D680  1  A4 AF                ldy     FAC_LAST
00D682  1  86 9E                stx     DSCPTR
00D684  1  84 9F                sty     DSCPTR+1
00D686  1               ; ----------------------------------------------------------------------------
00D686  1               ; GET SPACE AND MAKE DESCRIPTOR FOR STRING WHOSE
00D686  1               ; ADDRESS IS IN Y,X AND WHOSE LENGTH IS IN A-REG
00D686  1               ; ----------------------------------------------------------------------------
00D686  1               STRSPA:
00D686  1  20 F7 D6             jsr     GETSPA
00D689  1  86 AD                stx     FAC+1
00D68B  1  84 AE                sty     FAC+2
00D68D  1  85 AC                sta     FAC
00D68F  1  60                   rts
00D690  1               ; ----------------------------------------------------------------------------
00D690  1               ; BUILD A DESCRIPTOR FOR STRING STARTING AT Y,A
00D690  1               ; AND TERMINATED BY $00 OR QUOTATION MARK
00D690  1               ; RETURN WITH DESCRIPTOR IN A TEMPORARY
00D690  1               ; AND ADDRESS OF DESCRIPTOR IN FAC+3,4
00D690  1               ; ----------------------------------------------------------------------------
00D690  1               STRLIT:
00D690  1  A2 22                ldx     #$22
00D692  1  86 5B                stx     CHARAC
00D694  1  86 5C                stx     ENDCHR
00D696  1               ; ----------------------------------------------------------------------------
00D696  1               ; BUILD A DESCRIPTOR FOR STRING STARTING AT Y,A
00D696  1               ; AND TERMINATED BY $00, (CHARAC), OR (ENDCHR)
00D696  1               ;
00D696  1               ; RETURN WITH DESCRIPTOR IN A TEMPORARY
00D696  1               ; AND ADDRESS OF DESCRIPTOR IN FAC+3,4
00D696  1               ; ----------------------------------------------------------------------------
00D696  1               STRLT2:
00D696  1  85 B8                sta     STRNG1
00D698  1  84 B9                sty     STRNG1+1
00D69A  1  85 AD                sta     FAC+1
00D69C  1  84 AE                sty     FAC+2
00D69E  1  A0 FF                ldy     #$FF
00D6A0  1               L3298:
00D6A0  1  C8                   iny
00D6A1  1  B1 B8                lda     (STRNG1),y
00D6A3  1  F0 0C                beq     L32A9
00D6A5  1  C5 5B                cmp     CHARAC
00D6A7  1  F0 04                beq     L32A5
00D6A9  1  C5 5C                cmp     ENDCHR
00D6AB  1  D0 F3                bne     L3298
00D6AD  1               L32A5:
00D6AD  1  C9 22                cmp     #$22
00D6AF  1  F0 01                beq     L32AA
00D6B1  1               L32A9:
00D6B1  1  18                   clc
00D6B2  1               L32AA:
00D6B2  1  84 AC                sty     FAC
00D6B4  1  98                   tya
00D6B5  1  65 B8                adc     STRNG1
00D6B7  1  85 BA                sta     STRNG2
00D6B9  1  A6 B9                ldx     STRNG1+1
00D6BB  1  90 01                bcc     L32B6
00D6BD  1  E8                   inx
00D6BE  1               L32B6:
00D6BE  1  86 BB                stx     STRNG2+1
00D6C0  1  A5 B9                lda     STRNG1+1
00D6C2  1  D0 0B                bne     PUTNEW
00D6C4  1  98                   tya
00D6C5  1  20 7E D6             jsr     STRINI
00D6C8  1  A6 B8                ldx     STRNG1
00D6CA  1  A4 B9                ldy     STRNG1+1
00D6CC  1  20 7A D8             jsr     MOVSTR
00D6CF  1               ; ----------------------------------------------------------------------------
00D6CF  1               ; STORE DESCRIPTOR IN TEMPORARY DESCRIPTOR STACK
00D6CF  1               ;
00D6CF  1               ; THE DESCRIPTOR IS NOW IN FAC, FAC+1, FAC+2
00D6CF  1               ; PUT ADDRESS OF TEMP DESCRIPTOR IN FAC+3,4
00D6CF  1               ; ----------------------------------------------------------------------------
00D6CF  1               PUTNEW:
00D6CF  1  A6 65                ldx     TEMPPT
00D6D1  1  E0 71                cpx     #TEMPST+9
00D6D3  1  D0 05                bne     PUTEMP
00D6D5  1  A2 1C                ldx     #ERR_FRMCPX
00D6D7  1               JERR:
00D6D7  1  4C 3C C8             jmp     ERROR
00D6DA  1               PUTEMP:
00D6DA  1  A5 AC                lda     FAC
00D6DC  1  95 00                sta     0,x
00D6DE  1  A5 AD                lda     FAC+1
00D6E0  1  95 01                sta     1,x
00D6E2  1  A5 AE                lda     FAC+2
00D6E4  1  95 02                sta     2,x
00D6E6  1  A0 00                ldy     #$00
00D6E8  1  86 AE                stx     FAC_LAST-1
00D6EA  1  84 AF                sty     FAC_LAST
00D6EC  1  88                   dey
00D6ED  1  84 5F                sty     VALTYP
00D6EF  1  86 66                stx     LASTPT
00D6F1  1  E8                   inx
00D6F2  1  E8                   inx
00D6F3  1  E8                   inx
00D6F4  1  86 65                stx     TEMPPT
00D6F6  1  60                   rts
00D6F7  1               ; ----------------------------------------------------------------------------
00D6F7  1               ; MAKE SPACE FOR STRING AT BOTTOM OF STRING SPACE
00D6F7  1               ; (A)=# BYTES SPACE TO MAKE
00D6F7  1               ;
00D6F7  1               ; RETURN WITH (A) SAME,
00D6F7  1               ;	AND Y,X = ADDRESS OF SPACE ALLOCATED
00D6F7  1               ; ----------------------------------------------------------------------------
00D6F7  1               GETSPA:
00D6F7  1  46 60                lsr     DATAFLG
00D6F9  1               L32F1:
00D6F9  1  48                   pha
00D6FA  1  49 FF                eor     #$FF
00D6FC  1  38                   sec
00D6FD  1  65 81                adc     FRETOP
00D6FF  1  A4 82                ldy     FRETOP+1
00D701  1  B0 01                bcs     L32FC
00D703  1  88                   dey
00D704  1               L32FC:
00D704  1  C4 80                cpy     STREND+1
00D706  1  90 11                bcc     L3311
00D708  1  D0 04                bne     L3306
00D70A  1  C5 7F                cmp     STREND
00D70C  1  90 0B                bcc     L3311
00D70E  1               L3306:
00D70E  1  85 81                sta     FRETOP
00D710  1  84 82                sty     FRETOP+1
00D712  1  85 83                sta     FRESPC
00D714  1  84 84                sty     FRESPC+1
00D716  1  AA                   tax
00D717  1  68                   pla
00D718  1  60                   rts
00D719  1               L3311:
00D719  1  A2 0C                ldx     #ERR_MEMFULL
00D71B  1  A5 60                lda     DATAFLG
00D71D  1  30 B8                bmi     JERR
00D71F  1  20 29 D7             jsr     GARBAG
00D722  1  A9 80                lda     #$80
00D724  1  85 60                sta     DATAFLG
00D726  1  68                   pla
00D727  1  D0 D0                bne     L32F1
00D729  1               ; ----------------------------------------------------------------------------
00D729  1               ; SHOVE ALL REFERENCED STRINGS AS HIGH AS POSSIBLE
00D729  1               ; IN MEMORY (AGAINST HIMEM), FREEING UP SPACE
00D729  1               ; BELOW STRING AREA DOWN TO STREND.
00D729  1               ; ----------------------------------------------------------------------------
00D729  1               GARBAG:
00D729  1  A6 85                ldx     MEMSIZ
00D72B  1  A5 86                lda     MEMSIZ+1
00D72D  1               FINDHIGHESTSTRING:
00D72D  1  86 81                stx     FRETOP
00D72F  1  85 82                sta     FRETOP+1
00D731  1  A0 00                ldy     #$00
00D733  1  84 9D                sty     FNCNAM+1
00D735  1  A5 7F                lda     STREND
00D737  1  A6 80                ldx     STREND+1
00D739  1  85 AA                sta     LOWTR
00D73B  1  86 AB                stx     LOWTR+1
00D73D  1  A9 68                lda     #TEMPST
00D73F  1  A2 00                ldx     #$00
00D741  1  85 71                sta     INDEX
00D743  1  86 72                stx     INDEX+1
00D745  1               L333D:
00D745  1  C5 65                cmp     TEMPPT
00D747  1  F0 05                beq     L3346
00D749  1  20 BB D7             jsr     CHECK_VARIABLE
00D74C  1  F0 F7                beq     L333D
00D74E  1               L3346:
00D74E  1  A9 06                lda     #BYTES_PER_VARIABLE
00D750  1  85 A0                sta     DSCLEN
00D752  1  A5 7B                lda     VARTAB
00D754  1  A6 7C                ldx     VARTAB+1
00D756  1  85 71                sta     INDEX
00D758  1  86 72                stx     INDEX+1
00D75A  1               L3352:
00D75A  1  E4 7E                cpx     ARYTAB+1
00D75C  1  D0 04                bne     L335A
00D75E  1  C5 7D                cmp     ARYTAB
00D760  1  F0 05                beq     L335F
00D762  1               L335A:
00D762  1  20 B5 D7             jsr     CHECK_SIMPLE_VARIABLE
00D765  1  F0 F3                beq     L3352
00D767  1               L335F:
00D767  1  85 A4                sta     HIGHDS
00D769  1  86 A5                stx     HIGHDS+1
00D76B  1  A9 03                lda     #$03	; OSI GC bugfix -> $04 ???
00D76D  1  85 A0                sta     DSCLEN
00D76F  1               L3367:
00D76F  1  A5 A4                lda     HIGHDS
00D771  1  A6 A5                ldx     HIGHDS+1
00D773  1               L336B:
00D773  1  E4 80                cpx     STREND+1
00D775  1  D0 07                bne     L3376
00D777  1  C5 7F                cmp     STREND
00D779  1  D0 03                bne     L3376
00D77B  1  4C FA D7             jmp     MOVE_HIGHEST_STRING_TO_TOP
00D77E  1               L3376:
00D77E  1  85 71                sta     INDEX
00D780  1  86 72                stx     INDEX+1
00D782  1  A0 01                ldy     #$01
00D784  1  B1 71                lda     (INDEX),y
00D786  1  08                   php
00D787  1  C8                   iny
00D788  1  B1 71                lda     (INDEX),y
00D78A  1  65 A4                adc     HIGHDS
00D78C  1  85 A4                sta     HIGHDS
00D78E  1  C8                   iny
00D78F  1  B1 71                lda     (INDEX),y
00D791  1  65 A5                adc     HIGHDS+1
00D793  1  85 A5                sta     HIGHDS+1
00D795  1  28                   plp
00D796  1  10 D7                bpl     L3367
00D798  1  C8                   iny
00D799  1  B1 71                lda     (INDEX),y
00D79B  1  0A                   asl     a
00D79C  1  69 05                adc     #$05
00D79E  1  65 71                adc     INDEX
00D7A0  1  85 71                sta     INDEX
00D7A2  1  90 02                bcc     L33A7
00D7A4  1  E6 72                inc     INDEX+1
00D7A6  1               L33A7:
00D7A6  1  A6 72                ldx     INDEX+1
00D7A8  1               L33A9:
00D7A8  1  E4 A5                cpx     HIGHDS+1
00D7AA  1  D0 04                bne     L33B1
00D7AC  1  C5 A4                cmp     HIGHDS
00D7AE  1  F0 C3                beq     L336B
00D7B0  1               L33B1:
00D7B0  1  20 BB D7             jsr     CHECK_VARIABLE
00D7B3  1  F0 F3                beq     L33A9
00D7B5  1               ; ----------------------------------------------------------------------------
00D7B5  1               ; PROCESS A SIMPLE VARIABLE
00D7B5  1               ; ----------------------------------------------------------------------------
00D7B5  1               CHECK_SIMPLE_VARIABLE:
00D7B5  1  C8                   iny
00D7B6  1  B1 71                lda     (INDEX),y
00D7B8  1  10 30                bpl     CHECK_BUMP
00D7BA  1  C8                   iny
00D7BB  1               ; ----------------------------------------------------------------------------
00D7BB  1               ; IF STRING IS NOT EMPTY, CHECK IF IT IS HIGHEST
00D7BB  1               ; ----------------------------------------------------------------------------
00D7BB  1               CHECK_VARIABLE:
00D7BB  1  B1 71                lda     (INDEX),y
00D7BD  1  F0 2B                beq     CHECK_BUMP
00D7BF  1  C8                   iny
00D7C0  1  B1 71                lda     (INDEX),y
00D7C2  1  AA                   tax
00D7C3  1  C8                   iny
00D7C4  1  B1 71                lda     (INDEX),y
00D7C6  1  C5 82                cmp     FRETOP+1
00D7C8  1  90 06                bcc     L33D5
00D7CA  1  D0 1E                bne     CHECK_BUMP
00D7CC  1  E4 81                cpx     FRETOP
00D7CE  1  B0 1A                bcs     CHECK_BUMP
00D7D0  1               L33D5:
00D7D0  1  C5 AB                cmp     LOWTR+1
00D7D2  1  90 16                bcc     CHECK_BUMP
00D7D4  1  D0 04                bne     L33DF
00D7D6  1  E4 AA                cpx     LOWTR
00D7D8  1  90 10                bcc     CHECK_BUMP
00D7DA  1               L33DF:
00D7DA  1  86 AA                stx     LOWTR
00D7DC  1  85 AB                sta     LOWTR+1
00D7DE  1  A5 71                lda     INDEX
00D7E0  1  A6 72                ldx     INDEX+1
00D7E2  1  85 9C                sta     FNCNAM
00D7E4  1  86 9D                stx     FNCNAM+1
00D7E6  1  A5 A0                lda     DSCLEN
00D7E8  1  85 A2                sta     Z52
00D7EA  1               ; ----------------------------------------------------------------------------
00D7EA  1               ; ADD (DSCLEN) TO PNTR IN INDEX
00D7EA  1               ; RETURN WITH Y=0, PNTR ALSO IN X,A
00D7EA  1               ; ----------------------------------------------------------------------------
00D7EA  1               CHECK_BUMP:
00D7EA  1  A5 A0                lda     DSCLEN
00D7EC  1  18                   clc
00D7ED  1  65 71                adc     INDEX
00D7EF  1  85 71                sta     INDEX
00D7F1  1  90 02                bcc     L33FA
00D7F3  1  E6 72                inc     INDEX+1
00D7F5  1               L33FA:
00D7F5  1  A6 72                ldx     INDEX+1
00D7F7  1  A0 00                ldy     #$00
00D7F9  1  60                   rts
00D7FA  1               ; ----------------------------------------------------------------------------
00D7FA  1               ; FOUND HIGHEST NON-EMPTY STRING, SO MOVE IT
00D7FA  1               ; TO TOP AND GO BACK FOR ANOTHER
00D7FA  1               ; ----------------------------------------------------------------------------
00D7FA  1               MOVE_HIGHEST_STRING_TO_TOP:
00D7FA  1  A6 9D                ldx     FNCNAM+1
00D7FC  1  F0 F7                beq     L33FA
00D7FE  1  A5 A2                lda     Z52
00D800  1  29 04                and     #$04
00D802  1  4A                   lsr     a
00D803  1  A8                   tay
00D804  1  85 A2                sta     Z52
00D806  1  B1 9C                lda     (FNCNAM),y
00D808  1  65 AA                adc     LOWTR
00D80A  1  85 A6                sta     HIGHTR
00D80C  1  A5 AB                lda     LOWTR+1
00D80E  1  69 00                adc     #$00
00D810  1  85 A7                sta     HIGHTR+1
00D812  1  A5 81                lda     FRETOP
00D814  1  A6 82                ldx     FRETOP+1
00D816  1  85 A4                sta     HIGHDS
00D818  1  86 A5                stx     HIGHDS+1
00D81A  1  20 C4 C7             jsr     BLTU2
00D81D  1  A4 A2                ldy     Z52
00D81F  1  C8                   iny
00D820  1  A5 A4                lda     HIGHDS
00D822  1  91 9C                sta     (FNCNAM),y
00D824  1  AA                   tax
00D825  1  E6 A5                inc     HIGHDS+1
00D827  1  A5 A5                lda     HIGHDS+1
00D829  1  C8                   iny
00D82A  1  91 9C                sta     (FNCNAM),y
00D82C  1  4C 2D D7             jmp     FINDHIGHESTSTRING
00D82F  1               ; ----------------------------------------------------------------------------
00D82F  1               ; CONCATENATE TWO STRINGS
00D82F  1               ; ----------------------------------------------------------------------------
00D82F  1               CAT:
00D82F  1  A5 AF                lda     FAC_LAST
00D831  1  48                   pha
00D832  1  A5 AE                lda     FAC_LAST-1
00D834  1  48                   pha
00D835  1  20 82 D1             jsr     FRM_ELEMENT
00D838  1  20 94 D0             jsr     CHKSTR
00D83B  1  68                   pla
00D83C  1  85 B8                sta     STRNG1
00D83E  1  68                   pla
00D83F  1  85 B9                sta     STRNG1+1
00D841  1  A0 00                ldy     #$00
00D843  1  B1 B8                lda     (STRNG1),y
00D845  1  18                   clc
00D846  1  71 AE                adc     (FAC_LAST-1),y
00D848  1  90 05                bcc     L3454
00D84A  1  A2 1A                ldx     #ERR_STRLONG
00D84C  1  4C 3C C8             jmp     ERROR
00D84F  1               L3454:
00D84F  1  20 7E D6             jsr     STRINI
00D852  1  20 6C D8             jsr     MOVINS
00D855  1  A5 9E                lda     DSCPTR
00D857  1  A4 9F                ldy     DSCPTR+1
00D859  1  20 9C D8             jsr     FRETMP
00D85C  1  20 7E D8             jsr     MOVSTR1
00D85F  1  A5 B8                lda     STRNG1
00D861  1  A4 B9                ldy     STRNG1+1
00D863  1  20 9C D8             jsr     FRETMP
00D866  1  20 CF D6             jsr     PUTNEW
00D869  1  4C BD D0             jmp     FRMEVL2
00D86C  1               ; ----------------------------------------------------------------------------
00D86C  1               ; GET STRING DESCRIPTOR POINTED AT BY (STRNG1)
00D86C  1               ; AND MOVE DESCRIBED STRING TO (FRESPC)
00D86C  1               ; ----------------------------------------------------------------------------
00D86C  1               MOVINS:
00D86C  1  A0 00                ldy     #$00
00D86E  1  B1 B8                lda     (STRNG1),y
00D870  1  48                   pha
00D871  1  C8                   iny
00D872  1  B1 B8                lda     (STRNG1),y
00D874  1  AA                   tax
00D875  1  C8                   iny
00D876  1  B1 B8                lda     (STRNG1),y
00D878  1  A8                   tay
00D879  1  68                   pla
00D87A  1               ; ----------------------------------------------------------------------------
00D87A  1               ; MOVE STRING AT (Y,X) WITH LENGTH (A)
00D87A  1               ; TO DESTINATION WHOSE ADDRESS IS IN FRESPC,FRESPC+1
00D87A  1               ; ----------------------------------------------------------------------------
00D87A  1               MOVSTR:
00D87A  1  86 71                stx     INDEX
00D87C  1  84 72                sty     INDEX+1
00D87E  1               MOVSTR1:
00D87E  1  A8                   tay
00D87F  1  F0 0A                beq     L3490
00D881  1  48                   pha
00D882  1               L3487:
00D882  1  88                   dey
00D883  1  B1 71                lda     (INDEX),y
00D885  1  91 83                sta     (FRESPC),y
00D887  1  98                   tya
00D888  1  D0 F8                bne     L3487
00D88A  1  68                   pla
00D88B  1               L3490:
00D88B  1  18                   clc
00D88C  1  65 83                adc     FRESPC
00D88E  1  85 83                sta     FRESPC
00D890  1  90 02                bcc     L3499
00D892  1  E6 84                inc     FRESPC+1
00D894  1               L3499:
00D894  1  60                   rts
00D895  1               ; ----------------------------------------------------------------------------
00D895  1               ; IF (FAC) IS A TEMPORARY STRING, RELEASE DESCRIPTOR
00D895  1               ; ----------------------------------------------------------------------------
00D895  1               FRESTR:
00D895  1  20 94 D0             jsr     CHKSTR
00D898  1               ; ----------------------------------------------------------------------------
00D898  1               ; IF STRING DESCRIPTOR POINTED TO BY FAC+3,4 IS
00D898  1               ; A TEMPORARY STRING, RELEASE IT.
00D898  1               ; ----------------------------------------------------------------------------
00D898  1               FREFAC:
00D898  1  A5 AE                lda     FAC_LAST-1
00D89A  1  A4 AF                ldy     FAC_LAST
00D89C  1               ; ----------------------------------------------------------------------------
00D89C  1               ; IF STRING DESCRIPTOR WHOSE ADDRESS IS IN Y,A IS
00D89C  1               ; A TEMPORARY STRING, RELEASE IT.
00D89C  1               ; ----------------------------------------------------------------------------
00D89C  1               FRETMP:
00D89C  1  85 71                sta     INDEX
00D89E  1  84 72                sty     INDEX+1
00D8A0  1  20 CD D8             jsr     FRETMS
00D8A3  1  08                   php
00D8A4  1  A0 00                ldy     #$00
00D8A6  1  B1 71                lda     (INDEX),y
00D8A8  1  48                   pha
00D8A9  1  C8                   iny
00D8AA  1  B1 71                lda     (INDEX),y
00D8AC  1  AA                   tax
00D8AD  1  C8                   iny
00D8AE  1  B1 71                lda     (INDEX),y
00D8B0  1  A8                   tay
00D8B1  1  68                   pla
00D8B2  1  28                   plp
00D8B3  1  D0 13                bne     L34CD
00D8B5  1  C4 82                cpy     FRETOP+1
00D8B7  1  D0 0F                bne     L34CD
00D8B9  1  E4 81                cpx     FRETOP
00D8BB  1  D0 0B                bne     L34CD
00D8BD  1  48                   pha
00D8BE  1  18                   clc
00D8BF  1  65 81                adc     FRETOP
00D8C1  1  85 81                sta     FRETOP
00D8C3  1  90 02                bcc     L34CC
00D8C5  1  E6 82                inc     FRETOP+1
00D8C7  1               L34CC:
00D8C7  1  68                   pla
00D8C8  1               L34CD:
00D8C8  1  86 71                stx     INDEX
00D8CA  1  84 72                sty     INDEX+1
00D8CC  1  60                   rts
00D8CD  1               ; ----------------------------------------------------------------------------
00D8CD  1               ; RELEASE TEMPORARY DESCRIPTOR IF Y,A = LASTPT
00D8CD  1               ; ----------------------------------------------------------------------------
00D8CD  1               FRETMS:
00D8CD  1  C4 67                cpy     LASTPT+1
00D8CF  1  D0 0C                bne     L34E2
00D8D1  1  C5 66                cmp     LASTPT
00D8D3  1  D0 08                bne     L34E2
00D8D5  1  85 65                sta     TEMPPT
00D8D7  1  E9 03                sbc     #$03
00D8D9  1  85 66                sta     LASTPT
00D8DB  1  A0 00                ldy     #$00
00D8DD  1               L34E2:
00D8DD  1  60                   rts
00D8DE  1               ; ----------------------------------------------------------------------------
00D8DE  1               ; "CHR$" FUNCTION
00D8DE  1               ; ----------------------------------------------------------------------------
00D8DE  1               CHRSTR:
00D8DE  1  20 93 D9             jsr     CONINT
00D8E1  1  8A                   txa
00D8E2  1  48                   pha
00D8E3  1  A9 01                lda     #$01
00D8E5  1  20 86 D6             jsr     STRSPA
00D8E8  1  68                   pla
00D8E9  1  A0 00                ldy     #$00
00D8EB  1  91 AD                sta     (FAC+1),y
00D8ED  1  68                   pla
00D8EE  1  68                   pla
00D8EF  1  4C CF D6             jmp     PUTNEW
00D8F2  1               ; ----------------------------------------------------------------------------
00D8F2  1               ; "LEFT$" FUNCTION
00D8F2  1               ; ----------------------------------------------------------------------------
00D8F2  1               LEFTSTR:
00D8F2  1  20 51 D9             jsr     SUBSTRING_SETUP
00D8F5  1  D1 9E                cmp     (DSCPTR),y
00D8F7  1  98                   tya
00D8F8  1               SUBSTRING1:
00D8F8  1  90 04                bcc     L3503
00D8FA  1  B1 9E                lda     (DSCPTR),y
00D8FC  1  AA                   tax
00D8FD  1  98                   tya
00D8FE  1               L3503:
00D8FE  1  48                   pha
00D8FF  1               SUBSTRING2:
00D8FF  1  8A                   txa
00D900  1               SUBSTRING3:
00D900  1  48                   pha
00D901  1  20 86 D6             jsr     STRSPA
00D904  1  A5 9E                lda     DSCPTR
00D906  1  A4 9F                ldy     DSCPTR+1
00D908  1  20 9C D8             jsr     FRETMP
00D90B  1  68                   pla
00D90C  1  A8                   tay
00D90D  1  68                   pla
00D90E  1  18                   clc
00D90F  1  65 71                adc     INDEX
00D911  1  85 71                sta     INDEX
00D913  1  90 02                bcc     L351C
00D915  1  E6 72                inc     INDEX+1
00D917  1               L351C:
00D917  1  98                   tya
00D918  1  20 7E D8             jsr     MOVSTR1
00D91B  1  4C CF D6             jmp     PUTNEW
00D91E  1               ; ----------------------------------------------------------------------------
00D91E  1               ; "RIGHT$" FUNCTION
00D91E  1               ; ----------------------------------------------------------------------------
00D91E  1               RIGHTSTR:
00D91E  1  20 51 D9             jsr     SUBSTRING_SETUP
00D921  1  18                   clc
00D922  1  F1 9E                sbc     (DSCPTR),y
00D924  1  49 FF                eor     #$FF
00D926  1  4C F8 D8             jmp     SUBSTRING1
00D929  1               ; ----------------------------------------------------------------------------
00D929  1               ; "MID$" FUNCTION
00D929  1               ; ----------------------------------------------------------------------------
00D929  1               MIDSTR:
00D929  1  A9 FF                lda     #$FF
00D92B  1  85 AF                sta     FAC_LAST
00D92D  1  20 DC 00             jsr     CHRGOT
00D930  1  C9 29                cmp     #$29
00D932  1  F0 06                beq     L353F
00D934  1  20 E3 D1             jsr     CHKCOM
00D937  1  20 90 D9             jsr     GETBYT
00D93A  1               L353F:
00D93A  1  20 51 D9             jsr     SUBSTRING_SETUP
00D93D  1  CA                   dex
00D93E  1  8A                   txa
00D93F  1  48                   pha
00D940  1  18                   clc
00D941  1  A2 00                ldx     #$00
00D943  1  F1 9E                sbc     (DSCPTR),y
00D945  1  B0 B8                bcs     SUBSTRING2
00D947  1  49 FF                eor     #$FF
00D949  1  C5 AF                cmp     FAC_LAST
00D94B  1  90 B3                bcc     SUBSTRING3
00D94D  1  A5 AF                lda     FAC_LAST
00D94F  1  B0 AF                bcs     SUBSTRING3
00D951  1               ; ----------------------------------------------------------------------------
00D951  1               ; COMMON SETUP ROUTINE FOR LEFT$, RIGHT$, MID$:
00D951  1               ; REQUIRE ")"; POP RETURN ADRS, GET DESCRIPTOR
00D951  1               ; ADDRESS, GET 1ST PARAMETER OF COMMAND
00D951  1               ; ----------------------------------------------------------------------------
00D951  1               SUBSTRING_SETUP:
00D951  1  20 DD D1             jsr     CHKCLS
00D954  1  68                   pla
00D955  1  85 A2                sta     JMPADRS+1
00D957  1  68                   pla
00D958  1  85 A3                sta     JMPADRS+2
00D95A  1  68                   pla
00D95B  1  68                   pla
00D95C  1  68                   pla
00D95D  1  AA                   tax
00D95E  1  68                   pla
00D95F  1  85 9E                sta     DSCPTR
00D961  1  68                   pla
00D962  1  85 9F                sta     DSCPTR+1
00D964  1  A0 00                ldy     #$00
00D966  1  8A                   txa
00D967  1  F0 21                beq     GOIQ
00D969  1  E6 A2                inc     JMPADRS+1
00D96B  1  6C A2 00             jmp     (JMPADRS+1)
00D96E  1               ; ----------------------------------------------------------------------------
00D96E  1               ; "LEN" FUNCTION
00D96E  1               ; ----------------------------------------------------------------------------
00D96E  1               LEN:
00D96E  1  20 74 D9             jsr     GETSTR
00D971  1               SNGFLT1:
00D971  1  4C B2 D5             jmp     SNGFLT
00D974  1               ; ----------------------------------------------------------------------------
00D974  1               ; IF LAST RESULT IS A TEMPORARY STRING, FREE IT
00D974  1               ; MAKE VALTYP NUMERIC, RETURN LENGTH IN Y-REG
00D974  1               ; ----------------------------------------------------------------------------
00D974  1               GETSTR:
00D974  1  20 95 D8             jsr     FRESTR
00D977  1  A2 00                ldx     #$00
00D979  1  86 5F                stx     VALTYP
00D97B  1  A8                   tay
00D97C  1  60                   rts
00D97D  1               ; ----------------------------------------------------------------------------
00D97D  1               ; "ASC" FUNCTION
00D97D  1               ; ----------------------------------------------------------------------------
00D97D  1               ASC:
00D97D  1  20 74 D9             jsr     GETSTR
00D980  1  F0 08                beq     GOIQ
00D982  1  A0 00                ldy     #$00
00D984  1  B1 71                lda     (INDEX),y
00D986  1  A8                   tay
00D987  1  4C 71 D9             jmp     SNGFLT1
00D98A  1               ; ----------------------------------------------------------------------------
00D98A  1               GOIQ:
00D98A  1  4C 6A D4             jmp     IQERR
00D98D  1               ; ----------------------------------------------------------------------------
00D98D  1               ; SCAN TO NEXT CHARACTER AND CONVERT EXPRESSION
00D98D  1               ; TO SINGLE BYTE IN X-REG
00D98D  1               ; ----------------------------------------------------------------------------
00D98D  1               GTBYTC:
00D98D  1  20 D6 00             jsr     CHRGET
00D990  1               ; ----------------------------------------------------------------------------
00D990  1               ; EVALUATE EXPRESSION AT TXTPTR, AND
00D990  1               ; CONVERT IT TO SINGLE BYTE IN X-REG
00D990  1               ; ----------------------------------------------------------------------------
00D990  1               GETBYT:
00D990  1  20 8F D0             jsr     FRMNUM
00D993  1               ; ----------------------------------------------------------------------------
00D993  1               ; CONVERT (FAC) TO SINGLE BYTE INTEGER IN X-REG
00D993  1               ; ----------------------------------------------------------------------------
00D993  1               CONINT:
00D993  1  20 E3 D3             jsr     MKINT
00D996  1  A6 AE                ldx     FAC_LAST-1
00D998  1  D0 F0                bne     GOIQ
00D99A  1  A6 AF                ldx     FAC_LAST
00D99C  1  4C DC 00             jmp     CHRGOT
00D99F  1               ; ----------------------------------------------------------------------------
00D99F  1               ; "VAL" FUNCTION
00D99F  1               ; ----------------------------------------------------------------------------
00D99F  1               VAL:
00D99F  1  20 74 D9             jsr     GETSTR
00D9A2  1  D0 03                bne     L35AC
00D9A4  1  4C D3 DA             jmp     ZERO_FAC
00D9A7  1               L35AC:
00D9A7  1  A6 DD                ldx     TXTPTR
00D9A9  1  A4 DE                ldy     TXTPTR+1
00D9AB  1  86 BA                stx     STRNG2
00D9AD  1  84 BB                sty     STRNG2+1
00D9AF  1  A6 71                ldx     INDEX
00D9B1  1  86 DD                stx     TXTPTR
00D9B3  1  18                   clc
00D9B4  1  65 71                adc     INDEX
00D9B6  1  85 73                sta     DEST
00D9B8  1  A6 72                ldx     INDEX+1
00D9BA  1  86 DE                stx     TXTPTR+1
00D9BC  1  90 01                bcc     L35C4
00D9BE  1  E8                   inx
00D9BF  1               L35C4:
00D9BF  1  86 74                stx     DEST+1
00D9C1  1  A0 00                ldy     #$00
00D9C3  1  B1 73                lda     (DEST),y
00D9C5  1  48                   pha
00D9C6  1  A9 00                lda     #$00
00D9C8  1  91 73                sta     (DEST),y
00D9CA  1  20 DC 00             jsr     CHRGOT
00D9CD  1  20 69 DE             jsr     FIN
00D9D0  1  68                   pla
00D9D1  1  A0 00                ldy     #$00
00D9D3  1  91 73                sta     (DEST),y
00D9D5  1               ; ----------------------------------------------------------------------------
00D9D5  1               ; COPY STRNG2 INTO TXTPTR
00D9D5  1               ; ----------------------------------------------------------------------------
00D9D5  1               POINT:
00D9D5  1  A6 BA                ldx     STRNG2
00D9D7  1  A4 BB                ldy     STRNG2+1
00D9D9  1  86 DD                stx     TXTPTR
00D9DB  1  84 DE                sty     TXTPTR+1
00D9DD  1  60                   rts
00D9DE  1               ; ----------------------------------------------------------------------------
00D9DE  1               ; EVALUATE "EXP1,EXP2"
00D9DE  1               ;
00D9DE  1               ; CONVERT EXP1 TO 16-BIT NUMBER IN LINNUM
00D9DE  1               ; CONVERT EXP2 TO 8-BIT NUMBER IN X-REG
00D9DE  1               ; ----------------------------------------------------------------------------
00D9DE  1               GTNUM:
00D9DE  1  20 8F D0             jsr     FRMNUM
00D9E1  1  20 EA D9             jsr     GETADR
00D9E4  1               ; ----------------------------------------------------------------------------
00D9E4  1               ; EVALUATE ",EXPRESSION"
00D9E4  1               ; CONVERT EXPRESSION TO SINGLE BYTE IN X-REG
00D9E4  1               ; ----------------------------------------------------------------------------
00D9E4  1               COMBYTE:
00D9E4  1  20 E3 D1             jsr     CHKCOM
00D9E7  1  4C 90 D9             jmp     GETBYT
00D9EA  1               ; ----------------------------------------------------------------------------
00D9EA  1               ; CONVERT (FAC) TO A 16-BIT VALUE IN LINNUM
00D9EA  1               ; ----------------------------------------------------------------------------
00D9EA  1               GETADR:
00D9EA  1  A5 B0                lda     FACSIGN
00D9EC  1  30 9C                bmi     GOIQ
00D9EE  1  A5 AC                lda     FAC
00D9F0  1  C9 91                cmp     #$91
00D9F2  1  B0 96                bcs     GOIQ
00D9F4  1  20 13 DE             jsr     QINT
00D9F7  1  A5 AE                lda     FAC_LAST-1
00D9F9  1  A4 AF                ldy     FAC_LAST
00D9FB  1  84 11                sty     LINNUM
00D9FD  1  85 12                sta     LINNUM+1
00D9FF  1  60                   rts
00DA00  1               ; ----------------------------------------------------------------------------
00DA00  1               ; "PEEK" FUNCTION
00DA00  1               ; ----------------------------------------------------------------------------
00DA00  1               PEEK:
00DA00  1  20 EA D9             jsr     GETADR
00DA03  1  A0 00                ldy     #$00
00DA05  1               ; disallow PEEK between $C000 and $DFFF
00DA05  1  B1 11                lda     (LINNUM),y
00DA07  1  A8                   tay
00DA08  1  4C B2 D5             jmp     SNGFLT
00DA0B  1               ; ----------------------------------------------------------------------------
00DA0B  1               ; "POKE" STATEMENT
00DA0B  1               ; ----------------------------------------------------------------------------
00DA0B  1               POKE:
00DA0B  1  20 DE D9             jsr     GTNUM
00DA0E  1  8A                   txa
00DA0F  1  A0 00                ldy     #$00
00DA11  1  91 11                sta     (LINNUM),y
00DA13  1  60                   rts
00DA14  1               ; ----------------------------------------------------------------------------
00DA14  1               ; "WAIT" STATEMENT
00DA14  1               ; ----------------------------------------------------------------------------
00DA14  1               WAIT:
00DA14  1  20 DE D9             jsr     GTNUM
00DA17  1  86 97                stx     FORPNT
00DA19  1  A2 00                ldx     #$00
00DA1B  1  20 DC 00             jsr     CHRGOT
00DA1E  1  F0 03                beq     L3628
00DA20  1  20 E4 D9             jsr     COMBYTE
00DA23  1               L3628:
00DA23  1  86 98                stx     FORPNT+1
00DA25  1  A0 00                ldy     #$00
00DA27  1               L362C:
00DA27  1  B1 11                lda     (LINNUM),y
00DA29  1  45 98                eor     FORPNT+1
00DA2B  1  25 97                and     FORPNT
00DA2D  1  F0 F8                beq     L362C
00DA2F  1               RTS3:
00DA2F  1  60                   rts
00DA30  1               TEMP1X = TEMP1+(5-BYTES_FP)
00DA30  1               ; ----------------------------------------------------------------------------
00DA30  1               ; ADD 0.5 TO FAC
00DA30  1               ; ----------------------------------------------------------------------------
00DA30  1               FADDH:
00DA30  1  A9 78                lda     #<CON_HALF
00DA32  1  A0 E0                ldy     #>CON_HALF
00DA34  1  4C 4E DA             jmp     FADD
00DA37  1               ; ----------------------------------------------------------------------------
00DA37  1               ; FAC = (Y,A) - FAC
00DA37  1               ; ----------------------------------------------------------------------------
00DA37  1               FSUB:
00DA37  1  20 2F DC             jsr     LOAD_ARG_FROM_YA
00DA3A  1               ; ----------------------------------------------------------------------------
00DA3A  1               ; FAC = ARG - FAC
00DA3A  1               ; ----------------------------------------------------------------------------
00DA3A  1               FSUBT:
00DA3A  1  A5 B0                lda     FACSIGN
00DA3C  1  49 FF                eor     #$FF
00DA3E  1  85 B0                sta     FACSIGN
00DA40  1  45 B7                eor     ARGSIGN
00DA42  1  85 B8                sta     SGNCPR
00DA44  1  A5 AC                lda     FAC
00DA46  1  4C 51 DA             jmp     FADDT
00DA49  1               ; ----------------------------------------------------------------------------
00DA49  1               ; Commodore BASIC V2 Easter Egg
00DA49  1               ; ----------------------------------------------------------------------------
00DA49  1               ; ----------------------------------------------------------------------------
00DA49  1               ; SHIFT SMALLER ARGUMENT MORE THAN 7 BITS
00DA49  1               ; ----------------------------------------------------------------------------
00DA49  1               FADD1:
00DA49  1  20 5D DB             jsr     SHIFT_RIGHT
00DA4C  1  90 3C                bcc     FADD3
00DA4E  1               ; ----------------------------------------------------------------------------
00DA4E  1               ; FAC = (Y,A) + FAC
00DA4E  1               ; ----------------------------------------------------------------------------
00DA4E  1               FADD:
00DA4E  1  20 2F DC             jsr     LOAD_ARG_FROM_YA
00DA51  1               ; ----------------------------------------------------------------------------
00DA51  1               ; FAC = ARG + FAC
00DA51  1               ; ----------------------------------------------------------------------------
00DA51  1               FADDT:
00DA51  1  D0 03                bne     L365B
00DA53  1  4C 7D DD             jmp     COPY_ARG_TO_FAC
00DA56  1               L365B:
00DA56  1  A6 B9                ldx     FACEXTENSION
00DA58  1  86 A3                stx     ARGEXTENSION
00DA5A  1  A2 B3                ldx     #ARG
00DA5C  1  A5 B3                lda     ARG
00DA5E  1               FADD2:
00DA5E  1  A8                   tay
00DA5F  1  F0 CE                beq     RTS3
00DA61  1  38                   sec
00DA62  1  E5 AC                sbc     FAC
00DA64  1  F0 24                beq     FADD3
00DA66  1  90 12                bcc     L367F
00DA68  1  84 AC                sty     FAC
00DA6A  1  A4 B7                ldy     ARGSIGN
00DA6C  1  84 B0                sty     FACSIGN
00DA6E  1  49 FF                eor     #$FF
00DA70  1  69 00                adc     #$00
00DA72  1  A0 00                ldy     #$00
00DA74  1  84 A3                sty     ARGEXTENSION
00DA76  1  A2 AC                ldx     #FAC
00DA78  1  D0 04                bne     L3683
00DA7A  1               L367F:
00DA7A  1  A0 00                ldy     #$00
00DA7C  1  84 B9                sty     FACEXTENSION
00DA7E  1               L3683:
00DA7E  1  C9 F9                cmp     #$F9
00DA80  1  30 C7                bmi     FADD1
00DA82  1  A8                   tay
00DA83  1  A5 B9                lda     FACEXTENSION
00DA85  1  56 01                lsr     1,x
00DA87  1  20 74 DB             jsr     SHIFT_RIGHT4
00DA8A  1               FADD3:
00DA8A  1  24 B8                bit     SGNCPR
00DA8C  1  10 4C                bpl     FADD4
00DA8E  1  A0 AC                ldy     #FAC
00DA90  1  E0 B3                cpx     #ARG
00DA92  1  F0 02                beq     L369B
00DA94  1  A0 B3                ldy     #ARG
00DA96  1               L369B:
00DA96  1  38                   sec
00DA97  1  49 FF                eor     #$FF
00DA99  1  65 A3                adc     ARGEXTENSION
00DA9B  1  85 B9                sta     FACEXTENSION
00DA9D  1  B9 03 00             lda     3,y
00DAA0  1  F5 03                sbc     3,x
00DAA2  1  85 AF                sta     FAC+3
00DAA4  1  B9 02 00             lda     2,y
00DAA7  1  F5 02                sbc     2,x
00DAA9  1  85 AE                sta     FAC+2
00DAAB  1  B9 01 00             lda     1,y
00DAAE  1  F5 01                sbc     1,x
00DAB0  1  85 AD                sta     FAC+1
00DAB2  1               ; ----------------------------------------------------------------------------
00DAB2  1               ; NORMALIZE VALUE IN FAC
00DAB2  1               ; ----------------------------------------------------------------------------
00DAB2  1               NORMALIZE_FAC1:
00DAB2  1  B0 03                bcs     NORMALIZE_FAC2
00DAB4  1  20 19 DB             jsr     COMPLEMENT_FAC
00DAB7  1               NORMALIZE_FAC2:
00DAB7  1  A0 00                ldy     #$00
00DAB9  1  98                   tya
00DABA  1  18                   clc
00DABB  1               L36C7:
00DABB  1  A6 AD                ldx     FAC+1
00DABD  1  D0 3E                bne     NORMALIZE_FAC4
00DABF  1  A6 AE                ldx     FAC+2
00DAC1  1  86 AD                stx     FAC+1
00DAC3  1  A6 AF                ldx     FAC+3
00DAC5  1  86 AE                stx     FAC+2
00DAC7  1  A6 B9                ldx     FACEXTENSION
00DAC9  1  86 AF                stx     FAC+3
00DACB  1  84 B9                sty     FACEXTENSION
00DACD  1  69 08                adc     #$08
00DACF  1               ; bugfix?
00DACF  1               ; fix does not exist on AppleSoft 2
00DACF  1  C9 18                cmp     #MANTISSA_BYTES*8
00DAD1  1  D0 E8                bne     L36C7
00DAD3  1               ; ----------------------------------------------------------------------------
00DAD3  1               ; SET FAC = 0
00DAD3  1               ; (ONLY NECESSARY TO ZERO EXPONENT AND SIGN CELLS)
00DAD3  1               ; ----------------------------------------------------------------------------
00DAD3  1               ZERO_FAC:
00DAD3  1  A9 00                lda     #$00
00DAD5  1               STA_IN_FAC_SIGN_AND_EXP:
00DAD5  1  85 AC                sta     FAC
00DAD7  1               STA_IN_FAC_SIGN:
00DAD7  1  85 B0                sta     FACSIGN
00DAD9  1  60                   rts
00DADA  1               ; ----------------------------------------------------------------------------
00DADA  1               ; ADD MANTISSAS OF FAC AND ARG INTO FAC
00DADA  1               ; ----------------------------------------------------------------------------
00DADA  1               FADD4:
00DADA  1  65 A3                adc     ARGEXTENSION
00DADC  1  85 B9                sta     FACEXTENSION
00DADE  1  A5 AF                lda     FAC+3
00DAE0  1  65 B6                adc     ARG+3
00DAE2  1  85 AF                sta     FAC+3
00DAE4  1  A5 AE                lda     FAC+2
00DAE6  1  65 B5                adc     ARG+2
00DAE8  1  85 AE                sta     FAC+2
00DAEA  1  A5 AD                lda     FAC+1
00DAEC  1  65 B4                adc     ARG+1
00DAEE  1  85 AD                sta     FAC+1
00DAF0  1  4C 0A DB             jmp     NORMALIZE_FAC5
00DAF3  1               ; ----------------------------------------------------------------------------
00DAF3  1               ; FINISH NORMALIZING FAC
00DAF3  1               ; ----------------------------------------------------------------------------
00DAF3  1               NORMALIZE_FAC3:
00DAF3  1  69 01                adc     #$01
00DAF5  1  06 B9                asl     FACEXTENSION
00DAF7  1  26 AF                rol     FAC+3
00DAF9  1  26 AE                rol     FAC+2
00DAFB  1  26 AD                rol     FAC+1
00DAFD  1               NORMALIZE_FAC4:
00DAFD  1  10 F4                bpl     NORMALIZE_FAC3
00DAFF  1  38                   sec
00DB00  1  E5 AC                sbc     FAC
00DB02  1  B0 CF                bcs     ZERO_FAC
00DB04  1  49 FF                eor     #$FF
00DB06  1  69 01                adc     #$01
00DB08  1  85 AC                sta     FAC
00DB0A  1               NORMALIZE_FAC5:
00DB0A  1  90 0C                bcc     L3764
00DB0C  1               NORMALIZE_FAC6:
00DB0C  1  E6 AC                inc     FAC
00DB0E  1  F0 36                beq     OVERFLOW
00DB10  1  66 AD                ror     FAC+1
00DB12  1  66 AE                ror     FAC+2
00DB14  1  66 AF                ror     FAC+3
00DB16  1  66 B9                ror     FACEXTENSION
00DB18  1               L3764:
00DB18  1  60                   rts
00DB19  1               ; ----------------------------------------------------------------------------
00DB19  1               ; 2'S COMPLEMENT OF FAC
00DB19  1               ; ----------------------------------------------------------------------------
00DB19  1               COMPLEMENT_FAC:
00DB19  1  A5 B0                lda     FACSIGN
00DB1B  1  49 FF                eor     #$FF
00DB1D  1  85 B0                sta     FACSIGN
00DB1F  1               ; ----------------------------------------------------------------------------
00DB1F  1               ; 2'S COMPLEMENT OF FAC MANTISSA ONLY
00DB1F  1               ; ----------------------------------------------------------------------------
00DB1F  1               COMPLEMENT_FAC_MANTISSA:
00DB1F  1  A5 AD                lda     FAC+1
00DB21  1  49 FF                eor     #$FF
00DB23  1  85 AD                sta     FAC+1
00DB25  1  A5 AE                lda     FAC+2
00DB27  1  49 FF                eor     #$FF
00DB29  1  85 AE                sta     FAC+2
00DB2B  1  A5 AF                lda     FAC+3
00DB2D  1  49 FF                eor     #$FF
00DB2F  1  85 AF                sta     FAC+3
00DB31  1  A5 B9                lda     FACEXTENSION
00DB33  1  49 FF                eor     #$FF
00DB35  1  85 B9                sta     FACEXTENSION
00DB37  1  E6 B9                inc     FACEXTENSION
00DB39  1  D0 0A                bne     RTS12
00DB3B  1               ; ----------------------------------------------------------------------------
00DB3B  1               ; INCREMENT FAC MANTISSA
00DB3B  1               ; ----------------------------------------------------------------------------
00DB3B  1               INCREMENT_FAC_MANTISSA:
00DB3B  1  E6 AF                inc     FAC+3
00DB3D  1  D0 06                bne     RTS12
00DB3F  1  E6 AE                inc     FAC+2
00DB41  1  D0 02                bne     RTS12
00DB43  1  E6 AD                inc     FAC+1
00DB45  1               RTS12:
00DB45  1  60                   rts
00DB46  1               OVERFLOW:
00DB46  1  A2 0A                ldx     #ERR_OVERFLOW
00DB48  1  4C 3C C8             jmp     ERROR
00DB4B  1               ; ----------------------------------------------------------------------------
00DB4B  1               ; SHIFT 1,X THRU 5,X RIGHT
00DB4B  1               ; (A) = NEGATIVE OF SHIFT COUNT
00DB4B  1               ; (X) = POINTER TO BYTES TO BE SHIFTED
00DB4B  1               ;
00DB4B  1               ; RETURN WITH (Y)=0, CARRY=0, EXTENSION BITS IN A-REG
00DB4B  1               ; ----------------------------------------------------------------------------
00DB4B  1               SHIFT_RIGHT1:
00DB4B  1  A2 74                ldx     #RESULT-1
00DB4D  1               SHIFT_RIGHT2:
00DB4D  1  B4 03                ldy     3,x
00DB4F  1  84 B9                sty     FACEXTENSION
00DB51  1  B4 02                ldy     2,x
00DB53  1  94 03                sty     3,x
00DB55  1  B4 01                ldy     1,x
00DB57  1  94 02                sty     2,x
00DB59  1  A4 B2                ldy     SHIFTSIGNEXT
00DB5B  1  94 01                sty     1,x
00DB5D  1               ; ----------------------------------------------------------------------------
00DB5D  1               ; MAIN ENTRY TO RIGHT SHIFT SUBROUTINE
00DB5D  1               ; ----------------------------------------------------------------------------
00DB5D  1               SHIFT_RIGHT:
00DB5D  1  69 08                adc     #$08
00DB5F  1  30 EC                bmi     SHIFT_RIGHT2
00DB61  1  F0 EA                beq     SHIFT_RIGHT2
00DB63  1  E9 08                sbc     #$08
00DB65  1  A8                   tay
00DB66  1  A5 B9                lda     FACEXTENSION
00DB68  1  B0 12                bcs     SHIFT_RIGHT5
00DB6A  1               LB588:
00DB6A  1  16 01                asl     1,x
00DB6C  1  90 02                bcc     LB58E
00DB6E  1  F6 01                inc     1,x
00DB70  1               LB58E:
00DB70  1  76 01                ror     1,x
00DB72  1  76 01                ror     1,x
00DB74  1               ; ----------------------------------------------------------------------------
00DB74  1               ; ENTER HERE FOR SHORT SHIFTS WITH NO SIGN EXTENSION
00DB74  1               ; ----------------------------------------------------------------------------
00DB74  1               SHIFT_RIGHT4:
00DB74  1  76 02                ror     2,x
00DB76  1  76 03                ror     3,x
00DB78  1  6A                   ror     a
00DB79  1  C8                   iny
00DB7A  1  D0 EE                bne     LB588
00DB7C  1               SHIFT_RIGHT5:
00DB7C  1  18                   clc
00DB7D  1  60                   rts
00DB7E  1               ; ----------------------------------------------------------------------------
00DB7E  1               CON_ONE:
00DB7E  1  81 00 00 00          .byte   $81,$00,$00,$00
00DB82  1               POLY_LOG:
00DB82  1  02           		.byte	$02
00DB83  1  80 19 56 62  		.byte   $80,$19,$56,$62
00DB87  1  80 76 22 F3  		.byte   $80,$76,$22,$F3
00DB8B  1  82 38 AA 40  		.byte   $82,$38,$AA,$40
00DB8F  1               CON_SQR_HALF:
00DB8F  1  80 35 04 F3  		.byte   $80,$35,$04,$F3
00DB93  1               CON_SQR_TWO:
00DB93  1  81 35 04 F3  		.byte   $81,$35,$04,$F3
00DB97  1               CON_NEG_HALF:
00DB97  1  80 80 00 00  		.byte   $80,$80,$00,$00
00DB9B  1               CON_LOG_TWO:
00DB9B  1  80 31 72 18  		.byte   $80,$31,$72,$18
00DB9F  1               ; ----------------------------------------------------------------------------
00DB9F  1               ; "LOG" FUNCTION
00DB9F  1               ; ----------------------------------------------------------------------------
00DB9F  1               LOG:
00DB9F  1  20 AC DD             jsr     SIGN
00DBA2  1  F0 02                beq     GIQ
00DBA4  1  10 03                bpl     LOG2
00DBA6  1               GIQ:
00DBA6  1  4C 6A D4             jmp     IQERR
00DBA9  1               LOG2:
00DBA9  1  A5 AC                lda     FAC
00DBAB  1  E9 7F                sbc     #$7F
00DBAD  1  48                   pha
00DBAE  1  A9 80                lda     #$80
00DBB0  1  85 AC                sta     FAC
00DBB2  1  A9 8F                lda     #<CON_SQR_HALF
00DBB4  1  A0 DB                ldy     #>CON_SQR_HALF
00DBB6  1  20 4E DA             jsr     FADD
00DBB9  1  A9 93                lda     #<CON_SQR_TWO
00DBBB  1  A0 DB                ldy     #>CON_SQR_TWO
00DBBD  1  20 AC DC             jsr     FDIV
00DBC0  1  A9 7E                lda     #<CON_ONE
00DBC2  1  A0 DB                ldy     #>CON_ONE
00DBC4  1  20 37 DA             jsr     FSUB
00DBC7  1  A9 82                lda     #<POLY_LOG
00DBC9  1  A0 DB                ldy     #>POLY_LOG
00DBCB  1  20 50 E1             jsr     POLYNOMIAL_ODD
00DBCE  1  A9 97                lda     #<CON_NEG_HALF
00DBD0  1  A0 DB                ldy     #>CON_NEG_HALF
00DBD2  1  20 4E DA             jsr     FADD
00DBD5  1  68                   pla
00DBD6  1  20 F4 DE             jsr     ADDACC
00DBD9  1  A9 9B                lda     #<CON_LOG_TWO
00DBDB  1  A0 DB                ldy     #>CON_LOG_TWO
00DBDD  1               ; ----------------------------------------------------------------------------
00DBDD  1               ; FAC = (Y,A) * FAC
00DBDD  1               ; ----------------------------------------------------------------------------
00DBDD  1               FMULT:
00DBDD  1  20 2F DC             jsr     LOAD_ARG_FROM_YA
00DBE0  1               ; ----------------------------------------------------------------------------
00DBE0  1               ; FAC = ARG * FAC
00DBE0  1               ; ----------------------------------------------------------------------------
00DBE0  1               FMULTT:
00DBE0  1  F0 4C                beq     L3903
00DBE2  1  20 55 DC             jsr     ADD_EXPONENTS
00DBE5  1  A9 00                lda     #$00
00DBE7  1  85 75                sta     RESULT
00DBE9  1  85 76                sta     RESULT+1
00DBEB  1  85 77                sta     RESULT+2
00DBED  1  A5 B9                lda     FACEXTENSION
00DBEF  1  20 04 DC             jsr     MULTIPLY1
00DBF2  1  A5 AF                lda     FAC+3
00DBF4  1  20 04 DC             jsr     MULTIPLY1
00DBF7  1  A5 AE                lda     FAC+2
00DBF9  1  20 04 DC             jsr     MULTIPLY1
00DBFC  1  A5 AD                lda     FAC+1
00DBFE  1  20 09 DC             jsr     MULTIPLY2
00DC01  1  4C 1E DD             jmp     COPY_RESULT_INTO_FAC
00DC04  1               ; ----------------------------------------------------------------------------
00DC04  1               ; MULTIPLY ARG BY (A) INTO RESULT
00DC04  1               ; ----------------------------------------------------------------------------
00DC04  1               MULTIPLY1:
00DC04  1  D0 03                bne     MULTIPLY2
00DC06  1  4C 4B DB             jmp     SHIFT_RIGHT1
00DC09  1               MULTIPLY2:
00DC09  1  4A                   lsr     a
00DC0A  1  09 80                ora     #$80
00DC0C  1               L38A7:
00DC0C  1  A8                   tay
00DC0D  1  90 13                bcc     L38C3
00DC0F  1  18                   clc
00DC10  1  A5 77                lda     RESULT+2
00DC12  1  65 B6                adc     ARG+3
00DC14  1  85 77                sta     RESULT+2
00DC16  1  A5 76                lda     RESULT+1
00DC18  1  65 B5                adc     ARG+2
00DC1A  1  85 76                sta     RESULT+1
00DC1C  1  A5 75                lda     RESULT
00DC1E  1  65 B4                adc     ARG+1
00DC20  1  85 75                sta     RESULT
00DC22  1               L38C3:
00DC22  1  66 75                ror     RESULT
00DC24  1  66 76                ror     RESULT+1
00DC26  1               ; this seems to be a bad byte in the dump
00DC26  1  66 77                ror     RESULT+2
00DC28  1  66 B9                ror     FACEXTENSION
00DC2A  1  98                   tya
00DC2B  1  4A                   lsr     a
00DC2C  1  D0 DE                bne     L38A7
00DC2E  1               L3903:
00DC2E  1  60                   rts
00DC2F  1               ; ----------------------------------------------------------------------------
00DC2F  1               ; UNPACK NUMBER AT (Y,A) INTO ARG
00DC2F  1               ; ----------------------------------------------------------------------------
00DC2F  1               LOAD_ARG_FROM_YA:
00DC2F  1  85 71                sta     INDEX
00DC31  1  84 72                sty     INDEX+1
00DC33  1  A0 03                ldy     #BYTES_FP-1
00DC35  1  B1 71                lda     (INDEX),y
00DC37  1  85 B6                sta     ARG+3
00DC39  1  88                   dey
00DC3A  1  B1 71                lda     (INDEX),y
00DC3C  1  85 B5                sta     ARG+2
00DC3E  1  88                   dey
00DC3F  1  B1 71                lda     (INDEX),y
00DC41  1  85 B7                sta     ARGSIGN
00DC43  1  45 B0                eor     FACSIGN
00DC45  1  85 B8                sta     SGNCPR
00DC47  1  A5 B7                lda     ARGSIGN
00DC49  1  09 80                ora     #$80
00DC4B  1  85 B4                sta     ARG+1
00DC4D  1  88                   dey
00DC4E  1  B1 71                lda     (INDEX),y
00DC50  1  85 B3                sta     ARG
00DC52  1  A5 AC                lda     FAC
00DC54  1  60                   rts
00DC55  1               ; ----------------------------------------------------------------------------
00DC55  1               ; ADD EXPONENTS OF ARG AND FAC
00DC55  1               ; (CALLED BY FMULT AND FDIV)
00DC55  1               ;
00DC55  1               ; ALSO CHECK FOR OVERFLOW, AND SET RESULT SIGN
00DC55  1               ; ----------------------------------------------------------------------------
00DC55  1               ADD_EXPONENTS:
00DC55  1  A5 B3                lda     ARG
00DC57  1               ADD_EXPONENTS1:
00DC57  1  F0 1F                beq     ZERO
00DC59  1  18                   clc
00DC5A  1  65 AC                adc     FAC
00DC5C  1  90 04                bcc     L393C
00DC5E  1  30 1D                bmi     JOV
00DC60  1  18                   clc
00DC61  1  2C                   .byte   $2C
00DC62  1               L393C:
00DC62  1  10 14                bpl     ZERO
00DC64  1  69 80                adc     #$80
00DC66  1  85 AC                sta     FAC
00DC68  1  D0 03                bne     L3947
00DC6A  1  4C D7 DA             jmp     STA_IN_FAC_SIGN
00DC6D  1               L3947:
00DC6D  1  A5 B8                lda     SGNCPR
00DC6F  1  85 B0                sta     FACSIGN
00DC71  1  60                   rts
00DC72  1               ; ----------------------------------------------------------------------------
00DC72  1               ; IF (FAC) IS POSITIVE, GIVE "OVERFLOW" ERROR
00DC72  1               ; IF (FAC) IS NEGATIVE, SET FAC=0, POP ONE RETURN, AND RTS
00DC72  1               ; CALLED FROM "EXP" FUNCTION
00DC72  1               ; ----------------------------------------------------------------------------
00DC72  1               OUTOFRNG:
00DC72  1  A5 B0                lda     FACSIGN
00DC74  1  49 FF                eor     #$FF
00DC76  1  30 05                bmi     JOV
00DC78  1               ; ----------------------------------------------------------------------------
00DC78  1               ; POP RETURN ADDRESS AND SET FAC=0
00DC78  1               ; ----------------------------------------------------------------------------
00DC78  1               ZERO:
00DC78  1  68                   pla
00DC79  1  68                   pla
00DC7A  1  4C D3 DA             jmp     ZERO_FAC
00DC7D  1               JOV:
00DC7D  1  4C 46 DB             jmp     OVERFLOW
00DC80  1               ; ----------------------------------------------------------------------------
00DC80  1               ; MULTIPLY FAC BY 10
00DC80  1               ; ----------------------------------------------------------------------------
00DC80  1               MUL10:
00DC80  1  20 8D DD             jsr     COPY_FAC_TO_ARG_ROUNDED
00DC83  1  AA                   tax
00DC84  1  F0 10                beq     L3970
00DC86  1  18                   clc
00DC87  1  69 02                adc     #$02
00DC89  1  B0 F2                bcs     JOV
00DC8B  1  A2 00                ldx     #$00
00DC8D  1  86 B8                stx     SGNCPR
00DC8F  1  20 5E DA             jsr     FADD2
00DC92  1  E6 AC                inc     FAC
00DC94  1  F0 E7                beq     JOV
00DC96  1               L3970:
00DC96  1  60                   rts
00DC97  1               ; ----------------------------------------------------------------------------
00DC97  1               CONTEN:
00DC97  1  84 20 00 00          .byte   $84,$20,$00,$00
00DC9B  1               ; ----------------------------------------------------------------------------
00DC9B  1               ; DIVIDE FAC BY 10
00DC9B  1               ; ----------------------------------------------------------------------------
00DC9B  1               DIV10:
00DC9B  1  20 8D DD             jsr     COPY_FAC_TO_ARG_ROUNDED
00DC9E  1  A9 97                lda     #<CONTEN
00DCA0  1  A0 DC                ldy     #>CONTEN
00DCA2  1  A2 00                ldx     #$00
00DCA4  1               ; ----------------------------------------------------------------------------
00DCA4  1               ; FAC = ARG / (Y,A)
00DCA4  1               ; ----------------------------------------------------------------------------
00DCA4  1               DIV:
00DCA4  1  86 B8                stx     SGNCPR
00DCA6  1  20 2D DD             jsr     LOAD_FAC_FROM_YA
00DCA9  1  4C AF DC             jmp     FDIVT
00DCAC  1               ; ----------------------------------------------------------------------------
00DCAC  1               ; FAC = (Y,A) / FAC
00DCAC  1               ; ----------------------------------------------------------------------------
00DCAC  1               FDIV:
00DCAC  1  20 2F DC             jsr     LOAD_ARG_FROM_YA
00DCAF  1               ; ----------------------------------------------------------------------------
00DCAF  1               ; FAC = ARG / FAC
00DCAF  1               ; ----------------------------------------------------------------------------
00DCAF  1               FDIVT:
00DCAF  1  F0 68                beq     L3A02
00DCB1  1  20 9C DD             jsr     ROUND_FAC
00DCB4  1  A9 00                lda     #$00
00DCB6  1  38                   sec
00DCB7  1  E5 AC                sbc     FAC
00DCB9  1  85 AC                sta     FAC
00DCBB  1  20 55 DC             jsr     ADD_EXPONENTS
00DCBE  1  E6 AC                inc     FAC
00DCC0  1  F0 BB                beq     JOV
00DCC2  1  A2 FD                ldx     #-MANTISSA_BYTES+256
00DCC4  1  A9 01                lda     #$01
00DCC6  1               L39A1:
00DCC6  1  A4 B4                ldy     ARG+1
00DCC8  1  C4 AD                cpy     FAC+1
00DCCA  1  D0 0A                bne     L39B7
00DCCC  1  A4 B5                ldy     ARG+2
00DCCE  1  C4 AE                cpy     FAC+2
00DCD0  1  D0 04                bne     L39B7
00DCD2  1  A4 B6                ldy     ARG+3
00DCD4  1  C4 AF                cpy     FAC+3
00DCD6  1               L39B7:
00DCD6  1  08                   php
00DCD7  1  2A                   rol     a
00DCD8  1  90 09                bcc     L39C4
00DCDA  1  E8                   inx
00DCDB  1  95 77                sta     RESULT_LAST-1,x
00DCDD  1  F0 2A                beq     L39F2
00DCDF  1  10 2C                bpl     L39F6
00DCE1  1  A9 01                lda     #$01
00DCE3  1               L39C4:
00DCE3  1  28                   plp
00DCE4  1  B0 0C                bcs     L39D5
00DCE6  1               L39C7:
00DCE6  1  06 B6                asl     ARG_LAST
00DCE8  1  26 B5                rol     ARG+2
00DCEA  1  26 B4                rol     ARG+1
00DCEC  1  B0 E8                bcs     L39B7
00DCEE  1  30 D6                bmi     L39A1
00DCF0  1  10 E4                bpl     L39B7
00DCF2  1               L39D5:
00DCF2  1  A8                   tay
00DCF3  1  A5 B6                lda     ARG+3
00DCF5  1  E5 AF                sbc     FAC+3
00DCF7  1  85 B6                sta     ARG+3
00DCF9  1  A5 B5                lda     ARG+2
00DCFB  1  E5 AE                sbc     FAC+2
00DCFD  1  85 B5                sta     ARG+2
00DCFF  1  A5 B4                lda     ARG+1
00DD01  1  E5 AD                sbc     FAC+1
00DD03  1  85 B4                sta     ARG+1
00DD05  1  98                   tya
00DD06  1  4C E6 DC             jmp     L39C7
00DD09  1               L39F2:
00DD09  1  A9 40                lda     #$40
00DD0B  1  D0 D6                bne     L39C4
00DD0D  1               L39F6:
00DD0D  1  0A                   asl     a
00DD0E  1  0A                   asl     a
00DD0F  1  0A                   asl     a
00DD10  1  0A                   asl     a
00DD11  1  0A                   asl     a
00DD12  1  0A                   asl     a
00DD13  1  85 B9                sta     FACEXTENSION
00DD15  1  28                   plp
00DD16  1  4C 1E DD             jmp     COPY_RESULT_INTO_FAC
00DD19  1               L3A02:
00DD19  1  A2 14                ldx     #ERR_ZERODIV
00DD1B  1  4C 3C C8             jmp     ERROR
00DD1E  1               ; ----------------------------------------------------------------------------
00DD1E  1               ; COPY RESULT INTO FAC MANTISSA, AND NORMALIZE
00DD1E  1               ; ----------------------------------------------------------------------------
00DD1E  1               COPY_RESULT_INTO_FAC:
00DD1E  1  A5 75                lda     RESULT
00DD20  1  85 AD                sta     FAC+1
00DD22  1  A5 76                lda     RESULT+1
00DD24  1  85 AE                sta     FAC+2
00DD26  1  A5 77                lda     RESULT+2
00DD28  1  85 AF                sta     FAC+3
00DD2A  1  4C B7 DA             jmp     NORMALIZE_FAC2
00DD2D  1               ; ----------------------------------------------------------------------------
00DD2D  1               ; UNPACK (Y,A) INTO FAC
00DD2D  1               ; ----------------------------------------------------------------------------
00DD2D  1               LOAD_FAC_FROM_YA:
00DD2D  1  85 71                sta     INDEX
00DD2F  1  84 72                sty     INDEX+1
00DD31  1  A0 03                ldy     #MANTISSA_BYTES
00DD33  1  B1 71                lda     (INDEX),y
00DD35  1  85 AF                sta     FAC+3
00DD37  1  88                   dey
00DD38  1  B1 71                lda     (INDEX),y
00DD3A  1  85 AE                sta     FAC+2
00DD3C  1  88                   dey
00DD3D  1  B1 71                lda     (INDEX),y
00DD3F  1  85 B0                sta     FACSIGN
00DD41  1  09 80                ora     #$80
00DD43  1  85 AD                sta     FAC+1
00DD45  1  88                   dey
00DD46  1  B1 71                lda     (INDEX),y
00DD48  1  85 AC                sta     FAC
00DD4A  1  84 B9                sty     FACEXTENSION
00DD4C  1  60                   rts
00DD4D  1               ; ----------------------------------------------------------------------------
00DD4D  1               ; ROUND FAC, STORE IN TEMP2
00DD4D  1               ; ----------------------------------------------------------------------------
00DD4D  1               STORE_FAC_IN_TEMP2_ROUNDED:
00DD4D  1  A2 A8                ldx     #TEMP2
00DD4F  1  2C                   .byte   $2C
00DD50  1               ; ----------------------------------------------------------------------------
00DD50  1               ; ROUND FAC, STORE IN TEMP1
00DD50  1               ; ----------------------------------------------------------------------------
00DD50  1               STORE_FAC_IN_TEMP1_ROUNDED:
00DD50  1  A2 A4                ldx     #TEMP1X
00DD52  1  A0 00                ldy     #$00
00DD54  1  F0 04                beq     STORE_FAC_AT_YX_ROUNDED
00DD56  1               ; ----------------------------------------------------------------------------
00DD56  1               ; ROUND FAC, AND STORE WHERE FORPNT POINTS
00DD56  1               ; ----------------------------------------------------------------------------
00DD56  1               SETFOR:
00DD56  1  A6 97                ldx     FORPNT
00DD58  1  A4 98                ldy     FORPNT+1
00DD5A  1               ; ----------------------------------------------------------------------------
00DD5A  1               ; ROUND FAC, AND STORE AT (Y,X)
00DD5A  1               ; ----------------------------------------------------------------------------
00DD5A  1               STORE_FAC_AT_YX_ROUNDED:
00DD5A  1  20 9C DD             jsr     ROUND_FAC
00DD5D  1  86 71                stx     INDEX
00DD5F  1  84 72                sty     INDEX+1
00DD61  1  A0 03                ldy     #MANTISSA_BYTES
00DD63  1  A5 AF                lda     FAC+3
00DD65  1  91 71                sta     (INDEX),y
00DD67  1  88                   dey
00DD68  1  A5 AE                lda     FAC+2
00DD6A  1  91 71                sta     (INDEX),y
00DD6C  1  88                   dey
00DD6D  1  A5 B0                lda     FACSIGN
00DD6F  1  09 7F                ora     #$7F
00DD71  1  25 AD                and     FAC+1
00DD73  1  91 71                sta     (INDEX),y
00DD75  1  88                   dey
00DD76  1  A5 AC                lda     FAC
00DD78  1  91 71                sta     (INDEX),y
00DD7A  1  84 B9                sty     FACEXTENSION
00DD7C  1  60                   rts
00DD7D  1               ; ----------------------------------------------------------------------------
00DD7D  1               ; COPY ARG INTO FAC
00DD7D  1               ; ----------------------------------------------------------------------------
00DD7D  1               COPY_ARG_TO_FAC:
00DD7D  1  A5 B7                lda     ARGSIGN
00DD7F  1               MFA:
00DD7F  1  85 B0                sta     FACSIGN
00DD81  1  A2 04                ldx     #BYTES_FP
00DD83  1               L3A7A:
00DD83  1  B5 B2                lda     SHIFTSIGNEXT,x
00DD85  1  95 AB                sta     EXPSGN,x
00DD87  1  CA                   dex
00DD88  1  D0 F9                bne     L3A7A
00DD8A  1  86 B9                stx     FACEXTENSION
00DD8C  1  60                   rts
00DD8D  1               ; ----------------------------------------------------------------------------
00DD8D  1               ; ROUND FAC AND COPY TO ARG
00DD8D  1               ; ----------------------------------------------------------------------------
00DD8D  1               COPY_FAC_TO_ARG_ROUNDED:
00DD8D  1  20 9C DD             jsr     ROUND_FAC
00DD90  1               MAF:
00DD90  1  A2 05                ldx     #BYTES_FP+1
00DD92  1               L3A89:
00DD92  1  B5 AB                lda     EXPSGN,x
00DD94  1  95 B2                sta     SHIFTSIGNEXT,x
00DD96  1  CA                   dex
00DD97  1  D0 F9                bne     L3A89
00DD99  1  86 B9                stx     FACEXTENSION
00DD9B  1               RTS14:
00DD9B  1  60                   rts
00DD9C  1               ; ----------------------------------------------------------------------------
00DD9C  1               ; ROUND FAC USING EXTENSION BYTE
00DD9C  1               ; ----------------------------------------------------------------------------
00DD9C  1               ROUND_FAC:
00DD9C  1  A5 AC                lda     FAC
00DD9E  1  F0 FB                beq     RTS14
00DDA0  1  06 B9                asl     FACEXTENSION
00DDA2  1  90 F7                bcc     RTS14
00DDA4  1               ; ----------------------------------------------------------------------------
00DDA4  1               ; INCREMENT MANTISSA AND RE-NORMALIZE IF CARRY
00DDA4  1               ; ----------------------------------------------------------------------------
00DDA4  1               INCREMENT_MANTISSA:
00DDA4  1  20 3B DB             jsr     INCREMENT_FAC_MANTISSA
00DDA7  1  D0 F2                bne     RTS14
00DDA9  1  4C 0C DB             jmp     NORMALIZE_FAC6
00DDAC  1               ; ----------------------------------------------------------------------------
00DDAC  1               ; TEST FAC FOR ZERO AND SIGN
00DDAC  1               ;
00DDAC  1               ; FAC > 0, RETURN +1
00DDAC  1               ; FAC = 0, RETURN  0
00DDAC  1               ; FAC < 0, RETURN -1
00DDAC  1               ; ----------------------------------------------------------------------------
00DDAC  1               SIGN:
00DDAC  1  A5 AC                lda     FAC
00DDAE  1  F0 09                beq     RTS15
00DDB0  1               L3AA7:
00DDB0  1  A5 B0                lda     FACSIGN
00DDB2  1               SIGN2:
00DDB2  1  2A                   rol     a
00DDB3  1  A9 FF                lda     #$FF
00DDB5  1  B0 02                bcs     RTS15
00DDB7  1  A9 01                lda     #$01
00DDB9  1               RTS15:
00DDB9  1  60                   rts
00DDBA  1               ; ----------------------------------------------------------------------------
00DDBA  1               ; "SGN" FUNCTION
00DDBA  1               ; ----------------------------------------------------------------------------
00DDBA  1               SGN:
00DDBA  1  20 AC DD             jsr     SIGN
00DDBD  1               ; ----------------------------------------------------------------------------
00DDBD  1               ; CONVERT (A) INTO FAC, AS SIGNED VALUE -128 TO +127
00DDBD  1               ; ----------------------------------------------------------------------------
00DDBD  1               FLOAT:
00DDBD  1  85 AD                sta     FAC+1
00DDBF  1  A9 00                lda     #$00
00DDC1  1  85 AE                sta     FAC+2
00DDC3  1  A2 88                ldx     #$88
00DDC5  1               ; ----------------------------------------------------------------------------
00DDC5  1               ; FLOAT UNSIGNED VALUE IN FAC+1,2
00DDC5  1               ; (X) = EXPONENT
00DDC5  1               ; ----------------------------------------------------------------------------
00DDC5  1               FLOAT1:
00DDC5  1  A5 AD                lda     FAC+1
00DDC7  1  49 FF                eor     #$FF
00DDC9  1  2A                   rol     a
00DDCA  1               ; ----------------------------------------------------------------------------
00DDCA  1               ; FLOAT UNSIGNED VALUE IN FAC+1,2
00DDCA  1               ; (X) = EXPONENT
00DDCA  1               ; C=0 TO MAKE VALUE NEGATIVE
00DDCA  1               ; C=1 TO MAKE VALUE POSITIVE
00DDCA  1               ; ----------------------------------------------------------------------------
00DDCA  1               FLOAT2:
00DDCA  1  A9 00                lda     #$00
00DDCC  1  85 AF                sta     FAC+3
00DDCE  1  86 AC                stx     FAC
00DDD0  1  85 B9                sta     FACEXTENSION
00DDD2  1  85 B0                sta     FACSIGN
00DDD4  1  4C B2 DA             jmp     NORMALIZE_FAC1
00DDD7  1               ; ----------------------------------------------------------------------------
00DDD7  1               ; "ABS" FUNCTION
00DDD7  1               ; ----------------------------------------------------------------------------
00DDD7  1               ABS:
00DDD7  1  46 B0                lsr     FACSIGN
00DDD9  1  60                   rts
00DDDA  1               ; ----------------------------------------------------------------------------
00DDDA  1               ; COMPARE FAC WITH PACKED # AT (Y,A)
00DDDA  1               ; RETURN A=1,0,-1 AS (Y,A) IS <,=,> FAC
00DDDA  1               ; ----------------------------------------------------------------------------
00DDDA  1               FCOMP:
00DDDA  1  85 73                sta     DEST
00DDDC  1               ; ----------------------------------------------------------------------------
00DDDC  1               ; SPECIAL ENTRY FROM "NEXT" PROCESSOR
00DDDC  1               ; "DEST" ALREADY SET UP
00DDDC  1               ; ----------------------------------------------------------------------------
00DDDC  1               FCOMP2:
00DDDC  1  84 74                sty     DEST+1
00DDDE  1  A0 00                ldy     #$00
00DDE0  1  B1 73                lda     (DEST),y
00DDE2  1  C8                   iny
00DDE3  1  AA                   tax
00DDE4  1  F0 C6                beq     SIGN
00DDE6  1  B1 73                lda     (DEST),y
00DDE8  1  45 B0                eor     FACSIGN
00DDEA  1  30 C4                bmi     L3AA7
00DDEC  1  E4 AC                cpx     FAC
00DDEE  1  D0 1A                bne     L3B0A
00DDF0  1  B1 73                lda     (DEST),y
00DDF2  1  09 80                ora     #$80
00DDF4  1  C5 AD                cmp     FAC+1
00DDF6  1  D0 12                bne     L3B0A
00DDF8  1  C8                   iny
00DDF9  1  B1 73                lda     (DEST),y
00DDFB  1  C5 AE                cmp     FAC+2
00DDFD  1  D0 0B                bne     L3B0A
00DDFF  1  C8                   iny
00DE00  1  A9 7F                lda     #$7F
00DE02  1  C5 B9                cmp     FACEXTENSION
00DE04  1  B1 73                lda     (DEST),y
00DE06  1  E5 AF                sbc     FAC_LAST
00DE08  1  F0 28                beq     L3B32
00DE0A  1               L3B0A:
00DE0A  1  A5 B0                lda     FACSIGN
00DE0C  1  90 02                bcc     L3B10
00DE0E  1  49 FF                eor     #$FF
00DE10  1               L3B10:
00DE10  1  4C B2 DD             jmp     SIGN2
00DE13  1               ; ----------------------------------------------------------------------------
00DE13  1               ; QUICK INTEGER FUNCTION
00DE13  1               ;
00DE13  1               ; CONVERTS FP VALUE IN FAC TO INTEGER VALUE
00DE13  1               ; IN FAC+1...FAC+4, BY SHIFTING RIGHT WITH SIGN
00DE13  1               ; EXTENSION UNTIL FRACTIONAL BITS ARE OUT.
00DE13  1               ;
00DE13  1               ; THIS SUBROUTINE ASSUMES THE EXPONENT < 32.
00DE13  1               ; ----------------------------------------------------------------------------
00DE13  1               QINT:
00DE13  1  A5 AC                lda     FAC
00DE15  1  F0 4A                beq     QINT3
00DE17  1  38                   sec
00DE18  1  E9 98                sbc     #120+8*BYTES_FP
00DE1A  1  24 B0                bit     FACSIGN
00DE1C  1  10 09                bpl     L3B27
00DE1E  1  AA                   tax
00DE1F  1  A9 FF                lda     #$FF
00DE21  1  85 B2                sta     SHIFTSIGNEXT
00DE23  1  20 1F DB             jsr     COMPLEMENT_FAC_MANTISSA
00DE26  1  8A                   txa
00DE27  1               L3B27:
00DE27  1  A2 AC                ldx     #FAC
00DE29  1  C9 F9                cmp     #$F9
00DE2B  1  10 06                bpl     QINT2
00DE2D  1  20 5D DB             jsr     SHIFT_RIGHT
00DE30  1  84 B2                sty     SHIFTSIGNEXT
00DE32  1               L3B32:
00DE32  1  60                   rts
00DE33  1               QINT2:
00DE33  1  A8                   tay
00DE34  1  A5 B0                lda     FACSIGN
00DE36  1  29 80                and     #$80
00DE38  1  46 AD                lsr     FAC+1
00DE3A  1  05 AD                ora     FAC+1
00DE3C  1  85 AD                sta     FAC+1
00DE3E  1  20 74 DB             jsr     SHIFT_RIGHT4
00DE41  1  84 B2                sty     SHIFTSIGNEXT
00DE43  1  60                   rts
00DE44  1               ; ----------------------------------------------------------------------------
00DE44  1               ; "INT" FUNCTION
00DE44  1               ;
00DE44  1               ; USES QINT TO CONVERT (FAC) TO INTEGER FORM,
00DE44  1               ; AND THEN REFLOATS THE INTEGER.
00DE44  1               ; ----------------------------------------------------------------------------
00DE44  1               INT:
00DE44  1  A5 AC                lda     FAC
00DE46  1  C9 98                cmp     #120+8*BYTES_FP
00DE48  1  B0 1E                bcs     RTS17
00DE4A  1  20 13 DE             jsr     QINT
00DE4D  1  84 B9                sty     FACEXTENSION
00DE4F  1  A5 B0                lda     FACSIGN
00DE51  1  84 B0                sty     FACSIGN
00DE53  1  49 80                eor     #$80
00DE55  1  2A                   rol     a
00DE56  1  A9 98                lda     #120+8*BYTES_FP
00DE58  1  85 AC                sta     FAC
00DE5A  1  A5 AF                lda     FAC_LAST
00DE5C  1  85 5B                sta     CHARAC
00DE5E  1  4C B2 DA             jmp     NORMALIZE_FAC1
00DE61  1               QINT3:
00DE61  1  85 AD                sta     FAC+1
00DE63  1  85 AE                sta     FAC+2
00DE65  1  85 AF                sta     FAC+3
00DE67  1  A8                   tay
00DE68  1               RTS17:
00DE68  1  60                   rts
00DE69  1               ; ----------------------------------------------------------------------------
00DE69  1               ; CONVERT STRING TO FP VALUE IN FAC
00DE69  1               ;
00DE69  1               ; STRING POINTED TO BY TXTPTR
00DE69  1               ; FIRST CHAR ALREADY SCANNED BY CHRGET
00DE69  1               ; (A) = FIRST CHAR, C=0 IF DIGIT.
00DE69  1               ; ----------------------------------------------------------------------------
00DE69  1               FIN:
00DE69  1  A0 00                ldy     #$00
00DE6B  1  A2 09                ldx     #SERLEN-TMPEXP
00DE6D  1               L3B6F:
00DE6D  1  94 A8                sty     TMPEXP,x
00DE6F  1  CA                   dex
00DE70  1  10 FB                bpl     L3B6F
00DE72  1  90 0F                bcc     FIN2
00DE74  1  C9 2D                cmp     #$2D
00DE76  1  D0 04                bne     L3B7E
00DE78  1  86 B1                stx     SERLEN
00DE7A  1  F0 04                beq     FIN1
00DE7C  1               L3B7E:
00DE7C  1  C9 2B                cmp     #$2B
00DE7E  1  D0 05                bne     FIN3
00DE80  1               FIN1:
00DE80  1  20 D6 00             jsr     CHRGET
00DE83  1               FIN2:
00DE83  1  90 5B                bcc     FIN9
00DE85  1               FIN3:
00DE85  1  C9 2E                cmp     #$2E
00DE87  1  F0 2E                beq     FIN10
00DE89  1  C9 45                cmp     #$45
00DE8B  1  D0 30                bne     FIN7
00DE8D  1  20 D6 00             jsr     CHRGET
00DE90  1  90 17                bcc     FIN5
00DE92  1  C9 A4                cmp     #TOKEN_MINUS
00DE94  1  F0 0E                beq     L3BA6
00DE96  1  C9 2D                cmp     #$2D
00DE98  1  F0 0A                beq     L3BA6
00DE9A  1  C9 A3                cmp     #TOKEN_PLUS
00DE9C  1  F0 08                beq     FIN4
00DE9E  1  C9 2B                cmp     #$2B
00DEA0  1  F0 04                beq     FIN4
00DEA2  1  D0 07                bne     FIN6
00DEA4  1               L3BA6:
00DEA4  1  66 AB                ror     EXPSGN
00DEA6  1               FIN4:
00DEA6  1  20 D6 00             jsr     CHRGET
00DEA9  1               FIN5:
00DEA9  1  90 5C                bcc     GETEXP
00DEAB  1               FIN6:
00DEAB  1  24 AB                bit     EXPSGN
00DEAD  1  10 0E                bpl     FIN7
00DEAF  1  A9 00                lda     #$00
00DEB1  1  38                   sec
00DEB2  1  E5 A9                sbc     EXPON
00DEB4  1  4C BF DE             jmp     FIN8
00DEB7  1               ; ----------------------------------------------------------------------------
00DEB7  1               ; FOUND A DECIMAL POINT
00DEB7  1               ; ----------------------------------------------------------------------------
00DEB7  1               FIN10:
00DEB7  1  66 AA                ror     LOWTR
00DEB9  1  24 AA                bit     LOWTR
00DEBB  1  50 C3                bvc     FIN1
00DEBD  1               ; ----------------------------------------------------------------------------
00DEBD  1               ; NUMBER TERMINATED, ADJUST EXPONENT NOW
00DEBD  1               ; ----------------------------------------------------------------------------
00DEBD  1               FIN7:
00DEBD  1  A5 A9                lda     EXPON
00DEBF  1               FIN8:
00DEBF  1  38                   sec
00DEC0  1  E5 A8                sbc     INDX
00DEC2  1  85 A9                sta     EXPON
00DEC4  1  F0 12                beq     L3BEE
00DEC6  1  10 09                bpl     L3BE7
00DEC8  1               L3BDE:
00DEC8  1  20 9B DC             jsr     DIV10
00DECB  1  E6 A9                inc     EXPON
00DECD  1  D0 F9                bne     L3BDE
00DECF  1  F0 07                beq     L3BEE
00DED1  1               L3BE7:
00DED1  1  20 80 DC             jsr     MUL10
00DED4  1  C6 A9                dec     EXPON
00DED6  1  D0 F9                bne     L3BE7
00DED8  1               L3BEE:
00DED8  1  A5 B1                lda     SERLEN
00DEDA  1  30 01                bmi     L3BF3
00DEDC  1  60                   rts
00DEDD  1               L3BF3:
00DEDD  1  4C D1 E0             jmp     NEGOP
00DEE0  1               ; ----------------------------------------------------------------------------
00DEE0  1               ; ACCUMULATE A DIGIT INTO FAC
00DEE0  1               ; ----------------------------------------------------------------------------
00DEE0  1               FIN9:
00DEE0  1  48                   pha
00DEE1  1  24 AA                bit     LOWTR
00DEE3  1  10 02                bpl     L3BFD
00DEE5  1  E6 A8                inc     INDX
00DEE7  1               L3BFD:
00DEE7  1  20 80 DC             jsr     MUL10
00DEEA  1  68                   pla
00DEEB  1  38                   sec
00DEEC  1  E9 30                sbc     #$30
00DEEE  1  20 F4 DE             jsr     ADDACC
00DEF1  1  4C 80 DE             jmp     FIN1
00DEF4  1               ; ----------------------------------------------------------------------------
00DEF4  1               ; ADD (A) TO FAC
00DEF4  1               ; ----------------------------------------------------------------------------
00DEF4  1               ADDACC:
00DEF4  1  48                   pha
00DEF5  1  20 8D DD             jsr     COPY_FAC_TO_ARG_ROUNDED
00DEF8  1  68                   pla
00DEF9  1  20 BD DD             jsr     FLOAT
00DEFC  1  A5 B7                lda     ARGSIGN
00DEFE  1  45 B0                eor     FACSIGN
00DF00  1  85 B8                sta     SGNCPR
00DF02  1  A6 AC                ldx     FAC
00DF04  1  4C 51 DA             jmp     FADDT
00DF07  1               ; ----------------------------------------------------------------------------
00DF07  1               ; ACCUMULATE DIGIT OF EXPONENT
00DF07  1               ; ----------------------------------------------------------------------------
00DF07  1               GETEXP:
00DF07  1  A5 A9                lda     EXPON
00DF09  1  C9 0A                cmp     #MAX_EXPON
00DF0B  1  90 09                bcc     L3C2C
00DF0D  1  A9 64                lda     #$64
00DF0F  1  24 AB                bit     EXPSGN
00DF11  1  30 11                bmi     L3C3A
00DF13  1  4C 46 DB             jmp     OVERFLOW
00DF16  1               L3C2C:
00DF16  1  0A                   asl     a
00DF17  1  0A                   asl     a
00DF18  1  18                   clc
00DF19  1  65 A9                adc     EXPON
00DF1B  1  0A                   asl     a
00DF1C  1  18                   clc
00DF1D  1  A0 00                ldy     #$00
00DF1F  1  71 DD                adc     (TXTPTR),y
00DF21  1  38                   sec
00DF22  1  E9 30                sbc     #$30
00DF24  1               L3C3A:
00DF24  1  85 A9                sta     EXPON
00DF26  1  4C A6 DE             jmp     FIN4
00DF29  1               ; ----------------------------------------------------------------------------
00DF29  1               ; these values are /1000 of what the labels say
00DF29  1               CON_99999999_9:
00DF29  1  91 43 4F F8          .byte   $91,$43,$4F,$F8
00DF2D  1               CON_999999999:
00DF2D  1  94 74 23 F7  		.byte   $94,$74,$23,$F7
00DF31  1               CON_BILLION:
00DF31  1  94 74 24 00          .byte   $94,$74,$24,$00
00DF35  1               ; ----------------------------------------------------------------------------
00DF35  1               ; PRINT "IN <LINE #>"
00DF35  1               ; ----------------------------------------------------------------------------
00DF35  1               INPRT:
00DF35  1  A9 8D                lda     #<QT_IN
00DF37  1  A0 C1                ldy     #>QT_IN
00DF39  1  20 4D DF             jsr     GOSTROUT2
00DF3C  1  A5 88                lda     CURLIN+1
00DF3E  1  A6 87                ldx     CURLIN
00DF40  1               ; ----------------------------------------------------------------------------
00DF40  1               ; PRINT A,X AS DECIMAL INTEGER
00DF40  1               ; ----------------------------------------------------------------------------
00DF40  1               LINPRT:
00DF40  1  85 AD                sta     FAC+1
00DF42  1  86 AE                stx     FAC+2
00DF44  1  A2 90                ldx     #$90
00DF46  1  38                   sec
00DF47  1  20 CA DD             jsr     FLOAT2
00DF4A  1  20 50 DF             jsr     FOUT
00DF4D  1               GOSTROUT2:
00DF4D  1  4C A5 CE             jmp     STROUT
00DF50  1               ; ----------------------------------------------------------------------------
00DF50  1               ; CONVERT (FAC) TO STRING STARTING AT STACK
00DF50  1               ; RETURN WITH (Y,A) POINTING AT STRING
00DF50  1               ; ----------------------------------------------------------------------------
00DF50  1               FOUT:
00DF50  1  A0 01                ldy     #$01
00DF52  1               ; ----------------------------------------------------------------------------
00DF52  1               ; "STR$" FUNCTION ENTERS HERE, WITH (Y)=0
00DF52  1               ; SO THAT RESULT STRING STARTS AT STACK-1
00DF52  1               ; (THIS IS USED AS A FLAG)
00DF52  1               ; ----------------------------------------------------------------------------
00DF52  1               FOUT1:
00DF52  1  A9 20                lda     #$20
00DF54  1  24 B0                bit     FACSIGN
00DF56  1  10 02                bpl     L3C73
00DF58  1  A9 2D                lda     #$2D
00DF5A  1               L3C73:
00DF5A  1  99 FF 00             sta     $FF,y
00DF5D  1  85 B0                sta     FACSIGN
00DF5F  1  84 BA                sty     STRNG2
00DF61  1  C8                   iny
00DF62  1  A9 30                lda     #$30
00DF64  1  A6 AC                ldx     FAC
00DF66  1  D0 03                bne     L3C84
00DF68  1  4C 6B E0             jmp     FOUT4
00DF6B  1               L3C84:
00DF6B  1  A9 00                lda     #$00
00DF6D  1  E0 80                cpx     #$80
00DF6F  1  F0 02                beq     L3C8C
00DF71  1  B0 09                bcs     L3C95
00DF73  1               L3C8C:
00DF73  1  A9 31                lda     #<CON_BILLION
00DF75  1  A0 DF                ldy     #>CON_BILLION
00DF77  1  20 DD DB             jsr     FMULT
00DF7A  1  A9 FA                lda     #-6+256 ; exponent adjustment
00DF7C  1               L3C95:
00DF7C  1  85 A8                sta     INDX
00DF7E  1               ; ----------------------------------------------------------------------------
00DF7E  1               ; ADJUST UNTIL 1E8 <= (FAC) <1E9
00DF7E  1               ; ----------------------------------------------------------------------------
00DF7E  1               L3C97:
00DF7E  1  A9 2D                lda     #<CON_999999999
00DF80  1  A0 DF                ldy     #>CON_999999999
00DF82  1  20 DA DD             jsr     FCOMP
00DF85  1  F0 1E                beq     L3CBE
00DF87  1  10 12                bpl     L3CB4
00DF89  1               L3CA2:
00DF89  1  A9 29                lda     #<CON_99999999_9
00DF8B  1  A0 DF                ldy     #>CON_99999999_9
00DF8D  1  20 DA DD             jsr     FCOMP
00DF90  1  F0 02                beq     L3CAD
00DF92  1  10 0E                bpl     L3CBB
00DF94  1               L3CAD:
00DF94  1  20 80 DC             jsr     MUL10
00DF97  1  C6 A8                dec     INDX
00DF99  1  D0 EE                bne     L3CA2
00DF9B  1               L3CB4:
00DF9B  1  20 9B DC             jsr     DIV10
00DF9E  1  E6 A8                inc     INDX
00DFA0  1  D0 DC                bne     L3C97
00DFA2  1               L3CBB:
00DFA2  1  20 30 DA             jsr     FADDH
00DFA5  1               L3CBE:
00DFA5  1  20 13 DE             jsr     QINT
00DFA8  1               ; ----------------------------------------------------------------------------
00DFA8  1               ; FAC+1...FAC+4 IS NOW IN INTEGER FORM
00DFA8  1               ; WITH POWER OF TEN ADJUSTMENT IN TMPEXP
00DFA8  1               ;
00DFA8  1               ; IF -10 < TMPEXP > 1, PRINT IN DECIMAL FORM
00DFA8  1               ; OTHERWISE, PRINT IN EXPONENTIAL FORM
00DFA8  1               ; ----------------------------------------------------------------------------
00DFA8  1  A2 01                ldx     #$01
00DFAA  1  A5 A8                lda     INDX
00DFAC  1  18                   clc
00DFAD  1  69 07                adc     #3*BYTES_FP-5
00DFAF  1  30 09                bmi     L3CD3
00DFB1  1  C9 08                cmp     #3*BYTES_FP-4
00DFB3  1  B0 06                bcs     L3CD4
00DFB5  1  69 FF                adc     #$FF
00DFB7  1  AA                   tax
00DFB8  1  A9 02                lda     #$02
00DFBA  1               L3CD3:
00DFBA  1  38                   sec
00DFBB  1               L3CD4:
00DFBB  1  E9 02                sbc     #$02
00DFBD  1  85 A9                sta     EXPON
00DFBF  1  86 A8                stx     INDX
00DFC1  1  8A                   txa
00DFC2  1  F0 02                beq     L3CDF
00DFC4  1  10 13                bpl     L3CF2
00DFC6  1               L3CDF:
00DFC6  1  A4 BA                ldy     STRNG2
00DFC8  1  A9 2E                lda     #$2E
00DFCA  1  C8                   iny
00DFCB  1  99 FF 00             sta     $FF,y
00DFCE  1  8A                   txa
00DFCF  1  F0 06                beq     L3CF0
00DFD1  1  A9 30                lda     #$30
00DFD3  1  C8                   iny
00DFD4  1  99 FF 00             sta     $FF,y
00DFD7  1               L3CF0:
00DFD7  1  84 BA                sty     STRNG2
00DFD9  1               ; ----------------------------------------------------------------------------
00DFD9  1               ; NOW DIVIDE BY POWERS OF TEN TO GET SUCCESSIVE DIGITS
00DFD9  1               ; ----------------------------------------------------------------------------
00DFD9  1               L3CF2:
00DFD9  1  A0 00                ldy     #$00
00DFDB  1  A2 80                ldx     #$80
00DFDD  1               L3CF6:
00DFDD  1  A5 AF                lda     FAC_LAST
00DFDF  1  18                   clc
00DFE0  1  79 7E E0             adc     DECTBL+2,y
00DFE3  1  85 AF                sta     FAC+3
00DFE5  1  A5 AE                lda     FAC+2
00DFE7  1  79 7D E0             adc     DECTBL+1,y
00DFEA  1  85 AE                sta     FAC+2
00DFEC  1  A5 AD                lda     FAC+1
00DFEE  1  79 7C E0             adc     DECTBL,y
00DFF1  1  85 AD                sta     FAC+1
00DFF3  1  E8                   inx
00DFF4  1  B0 04                bcs     L3D1A
00DFF6  1  10 E5                bpl     L3CF6
00DFF8  1  30 02                bmi     L3D1C
00DFFA  1               L3D1A:
00DFFA  1  30 E1                bmi     L3CF6
00DFFC  1               L3D1C:
00DFFC  1  8A                   txa
00DFFD  1  90 04                bcc     L3D23
00DFFF  1  49 FF                eor     #$FF
00E001  1  69 0A                adc     #$0A
00E003  1               L3D23:
00E003  1  69 2F                adc     #$2F
00E005  1  C8                   iny
00E006  1  C8                   iny
00E007  1  C8                   iny
00E008  1  84 95                sty     VARPNT
00E00A  1  A4 BA                ldy     STRNG2
00E00C  1  C8                   iny
00E00D  1  AA                   tax
00E00E  1  29 7F                and     #$7F
00E010  1  99 FF 00             sta     $FF,y
00E013  1  C6 A8                dec     INDX
00E015  1  D0 06                bne     L3D3E
00E017  1  A9 2E                lda     #$2E
00E019  1  C8                   iny
00E01A  1  99 FF 00             sta     $FF,y
00E01D  1               L3D3E:
00E01D  1  84 BA                sty     STRNG2
00E01F  1  A4 95                ldy     VARPNT
00E021  1  8A                   txa
00E022  1  49 FF                eor     #$FF
00E024  1  29 80                and     #$80
00E026  1  AA                   tax
00E027  1  C0 12                cpy     #DECTBL_END-DECTBL
00E029  1  D0 B2                bne     L3CF6
00E02B  1               ; ----------------------------------------------------------------------------
00E02B  1               ; NINE DIGITS HAVE BEEN STORED IN STRING.  NOW LOOK
00E02B  1               ; BACK AND LOP OFF TRAILING ZEROES AND A TRAILING
00E02B  1               ; DECIMAL POINT.
00E02B  1               ; ----------------------------------------------------------------------------
00E02B  1  A4 BA                ldy     STRNG2
00E02D  1               L3D4E:
00E02D  1  B9 FF 00             lda     $FF,y
00E030  1  88                   dey
00E031  1  C9 30                cmp     #$30
00E033  1  F0 F8                beq     L3D4E
00E035  1  C9 2E                cmp     #$2E
00E037  1  F0 01                beq     L3D5B
00E039  1  C8                   iny
00E03A  1               L3D5B:
00E03A  1  A9 2B                lda     #$2B
00E03C  1  A6 A9                ldx     EXPON
00E03E  1  F0 2E                beq     L3D8F
00E040  1  10 08                bpl     L3D6B
00E042  1  A9 00                lda     #$00
00E044  1  38                   sec
00E045  1  E5 A9                sbc     EXPON
00E047  1  AA                   tax
00E048  1  A9 2D                lda     #$2D
00E04A  1               L3D6B:
00E04A  1  99 01 01             sta     STACK+1,y
00E04D  1  A9 45                lda     #$45
00E04F  1  99 00 01             sta     STACK,y
00E052  1  8A                   txa
00E053  1  A2 2F                ldx     #$2F
00E055  1  38                   sec
00E056  1               L3D77:
00E056  1  E8                   inx
00E057  1  E9 0A                sbc     #$0A
00E059  1  B0 FB                bcs     L3D77
00E05B  1  69 3A                adc     #$3A
00E05D  1  99 03 01             sta     STACK+3,y
00E060  1  8A                   txa
00E061  1  99 02 01             sta     STACK+2,y
00E064  1  A9 00                lda     #$00
00E066  1  99 04 01             sta     STACK+4,y
00E069  1  F0 08                beq     L3D94
00E06B  1               FOUT4:
00E06B  1  99 FF 00             sta     $FF,y
00E06E  1               L3D8F:
00E06E  1  A9 00                lda     #$00
00E070  1  99 00 01             sta     STACK,y
00E073  1               L3D94:
00E073  1  A9 00                lda     #$00
00E075  1  A0 01                ldy     #$01
00E077  1  60                   rts
00E078  1               ; ----------------------------------------------------------------------------
00E078  1               CON_HALF:
00E078  1  80 00 00 00          .byte   $80,$00,$00,$00
00E07C  1               ; ----------------------------------------------------------------------------
00E07C  1               ; POWERS OF 10 FROM 1E8 DOWN TO 1,
00E07C  1               ; AS 32-BIT INTEGERS, WITH ALTERNATING SIGNS
00E07C  1               ; ----------------------------------------------------------------------------
00E07C  1               DECTBL:
00E07C  1  FE 79 60             .byte   $FE,$79,$60 ; -100000
00E07F  1  00 27 10     		.byte	$00,$27,$10 ; 10000
00E082  1  FF FC 18     		.byte	$FF,$FC,$18 ; -1000
00E085  1  00 00 64     		.byte	$00,$00,$64 ; 100
00E088  1  FF FF F6     		.byte	$FF,$FF,$F6 ; -10
00E08B  1  00 00 01     		.byte	$00,$00,$01 ; 1
00E08E  1               DECTBL_END:
00E08E  1               ; ----------------------------------------------------------------------------
00E08E  1               ; "SQR" FUNCTION
00E08E  1               ; ----------------------------------------------------------------------------
00E08E  1               SQR:
00E08E  1  20 8D DD             jsr     COPY_FAC_TO_ARG_ROUNDED
00E091  1  A9 78                lda     #<CON_HALF
00E093  1  A0 E0                ldy     #>CON_HALF
00E095  1  20 2D DD             jsr     LOAD_FAC_FROM_YA
00E098  1               ; ----------------------------------------------------------------------------
00E098  1               ; EXPONENTIATION OPERATION
00E098  1               ;
00E098  1               ; ARG ^ FAC  =  EXP( LOG(ARG) * FAC )
00E098  1               ; ----------------------------------------------------------------------------
00E098  1               FPWRT:
00E098  1  F0 63                beq     EXP
00E09A  1  A5 B3                lda     ARG
00E09C  1  D0 03                bne     L3DD5
00E09E  1  4C D5 DA             jmp     STA_IN_FAC_SIGN_AND_EXP
00E0A1  1               L3DD5:
00E0A1  1  A2 9C                ldx     #TEMP3
00E0A3  1  A0 00                ldy     #$00
00E0A5  1  20 5A DD             jsr     STORE_FAC_AT_YX_ROUNDED
00E0A8  1  A5 B7                lda     ARGSIGN
00E0AA  1  10 0F                bpl     L3DEF
00E0AC  1  20 44 DE             jsr     INT
00E0AF  1  A9 9C                lda     #TEMP3
00E0B1  1  A0 00                ldy     #$00
00E0B3  1  20 DA DD             jsr     FCOMP
00E0B6  1  D0 03                bne     L3DEF
00E0B8  1  98                   tya
00E0B9  1  A4 5B                ldy     CHARAC
00E0BB  1               L3DEF:
00E0BB  1  20 7F DD             jsr     MFA
00E0BE  1  98                   tya
00E0BF  1  48                   pha
00E0C0  1  20 9F DB             jsr     LOG
00E0C3  1  A9 9C                lda     #TEMP3
00E0C5  1  A0 00                ldy     #$00
00E0C7  1  20 DD DB             jsr     FMULT
00E0CA  1  20 FD E0             jsr     EXP
00E0CD  1  68                   pla
00E0CE  1  4A                   lsr     a
00E0CF  1  90 0A                bcc     L3E0F
00E0D1  1               ; ----------------------------------------------------------------------------
00E0D1  1               ; NEGATE VALUE IN FAC
00E0D1  1               ; ----------------------------------------------------------------------------
00E0D1  1               NEGOP:
00E0D1  1  A5 AC                lda     FAC
00E0D3  1  F0 06                beq     L3E0F
00E0D5  1  A5 B0                lda     FACSIGN
00E0D7  1  49 FF                eor     #$FF
00E0D9  1  85 B0                sta     FACSIGN
00E0DB  1               L3E0F:
00E0DB  1  60                   rts
00E0DC  1               ; ----------------------------------------------------------------------------
00E0DC  1               CON_LOG_E:
00E0DC  1  81 38 AA 3B          .byte   $81,$38,$AA,$3B
00E0E0  1               POLY_EXP:
00E0E0  1  06           		.byte	$06
00E0E1  1  74 63 90 8C  		.byte	$74,$63,$90,$8C
00E0E5  1  77 23 0C AB  		.byte	$77,$23,$0C,$AB
00E0E9  1  7A 1E 94 00  		.byte	$7A,$1E,$94,$00
00E0ED  1  7C 63 42 80  		.byte	$7C,$63,$42,$80
00E0F1  1  7E 75 FE D0  		.byte	$7E,$75,$FE,$D0
00E0F5  1  80 31 72 15  		.byte	$80,$31,$72,$15
00E0F9  1  81 00 00 00  		.byte	$81,$00,$00,$00
00E0FD  1               ; ----------------------------------------------------------------------------
00E0FD  1               ; "EXP" FUNCTION
00E0FD  1               ;
00E0FD  1               ; FAC = E ^ FAC
00E0FD  1               ; ----------------------------------------------------------------------------
00E0FD  1               EXP:
00E0FD  1  A9 DC                lda     #<CON_LOG_E
00E0FF  1  A0 E0                ldy     #>CON_LOG_E
00E101  1  20 DD DB             jsr     FMULT
00E104  1  A5 B9                lda     FACEXTENSION
00E106  1  69 50                adc     #$50
00E108  1  90 03                bcc     L3E4E
00E10A  1  20 A4 DD             jsr     INCREMENT_MANTISSA
00E10D  1               L3E4E:
00E10D  1  85 A3                sta     ARGEXTENSION
00E10F  1  20 90 DD             jsr     MAF
00E112  1  A5 AC                lda     FAC
00E114  1  C9 88                cmp     #$88
00E116  1  90 03                bcc     L3E5C
00E118  1               L3E59:
00E118  1  20 72 DC             jsr     OUTOFRNG
00E11B  1               L3E5C:
00E11B  1  20 44 DE             jsr     INT
00E11E  1  A5 5B                lda     CHARAC
00E120  1  18                   clc
00E121  1  69 81                adc     #$81
00E123  1  F0 F3                beq     L3E59
00E125  1  38                   sec
00E126  1  E9 01                sbc     #$01
00E128  1  48                   pha
00E129  1  A2 04                ldx     #BYTES_FP
00E12B  1               L3E6C:
00E12B  1  B5 B3                lda     ARG,x
00E12D  1  B4 AC                ldy     FAC,x
00E12F  1  95 AC                sta     FAC,x
00E131  1  94 B3                sty     ARG,x
00E133  1  CA                   dex
00E134  1  10 F5                bpl     L3E6C
00E136  1  A5 A3                lda     ARGEXTENSION
00E138  1  85 B9                sta     FACEXTENSION
00E13A  1  20 3A DA             jsr     FSUBT
00E13D  1  20 D1 E0             jsr     NEGOP
00E140  1  A9 E0                lda     #<POLY_EXP
00E142  1  A0 E0                ldy     #>POLY_EXP
00E144  1  20 66 E1             jsr     POLYNOMIAL
00E147  1  A9 00                lda     #$00
00E149  1  85 B8                sta     SGNCPR
00E14B  1  68                   pla
00E14C  1  20 57 DC             jsr     ADD_EXPONENTS1
00E14F  1  60                   rts
00E150  1               ; ----------------------------------------------------------------------------
00E150  1               ; ODD POLYNOMIAL SUBROUTINE
00E150  1               ;
00E150  1               ; F(X) = X * P(X^2)
00E150  1               ;
00E150  1               ; WHERE:  X IS VALUE IN FAC
00E150  1               ;	Y,A POINTS AT COEFFICIENT TABLE
00E150  1               ;	FIRST BYTE OF COEFF. TABLE IS N
00E150  1               ;	COEFFICIENTS FOLLOW, HIGHEST POWER FIRST
00E150  1               ;
00E150  1               ; P(X^2) COMPUTED USING NORMAL POLYNOMIAL SUBROUTINE
00E150  1               ; ----------------------------------------------------------------------------
00E150  1               POLYNOMIAL_ODD:
00E150  1  85 BA                sta     STRNG2
00E152  1  84 BB                sty     STRNG2+1
00E154  1  20 50 DD             jsr     STORE_FAC_IN_TEMP1_ROUNDED
00E157  1  A9 A4                lda     #TEMP1X
00E159  1  20 DD DB             jsr     FMULT
00E15C  1  20 6A E1             jsr     SERMAIN
00E15F  1  A9 A4                lda     #TEMP1X
00E161  1  A0 00                ldy     #$00
00E163  1  4C DD DB             jmp     FMULT
00E166  1               ; ----------------------------------------------------------------------------
00E166  1               ; NORMAL POLYNOMIAL SUBROUTINE
00E166  1               ;
00E166  1               ; P(X) = C(0)*X^N + C(1)*X^(N-1) + ... + C(N)
00E166  1               ;
00E166  1               ; WHERE:  X IS VALUE IN FAC
00E166  1               ;	Y,A POINTS AT COEFFICIENT TABLE
00E166  1               ;	FIRST BYTE OF COEFF. TABLE IS N
00E166  1               ;	COEFFICIENTS FOLLOW, HIGHEST POWER FIRST
00E166  1               ; ----------------------------------------------------------------------------
00E166  1               POLYNOMIAL:
00E166  1  85 BA                sta     STRNG2
00E168  1  84 BB                sty     STRNG2+1
00E16A  1               SERMAIN:
00E16A  1  20 4D DD             jsr     STORE_FAC_IN_TEMP2_ROUNDED
00E16D  1  B1 BA                lda     (STRNG2),y
00E16F  1  85 B1                sta     SERLEN
00E171  1  A4 BA                ldy     STRNG2
00E173  1  C8                   iny
00E174  1  98                   tya
00E175  1  D0 02                bne     L3EBA
00E177  1  E6 BB                inc     STRNG2+1
00E179  1               L3EBA:
00E179  1  85 BA                sta     STRNG2
00E17B  1  A4 BB                ldy     STRNG2+1
00E17D  1               L3EBE:
00E17D  1  20 DD DB             jsr     FMULT
00E180  1  A5 BA                lda     STRNG2
00E182  1  A4 BB                ldy     STRNG2+1
00E184  1  18                   clc
00E185  1  69 04                adc     #BYTES_FP
00E187  1  90 01                bcc     L3ECB
00E189  1  C8                   iny
00E18A  1               L3ECB:
00E18A  1  85 BA                sta     STRNG2
00E18C  1  84 BB                sty     STRNG2+1
00E18E  1  20 4E DA             jsr     FADD
00E191  1  A9 A8                lda     #TEMP2
00E193  1  A0 00                ldy     #$00
00E195  1  C6 B1                dec     SERLEN
00E197  1  D0 E4                bne     L3EBE
00E199  1               RTS19:
00E199  1  60                   rts
00E19A  1               ; ----------------------------------------------------------------------------
00E19A  1               ; "RND" FUNCTION
00E19A  1               ; ----------------------------------------------------------------------------
00E19A  1               CONRND1:
00E19A  1  98 35 44 7A          .byte   $98,$35,$44,$7A
00E19E  1               CONRND2:
00E19E  1  68 28 B1 46          .byte   $68,$28,$B1,$46
00E1A2  1               RND:
00E1A2  1  20 AC DD             jsr     SIGN
00E1A5  1  AA                   tax
00E1A6  1  30 18                bmi     L3F01
00E1A8  1  A9 EE                lda     #<RNDSEED
00E1AA  1  A0 00                ldy     #>RNDSEED
00E1AC  1  20 2D DD             jsr     LOAD_FAC_FROM_YA
00E1AF  1  8A                   txa
00E1B0  1  F0 E7                beq     RTS19
00E1B2  1  A9 9A                lda     #<CONRND1
00E1B4  1  A0 E1                ldy     #>CONRND1
00E1B6  1  20 DD DB             jsr     FMULT
00E1B9  1  A9 9E                lda     #<CONRND2
00E1BB  1  A0 E1                ldy     #>CONRND2
00E1BD  1  20 4E DA             jsr     FADD
00E1C0  1               L3F01:
00E1C0  1  A6 AF                ldx     FAC_LAST
00E1C2  1  A5 AD                lda     FAC+1
00E1C4  1  85 AF                sta     FAC_LAST
00E1C6  1  86 AD                stx     FAC+1
00E1C8  1  A9 00                lda     #$00
00E1CA  1  85 B0                sta     FACSIGN
00E1CC  1  A5 AC                lda     FAC
00E1CE  1  85 B9                sta     FACEXTENSION
00E1D0  1  A9 80                lda     #$80
00E1D2  1  85 AC                sta     FAC
00E1D4  1  20 B7 DA             jsr     NORMALIZE_FAC2
00E1D7  1  A2 EE                ldx     #<RNDSEED
00E1D9  1  A0 00                ldy     #>RNDSEED
00E1DB  1               GOMOVMF:
00E1DB  1  4C 5A DD             jmp     STORE_FAC_AT_YX_ROUNDED
00E1DE  1               ; ----------------------------------------------------------------------------
00E1DE  1               ; "COS" FUNCTION
00E1DE  1               ; ----------------------------------------------------------------------------
00E1DE  1               COS:
00E1DE  1  A9 5A                lda     #<CON_PI_HALF
00E1E0  1  A0 E2                ldy     #>CON_PI_HALF
00E1E2  1  20 4E DA             jsr     FADD
00E1E5  1               ; ----------------------------------------------------------------------------
00E1E5  1               ; "SIN" FUNCTION
00E1E5  1               ; ----------------------------------------------------------------------------
00E1E5  1               SIN:
00E1E5  1  20 8D DD             jsr     COPY_FAC_TO_ARG_ROUNDED
00E1E8  1  A9 5E                lda     #<CON_PI_DOUB
00E1EA  1  A0 E2                ldy     #>CON_PI_DOUB
00E1EC  1  A6 B7                ldx     ARGSIGN
00E1EE  1  20 A4 DC             jsr     DIV
00E1F1  1  20 8D DD             jsr     COPY_FAC_TO_ARG_ROUNDED
00E1F4  1  20 44 DE             jsr     INT
00E1F7  1  A9 00                lda     #$00
00E1F9  1  85 B8                sta     STRNG1
00E1FB  1  20 3A DA             jsr     FSUBT
00E1FE  1               ; ----------------------------------------------------------------------------
00E1FE  1               ; (FAC) = ANGLE AS A FRACTION OF A FULL CIRCLE
00E1FE  1               ;
00E1FE  1               ; NOW FOLD THE RANGE INTO A QUARTER CIRCLE
00E1FE  1               ;
00E1FE  1               ; <<< THERE ARE MUCH SIMPLER WAYS TO DO THIS >>>
00E1FE  1               ; ----------------------------------------------------------------------------
00E1FE  1  A9 62                lda     #<QUARTER
00E200  1  A0 E2                ldy     #>QUARTER
00E202  1  20 37 DA             jsr     FSUB
00E205  1  A5 B0                lda     FACSIGN
00E207  1  48                   pha
00E208  1  10 0D                bpl     SIN1
00E20A  1  20 30 DA             jsr     FADDH
00E20D  1  A5 B0                lda     FACSIGN
00E20F  1  30 09                bmi     L3F5B
00E211  1  A5 63                lda     CPRMASK
00E213  1  49 FF                eor     #$FF
00E215  1  85 63                sta     CPRMASK
00E217  1               ; ----------------------------------------------------------------------------
00E217  1               ; IF FALL THRU, RANGE IS 0...1/2
00E217  1               ; IF BRANCH HERE, RANGE IS 0...1/4
00E217  1               ; ----------------------------------------------------------------------------
00E217  1               SIN1:
00E217  1  20 D1 E0             jsr     NEGOP
00E21A  1               ; ----------------------------------------------------------------------------
00E21A  1               ; IF FALL THRU, RANGE IS -1/2...0
00E21A  1               ; IF BRANCH HERE, RANGE IS -1/4...0
00E21A  1               ; ----------------------------------------------------------------------------
00E21A  1               L3F5B:
00E21A  1  A9 62                lda     #<QUARTER
00E21C  1  A0 E2                ldy     #>QUARTER
00E21E  1  20 4E DA             jsr     FADD
00E221  1  68                   pla
00E222  1  10 03                bpl     L3F68
00E224  1  20 D1 E0             jsr     NEGOP
00E227  1               L3F68:
00E227  1  A9 66                lda     #<POLY_SIN
00E229  1  A0 E2                ldy     #>POLY_SIN
00E22B  1  4C 50 E1             jmp     POLYNOMIAL_ODD
00E22E  1               ; ----------------------------------------------------------------------------
00E22E  1               ; "TAN" FUNCTION
00E22E  1               ;
00E22E  1               ; COMPUTE TAN(X) = SIN(X) / COS(X)
00E22E  1               ; ----------------------------------------------------------------------------
00E22E  1               TAN:
00E22E  1  20 50 DD             jsr     STORE_FAC_IN_TEMP1_ROUNDED
00E231  1  A9 00                lda     #$00
00E233  1  85 63                sta     CPRMASK
00E235  1  20 E5 E1             jsr     SIN
00E238  1  A2 9C                ldx     #TEMP3
00E23A  1  A0 00                ldy     #$00
00E23C  1  20 DB E1             jsr     GOMOVMF
00E23F  1  A9 A4                lda     #TEMP1+(5-BYTES_FP)
00E241  1  A0 00                ldy     #$00
00E243  1  20 2D DD             jsr     LOAD_FAC_FROM_YA
00E246  1  A9 00                lda     #$00
00E248  1  85 B0                sta     FACSIGN
00E24A  1  A5 63                lda     CPRMASK
00E24C  1  20 56 E2             jsr     TAN1
00E24F  1  A9 9C                lda     #TEMP3
00E251  1  A0 00                ldy     #$00
00E253  1  4C AC DC             jmp     FDIV
00E256  1               TAN1:
00E256  1  48                   pha
00E257  1  4C 17 E2             jmp     SIN1
00E25A  1               ; ----------------------------------------------------------------------------
00E25A  1               CON_PI_HALF:
00E25A  1  81 49 0F DB          .byte   $81,$49,$0F,$DB
00E25E  1               CON_PI_DOUB:
00E25E  1  83 49 0F DB          .byte   $83,$49,$0F,$DB
00E262  1               QUARTER:
00E262  1  7F 00 00 00          .byte   $7F,$00,$00,$00
00E266  1               POLY_SIN:
00E266  1  04 86 1E D7          .byte   $04,$86,$1E,$D7,$FB,$87,$99,$26
00E26A  1  FB 87 99 26  
00E26E  1  65 87 23 34          .byte   $65,$87,$23,$34,$58,$86,$A5,$5D
00E272  1  58 86 A5 5D  
00E276  1  E1 83 49 0F          .byte   $E1,$83,$49,$0F,$DB
00E27A  1  DB           
00E27B  1               
00E27B  1               ; ----------------------------------------------------------------------------
00E27B  1               ; "ATN" FUNCTION
00E27B  1               ; ----------------------------------------------------------------------------
00E27B  1               ATN:
00E27B  1  A5 B0                lda     FACSIGN
00E27D  1  48                   pha
00E27E  1  10 03                bpl     L3FDB
00E280  1  20 D1 E0             jsr     NEGOP
00E283  1               L3FDB:
00E283  1  A5 AC                lda     FAC
00E285  1  48                   pha
00E286  1  C9 81                cmp     #$81
00E288  1  90 07                bcc     L3FE9
00E28A  1  A9 7E                lda     #<CON_ONE
00E28C  1  A0 DB                ldy     #>CON_ONE
00E28E  1  20 AC DC             jsr     FDIV
00E291  1               ; ----------------------------------------------------------------------------
00E291  1               ; 0 <= X <= 1
00E291  1               ; 0 <= ATN(X) <= PI/8
00E291  1               ; ----------------------------------------------------------------------------
00E291  1               L3FE9:
00E291  1  A9 AB                lda     #<POLY_ATN
00E293  1  A0 E2                ldy     #>POLY_ATN
00E295  1  20 50 E1             jsr     POLYNOMIAL_ODD
00E298  1  68                   pla
00E299  1  C9 81                cmp     #$81
00E29B  1  90 07                bcc     L3FFC
00E29D  1  A9 5A                lda     #<CON_PI_HALF
00E29F  1  A0 E2                ldy     #>CON_PI_HALF
00E2A1  1  20 37 DA             jsr     FSUB
00E2A4  1               L3FFC:
00E2A4  1  68                   pla
00E2A5  1  10 03                bpl     L4002
00E2A7  1  4C D1 E0             jmp     NEGOP
00E2AA  1               L4002:
00E2AA  1  60                   rts
00E2AB  1               ; ----------------------------------------------------------------------------
00E2AB  1               POLY_ATN:
00E2AB  1  08                   .byte   $08
00E2AC  1  78 3A C5 37  		.byte	$78,$3A,$C5,$37
00E2B0  1  7B 83 A2 5C  		.byte	$7B,$83,$A2,$5C
00E2B4  1  7C 2E DD 4D  		.byte	$7C,$2E,$DD,$4D
00E2B8  1  7D 99 B0 1E  		.byte	$7D,$99,$B0,$1E
00E2BC  1  7D 59 ED 24  		.byte	$7D,$59,$ED,$24
00E2C0  1  7E 91 72 00  		.byte	$7E,$91,$72,$00
00E2C4  1  7E 4C B9 73  		.byte	$7E,$4C,$B9,$73
00E2C8  1  7F AA AA 53  		.byte	$7F,$AA,$AA,$53
00E2CC  1  81 00 00 00  		.byte	$81,$00,$00,$00
00E2D0  1               GENERIC_CHRGET:
00E2D0  1  E6 DD                inc     TXTPTR
00E2D2  1  D0 02                bne     GENERIC_CHRGOT
00E2D4  1  E6 DE                inc     TXTPTR+1
00E2D6  1               GENERIC_CHRGOT:
00E2D6  1               GENERIC_TXTPTR = GENERIC_CHRGOT + 1
00E2D6  1  AD 60 EA             lda     $EA60
00E2D9  1  C9 3A                cmp     #$3A
00E2DB  1  B0 0A                bcs     L4058
00E2DD  1               GENERIC_CHRGOT2:
00E2DD  1  C9 20                cmp     #$20
00E2DF  1  F0 EF                beq     GENERIC_CHRGET
00E2E1  1  38                   sec
00E2E2  1  E9 30                sbc     #$30
00E2E4  1  38                   sec
00E2E5  1  E9 D0                sbc     #$D0
00E2E7  1               L4058:
00E2E7  1  60                   rts
00E2E8  1               GENERIC_RNDSEED:
00E2E8  1               ; random number seed
00E2E8  1  80 4F C7 52          .byte   $80,$4F,$C7,$52
00E2EC  1               GENERIC_CHRGET_END:
00E2EC  1               ; ----------------------------------------------------------------------------
00E2EC  1               PR_WRITTEN_BY:
00E2EC  1  A9 30                lda     #<QT_WRITTEN_BY
00E2EE  1  A0 E4                ldy     #>QT_WRITTEN_BY
00E2F0  1  20 A5 CE             jsr     STROUT
00E2F3  1               COLD_START:
00E2F3  1  A2 FF                ldx     #$FF
00E2F5  1  86 88                stx     CURLIN+1
00E2F7  1  9A                   txs
00E2F8  1  A9 F3                lda     #<COLD_START
00E2FA  1  A0 E2                ldy     #>COLD_START
00E2FC  1  85 08                sta     GORESTART+1
00E2FE  1  84 09                sty     GORESTART+2
00E300  1  85 0B                sta     GOSTROUT+1
00E302  1  84 0C                sty     GOSTROUT+2
00E304  1  A9 E7                lda     #<AYINT
00E306  1  A0 D3                ldy     #>AYINT
00E308  1  85 0D                sta     GOAYINT
00E30A  1  84 0E                sty     GOAYINT+1
00E30C  1  A9 A3                lda     #<GIVAYF
00E30E  1  A0 D5                ldy     #>GIVAYF
00E310  1  85 0F                sta     GOGIVEAYF
00E312  1  84 10                sty     GOGIVEAYF+1
00E314  1  A9 4C                lda     #$4C
00E316  1  85 07                sta     GORESTART
00E318  1  85 0A                sta     GOSTROUT
00E31A  1  85 A1                sta     JMPADRS
00E31C  1  85 0A                sta     USR
00E31E  1  A9 6A                lda     #<IQERR
00E320  1  A0 D4                ldy     #>IQERR
00E322  1  85 0B                sta     USR+1
00E324  1  84 0C                sty     USR+2
00E326  1  A9 48                lda     #WIDTH
00E328  1  85 0F                sta     Z17
00E32A  1  A9 38                lda     #WIDTH2
00E32C  1  85 10                sta     Z18
00E32E  1  A2 1C                ldx     #GENERIC_CHRGET_END-GENERIC_CHRGET
00E330  1               L4098:
00E330  1  BD CF E2             lda     GENERIC_CHRGET-1,x
00E333  1  95 D5                sta     CHRGET-1,x
00E335  1  CA                   dex
00E336  1  D0 F8                bne     L4098
00E338  1  8A                   txa
00E339  1  85 B2                sta     SHIFTSIGNEXT
00E33B  1  85 67                sta     LASTPT+1
00E33D  1  85 0D                sta     Z15
00E33F  1  85 0E                sta     POSX
00E341  1  48                   pha
00E342  1  85 64                sta     Z14
00E344  1  A9 03                lda     #$03
00E346  1  85 A0                sta     DSCLEN
00E348  1  A9 2C                lda     #$2C
00E34A  1  85 12                sta     LINNUM+1
00E34C  1  20 4E CE             jsr     CRDO
00E34F  1  A2 68                ldx     #TEMPST
00E351  1  86 65                stx     TEMPPT
00E353  1  A9 54                lda     #<QT_MEMORY_SIZE
00E355  1  A0 E4                ldy     #>QT_MEMORY_SIZE
00E357  1  20 A5 CE             jsr     STROUT
00E35A  1  20 28 CF             jsr     NXIN
00E35D  1  86 DD                stx     TXTPTR
00E35F  1  84 DE                sty     TXTPTR+1
00E361  1  20 D6 00             jsr     CHRGET
00E364  1  C9 41                cmp     #$41
00E366  1  F0 84                beq     PR_WRITTEN_BY
00E368  1  A8                   tay
00E369  1  D0 21                bne     L40EE
00E36B  1  A9 00                lda     #<RAMSTART2
00E36D  1  A0 06                ldy     #>RAMSTART2
00E36F  1  85 11                sta     LINNUM
00E371  1  84 12                sty     LINNUM+1
00E373  1  A0 00                ldy     #$00
00E375  1               L40D7:
00E375  1  E6 11                inc     LINNUM
00E377  1  D0 02                bne     L40DD
00E379  1  E6 12                inc     LINNUM+1
00E37B  1               L40DD:
00E37B  1  A9 92                lda     #$92 ; 10010010 / 00100100
00E37D  1  91 11                sta     (LINNUM),y
00E37F  1  D1 11                cmp     (LINNUM),y
00E381  1  D0 15                bne     L40FA
00E383  1  0A                   asl     a
00E384  1  91 11                sta     (LINNUM),y
00E386  1  D1 11                cmp     (LINNUM),y
00E388  1  F0 EB                beq     L40D7; old: faster
00E38A  1  D0 0C                bne     L40FA
00E38C  1               L40EE:
00E38C  1  20 DC 00             jsr     CHRGOT
00E38F  1  20 61 CD             jsr     LINGET
00E392  1  A8                   tay
00E393  1  F0 03                beq     L40FA
00E395  1  4C EE D1             jmp     SYNERR
00E398  1               L40FA:
00E398  1  A5 11                lda     LINNUM
00E39A  1  A4 12                ldy     LINNUM+1
00E39C  1  85 85                sta     MEMSIZ
00E39E  1  84 86                sty     MEMSIZ+1
00E3A0  1  85 81                sta     FRETOP
00E3A2  1  84 82                sty     FRETOP+1
00E3A4  1               L4106:
00E3A4  1  A9 62                lda     #<QT_TERMINAL_WIDTH
00E3A6  1  A0 E4                ldy     #>QT_TERMINAL_WIDTH
00E3A8  1  20 A5 CE             jsr     STROUT
00E3AB  1  20 28 CF             jsr     NXIN
00E3AE  1  86 DD                stx     TXTPTR
00E3B0  1  84 DE                sty     TXTPTR+1
00E3B2  1  20 D6 00             jsr     CHRGET
00E3B5  1  A8                   tay
00E3B6  1  F0 1C                beq     L4136
00E3B8  1  20 61 CD             jsr     LINGET
00E3BB  1  A5 12                lda     LINNUM+1
00E3BD  1  D0 E5                bne     L4106
00E3BF  1  A5 11                lda     LINNUM
00E3C1  1  C9 10                cmp     #$10
00E3C3  1  90 DF                bcc     L4106
00E3C5  1  85 0F                sta     Z17
00E3C7  1               L4129:
00E3C7  1  E9 0E                sbc     #$0E
00E3C9  1  B0 FC                bcs     L4129
00E3CB  1  49 FF                eor     #$FF
00E3CD  1  E9 0C                sbc     #$0C
00E3CF  1  18                   clc
00E3D0  1  65 0F                adc     Z17
00E3D2  1  85 10                sta     Z18
00E3D4  1               L4136:
00E3D4  1  A2 00                ldx     #<RAMSTART2
00E3D6  1  A0 06                ldy     #>RAMSTART2
00E3D8  1  86 79                stx     TXTTAB
00E3DA  1  84 7A                sty     TXTTAB+1
00E3DC  1  A0 00                ldy     #$00
00E3DE  1  98                   tya
00E3DF  1  91 79                sta     (TXTTAB),y
00E3E1  1  E6 79                inc     TXTTAB
00E3E3  1  D0 02                bne     L4192
00E3E5  1  E6 7A                inc     TXTTAB+1
00E3E7  1               L4192:
00E3E7  1  A5 79                lda     TXTTAB
00E3E9  1  A4 7A                ldy     TXTTAB+1
00E3EB  1  20 0D C8             jsr     REASON
00E3EE  1  20 4E CE             jsr     CRDO
00E3F1  1  A5 85                lda     MEMSIZ
00E3F3  1  38                   sec
00E3F4  1  E5 79                sbc     TXTTAB
00E3F6  1  AA                   tax
00E3F7  1  A5 86                lda     MEMSIZ+1
00E3F9  1  E5 7A                sbc     TXTTAB+1
00E3FB  1  20 40 DF             jsr     LINPRT
00E3FE  1  A9 71                lda     #<QT_BYTES_FREE
00E400  1  A0 E4                ldy     #>QT_BYTES_FREE
00E402  1  20 A5 CE             jsr     STROUT
00E405  1  A9 A5                lda     #<STROUT
00E407  1  A0 CE                ldy     #>STROUT
00E409  1  85 0B                sta     GOSTROUT+1
00E40B  1  84 0C                sty     GOSTROUT+2
00E40D  1  20 51 CA             jsr     SCRTCH
00E410  1  A9 62                lda     #<RESTART
00E412  1  A0 C8                ldy     #>RESTART
00E414  1  85 08                sta     GORESTART+1
00E416  1  84 09                sty     GORESTART+2
00E418  1  6C 08 00             jmp     (GORESTART+1)
00E41B  1               
00E41B  1               ; OSI is compiled for ROM, but includes
00E41B  1               ; this unused string
00E41B  1  57 41 4E 54          .byte   "WANT SIN-COS-TAN-ATN"
00E41F  1  20 53 49 4E  
00E423  1  2D 43 4F 53  
00E42F  1  00                   .byte   0
00E430  1               QT_WRITTEN_BY:
00E430  1  0D 0A 0C             .byte   CR,LF,$0C ; FORM FEED
00E433  1  57 52 49 54          .byte   "WRITTEN BY RICHARD W. WEILAND."
00E437  1  54 45 4E 20  
00E43B  1  42 59 20 52  
00E451  1  0D 0A 00             .byte   CR,LF,0
00E454  1               QT_MEMORY_SIZE:
00E454  1  02 5F 4D 45          .byte   $02,"_MEMORY SIZE"
00E458  1  4D 4F 52 59  
00E45C  1  20 53 49 5A  
00E461  1  00                   .byte   0
00E462  1               QT_TERMINAL_WIDTH:
00E462  1  54 45 52 4D          .byte   "TERMINAL WIDTH"
00E466  1  49 4E 41 4C  
00E46A  1  20 57 49 44  
00E470  1  00                   .byte   0
00E471  1               QT_BYTES_FREE:
00E471  1  20 42 59 54          .byte   " BYTES FREE"
00E475  1  45 53 20 46  
00E479  1  52 45 45     
00E47C  1  0D 0A 0D 0A          .byte   CR,LF,CR,LF
00E480  1  4F 53 49 20          .byte   "OSI 6502 BASIC VERSION 1.0 REV 3.2"
00E484  1  36 35 30 32  
00E488  1  20 42 41 53  
00E4A2  1  0D 0A                .byte   CR,LF
00E4A4  1  43 4F 50 59          .byte   "COPYRIGHT 1977 BY MICROSOFT CO."
00E4A8  1  52 49 47 48  
00E4AC  1  54 20 31 39  
00E4C3  1  0D 0A 00             .byte   CR,LF,0
00E4C6  1               
00E4C6  1               XPL:
00E4C6  1  0C 1B 5B 31  	.byte	$0C, $1B, "[12;26H"
00E4CA  1  32 3B 32 36  
00E4CE  1  48           
00E4CF  1  20 58 58 20  	.byte	    " XX     XX  PPPP   LL     ",CR,LF
00E4D3  1  20 20 20 20  
00E4D7  1  58 58 20 20  
00E4EB  1  1B 5B 31 33  	.byte	$1B, "[13;26H"
00E4EF  1  3B 32 36 48  
00E4F3  1  20 20 58 58  	.byte	    "  XX   XX   PP PP  LL     ",CR,LF
00E4F7  1  20 20 20 58  
00E4FB  1  58 20 20 20  
00E50F  1  1B 5B 31 34  	.byte	$1B, "[14;26H"
00E513  1  3B 32 36 48  
00E517  1  20 20 20 58  	.byte	    "   XXXXX    PPPPP  LL     ",CR,LF
00E51B  1  58 58 58 58  
00E51F  1  20 20 20 20  
00E533  1  1B 5B 31 35  	.byte	$1B, "[15;26H"
00E537  1  3B 32 36 48  
00E53B  1  20 20 58 58  	.byte	    "  XX   XX   PP     LL  32 ",CR,LF
00E53F  1  20 20 20 58  
00E543  1  58 20 20 20  
00E557  1  1B 5B 31 36  	.byte	$1B, "[16;26H"
00E55B  1  3B 32 36 48  
00E55F  1  20 58 58 20  	.byte	    " XX     XX  PP     LLLLLLL",CR,LF
00E563  1  20 20 20 20  
00E567  1  58 58 20 20  
00E57B  1  00           	.byte	$00
00E57C  1               
00E57C  1               ; XPL-32 LOAD/SAVE ROUTINES =================================================================
00E57C  1               ; BY L. OPPENHEIMER 2021/2022 ===============================================================
00E57C  1               
00E57C  1               SMCHECK:
00E57C  1  20 F2 C6     	JSR	rxpoll
00E57F  1  AD 00 80     	LDA	ACIAData
00E582  1  85 BC        	STA	XYLODSAV2	; save to tmp var
00E584  1  C9 53        	cmp	#'S'		; If "s" is pressed
00E586  1  F0 09        	BEQ	SDET		; then use serial
00E588  1  A5 BC        	LDA	XYLODSAV2	; load tmp var
00E58A  1  C9 4D        	cmp	#'M'		; If "m" is pressed
00E58C  1  F0 05        	BEQ	MDET		; then use a memory card
00E58E  1  4C 7C E5     	JMP	SMCHECK
00E591  1               SDET:
00E591  1  38           	sec
00E592  1  60           	rts
00E593  1               MDET:
00E593  1  18           	clc
00E594  1  60           	rts
00E595  1               
00E595  1               LOAD:
00E595  1  48           	pha
00E596  1  8A           	txa
00E597  1  48           	pha 	; save registers
00E598  1  98           	tya
00E599  1  48           	pha
00E59A  1  20 00 E7     	jsr 	WRITE_TRANSFER_MSG
00E59D  1  20 7C E5     	jsr	SMCHECK
00E5A0  1  B0 03        	bcs	SERIAL_LOAD
00E5A2  1  4C F4 E5     	jmp 	MEMORY_LOAD
00E5A5  1               SERIAL_LOAD:
00E5A5  1  A2 BA        	ldx	#<SERIAL_MSG
00E5A7  1  A0 E7        	ldy	#>SERIAL_MSG
00E5A9  1  20 0E C7     	jsr	w_acia_full
00E5AC  1  20 F2 C6     	jsr	rxpoll
00E5AF  1               receive_serial:
00E5AF  1  A2 00          	ldx 	#0
00E5B1  1               rcloopadd:
00E5B1  1  A9 01          	lda 	#$01
00E5B3  1  85 BC          	sta 	XYLODSAV2
00E5B5  1  A9 06        	lda	#$06
00E5B7  1  85 BD        	sta	XYLODSAV2+1
00E5B9  1  A0 00          	ldy 	#0
00E5BB  1               rsl:
00E5BB  1  20 F2 C6       	jsr 	rxpoll
00E5BE  1  AD 00 80       	lda 	ACIAData
00E5C1  1  91 BC          	sta 	(XYLODSAV2),Y
00E5C3  1  F0 10        	beq	rseof
00E5C5  1               rsnot:
00E5C5  1  A9 2E          	lda 	#$2e		; for debug
00E5C7  1  20 65 FF       	jsr 	MONCOUT		;
00E5CA  1  E6 BC        	inc	XYLODSAV2
00E5CC  1  A5 BC        	lda	XYLODSAV2
00E5CE  1  F0 02        	beq	ssl
00E5D0  1  E6 BD        	inc	XYLODSAV2+1
00E5D2  1               ssl:
00E5D2  1  4C BB E5     	jmp rsl
00E5D5  1               rseof:
00E5D5  1  A0 01        	ldy	#1
00E5D7  1  20 F2 C6     	jsr	rxpoll
00E5DA  1  91 BC        	sta	(XYLODSAV2),Y
00E5DC  1  D0 E7        	bne	rsnot
00E5DE  1  A0 02        	ldy	#2
00E5E0  1  20 F2 C6     	jsr	rxpoll
00E5E3  1  91 BC        	sta	(XYLODSAV2),Y
00E5E5  1  D0 DE        	bne	rsnot
00E5E7  1               
00E5E7  1               sdone:
00E5E7  1  A2 D4          	ldx	#<LOAD_DONE
00E5E9  1  A0 E7        	ldy	#>LOAD_DONE
00E5EB  1  20 0E C7     	jsr	w_acia_full
00E5EE  1               stop_sl:
00E5EE  1  68             	pla
00E5EF  1  A8           	tay
00E5F0  1  68             	pla
00E5F1  1  AA           	tax
00E5F2  1  68             	pla
00E5F3  1  60             	rts
00E5F4  1               
00E5F4  1               MEMORY_LOAD:
00E5F4  1  20 74 E6     	jsr	rootsetup
00E5F7  1  20 BA E6     	jsr	list
00E5FA  1  20 1C E6     	jsr	type
00E5FD  1               
00E5FD  1  A2 05        	ldx #<lodmsg
00E5FF  1  A0 E8         	ldy #>lodmsg
00E601  1  20 0E C7       	jsr w_acia_full
00E604  1  A9 01          	lda #$01
00E606  1  85 CC          	sta fat32_address
00E608  1  A9 06          	lda #$06
00E60A  1  85 CD          	sta fat32_address+1
00E60C  1  20 66 C6       	jsr fat32_file_read  ; Yes. It is finally time to read the file.
00E60F  1  A2 D4          	ldx #<LOAD_DONE
00E611  1  A0 E7          	ldy #>LOAD_DONE
00E613  1  20 0E C7       	jsr w_acia_full
00E616  1  68             	pla
00E617  1  A8             	tay
00E618  1  68             	pla
00E619  1  AA             	tax
00E61A  1  68             	pla
00E61B  1  60             	rts
00E61C  1               
00E61C  1               type:			; typing a filename
00E61C  1  A2 00          ldx	#0
00E61E  1               lodbufloop:
00E61E  1  BD 2F E8       lda	loadbuf,x	; copy the buffer into ram
00E621  1  9D F2 7F       sta	sdbuffer,x	; so we can use it
00E624  1  E8             inx
00E625  1  E0 0C          cpx	#12
00E627  1  D0 F5          bne	lodbufloop
00E629  1               
00E629  1  A2 22          ldx #<typemsg		; Filename:_
00E62B  1  A0 E8          ldy #>typemsg
00E62D  1  20 0E C7       jsr w_acia_full
00E630  1  A2 00          ldx #0
00E632  1  A9 20          lda #' '
00E634  1  85 00          sta charbuffer
00E636  1               
00E636  1               typeloop:		; loop to type filenames
00E636  1  20 F2 C6       jsr rxpoll		; read a charactor
00E639  1  AD 00 80       lda ACIAData
00E63C  1  20 FA C6       jsr print_chara	; echo back
00E63F  1  85 00          sta charbuffer	; store
00E641  1  C9 0D          cmp #$0d		; enter?
00E643  1  F0 10          beq exitloop		; if so, load
00E645  1  A5 00          lda charbuffer
00E647  1  C9 08          cmp #$08		; backspace??
00E649  1  F0 20          beq backspace		; then go there
00E64B  1  A5 00          lda charbuffer	; now store it in the filename buffer
00E64D  1  9D F2 7F       sta sdbuffer,x
00E650  1  E8             inx
00E651  1  E0 08          cpx #8		; no more then *8 characters*
00E653  1  D0 E1          bne typeloop
00E655  1               exitloop:
00E655  1  20 CA C6       jsr crlf
00E658  1  20 74 E6       jsr rootsetup
00E65B  1  A0 7F          ldy #>sdbuffer
00E65D  1  A2 F2          ldx #<sdbuffer
00E65F  1  20 06 C6       jsr fat32_finddirent
00E662  1  90 03          bcc foundfile
00E664  1                 ; File not found
00E664  1  4C 87 E6       jmp transfer_error
00E667  1               foundfile:
00E667  1                 ; Open file
00E667  1  20 9D C5       jsr fat32_opendirent
00E66A  1                 ; BUG I dont think this works with saving... will find out later.
00E66A  1  60             rts
00E66B  1               backspace:
00E66B  1  CA             dex
00E66C  1  A9 20          lda #$20
00E66E  1  9D 2F E8       sta loadbuf,x
00E671  1  4C 36 E6       jmp typeloop
00E674  1               
00E674  1               rootsetup:		; setup <ROOT>
00E674  1               
00E674  1                 ; Open root directory
00E674  1  20 85 C5       jsr fat32_openroot
00E677  1               
00E677  1                 ; Find the subdirectory by name
00E677  1  A2 78          ldx #<dirname
00E679  1  A0 C7          ldy #>dirname
00E67B  1  20 06 C6       jsr fat32_finddirent
00E67E  1  90 03          bcc foundsub
00E680  1               
00E680  1                 ; Subdirectory not found
00E680  1  4C 87 E6       jmp transfer_error
00E683  1               
00E683  1               foundsub:
00E683  1               
00E683  1                 ; Open subdirectory
00E683  1  20 9D C5       jsr fat32_opendirent	; open folder
00E686  1               
00E686  1  60             rts			; done
00E687  1               
00E687  1               transfer_error:
00E687  1  A0 C7          ldy #>errormsg
00E689  1  A2 84          ldx #<errormsg
00E68B  1  20 0E C7       jsr w_acia_full
00E68E  1  20 31 C7       jsr error_sound
00E691  1  4C EE E5       jmp stop_sl
00E694  1               
00E694  1               other:
00E694  1  20 EA C6       jsr txpoll		; Write a letter of the filename currently being read
00E697  1  B1 01          lda (zp_sd_address),y
00E699  1  8D 00 80       sta ACIAData
00E69C  1  C8             iny
00E69D  1  60             rts
00E69E  1               
00E69E  1               listmsg:
00E69E  1  4C 69 73 74    .byte "Listing Of SDCARD/folder:",CR,LF,0
00E6A2  1  69 6E 67 20  
00E6A6  1  4F 66 20 53  
00E6BA  1               
00E6BA  1               list:			; list file dir
00E6BA  1  A2 9E          ldx #<listmsg
00E6BC  1  A0 E6          ldy #>listmsg
00E6BE  1  20 0E C7       jsr w_acia_full
00E6C1  1               listing:
00E6C1  1  20 D0 C5       jsr fat32_readdirent	; files?
00E6C4  1  B0 36          bcs nofiles
00E6C6  1  29 40          and #$40
00E6C8  1  F0 05          beq arc
00E6CA  1               dir:
00E6CA  1  A9 44          lda #'D'		; directorys show up as
00E6CC  1  4C D1 E6       jmp ebut		; D YOURFILENAME     D TEST      D FOLDER  ...Etc
00E6CF  1               arc:
00E6CF  1  A9 46          lda #'F'		; files show up as
00E6D1  1               ebut:			; F TEST.XPL         F MUSIC.XPL        F FILE.BIN  ...Etc
00E6D1  1  20 FA C6       jsr print_chara	; f or d
00E6D4  1  A9 20          lda #$20		; space
00E6D6  1  20 FA C6       jsr print_chara
00E6D9  1                 ; At this point, we know that there are no files, files, or a suddir
00E6D9  1                 ; Now for the name
00E6D9  1  A0 00          ldy #0
00E6DB  1               nameloop:
00E6DB  1  C0 08          cpy #8
00E6DD  1  F0 06          beq dot
00E6DF  1  20 94 E6       jsr other
00E6E2  1  4C DB E6       jmp nameloop
00E6E5  1               dot:
00E6E5  1  A9 2E          lda #'.'		; shows a file extention
00E6E7  1  20 FA C6       jsr print_chara
00E6EA  1               lopii:
00E6EA  1  C0 0B          cpy #11
00E6EC  1  F0 06          beq endthat		; print 3-letter file extention
00E6EE  1  20 94 E6       jsr other
00E6F1  1  4C EA E6       jmp lopii
00E6F4  1               endthat:
00E6F4  1  A9 09          lda #$09 ; Tab
00E6F6  1  20 FA C6       jsr print_chara	; tab
00E6F9  1  4C C1 E6       jmp listing 		; go again (next file if there are any left)
00E6FC  1               nofiles:		; if not,
00E6FC  1               endlist:		; exit listing code
00E6FC  1  20 CA C6       jsr crlf
00E6FF  1  60             rts
00E700  1               
00E700  1               WRITE_TRANSFER_MSG:
00E700  1  A2 90          	LDX 	#<TRANSFER_MSG
00E702  1  A0 E7        	LDY	#>TRANSFER_MSG
00E704  1  20 0E C7     	JSR	w_acia_full
00E707  1  60             	RTS
00E708  1               
00E708  1               SAVE:				; BUG serial save dont work
00E708  1  48           	PHA
00E709  1  8A           	TXA
00E70A  1  48           	PHA			; Push registers on the stack
00E70B  1  98           	TYA
00E70C  1  48           	PHA
00E70D  1  20 00 E7     	JSR	WRITE_TRANSFER_MSG
00E710  1  20 7C E5     	JSR	SMCHECK
00E713  1  B0 03        	bcs	SERIAL_SAVE
00E715  1  4C 68 E7     	jmp	MEMORY_SAVE
00E718  1               SERIAL_SAVE:
00E718  1  A2 BA        	LDX	#<SERIAL_MSG
00E71A  1  A0 E7        	LDY	#>SERIAL_MSG
00E71C  1  20 0E C7     	jsr	w_acia_full
00E71F  1  20 F2 C6     	jsr	rxpoll
00E722  1  A2 00        	LDX	#0
00E724  1  A0 00        	LDY	#0
00E726  1  A9 01        	LDA	#$01
00E728  1  85 BC        	STA	XYLODSAV2	; set to start of RAM
00E72A  1  A9 06        	LDA	#$06
00E72C  1  85 BD        	STA	XYLODSAV2+1
00E72E  1               	; now for the loop
00E72E  1               SAVELOOP:
00E72E  1  B1 BC        	LDA	(XYLODSAV2),Y	; save out a byte
00E730  1  48           	PHA
00E731  1  20 65 FF     	JSR	MONCOUT
00E734  1  68           	PLA
00E735  1  F0 0B        	BEQ	SAVE_EOF_CHECK
00E737  1               notit:
00E737  1  E6 BC        	INC	XYLODSAV2
00E739  1  F0 02        	BEQ	SAVE_NOT16BIT
00E73B  1  E6 BD        	INC	XYLODSAV2+1
00E73D  1               SAVE_NOT16BIT:
00E73D  1  20 84 FF     	JSR	MONISCNTC	; check if control+c is pressed.
00E740  1  90 EC        	BCC	SAVELOOP	; if not, then send the next byte
00E742  1               SAVE_EOF_CHECK:			; if so, then send break error message
00E742  1  A0 01        	ldy	#1
00E744  1  B1 BC        	lda	(XYLODSAV2),Y	; End Of File? (NULL followed by another NULL)
00E746  1  D0 EF        	bne	notit
00E748  1  A0 02        	ldy	#2
00E74A  1  B1 BC        	lda	(XYLODSAV2),Y	; by a n o t h e r N U L L
00E74C  1  D0 E9        	bne	notit
00E74E  1  4C 62 E7     	jmp	END_SERIAL_SAVE
00E751  1               SAVE_CUT:
00E751  1  A2 F8        	ldx	#<ABORT_MSG
00E753  1  A0 E7        	ldy	#>ABORT_MSG
00E755  1  20 0E C7     	jsr	w_acia_full
00E758  1  4C 62 E7     	jmp	END_SERIAL_SAVE
00E75B  1               SAVE_END_WRITE:
00E75B  1  A2 E5        	ldx	#<SAVE_DONE
00E75D  1  A0 E7        	ldy	#>SAVE_DONE
00E75F  1  20 0E C7     	jsr	w_acia_full
00E762  1               END_SERIAL_SAVE:
00E762  1  68           	PLA
00E763  1  A8           	TAY
00E764  1  68           	PLA
00E765  1  AA           	TAX			; pull registers off stack
00E766  1  68           	PLA
00E767  1  60           	RTS
00E768  1               
00E768  1               MEMORY_SAVE:
00E768  1  20 74 E6     	jsr rootsetup
00E76B  1  20 BA E6     	jsr list
00E76E  1  20 1C E6     	jsr type
00E771  1  A2 14        	ldx #<savmsg
00E773  1  A0 E8         	ldy #>savmsg
00E775  1  20 0E C7       	jsr w_acia_full
00E778  1  A9 01          	lda #$01
00E77A  1  85 CC          	sta fat32_address
00E77C  1  A9 06          	lda #$06
00E77E  1  85 CD          	sta fat32_address+1
00E780  1  20 86 C6       	jsr fat32_file_write  ; Yes. It is finally time to save the file.
00E783  1               	; BUG theres a bunch on cluster, dirent and file creation stuff i will figure out soon, idk...
00E783  1  A2 E5          	ldx #<SAVE_DONE
00E785  1  A0 E7          	ldy #>SAVE_DONE
00E787  1  20 0E C7       	jsr w_acia_full
00E78A  1  68           	PLA
00E78B  1  A8           	TAY
00E78C  1  68           	PLA
00E78D  1  AA           	TAX
00E78E  1  68           	PLA
00E78F  1  60           	RTS
00E790  1               
00E790  1               TRANSFER_MSG:
00E790  1  53 65 72 69    .byte	"Serial [S] or Memory Card [M] Transfer?",CR,LF,$00
00E794  1  61 6C 20 5B  
00E798  1  53 5D 20 6F  
00E7BA  1               SERIAL_MSG:
00E7BA  1  50 72 65 73    .byte	"Press Any Key To Begin.",CR,LF,$00
00E7BE  1  73 20 41 6E  
00E7C2  1  79 20 4B 65  
00E7D4  1               LOAD_DONE:
00E7D4  1  4C 6F 61 64    .byte	"Load Complete.",CR,LF,$00
00E7D8  1  20 43 6F 6D  
00E7DC  1  70 6C 65 74  
00E7E5  1               SAVE_DONE:
00E7E5  1  0D 0A 53 61    .byte	CR,LF,"Save Complete.",CR,LF,$00
00E7E9  1  76 65 20 43  
00E7ED  1  6F 6D 70 6C  
00E7F8  1               ABORT_MSG:
00E7F8  1  0D 0A 41 62    .byte	CR,LF,"Aborted.",CR,LF,0
00E7FC  1  6F 72 74 65  
00E800  1  64 2E 0D 0A  
00E805  1               lodmsg:
00E805  1  0D 0A 4C 6F    .byte $0d, $0a, "Loading...", $0d, $0a, $00
00E809  1  61 64 69 6E  
00E80D  1  67 2E 2E 2E  
00E814  1               savmsg:
00E814  1  0D 0A 53 61    .byte $0d, $0a, "Saving...", $0d, $0a, $00
00E818  1  76 69 6E 67  
00E81C  1  2E 2E 2E 0D  
00E822  1               typemsg:
00E822  1  46 69 6C 65    .byte "Filename: ", $02, "_", $00
00E826  1  6E 61 6D 65  
00E82A  1  3A 20 02 5F  
00E82F  1               loadbuf:
00E82F  1  20 20 20 20    .byte $20, $20, $20, $20, $20, $20, $20, $20
00E833  1  20 20 20 20  
00E837  1  42 41 53       .byte "BAS"
00E83A  1               fat_error:
00E83A  1  46 41 54 33    .byte "FAT32 Initialization Failed at Stage"
00E83E  1  32 20 49 6E  
00E842  1  69 74 69 61  
00E85E  1               sd_msg:
00E85E  1  0E 14 0F 12    .byte	$0e, 20, $0f, 18
00E862  1  02 20          .byte $02, $20
00E864  1  49 6E 69 74    .byte "Initializing SD Card...",0
00E868  1  69 61 6C 69  
00E86C  1  7A 69 6E 67  
00E87C  1               
00E87C  1               
00E87C  1               ; STARTUP AND SERIAL I/O ROUTINES ===========================================================
00E87C  1               ; BY G. SEARLE 2013 =========================================================================
00E87C  1               ACIA := $8000
00E87C  1               ACIAControl := ACIA+3
00E87C  1               ACIACommand := ACIA+2
00E87C  1               ACIAStatus := ACIA+1
00E87C  1               ACIAData := ACIA+0
00E87C  1               
00E87C  1               .segment "IOHANDLER"
000000r 1               .org $FF00
00FF00  1               Reset:
00FF00  1  A2 FC        	LDX     #STACK_TOP
00FF02  1  9A           	TXS
00FF03  1               
00FF03  1  A9 0B        	LDA	#$0B
00FF05  1  8D 02 80     	STA	ACIACommand
00FF08  1  A9 1F        	LDA 	#$1F		; Set ACIA baud rate, word size and Rx interrupt (to control RTS)
00FF0A  1  8D 03 80     	STA	ACIAControl
00FF0D  1               
00FF0D  1  A2 C6        	LDX	#<XPL
00FF0F  1  A0 E4        	LDY	#>XPL
00FF11  1  20 0E C7     	JSR	w_acia_full
00FF14  1               
00FF14  1               ;NextStart:
00FF14  1               ;	LDY	#$FF
00FF14  1               ;InnerDelayLoop:
00FF14  1               ;	LDX	#$FF
00FF14  1               ;Wee:
00FF14  1               ;	NOP
00FF14  1               ;	NOP
00FF14  1               ;	NOP
00FF14  1               ;	NOP
00FF14  1               ;	NOP
00FF14  1               ;	NOP
00FF14  1               ;	DEX
00FF14  1               ;	BNE Wee
00FF14  1               ;
00FF14  1               ;	DEY
00FF14  1               ;	BNE InnerDelayLoop
00FF14  1               
00FF14  1  A2 5E        	ldx #<sd_msg
00FF16  1  A0 E8        	ldy #>sd_msg
00FF18  1  20 0E C7     	jsr w_acia_full
00FF1B  1               
00FF1B  1  20 A1 C1      	jsr via_init
00FF1E  1  20 B6 C1     	jsr sd_init
00FF21  1  20 83 C3     	jsr fat32_init
00FF24  1  90 1D        	bcc dispstart
00FF26  1               
00FF26  1               	; Error during FAT32 initialization
00FF26  1               
00FF26  1  20 DF C6     	jsr cleardisplay
00FF29  1  A0 E8        	ldy #>fat_error
00FF2B  1  A2 3A        	ldx #<fat_error
00FF2D  1  20 0E C7     	jsr w_acia_full
00FF30  1  A5 D2        	lda fat32_errorstage
00FF32  1  20 B3 C6     	jsr print_hex_acia
00FF35  1  A9 21        	lda #'!'
00FF37  1  20 FA C6     	jsr print_chara
00FF3A  1  20 CA C6     	jsr crlf
00FF3D  1  4C 43 FF     	jmp dispstart
00FF40  1               JMPToReset:
00FF40  1  4C 00 FF     	jmp	Reset
00FF43  1               dispstart:
00FF43  1               ; Display startup message
00FF43  1  A0 00        	LDY #0
00FF45  1               ShowStartMsg:
00FF45  1  B9 91 FF     	LDA	StartupMessage,Y
00FF48  1  F0 06        	BEQ	WaitForKeypress
00FF4A  1  20 65 FF     	JSR	MONCOUT
00FF4D  1  C8           	INY
00FF4E  1  D0 F5        	BNE	ShowStartMsg
00FF50  1               
00FF50  1               ; Wait for a cold/warm start selection
00FF50  1               WaitForKeypress:
00FF50  1  20 74 FF     	JSR	MONRDKEY
00FF53  1  90 FB        	BCC	WaitForKeypress
00FF55  1               
00FF55  1  29 DF        	AND	#$DF			; Make upper case
00FF57  1  C9 57        	CMP	#'W'			; compare with [W]arm start
00FF59  1  F0 07        	BEQ	WarmStart
00FF5B  1               
00FF5B  1  C9 43        	CMP	#'C'			; compare with [C]old start
00FF5D  1  D0 E1        	BNE	JMPToReset
00FF5F  1               
00FF5F  1  4C F3 E2     	JMP	COLD_START	; BASIC cold start
00FF62  1               
00FF62  1               WarmStart:
00FF62  1  4C 62 C8     	JMP	RESTART		; BASIC warm start
00FF65  1               
00FF65  1               MONCOUT:
00FF65  1  48           	PHA
00FF66  1               SerialOutWait:
00FF66  1  AD 01 80     	LDA	ACIAStatus
00FF69  1  29 10        	AND	#$10
00FF6B  1  C9 10        	CMP	#$10
00FF6D  1  D0 F7        	BNE	SerialOutWait
00FF6F  1  68           	PLA
00FF70  1  8D 00 80     	STA	ACIAData
00FF73  1  60           	RTS
00FF74  1               
00FF74  1               MONRDKEY:
00FF74  1  AD 01 80     	LDA	ACIAStatus
00FF77  1  29 08        	AND	#$08
00FF79  1  C9 08        	CMP	#$08
00FF7B  1  D0 05        	BNE	NoDataIn
00FF7D  1  AD 00 80     	LDA	ACIAData
00FF80  1  38           	SEC		; Carry set if key available
00FF81  1  60           	RTS
00FF82  1               NoDataIn:
00FF82  1  18           	CLC		; Carry clear if no key pressed
00FF83  1  60           	RTS
00FF84  1               
00FF84  1               MONISCNTC:
00FF84  1  20 74 FF     	JSR	MONRDKEY
00FF87  1  90 06        	BCC	NotCTRLC ; If no key pressed then exit
00FF89  1  C9 03        	CMP	#3
00FF8B  1  D0 02        	BNE	NotCTRLC ; if CTRL-C not pressed then exit
00FF8D  1  38           	SEC		; Carry set if control C pressed
00FF8E  1  60           	RTS
00FF8F  1               NotCTRLC:
00FF8F  1  18           	CLC		; Carry clear if control C not pressed
00FF90  1  60           	RTS
00FF91  1               
00FF91  1               StartupMessage:
00FF91  1  0C 43 6F 6C  	.byte	$0C,"Cold [C] or warm [W] start?",$0D,$0A,$00
00FF95  1  64 20 5B 43  
00FF99  1  5D 20 6F 72  
00FFB0  1               
00FFB0  1               .segment "VECTS"
000000r 1               .org $FFFA
00FFFA  1  00 FF        	.word	Reset		; NMI
00FFFC  1  00 FF        	.word	Reset		; RESET
00FFFE  1  00 FF        	.word	Reset		; IRQ
010000  1               
010000  1               
