ca65 V2.19 - Git dcdf7ad
Main file   : osi_bas - Copy.s
Current file: osi_bas - Copy.s

000000r 1               ; Microsoft BASIC for 6502 (OSI VERSION)
000000r 1               ;
000000r 1               ; ==================================================================================
000000r 1               ; MODIFIED FROM THE ORIGINAL FILES AT http://www.pagetable.com/?p=46
000000r 1               ; MERGED INTO ONE FILE AND MACROS AND CONDITIONAL STATEMENTS REMOVED
000000r 1               ; BY G. SEARLE 2013
000000r 1               ;
000000r 1               ; I/O and dummy load/saves added to the end of this code
000000r 1               ;
000000r 1               ; This then assembles to the OSI version with the following
000000r 1               ; minor changes to the original BASIC code:
000000r 1               ; 1. Control-C call changed
000000r 1               ; 2. Load/save calls changed
000000r 1               ; 3. RAM start set to $0200 instead of $0300
000000r 1               ; 4. ROM start set to $C000
000000r 1               ; 5. Second letter of error messages back to ASCII value (instead of $80+val)
000000r 1               ; ==================================================================================
000000r 1               ;
000000r 1               ; Extract of original header comments follows:
000000r 1               ;
000000r 1               ; (first revision of this distribution, 20 Oct 2008, Michael Steil www.pagetable.com)
000000r 1               ;
000000r 1               ;
000000r 1               ; Name                 Release   MS Version    ROM   9digit  INPUTBUFFER   extensions
000000r 1               ;---------------------------------------------------------------------------------------------------
000000r 1               ; OSI BASIC             1977     1.0 REV 3.2    Y      N          ZP            -
000000r 1               ;
000000r 1               ; Credits:
000000r 1               ; * main work by Michael Steil
000000r 1               ; * function names and all uppercase comments taken from Bob Sander-Cederlof's excellent AppleSoft II disassembly:
000000r 1               ;   http://www.txbobsc.com/scsc/scdocumentor/
000000r 1               ; * Applesoft lite by Tom Greene http://cowgod.org/replica1/applesoft/ helped a lot, too.
000000r 1               ; * Thanks to Joe Zbicak for help with Intellision Keyboard BASIC
000000r 1               ; * This work is dedicated to the memory of my dear hacking pal Michael "acidity" Kollmann.
000000r 1               
000000r 1               .debuginfo +
000000r 1               
000000r 1               .setcpu "6502"
000000r 1               .macpack longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               
000000r 1               ; zero page
000000r 1               ZP_START1 = $00
000000r 1               ZP_START2 = $0D
000000r 1               ZP_START3 = $5B
000000r 1               ZP_START4 = $65
000000r 1               
000000r 1               ;extra ZP variables
000000r 1               USR             := $000A
000000r 1               
000000r 1               ; constants
000000r 1               STACK_TOP		:= $FC
000000r 1               SPACE_FOR_GOSUB := $33
000000r 1               NULL_MAX		:= $0A
000000r 1               WIDTH			:= 72
000000r 1               WIDTH2			:= 56
000000r 1               
000000r 1               ; memory layout
000000r 1               RAMSTART2		:= $0200
000000r 1               BYTES_FP		:= 4
000000r 1               BYTES_PER_ELEMENT := BYTES_FP
000000r 1               BYTES_PER_VARIABLE := BYTES_FP+2
000000r 1               MANTISSA_BYTES	:= BYTES_FP-1
000000r 1               BYTES_PER_FRAME := 2*BYTES_FP+8
000000r 1               FOR_STACK1		:= 2*BYTES_FP+5
000000r 1               FOR_STACK2		:= BYTES_FP+4
000000r 1               MAX_EXPON = 10
000000r 1               STACK           := $0100
000000r 1               
000000r 1               INPUTBUFFERX = INPUTBUFFER & $FF00
000000r 1               
000000r 1               CR=13
000000r 1               LF=10
000000r 1               
000000r 1               CRLF_1 := CR
000000r 1               CRLF_2 := LF
000000r 1               
000000r 1               .feature org_per_seg
000000r 1               .zeropage
000000r 1               .org $0000
000000  1               .org ZP_START1
000000  1               GORESTART:
000000  1  xx xx xx     	.res 3
000003  1               GOSTROUT:
000003  1  xx xx xx     	.res 3
000006  1               GOAYINT:
000006  1  xx xx        	.res 2
000008  1               GOGIVEAYF:
000008  1  xx xx        	.res 2
00000A  1               
00000A  1               .org ZP_START2
00000D  1               Z15:
00000D  1  xx           	.res 1
00000E  1               POSX:
00000E  1  xx           	.res 1
00000F  1               Z17:
00000F  1  xx           	.res 1
000010  1               Z18:
000010  1  xx           	.res 1
000011  1               LINNUM:
000011  1               TXPSV:
000011  1  xx xx        	.res 2
000013  1               INPUTBUFFER:
000013  1               
000013  1               .org ZP_START3
00005B  1               CHARAC:
00005B  1  xx           	.res 1
00005C  1               ENDCHR:
00005C  1  xx           	.res 1
00005D  1               EOLPNTR:
00005D  1  xx           	.res 1
00005E  1               DIMFLG:
00005E  1  xx           	.res 1
00005F  1               VALTYP:
00005F  1  xx           	.res 1
000060  1               DATAFLG:
000060  1  xx           	.res 1
000061  1               SUBFLG:
000061  1  xx           	.res 1
000062  1               INPUTFLG:
000062  1  xx           	.res 1
000063  1               CPRMASK:
000063  1  xx           	.res 1
000064  1               Z14:
000064  1  xx           	.res 1
000065  1               
000065  1               .org ZP_START4
000065  1               TEMPPT:
000065  1  xx           	.res 1
000066  1               LASTPT:
000066  1  xx xx        	.res 2
000068  1               TEMPST:
000068  1  xx xx xx xx  	.res 9
00006C  1  xx xx xx xx  
000070  1  xx           
000071  1               INDEX:
000071  1  xx xx        	.res 2
000073  1               DEST:
000073  1  xx xx        	.res 2
000075  1               RESULT:
000075  1  xx xx xx xx  	.res BYTES_FP
000079  1               RESULT_LAST = RESULT + BYTES_FP-1
000079  1               TXTTAB:
000079  1  xx xx        	.res 2
00007B  1               VARTAB:
00007B  1  xx xx        	.res 2
00007D  1               ARYTAB:
00007D  1  xx xx        	.res 2
00007F  1               STREND:
00007F  1  xx xx        	.res 2
000081  1               FRETOP:
000081  1  xx xx        	.res 2
000083  1               FRESPC:
000083  1  xx xx        	.res 2
000085  1               MEMSIZ:
000085  1  xx xx        	.res 2
000087  1               CURLIN:
000087  1  xx xx        	.res 2
000089  1               OLDLIN:
000089  1  xx xx        	.res 2
00008B  1               OLDTEXT:
00008B  1  xx xx        	.res 2
00008D  1               Z8C:
00008D  1  xx xx        	.res 2
00008F  1               DATPTR:
00008F  1  xx xx        	.res 2
000091  1               INPTR:
000091  1  xx xx        	.res 2
000093  1               VARNAM:
000093  1  xx xx        	.res 2
000095  1               VARPNT:
000095  1  xx xx        	.res 2
000097  1               FORPNT:
000097  1  xx xx        	.res 2
000099  1               LASTOP:
000099  1  xx xx        	.res 2
00009B  1               CPRTYP:
00009B  1  xx           	.res 1
00009C  1               FNCNAM:
00009C  1               TEMP3:
00009C  1  xx xx        	.res 2
00009E  1               DSCPTR:
00009E  1  xx xx        	.res 2
0000A0  1               DSCLEN:
0000A0  1  xx xx        	.res 2
0000A2  1               JMPADRS	:= DSCLEN + 1
0000A2  1               
0000A2  1               Z52:
0000A2  1  xx           	.res 1
0000A3  1               ARGEXTENSION:
0000A3  1               TEMP1:
0000A3  1  xx           	.res 1
0000A4  1               HIGHDS:
0000A4  1  xx xx        	.res 2
0000A6  1               HIGHTR:
0000A6  1  xx xx        	.res 2
0000A8  1               INDX:
0000A8  1               TMPEXP:
0000A8  1               TEMP2:
0000A8  1  xx           	.res 1
0000A9  1               EXPON:
0000A9  1  xx           	.res 1
0000AA  1               LOWTR:
0000AA  1               LOWTRX:
0000AA  1  xx           	.res 1
0000AB  1               EXPSGN:
0000AB  1  xx           	.res 1
0000AC  1               FAC:
0000AC  1  xx xx xx xx  	.res BYTES_FP
0000B0  1               FAC_LAST = FAC + BYTES_FP-1
0000B0  1               FACSIGN:
0000B0  1  xx           	.res 1
0000B1  1               SERLEN:
0000B1  1  xx           	.res 1
0000B2  1               SHIFTSIGNEXT:
0000B2  1  xx           	.res 1
0000B3  1               ARG:
0000B3  1  xx xx xx xx  	.res BYTES_FP
0000B7  1               ARG_LAST = ARG + BYTES_FP-1
0000B7  1               ARGSIGN:
0000B7  1  xx           	.res 1
0000B8  1               STRNG1:
0000B8  1  xx xx        	.res 2
0000BA  1               SGNCPR = STRNG1
0000BA  1               FACEXTENSION = STRNG1+1
0000BA  1               STRNG2:
0000BA  1  xx xx        	.res 2
0000BC  1               CHRGET:
0000BC  1               TXTPTR = <(GENERIC_TXTPTR-GENERIC_CHRGET + CHRGET)
0000BC  1               CHRGOT = <(GENERIC_CHRGOT-GENERIC_CHRGET + CHRGET)
0000BC  1               CHRGOT2 = <(GENERIC_CHRGOT2-GENERIC_CHRGET + CHRGET)
0000BC  1               RNDSEED = <(GENERIC_RNDSEED-GENERIC_CHRGET + CHRGET)
0000BC  1               
0000BC  1               .segment "CODE"
000000r 1               .org $C000
00C000  1               TOKEN_ADDRESS_TABLE:
00C000  1  31 C6        		.word END-1
00C002  1  59 C5        		.word FOR-1
00C004  1  37 CA        		.word NEXT-1
00C006  1  03 C7        		.word DATA-1
00C008  1  1A C9        		.word INPUT-1
00C00A  1  F8 CC        		.word DIM-1
00C00C  1  46 C9        		.word READ-1
00C00E  1  B0 C7        		.word LET-1
00C010  1               TOKEN_GOTO=$80+(*-TOKEN_ADDRESS_TABLE)/2
00C010  1  B0 C6        		.word GOTO-1
00C012  1  88 C6        		.word RUN-1
00C014  1  33 C7        		.word IF-1
00C016  1  1D C6        		.word RESTORE-1
00C018  1               TOKEN_GOSUB=$80+(*-TOKEN_ADDRESS_TABLE)/2
00C018  1  93 C6        		.word GOSUB-1
00C01A  1  DD C6        		.word POP-1
00C01C  1               TOKEN_REM=$80+(*-TOKEN_ADDRESS_TABLE)/2
00C01C  1  46 C7        		.word REM-1
00C01E  1  2F C6        		.word STOP-1
00C020  1  56 C7        		.word ON-1
00C022  1  72 C6        		.word NULL-1
00C024  1  29 D4        		.word WAIT-1
00C026  1  64 FF        		.word LOAD-1
00C028  1  65 FF        		.word SAVE-1
00C02A  1  D5 CF        		.word DEF-1
00C02C  1  20 D4        		.word POKE-1
00C02E  1               TOKEN_PRINT=$80+(*-TOKEN_ADDRESS_TABLE)/2
00C02E  1  26 C8        		.word PRINT-1
00C030  1  58 C6        		.word CONT-1
00C032  1  B8 C4        		.word LIST-1
00C034  1  83 C6        		.word CLEAR-1
00C036  1  64 C4        		.word NEW-1
00C038  1               TOKEN_TAB=$00+$80+(*-TOKEN_ADDRESS_TABLE)/2
00C038  1               TOKEN_TO=$01+$80+(*-TOKEN_ADDRESS_TABLE)/2
00C038  1               TOKEN_FN=$02+$80+(*-TOKEN_ADDRESS_TABLE)/2
00C038  1               TOKEN_SPC=$03+$80+(*-TOKEN_ADDRESS_TABLE)/2
00C038  1               TOKEN_THEN=$04+$80+(*-TOKEN_ADDRESS_TABLE)/2
00C038  1               TOKEN_NOT=$05+$80+(*-TOKEN_ADDRESS_TABLE)/2
00C038  1               TOKEN_STEP=$06+$80+(*-TOKEN_ADDRESS_TABLE)/2
00C038  1               TOKEN_PLUS=$07+$80+(*-TOKEN_ADDRESS_TABLE)/2
00C038  1               TOKEN_MINUS=$08+$80+(*-TOKEN_ADDRESS_TABLE)/2
00C038  1               TOKEN_GREATER=$0E+$80+(*-TOKEN_ADDRESS_TABLE)/2
00C038  1               TOKEN_EQUAL=$0F+$80+(*-TOKEN_ADDRESS_TABLE)/2
00C038  1               NUM_TOKENS=(*-TOKEN_ADDRESS_TABLE)/2
00C038  1               
00C038  1               UNFNC:
00C038  1               TOKEN_SGN=$11+$80+(*-TOKEN_ADDRESS_TABLE)/2
00C038  1  D0 D7        		.word SGN
00C03A  1  5A D8        		.word INT
00C03C  1  ED D7        		.word ABS
00C03E  1  0A 00        		.word USR
00C040  1  A5 CF        		.word FRE
00C042  1  C6 CF        		.word POS
00C044  1  A4 DA        		.word SQR
00C046  1  B8 DB        		.word RND
00C048  1  B5 D5        		.word LOG
00C04A  1  13 DB        		.word EXP
00C04C  1  F4 DB        		.word COS
00C04E  1  FB DB        		.word SIN
00C050  1  44 DC        		.word TAN
00C052  1  91 DC        		.word ATN
00C054  1  16 D4        		.word PEEK
00C056  1  84 D3        		.word LEN
00C058  1  84 D0        		.word STR
00C05A  1  B5 D3        		.word VAL
00C05C  1  93 D3        		.word ASC
00C05E  1  F4 D2        		.word CHRSTR
00C060  1               TOKEN_LEFTSTR=$11+$80+(*-TOKEN_ADDRESS_TABLE)/2
00C060  1  08 D3        		.word LEFTSTR
00C062  1  34 D3        		.word RIGHTSTR
00C064  1  3F D3        		.word MIDSTR
00C066  1               
00C066  1               MATHTBL:
00C066  1  79                   .byte   $79
00C067  1  66 D4                .word   FADDT-1
00C069  1  79                   .byte   $79
00C06A  1  4F D4                .word   FSUBT-1
00C06C  1  7B                   .byte   $7B
00C06D  1  F5 D5                .word   FMULTT-1
00C06F  1  7B                   .byte   $7B
00C070  1  C4 D6                .word   FDIVT-1
00C072  1  7F                   .byte   $7F
00C073  1  AD DA                .word   FPWRT-1
00C075  1  50                   .byte   $50
00C076  1  60 CC                .word   TAND-1
00C078  1  46                   .byte   $46
00C079  1  5D CC                .word   OR-1
00C07B  1  7D                   .byte   $7D
00C07C  1  E6 DA                .word   NEGOP-1
00C07E  1  5A                   .byte   $5A
00C07F  1  CF CB                .word   EQUOP-1
00C081  1  64                   .byte   $64
00C082  1  8D CC                .word   RELOPS-1
00C084  1               
00C084  1               TOKEN_NAME_TABLE:
00C084  1  45 4E C4     		.byte "EN", $80+'D'
00C087  1  46 4F D2     		.byte "FO", $80+'R'
00C08A  1  4E 45 58 D4  		.byte "NEX", $80+'T'
00C08E  1  44 41 54 C1  		.byte "DAT", $80+'A'
00C092  1  49 4E 50 55  		.byte "INPU", $80+'T'
00C096  1  D4           
00C097  1  44 49 CD     		.byte "DI", $80+'M'
00C09A  1  52 45 41 C4  		.byte "REA", $80+'D'
00C09E  1  4C 45 D4     		.byte "LE", $80+'T'
00C0A1  1  47 4F 54 CF  		.byte "GOT", $80+'O'
00C0A5  1  52 55 CE     		.byte "RU", $80+'N'
00C0A8  1  49 C6        		.byte "I", $80+'F'
00C0AA  1  52 45 53 54  		.byte "RESTOR", $80+'E'
00C0AE  1  4F 52 C5     
00C0B1  1  47 4F 53 55  		.byte "GOSU", $80+'B'
00C0B5  1  C2           
00C0B6  1  52 45 54 55  		.byte "RETUR", $80+'N'
00C0BA  1  52 CE        
00C0BC  1  52 45 CD     		.byte "RE", $80+'M'
00C0BF  1  53 54 4F D0  		.byte "STO", $80+'P'
00C0C3  1  4F CE        		.byte "O", $80+'N'
00C0C5  1  4E 55 4C CC  		.byte "NUL", $80+'L'
00C0C9  1  57 41 49 D4  		.byte "WAI", $80+'T'
00C0CD  1  4C 4F 41 C4  		.byte "LOA", $80+'D'
00C0D1  1  53 41 56 C5  		.byte "SAV", $80+'E'
00C0D5  1  44 45 C6     		.byte "DE", $80+'F'
00C0D8  1  50 4F 4B C5  		.byte "POK", $80+'E'
00C0DC  1  50 52 49 4E  		.byte "PRIN", $80+'T'
00C0E0  1  D4           
00C0E1  1  43 4F 4E D4  		.byte "CON", $80+'T'
00C0E5  1  4C 49 53 D4  		.byte "LIS", $80+'T'
00C0E9  1  43 4C 45 41  		.byte "CLEA", $80+'R'
00C0ED  1  D2           
00C0EE  1  4E 45 D7     		.byte "NE", $80+'W'
00C0F1  1  54 41 42 A8  		.byte "TAB", $80+'('
00C0F5  1  54 CF        		.byte "T", $80+'O'
00C0F7  1  46 CE        		.byte "F", $80+'N'
00C0F9  1  53 50 43 A8  		.byte "SPC", $80+'('
00C0FD  1  54 48 45 CE  		.byte "THE", $80+'N'
00C101  1  4E 4F D4     		.byte "NO", $80+'T'
00C104  1  53 54 45 D0  		.byte "STE", $80+'P'
00C108  1  AB           		.byte "", $80+'+'
00C109  1  AD           		.byte "", $80+'-'
00C10A  1  AA           		.byte "", $80+'*'
00C10B  1  AF           		.byte "", $80+'/'
00C10C  1  DE           		.byte "", $80+'^'
00C10D  1  41 4E C4     		.byte "AN", $80+'D'
00C110  1  4F D2        		.byte "O", $80+'R'
00C112  1  BE           		.byte "", $80+'>'
00C113  1  BD           		.byte "", $80+'='
00C114  1  BC           		.byte "", $80+'<'
00C115  1  53 47 CE     		.byte "SG", $80+'N'
00C118  1  49 4E D4     		.byte "IN", $80+'T'
00C11B  1  41 42 D3     		.byte "AB", $80+'S'
00C11E  1  55 53 D2     		.byte "US", $80+'R'
00C121  1  46 52 C5     		.byte "FR", $80+'E'
00C124  1  50 4F D3     		.byte "PO", $80+'S'
00C127  1  53 51 D2     		.byte "SQ", $80+'R'
00C12A  1  52 4E C4     		.byte "RN", $80+'D'
00C12D  1  4C 4F C7     		.byte "LO", $80+'G'
00C130  1  45 58 D0     		.byte "EX", $80+'P'
00C133  1  43 4F D3     		.byte "CO", $80+'S'
00C136  1  53 49 CE     		.byte "SI", $80+'N'
00C139  1  54 41 CE     		.byte "TA", $80+'N'
00C13C  1  41 54 CE     		.byte "AT", $80+'N'
00C13F  1  50 45 45 CB  		.byte "PEE", $80+'K'
00C143  1  4C 45 CE     		.byte "LE", $80+'N'
00C146  1  53 54 52 A4  		.byte "STR", $80+'$'
00C14A  1  56 41 CC     		.byte "VA", $80+'L'
00C14D  1  41 53 C3     		.byte "AS", $80+'C'
00C150  1  43 48 52 A4  		.byte "CHR", $80+'$'
00C154  1  4C 45 46 54  		.byte "LEFT", $80+'$'
00C158  1  A4           
00C159  1  52 49 47 48  		.byte "RIGHT", $80+'$'
00C15D  1  54 A4        
00C15F  1  4D 49 44 A4  		.byte "MID", $80+'$'
00C163  1  00           		.byte   0
00C164  1               
00C164  1               ERROR_MESSAGES:
00C164  1               ERR_NOFOR := <(*-ERROR_MESSAGES)
00C164  1  4E 46                .byte "NF"
00C166  1               ERR_SYNTAX := <(*-ERROR_MESSAGES)
00C166  1  53 4E                .byte "SN"
00C168  1               ERR_NOGOSUB := <(*-ERROR_MESSAGES)
00C168  1  52 47                .byte "RG"
00C16A  1               ERR_NODATA := <(*-ERROR_MESSAGES)
00C16A  1  4F 44                .byte "OD"
00C16C  1               ERR_ILLQTY := <(*-ERROR_MESSAGES)
00C16C  1  46 43                .byte "FC"
00C16E  1               ERR_OVERFLOW := <(*-ERROR_MESSAGES)
00C16E  1  4F 56                .byte "OV"
00C170  1               ERR_MEMFULL := <(*-ERROR_MESSAGES)
00C170  1  4F 4D                .byte "OM"
00C172  1               ERR_UNDEFSTAT := <(*-ERROR_MESSAGES)
00C172  1  55 53                .byte "US"
00C174  1               ERR_BADSUBS := <(*-ERROR_MESSAGES)
00C174  1  42 53                .byte "BS"
00C176  1               ERR_REDIMD := <(*-ERROR_MESSAGES)
00C176  1  44 44                .byte "DD"
00C178  1               ERR_ZERODIV := <(*-ERROR_MESSAGES)
00C178  1  2F 30                .byte "/0"
00C17A  1               ERR_ILLDIR := <(*-ERROR_MESSAGES)
00C17A  1  49 44                .byte "ID"
00C17C  1               ERR_BADTYPE := <(*-ERROR_MESSAGES)
00C17C  1  54 4D                .byte "TM"
00C17E  1               ERR_STRLONG := <(*-ERROR_MESSAGES)
00C17E  1  4C 53                .byte "LS"
00C180  1               ERR_FRMCPX := <(*-ERROR_MESSAGES)
00C180  1  53 54                .byte "ST"
00C182  1               ERR_CANTCONT := <(*-ERROR_MESSAGES)
00C182  1  43 4E                .byte "CN"
00C184  1               ERR_UNDEFFN := <(*-ERROR_MESSAGES)
00C184  1  55 46                .byte "UF"
00C186  1               
00C186  1               ; global messages: "error", "in", "ready", "break"
00C186  1               QT_ERROR:
00C186  1  20 45 52 52          .byte   " ERROR"
00C18A  1  4F 52        
00C18C  1  00                   .byte   0
00C18D  1               QT_IN:
00C18D  1  20 49 4E 20          .byte   " IN "
00C191  1  00                   .byte   $00
00C192  1               QT_OK:
00C192  1  0D 0A 4F 4B  		.byte   CR,LF,"OK",CR,LF
00C196  1  0D 0A        
00C198  1  00           		.byte	0
00C199  1               QT_BREAK:
00C199  1  0D 0A 42 52  		.byte CR,LF,"BREAK"
00C19D  1  45 41 4B     
00C1A0  1  00                   .byte   0
00C1A1  1               
00C1A1  1               ; generic stack and memory management code
00C1A1  1               ; this code is identical across all versions of
00C1A1  1               ; BASIC
00C1A1  1               ; ----------------------------------------------------------------------------
00C1A1  1               ; CALLED BY "NEXT" AND "FOR" TO SCAN THROUGH
00C1A1  1               ; THE STACK FOR A FRAME WITH THE SAME VARIABLE.
00C1A1  1               ;
00C1A1  1               ; (FORPNT) = ADDRESS OF VARIABLE IF "FOR" OR "NEXT"
00C1A1  1               ; 	= $XXFF IF CALLED FROM "RETURN"
00C1A1  1               ; 	<<< BUG: SHOULD BE $FFXX >>>
00C1A1  1               ;
00C1A1  1               ;	RETURNS .NE. IF VARIABLE NOT FOUND,
00C1A1  1               ;	(X) = STACK PNTR AFTER SKIPPING ALL FRAMES
00C1A1  1               ;
00C1A1  1               ;	.EQ. IF FOUND
00C1A1  1               ;	(X) = STACK PNTR OF FRAME FOUND
00C1A1  1               ; ----------------------------------------------------------------------------
00C1A1  1               GTFORPNT:
00C1A1  1  BA                   tsx
00C1A2  1  E8                   inx
00C1A3  1  E8                   inx
00C1A4  1  E8                   inx
00C1A5  1  E8                   inx
00C1A6  1               L2279:
00C1A6  1  BD 01 01             lda     STACK+1,x
00C1A9  1  C9 81                cmp     #$81
00C1AB  1  D0 21                bne     L22A1
00C1AD  1  A5 98                lda     FORPNT+1
00C1AF  1  D0 0A                bne     L228E
00C1B1  1  BD 02 01             lda     STACK+2,x
00C1B4  1  85 97                sta     FORPNT
00C1B6  1  BD 03 01             lda     STACK+3,x
00C1B9  1  85 98                sta     FORPNT+1
00C1BB  1               L228E:
00C1BB  1  DD 03 01             cmp     STACK+3,x
00C1BE  1  D0 07                bne     L229A
00C1C0  1  A5 97                lda     FORPNT
00C1C2  1  DD 02 01             cmp     STACK+2,x
00C1C5  1  F0 07                beq     L22A1
00C1C7  1               L229A:
00C1C7  1  8A                   txa
00C1C8  1  18                   clc
00C1C9  1  69 10                adc     #BYTES_PER_FRAME
00C1CB  1  AA                   tax
00C1CC  1  D0 D8                bne     L2279
00C1CE  1               L22A1:
00C1CE  1  60                   rts
00C1CF  1               ; ----------------------------------------------------------------------------
00C1CF  1               ; MOVE BLOCK OF MEMORY UP
00C1CF  1               ;
00C1CF  1               ; ON ENTRY:
00C1CF  1               ;	(Y,A) = (HIGHDS) = DESTINATION END+1
00C1CF  1               ;	(LOWTR) = LOWEST ADDRESS OF SOURCE
00C1CF  1               ;	(HIGHTR) = HIGHEST SOURCE ADDRESS+1
00C1CF  1               ; ----------------------------------------------------------------------------
00C1CF  1               BLTU:
00C1CF  1  20 1F C2             jsr     REASON
00C1D2  1  85 7F                sta     STREND
00C1D4  1  84 80                sty     STREND+1
00C1D6  1               BLTU2:
00C1D6  1  38                   sec
00C1D7  1  A5 A6                lda     HIGHTR
00C1D9  1  E5 AA                sbc     LOWTR
00C1DB  1  85 71                sta     INDEX
00C1DD  1  A8                   tay
00C1DE  1  A5 A7                lda     HIGHTR+1
00C1E0  1  E5 AB                sbc     LOWTR+1
00C1E2  1  AA                   tax
00C1E3  1  E8                   inx
00C1E4  1  98                   tya
00C1E5  1  F0 23                beq     L22DD
00C1E7  1  A5 A6                lda     HIGHTR
00C1E9  1  38                   sec
00C1EA  1  E5 71                sbc     INDEX
00C1EC  1  85 A6                sta     HIGHTR
00C1EE  1  B0 03                bcs     L22C6
00C1F0  1  C6 A7                dec     HIGHTR+1
00C1F2  1  38                   sec
00C1F3  1               L22C6:
00C1F3  1  A5 A4                lda     HIGHDS
00C1F5  1  E5 71                sbc     INDEX
00C1F7  1  85 A4                sta     HIGHDS
00C1F9  1  B0 08                bcs     L22D6
00C1FB  1  C6 A5                dec     HIGHDS+1
00C1FD  1  90 04                bcc     L22D6
00C1FF  1               L22D2:
00C1FF  1  B1 A6                lda     (HIGHTR),y
00C201  1  91 A4                sta     (HIGHDS),y
00C203  1               L22D6:
00C203  1  88                   dey
00C204  1  D0 F9                bne     L22D2
00C206  1  B1 A6                lda     (HIGHTR),y
00C208  1  91 A4                sta     (HIGHDS),y
00C20A  1               L22DD:
00C20A  1  C6 A7                dec     HIGHTR+1
00C20C  1  C6 A5                dec     HIGHDS+1
00C20E  1  CA                   dex
00C20F  1  D0 F2                bne     L22D6
00C211  1  60                   rts
00C212  1               ; ----------------------------------------------------------------------------
00C212  1               ; CHECK IF ENOUGH ROOM LEFT ON STACK
00C212  1               ; FOR "FOR", "GOSUB", OR EXPRESSION EVALUATION
00C212  1               ; ----------------------------------------------------------------------------
00C212  1               CHKMEM:
00C212  1  0A                   asl     a
00C213  1  69 33                adc     #SPACE_FOR_GOSUB
00C215  1  B0 35                bcs     MEMERR
00C217  1  85 71                sta     INDEX
00C219  1  BA                   tsx
00C21A  1  E4 71                cpx     INDEX
00C21C  1  90 2E                bcc     MEMERR
00C21E  1  60                   rts
00C21F  1               ; ----------------------------------------------------------------------------
00C21F  1               ; CHECK IF ENOUGH ROOM BETWEEN ARRAYS AND STRINGS
00C21F  1               ; (Y,A) = ADDR ARRAYS NEED TO GROW TO
00C21F  1               ; ----------------------------------------------------------------------------
00C21F  1               REASON:
00C21F  1  C4 82                cpy     FRETOP+1
00C221  1  90 28                bcc     L231E
00C223  1  D0 04                bne     L22FC
00C225  1  C5 81                cmp     FRETOP
00C227  1  90 22                bcc     L231E
00C229  1               L22FC:
00C229  1  48                   pha
00C22A  1  A2 08                ldx     #FAC-TEMP1-1
00C22C  1  98                   tya
00C22D  1               L2300:
00C22D  1  48                   pha
00C22E  1  B5 A3                lda     TEMP1,x
00C230  1  CA                   dex
00C231  1  10 FA                bpl     L2300
00C233  1  20 3F D1             jsr     GARBAG
00C236  1  A2 F8                ldx     #TEMP1-FAC+1+256
00C238  1               L230B:
00C238  1  68                   pla
00C239  1  95 AC                sta     FAC,x
00C23B  1  E8                   inx
00C23C  1  30 FA                bmi     L230B
00C23E  1  68                   pla
00C23F  1  A8                   tay
00C240  1  68                   pla
00C241  1  C4 82                cpy     FRETOP+1
00C243  1  90 06                bcc     L231E
00C245  1  D0 05                bne     MEMERR
00C247  1  C5 81                cmp     FRETOP
00C249  1  B0 01                bcs     MEMERR
00C24B  1               L231E:
00C24B  1  60                   rts
00C24C  1               MEMERR:
00C24C  1  A2 0C                ldx     #ERR_MEMFULL
00C24E  1               ; ----------------------------------------------------------------------------
00C24E  1               ; HANDLE AN ERROR
00C24E  1               ;
00C24E  1               ; (X)=OFFSET IN ERROR MESSAGE TABLE
00C24E  1               ; (ERRFLG) > 128 IF "ON ERR" TURNED ON
00C24E  1               ; (CURLIN+1) = $FF IF IN DIRECT MODE
00C24E  1               ; ----------------------------------------------------------------------------
00C24E  1               ERROR:
00C24E  1  46 64                lsr     Z14
00C250  1  20 64 C8             jsr     CRDO
00C253  1  20 DB C8             jsr     OUTQUES
00C256  1  BD 64 C1             lda     ERROR_MESSAGES,x
00C259  1  20 DD C8             jsr     OUTDO
00C25C  1  BD 65 C1             lda     ERROR_MESSAGES+1,x
00C25F  1  20 DD C8             jsr     OUTDO
00C262  1  20 95 C4             jsr     STKINI
00C265  1  A9 86                lda     #<QT_ERROR
00C267  1  A0 C1                ldy     #>QT_ERROR
00C269  1               ; ----------------------------------------------------------------------------
00C269  1               ; PRINT STRING AT (Y,A)
00C269  1               ; PRINT CURRENT LINE # UNLESS IN DIRECT MODE
00C269  1               ; FALL INTO WARM RESTART
00C269  1               ; ----------------------------------------------------------------------------
00C269  1               PRINT_ERROR_LINNUM:
00C269  1  20 BB C8             jsr     STROUT
00C26C  1  A4 88                ldy     CURLIN+1
00C26E  1  C8                   iny
00C26F  1  F0 03                beq     RESTART
00C271  1  20 4B D9             jsr     INPRT
00C274  1               ; ----------------------------------------------------------------------------
00C274  1               ; WARM RESTART ENTRY
00C274  1               ; ----------------------------------------------------------------------------
00C274  1               RESTART:
00C274  1  46 64                lsr     Z14
00C276  1  A9 92                lda     #<QT_OK
00C278  1  A0 C1                ldy     #>QT_OK
00C27A  1  20 03 00             jsr     GOSTROUT
00C27D  1               L2351:
00C27D  1  20 57 C3             jsr     INLIN
00C280  1  86 C3                stx     TXTPTR
00C282  1  84 C4                sty     TXTPTR+1
00C284  1  20 BC 00             jsr     CHRGET
00C287  1               ; bug in pre-1.1: CHRGET sets Z on '\0'
00C287  1               ; and ':' - a line starting with ':' in
00C287  1               ; direct mode gets ignored
00C287  1  F0 F4                beq     L2351
00C289  1  A2 FF                ldx     #$FF
00C28B  1  86 88                stx     CURLIN+1
00C28D  1  90 06                bcc     NUMBERED_LINE
00C28F  1  20 A6 C3             jsr     PARSE_INPUT_LINE
00C292  1  4C FA C5             jmp     NEWSTT2
00C295  1               ; ----------------------------------------------------------------------------
00C295  1               ; HANDLE NUMBERED LINE
00C295  1               ; ----------------------------------------------------------------------------
00C295  1               NUMBERED_LINE:
00C295  1  20 77 C7             jsr     LINGET
00C298  1  20 A6 C3             jsr     PARSE_INPUT_LINE
00C29B  1  84 5D                sty     EOLPNTR
00C29D  1  20 36 C4             jsr     FNDLIN
00C2A0  1  90 44                bcc     PUT_NEW_LINE
00C2A2  1  A0 01                ldy     #$01
00C2A4  1  B1 AA                lda     (LOWTR),y
00C2A6  1  85 72                sta     INDEX+1
00C2A8  1  A5 7B                lda     VARTAB
00C2AA  1  85 71                sta     INDEX
00C2AC  1  A5 AB                lda     LOWTR+1
00C2AE  1  85 74                sta     DEST+1
00C2B0  1  A5 AA                lda     LOWTR
00C2B2  1  88                   dey
00C2B3  1  F1 AA                sbc     (LOWTR),y
00C2B5  1  18                   clc
00C2B6  1  65 7B                adc     VARTAB
00C2B8  1  85 7B                sta     VARTAB
00C2BA  1  85 73                sta     DEST
00C2BC  1  A5 7C                lda     VARTAB+1
00C2BE  1  69 FF                adc     #$FF
00C2C0  1  85 7C                sta     VARTAB+1
00C2C2  1  E5 AB                sbc     LOWTR+1
00C2C4  1  AA                   tax
00C2C5  1  38                   sec
00C2C6  1  A5 AA                lda     LOWTR
00C2C8  1  E5 7B                sbc     VARTAB
00C2CA  1  A8                   tay
00C2CB  1  B0 03                bcs     L23A5
00C2CD  1  E8                   inx
00C2CE  1  C6 74                dec     DEST+1
00C2D0  1               L23A5:
00C2D0  1  18                   clc
00C2D1  1  65 71                adc     INDEX
00C2D3  1  90 03                bcc     L23AD
00C2D5  1  C6 72                dec     INDEX+1
00C2D7  1  18                   clc
00C2D8  1               L23AD:
00C2D8  1  B1 71                lda     (INDEX),y
00C2DA  1  91 73                sta     (DEST),y
00C2DC  1  C8                   iny
00C2DD  1  D0 F9                bne     L23AD
00C2DF  1  E6 72                inc     INDEX+1
00C2E1  1  E6 74                inc     DEST+1
00C2E3  1  CA                   dex
00C2E4  1  D0 F2                bne     L23AD
00C2E6  1               ; ----------------------------------------------------------------------------
00C2E6  1               PUT_NEW_LINE:
00C2E6  1  A5 13                lda     INPUTBUFFER
00C2E8  1  F0 2F                beq     FIX_LINKS
00C2EA  1  A5 85                lda     MEMSIZ
00C2EC  1  A4 86                ldy     MEMSIZ+1
00C2EE  1  85 81                sta     FRETOP
00C2F0  1  84 82                sty     FRETOP+1
00C2F2  1  A5 7B                lda     VARTAB
00C2F4  1  85 A6                sta     HIGHTR
00C2F6  1  65 5D                adc     EOLPNTR
00C2F8  1  85 A4                sta     HIGHDS
00C2FA  1  A4 7C                ldy     VARTAB+1
00C2FC  1  84 A7                sty     HIGHTR+1
00C2FE  1  90 01                bcc     L23D6
00C300  1  C8                   iny
00C301  1               L23D6:
00C301  1  84 A5                sty     HIGHDS+1
00C303  1  20 CF C1             jsr     BLTU
00C306  1  A5 7F                lda     STREND
00C308  1  A4 80                ldy     STREND+1
00C30A  1  85 7B                sta     VARTAB
00C30C  1  84 7C                sty     VARTAB+1
00C30E  1  A4 5D                ldy     EOLPNTR
00C310  1  88                   dey
00C311  1               ; ---COPY LINE INTO PROGRAM-------
00C311  1               L23E6:
00C311  1  B9 0F 00             lda     INPUTBUFFER-4,y
00C314  1  91 AA                sta     (LOWTR),y
00C316  1  88                   dey
00C317  1  10 F8                bpl     L23E6
00C319  1               ; ----------------------------------------------------------------------------
00C319  1               ; CLEAR ALL VARIABLES
00C319  1               ; RE-ESTABLISH ALL FORWARD LINKS
00C319  1               ; ----------------------------------------------------------------------------
00C319  1               FIX_LINKS:
00C319  1  20 7B C4             jsr     SETPTRS
00C31C  1  A5 79                lda     TXTTAB
00C31E  1  A4 7A                ldy     TXTTAB+1
00C320  1  85 71                sta     INDEX
00C322  1  84 72                sty     INDEX+1
00C324  1  18                   clc
00C325  1               L23FA:
00C325  1  A0 01                ldy     #$01
00C327  1  B1 71                lda     (INDEX),y
00C329  1  D0 03 4C 7D          jeq     L2351
00C32D  1  C2           
00C32E  1               
00C32E  1  A0 04                ldy     #$04
00C330  1               L2405:
00C330  1  C8                   iny
00C331  1  B1 71                lda     (INDEX),y
00C333  1  D0 FB                bne     L2405
00C335  1  C8                   iny
00C336  1  98                   tya
00C337  1  65 71                adc     INDEX
00C339  1  AA                   tax
00C33A  1  A0 00                ldy     #$00
00C33C  1  91 71                sta     (INDEX),y
00C33E  1  A5 72                lda     INDEX+1
00C340  1  69 00                adc     #$00
00C342  1  C8                   iny
00C343  1  91 71                sta     (INDEX),y
00C345  1  86 71                stx     INDEX
00C347  1  85 72                sta     INDEX+1
00C349  1  90 DA                bcc     L23FA	; always
00C34B  1               ; ----------------------------------------------------------------------------
00C34B  1               L2420:
00C34B  1  20 DD C8             jsr     OUTDO
00C34E  1  CA                   dex
00C34F  1  10 08                bpl     INLIN2
00C351  1               L2423:
00C351  1  20 DD C8             jsr     OUTDO
00C354  1  20 64 C8             jsr     CRDO
00C357  1               ; ----------------------------------------------------------------------------
00C357  1               ; READ A LINE, AND STRIP OFF SIGN BITS
00C357  1               ; ----------------------------------------------------------------------------
00C357  1               INLIN:
00C357  1  A2 00                ldx     #$00
00C359  1               INLIN2:
00C359  1  20 86 C3             jsr     GETLN
00C35C  1  C9 07                cmp     #$07
00C35E  1  F0 14                beq     L2443
00C360  1  C9 0D                cmp     #$0D
00C362  1  F0 1F                beq     L2453
00C364  1  C9 08                cmp     #$08 ; BACKSPACE
00C366  1  F0 E3                beq     L2420
00C368  1  C9 20                cmp     #$20
00C36A  1  90 ED                bcc     INLIN2
00C36C  1  C9 7D                cmp     #$7D
00C36E  1  B0 E9                bcs     INLIN2
00C370  1  C9 40                cmp     #$40 ; @
00C372  1  F0 DD                beq     L2423
00C374  1               L2443:
00C374  1  E0 47                cpx     #$47
00C376  1  B0 04                bcs     L244C
00C378  1  95 13                sta     INPUTBUFFER,x
00C37A  1  E8                   inx
00C37B  1  2C                   .byte   $2C
00C37C  1               L244C:
00C37C  1  A9 07                lda     #$07 ; BEL
00C37E  1  20 DD C8             jsr     OUTDO
00C381  1  D0 D6                bne     INLIN2
00C383  1               L2453:
00C383  1  4C 5E C8             jmp     L29B9
00C386  1               GETLN:
00C386  1  20 48 FF             jsr     MONRDKEY
00C389  1  EA                   nop
00C38A  1  EA                   nop
00C38B  1  EA                   nop
00C38C  1  EA                   nop
00C38D  1  EA                   nop
00C38E  1  EA                   nop
00C38F  1  EA                   nop
00C390  1  EA                   nop
00C391  1  EA                   nop
00C392  1  EA                   nop
00C393  1  EA                   nop
00C394  1  EA                   nop
00C395  1  EA                   nop
00C396  1  EA                   nop
00C397  1  29 7F                and     #$7F
00C399  1               RDKEY:
00C399  1  C9 0F                cmp     #$0F
00C39B  1  D0 08                bne     L2465
00C39D  1  48                   pha
00C39E  1  A5 64                lda     Z14
00C3A0  1  49 FF                eor     #$FF
00C3A2  1  85 64                sta     Z14
00C3A4  1  68                   pla
00C3A5  1               L2465:
00C3A5  1  60                   rts
00C3A6  1               ; ----------------------------------------------------------------------------
00C3A6  1               ; TOKENIZE THE INPUT LINE
00C3A6  1               ; ----------------------------------------------------------------------------
00C3A6  1               PARSE_INPUT_LINE:
00C3A6  1  A6 C3                ldx     TXTPTR
00C3A8  1  A0 04                ldy     #$04
00C3AA  1  84 60                sty     DATAFLG
00C3AC  1               L246C:
00C3AC  1  BD 00 00             lda     INPUTBUFFERX,x
00C3AF  1  C9 20                cmp     #$20
00C3B1  1  F0 3B                beq     L24AC
00C3B3  1  85 5C                sta     ENDCHR
00C3B5  1  C9 22                cmp     #$22
00C3B7  1  F0 5A                beq     L24D0
00C3B9  1  24 60                bit     DATAFLG
00C3BB  1  70 31                bvs     L24AC
00C3BD  1  C9 3F                cmp     #$3F
00C3BF  1  D0 04                bne     L2484
00C3C1  1  A9 97                lda     #TOKEN_PRINT
00C3C3  1  D0 29                bne     L24AC
00C3C5  1               L2484:
00C3C5  1  C9 30                cmp     #$30
00C3C7  1  90 04                bcc     L248C
00C3C9  1  C9 3C                cmp     #$3C
00C3CB  1  90 21                bcc     L24AC
00C3CD  1               ; ----------------------------------------------------------------------------
00C3CD  1               ; SEARCH TOKEN NAME TABLE FOR MATCH STARTING
00C3CD  1               ; WITH CURRENT CHAR FROM INPUT LINE
00C3CD  1               ; ----------------------------------------------------------------------------
00C3CD  1               L248C:
00C3CD  1  84 BA                sty     STRNG2
00C3CF  1  A0 00                ldy     #$00
00C3D1  1  84 5D                sty     EOLPNTR
00C3D3  1  88                   dey
00C3D4  1  86 C3                stx     TXTPTR
00C3D6  1  CA                   dex
00C3D7  1               L2496:
00C3D7  1  C8                   iny
00C3D8  1               L2497:
00C3D8  1  E8                   inx
00C3D9  1               L2498:
00C3D9  1  BD 00 00             lda     INPUTBUFFERX,x
00C3DC  1  C9 20                cmp     #$20
00C3DE  1  F0 F8                beq     L2497
00C3E0  1  38                   sec
00C3E1  1  F9 84 C0             sbc     TOKEN_NAME_TABLE,y
00C3E4  1  F0 F1                beq     L2496
00C3E6  1  C9 80                cmp     #$80
00C3E8  1  D0 30                bne     L24D7
00C3EA  1  05 5D                ora     EOLPNTR
00C3EC  1               ; ----------------------------------------------------------------------------
00C3EC  1               ; STORE CHARACTER OR TOKEN IN OUTPUT LINE
00C3EC  1               ; ----------------------------------------------------------------------------
00C3EC  1               L24AA:
00C3EC  1  A4 BA                ldy     STRNG2
00C3EE  1               L24AC:
00C3EE  1  E8                   inx
00C3EF  1  C8                   iny
00C3F0  1  99 0E 00             sta     INPUTBUFFER-5,y
00C3F3  1  B9 0E 00             lda     INPUTBUFFER-5,y
00C3F6  1  F0 36                beq     L24EA
00C3F8  1  38                   sec
00C3F9  1  E9 3A                sbc     #$3A
00C3FB  1  F0 04                beq     L24BF
00C3FD  1  C9 49                cmp     #$49
00C3FF  1  D0 02                bne     L24C1
00C401  1               L24BF:
00C401  1  85 60                sta     DATAFLG
00C403  1               L24C1:
00C403  1  38                   sec
00C404  1  E9 54                sbc     #TOKEN_REM-':'
00C406  1  D0 A4                bne     L246C
00C408  1  85 5C                sta     ENDCHR
00C40A  1               ; ----------------------------------------------------------------------------
00C40A  1               ; HANDLE LITERAL (BETWEEN QUOTES) OR REMARK,
00C40A  1               ; BY COPYING CHARS UP TO ENDCHR.
00C40A  1               ; ----------------------------------------------------------------------------
00C40A  1               L24C8:
00C40A  1  BD 00 00             lda     INPUTBUFFERX,x
00C40D  1  F0 DF                beq     L24AC
00C40F  1  C5 5C                cmp     ENDCHR
00C411  1  F0 DB                beq     L24AC
00C413  1               L24D0:
00C413  1  C8                   iny
00C414  1  99 0E 00             sta     INPUTBUFFER-5,y
00C417  1  E8                   inx
00C418  1  D0 F0                bne     L24C8
00C41A  1               ; ----------------------------------------------------------------------------
00C41A  1               ; ADVANCE POINTER TO NEXT TOKEN NAME
00C41A  1               ; ----------------------------------------------------------------------------
00C41A  1               L24D7:
00C41A  1  A6 C3                ldx     TXTPTR
00C41C  1  E6 5D                inc     EOLPNTR
00C41E  1               L24DB:
00C41E  1  C8                   iny
00C41F  1  B9 83 C0             lda     MATHTBL+28+1,y
00C422  1  10 FA                bpl     L24DB
00C424  1  B9 84 C0             lda     TOKEN_NAME_TABLE,y
00C427  1  D0 B0                bne     L2498
00C429  1  BD 00 00             lda     INPUTBUFFERX,x
00C42C  1  10 BE                bpl     L24AA
00C42E  1               ; ---END OF LINE------------------
00C42E  1               L24EA:
00C42E  1  99 10 00             sta     INPUTBUFFER-3,y
00C431  1  A9 12                lda     #<INPUTBUFFER-1
00C433  1  85 C3                sta     TXTPTR
00C435  1  60                   rts
00C436  1               ; ----------------------------------------------------------------------------
00C436  1               ; SEARCH FOR LINE
00C436  1               ;
00C436  1               ; (LINNUM) = LINE # TO FIND
00C436  1               ; IF NOT FOUND:  CARRY = 0
00C436  1               ;	LOWTR POINTS AT NEXT LINE
00C436  1               ; IF FOUND:      CARRY = 1
00C436  1               ;	LOWTR POINTS AT LINE
00C436  1               ; ----------------------------------------------------------------------------
00C436  1               FNDLIN:
00C436  1  A5 79                lda     TXTTAB
00C438  1  A6 7A                ldx     TXTTAB+1
00C43A  1               FL1:
00C43A  1  A0 01                ldy     #$01
00C43C  1  85 AA                sta     LOWTR
00C43E  1  86 AB                stx     LOWTR+1
00C440  1  B1 AA                lda     (LOWTR),y
00C442  1  F0 1F                beq     L251F
00C444  1  C8                   iny
00C445  1  C8                   iny
00C446  1  A5 12                lda     LINNUM+1
00C448  1  D1 AA                cmp     (LOWTR),y
00C44A  1  90 18                bcc     L2520
00C44C  1  F0 03                beq     L250D
00C44E  1  88                   dey
00C44F  1  D0 09                bne     L2516
00C451  1               L250D:
00C451  1  A5 11                lda     LINNUM
00C453  1  88                   dey
00C454  1  D1 AA                cmp     (LOWTR),y
00C456  1  90 0C                bcc     L2520
00C458  1  F0 0A                beq     L2520
00C45A  1               L2516:
00C45A  1  88                   dey
00C45B  1  B1 AA                lda     (LOWTR),y
00C45D  1  AA                   tax
00C45E  1  88                   dey
00C45F  1  B1 AA                lda     (LOWTR),y
00C461  1  B0 D7                bcs     FL1
00C463  1               L251F:
00C463  1  18                   clc
00C464  1               L2520:
00C464  1  60                   rts
00C465  1               ; ----------------------------------------------------------------------------
00C465  1               ; "NEW" STATEMENT
00C465  1               ; ----------------------------------------------------------------------------
00C465  1               NEW:
00C465  1  D0 FD                bne     L2520
00C467  1               SCRTCH:
00C467  1  A9 00                lda     #$00
00C469  1  A8                   tay
00C46A  1  91 79                sta     (TXTTAB),y
00C46C  1  C8                   iny
00C46D  1  91 79                sta     (TXTTAB),y
00C46F  1  A5 79                lda     TXTTAB
00C471  1  69 02                adc     #$02
00C473  1  85 7B                sta     VARTAB
00C475  1  A5 7A                lda     TXTTAB+1
00C477  1  69 00                adc     #$00
00C479  1  85 7C                sta     VARTAB+1
00C47B  1               ; ----------------------------------------------------------------------------
00C47B  1               SETPTRS:
00C47B  1  20 AB C4             jsr     STXTPT
00C47E  1               ; ----------------------------------------------------------------------------
00C47E  1               ; "CLEAR" STATEMENT
00C47E  1               ; ----------------------------------------------------------------------------
00C47E  1               CLEARC:
00C47E  1  A5 85                lda     MEMSIZ
00C480  1  A4 86                ldy     MEMSIZ+1
00C482  1  85 81                sta     FRETOP
00C484  1  84 82                sty     FRETOP+1
00C486  1  A5 7B                lda     VARTAB
00C488  1  A4 7C                ldy     VARTAB+1
00C48A  1  85 7D                sta     ARYTAB
00C48C  1  84 7E                sty     ARYTAB+1
00C48E  1  85 7F                sta     STREND
00C490  1  84 80                sty     STREND+1
00C492  1  20 1E C6             jsr     RESTORE
00C495  1               ; ----------------------------------------------------------------------------
00C495  1               STKINI:
00C495  1  A2 68                ldx     #TEMPST
00C497  1  86 65                stx     TEMPPT
00C499  1  68                   pla
00C49A  1  8D FD 01             sta     STACK+STACK_TOP+1
00C49D  1  68                   pla
00C49E  1  8D FE 01             sta     STACK+STACK_TOP+2
00C4A1  1  A2 FC                ldx     #STACK_TOP
00C4A3  1  9A                   txs
00C4A4  1  A9 00                lda     #$00
00C4A6  1  85 8C                sta     OLDTEXT+1
00C4A8  1  85 61                sta     SUBFLG
00C4AA  1               L256A:
00C4AA  1  60                   rts
00C4AB  1               ; ----------------------------------------------------------------------------
00C4AB  1               ; SET TXTPTR TO BEGINNING OF PROGRAM
00C4AB  1               ; ----------------------------------------------------------------------------
00C4AB  1               STXTPT:
00C4AB  1  18                   clc
00C4AC  1  A5 79                lda     TXTTAB
00C4AE  1  69 FF                adc     #$FF
00C4B0  1  85 C3                sta     TXTPTR
00C4B2  1  A5 7A                lda     TXTTAB+1
00C4B4  1  69 FF                adc     #$FF
00C4B6  1  85 C4                sta     TXTPTR+1
00C4B8  1  60                   rts
00C4B9  1               ; ----------------------------------------------------------------------------
00C4B9  1               ; ----------------------------------------------------------------------------
00C4B9  1               ; "LIST" STATEMENT
00C4B9  1               ; ----------------------------------------------------------------------------
00C4B9  1               LIST:
00C4B9  1  90 06                bcc     L2581
00C4BB  1  F0 04                beq     L2581
00C4BD  1  C9 A4                cmp     #TOKEN_MINUS
00C4BF  1  D0 E9                bne     L256A
00C4C1  1               L2581:
00C4C1  1  20 77 C7             jsr     LINGET
00C4C4  1  20 36 C4             jsr     FNDLIN
00C4C7  1  20 C2 00             jsr     CHRGOT
00C4CA  1  F0 0C                beq     L2598
00C4CC  1  C9 A4                cmp     #TOKEN_MINUS
00C4CE  1  D0 94                bne     L2520
00C4D0  1  20 BC 00             jsr     CHRGET
00C4D3  1  20 77 C7             jsr     LINGET
00C4D6  1  D0 8C                bne     L2520
00C4D8  1               L2598:
00C4D8  1  68                   pla
00C4D9  1  68                   pla
00C4DA  1  A5 11                lda     LINNUM
00C4DC  1  05 12                ora     LINNUM+1
00C4DE  1  D0 06                bne     L25A6
00C4E0  1  A9 FF                lda     #$FF
00C4E2  1  85 11                sta     LINNUM
00C4E4  1  85 12                sta     LINNUM+1
00C4E6  1               L25A6:
00C4E6  1  A0 01                ldy     #$01
00C4E8  1  84 60                sty     DATAFLG
00C4EA  1  B1 AA                lda     (LOWTRX),y
00C4EC  1  F0 41                beq     L25E5
00C4EE  1  20 2D C6             jsr     ISCNTC
00C4F1  1  20 64 C8             jsr     CRDO
00C4F4  1  C8                   iny
00C4F5  1  B1 AA                lda     (LOWTRX),y
00C4F7  1  AA                   tax
00C4F8  1  C8                   iny
00C4F9  1  B1 AA                lda     (LOWTRX),y
00C4FB  1  C5 12                cmp     LINNUM+1
00C4FD  1  D0 04                bne     L25C1
00C4FF  1  E4 11                cpx     LINNUM
00C501  1  F0 02                beq     L25C3
00C503  1               L25C1:
00C503  1  B0 2A                bcs     L25E5
00C505  1               ; ---LIST ONE LINE----------------
00C505  1               L25C3:
00C505  1  84 97                sty     FORPNT
00C507  1  20 56 D9             jsr     LINPRT
00C50A  1  A9 20                lda     #$20
00C50C  1               L25CA:
00C50C  1  A4 97                ldy     FORPNT
00C50E  1  29 7F                and     #$7F
00C510  1               L25CE:
00C510  1  20 DD C8             jsr     OUTDO
00C513  1  C9 22                cmp     #$22
00C515  1  D0 06                bne     LA519
00C517  1  A5 60                lda     DATAFLG
00C519  1  49 FF                eor     #$FF
00C51B  1  85 60                sta     DATAFLG
00C51D  1               LA519:
00C51D  1  C8                   iny
00C51E  1  B1 AA                lda     (LOWTRX),y
00C520  1  D0 10                bne     L25E8
00C522  1  A8                   tay
00C523  1  B1 AA                lda     (LOWTRX),y
00C525  1  AA                   tax
00C526  1  C8                   iny
00C527  1  B1 AA                lda     (LOWTRX),y
00C529  1  86 AA                stx     LOWTRX
00C52B  1  85 AB                sta     LOWTRX+1
00C52D  1  D0 B7                bne     L25A6
00C52F  1               L25E5:
00C52F  1  4C 74 C2             jmp     RESTART
00C532  1               L25E8:
00C532  1  10 DC                bpl     L25CE
00C534  1  C9 FF                cmp     #$FF
00C536  1  F0 D8                beq     L25CE
00C538  1  24 60                bit     DATAFLG
00C53A  1  30 D4                bmi     L25CE
00C53C  1  38                   sec
00C53D  1  E9 7F                sbc     #$7F
00C53F  1  AA                   tax
00C540  1  84 97                sty     FORPNT
00C542  1  A0 FF                ldy     #$FF
00C544  1               L25F2:
00C544  1  CA                   dex
00C545  1  F0 08                beq     L25FD
00C547  1               L25F5:
00C547  1  C8                   iny
00C548  1  B9 84 C0             lda     TOKEN_NAME_TABLE,y
00C54B  1  10 FA                bpl     L25F5
00C54D  1  30 F5                bmi     L25F2
00C54F  1               L25FD:
00C54F  1  C8                   iny
00C550  1  B9 84 C0             lda     TOKEN_NAME_TABLE,y
00C553  1  30 B7                bmi     L25CA
00C555  1  20 DD C8             jsr     OUTDO
00C558  1  D0 F5                bne     L25FD	; always
00C55A  1               ; ----------------------------------------------------------------------------
00C55A  1               ; "FOR" STATEMENT
00C55A  1               ;
00C55A  1               ; FOR PUSHES 18 BYTES ON THE STACK:
00C55A  1               ; 2 -- TXTPTR
00C55A  1               ; 2 -- LINE NUMBER
00C55A  1               ; 5 -- INITIAL (CURRENT)  FOR VARIABLE VALUE
00C55A  1               ; 1 -- STEP SIGN
00C55A  1               ; 5 -- STEP VALUE
00C55A  1               ; 2 -- ADDRESS OF FOR VARIABLE IN VARTAB
00C55A  1               ; 1 -- FOR TOKEN ($81)
00C55A  1               ; ----------------------------------------------------------------------------
00C55A  1               FOR:
00C55A  1  A9 80                lda     #$80
00C55C  1  85 61                sta     SUBFLG
00C55E  1  20 B1 C7             jsr     LET
00C561  1  20 A1 C1             jsr     GTFORPNT
00C564  1  D0 05                bne     L2619
00C566  1  8A                   txa
00C567  1  69 0D                adc     #FOR_STACK1
00C569  1  AA                   tax
00C56A  1  9A                   txs
00C56B  1               L2619:
00C56B  1  68                   pla
00C56C  1  68                   pla
00C56D  1  A9 08                lda     #FOR_STACK2
00C56F  1  20 12 C2             jsr     CHKMEM
00C572  1  20 12 C7             jsr     DATAN
00C575  1  18                   clc
00C576  1  98                   tya
00C577  1  65 C3                adc     TXTPTR
00C579  1  48                   pha
00C57A  1  A5 C4                lda     TXTPTR+1
00C57C  1  69 00                adc     #$00
00C57E  1  48                   pha
00C57F  1  A5 88                lda     CURLIN+1
00C581  1  48                   pha
00C582  1  A5 87                lda     CURLIN
00C584  1  48                   pha
00C585  1  A9 9D                lda     #TOKEN_TO
00C587  1  20 FB CB             jsr     SYNCHR
00C58A  1  20 A8 CA             jsr     CHKNUM
00C58D  1  20 A5 CA             jsr     FRMNUM
00C590  1  A5 B0                lda     FACSIGN
00C592  1  09 7F                ora     #$7F
00C594  1  25 AD                and     FAC+1
00C596  1  85 AD                sta     FAC+1
00C598  1  A9 A3                lda     #<STEP
00C59A  1  A0 C5                ldy     #>STEP
00C59C  1  85 71                sta     INDEX
00C59E  1  84 72                sty     INDEX+1
00C5A0  1  4C 5E CB             jmp     FRM_STACK3
00C5A3  1               ; ----------------------------------------------------------------------------
00C5A3  1               ; "STEP" PHRASE OF "FOR" STATEMENT
00C5A3  1               ; ----------------------------------------------------------------------------
00C5A3  1               STEP:
00C5A3  1  A9 94                lda     #<CON_ONE
00C5A5  1  A0 D5                ldy     #>CON_ONE
00C5A7  1  20 43 D7             jsr     LOAD_FAC_FROM_YA
00C5AA  1  20 C2 00             jsr     CHRGOT
00C5AD  1  C9 A2                cmp     #TOKEN_STEP
00C5AF  1  D0 06                bne     L2665
00C5B1  1  20 BC 00             jsr     CHRGET
00C5B4  1  20 A5 CA             jsr     FRMNUM
00C5B7  1               L2665:
00C5B7  1  20 C2 D7             jsr     SIGN
00C5BA  1  20 53 CB             jsr     FRM_STACK2
00C5BD  1  A5 98                lda     FORPNT+1
00C5BF  1  48                   pha
00C5C0  1  A5 97                lda     FORPNT
00C5C2  1  48                   pha
00C5C3  1  A9 81                lda     #$81
00C5C5  1  48                   pha
00C5C6  1               ; ----------------------------------------------------------------------------
00C5C6  1               ; PERFORM NEXT STATEMENT
00C5C6  1               ; ----------------------------------------------------------------------------
00C5C6  1               NEWSTT:
00C5C6  1  20 2D C6             jsr     ISCNTC
00C5C9  1  A5 C3                lda     TXTPTR
00C5CB  1  A4 C4                ldy     TXTPTR+1
00C5CD  1  F0 06                beq     L2683
00C5CF  1  85 8B                sta     OLDTEXT
00C5D1  1  84 8C                sty     OLDTEXT+1
00C5D3  1  A0 00                ldy     #$00
00C5D5  1               L2683:
00C5D5  1  B1 C3                lda     (TXTPTR),y
00C5D7  1  F0 07                beq     LA5DC	; old: 1 cycle more on generic case
00C5D9  1  C9 3A                cmp     #$3A
00C5DB  1  F0 1D                beq     NEWSTT2
00C5DD  1               SYNERR1:
00C5DD  1  4C 04 CC             jmp     SYNERR
00C5E0  1               LA5DC:
00C5E0  1  A0 02                ldy     #$02
00C5E2  1  B1 C3                lda     (TXTPTR),y
00C5E4  1  18                   clc
00C5E5  1  F0 62                beq     L2701
00C5E7  1  C8                   iny
00C5E8  1  B1 C3                lda     (TXTPTR),y
00C5EA  1  85 87                sta     CURLIN
00C5EC  1  C8                   iny
00C5ED  1  B1 C3                lda     (TXTPTR),y
00C5EF  1  85 88                sta     CURLIN+1
00C5F1  1  98                   tya
00C5F2  1  65 C3                adc     TXTPTR
00C5F4  1  85 C3                sta     TXTPTR
00C5F6  1  90 02                bcc     NEWSTT2
00C5F8  1  E6 C4                inc     TXTPTR+1
00C5FA  1               NEWSTT2:
00C5FA  1  20 BC 00             jsr     CHRGET
00C5FD  1  20 03 C6             jsr     EXECUTE_STATEMENT
00C600  1  4C C6 C5             jmp     NEWSTT
00C603  1               ; ----------------------------------------------------------------------------
00C603  1               ; EXECUTE A STATEMENT
00C603  1               ;
00C603  1               ; (A) IS FIRST CHAR OF STATEMENT
00C603  1               ; CARRY IS SET
00C603  1               ; ----------------------------------------------------------------------------
00C603  1               EXECUTE_STATEMENT:
00C603  1  F0 6D                beq     RET1
00C605  1  38                   sec
00C606  1               EXECUTE_STATEMENT1:
00C606  1  E9 80                sbc     #$80
00C608  1  B0 03 4C B1          jcc     LET	; old: 1 cycle more on instr.
00C60C  1  C7           
00C60D  1               
00C60D  1  C9 1C                cmp     #NUM_TOKENS
00C60F  1  B0 CC                bcs     SYNERR1
00C611  1  0A                   asl     a
00C612  1  A8                   tay
00C613  1  B9 01 C0             lda     TOKEN_ADDRESS_TABLE+1,y
00C616  1  48                   pha
00C617  1  B9 00 C0             lda     TOKEN_ADDRESS_TABLE,y
00C61A  1  48                   pha
00C61B  1  4C BC 00             jmp     CHRGET
00C61E  1               ; ----------------------------------------------------------------------------
00C61E  1               ; "RESTORE" STATEMENT
00C61E  1               ; ----------------------------------------------------------------------------
00C61E  1               RESTORE:
00C61E  1  38                   sec
00C61F  1  A5 79                lda     TXTTAB
00C621  1  E9 01                sbc     #$01
00C623  1  A4 7A                ldy     TXTTAB+1
00C625  1  B0 01                bcs     SETDA
00C627  1  88                   dey
00C628  1               SETDA:
00C628  1  85 8F                sta     DATPTR
00C62A  1  84 90                sty     DATPTR+1
00C62C  1  60                   rts
00C62D  1               ; ----------------------------------------------------------------------------
00C62D  1               ; SEE IF CONTROL-C TYPED
00C62D  1               ; ----------------------------------------------------------------------------
00C62D  1               
00C62D  1               ISCNTC:
00C62D  1               ; MODIFIED CALL BY G.SEARLE FROM THE ORIGINAL OSI CODE
00C62D  1  20 58 FF             jsr     MONISCNTC
00C630  1               ; runs into "STOP"
00C630  1               ; ----------------------------------------------------------------------------
00C630  1               ; "STOP" STATEMENT
00C630  1               ; ----------------------------------------------------------------------------
00C630  1               STOP:
00C630  1  B0 01                bcs     END2
00C632  1               ; ----------------------------------------------------------------------------
00C632  1               ; "END" STATEMENT
00C632  1               ; ----------------------------------------------------------------------------
00C632  1               END:
00C632  1  18                   clc
00C633  1               END2:
00C633  1  D0 3D                bne     RET1
00C635  1  A5 C3                lda     TXTPTR
00C637  1  A4 C4                ldy     TXTPTR+1
00C639  1  F0 0C                beq     END4
00C63B  1  85 8B                sta     OLDTEXT
00C63D  1  84 8C                sty     OLDTEXT+1
00C63F  1               CONTROL_C_TYPED:
00C63F  1  A5 87                lda     CURLIN
00C641  1  A4 88                ldy     CURLIN+1
00C643  1  85 89                sta     OLDLIN
00C645  1  84 8A                sty     OLDLIN+1
00C647  1               END4:
00C647  1  68                   pla
00C648  1  68                   pla
00C649  1               L2701:
00C649  1  A9 99                lda     #<QT_BREAK
00C64B  1  A0 C1                ldy     #>QT_BREAK
00C64D  1  A2 00                ldx     #$00
00C64F  1  86 64                stx     Z14
00C651  1  90 03                bcc     L270E
00C653  1  4C 69 C2             jmp     PRINT_ERROR_LINNUM
00C656  1               L270E:
00C656  1  4C 74 C2             jmp     RESTART
00C659  1               ; ----------------------------------------------------------------------------
00C659  1               ; "CONT" COMMAND
00C659  1               ; ----------------------------------------------------------------------------
00C659  1               CONT:
00C659  1  D0 17                bne     RET1
00C65B  1  A2 1E                ldx     #ERR_CANTCONT
00C65D  1  A4 8C                ldy     OLDTEXT+1
00C65F  1  D0 03                bne     L271C
00C661  1  4C 4E C2             jmp     ERROR
00C664  1               L271C:
00C664  1  A5 8B                lda     OLDTEXT
00C666  1  85 C3                sta     TXTPTR
00C668  1  84 C4                sty     TXTPTR+1
00C66A  1  A5 89                lda     OLDLIN
00C66C  1  A4 8A                ldy     OLDLIN+1
00C66E  1  85 87                sta     CURLIN
00C670  1  84 88                sty     CURLIN+1
00C672  1               RET1:
00C672  1  60                   rts
00C673  1               NULL:
00C673  1  20 A6 D3             jsr     GETBYT
00C676  1  D0 FA                bne     RET1
00C678  1  E8                   inx
00C679  1  E0 0A                cpx     #NULL_MAX
00C67B  1  B0 04                bcs     L2739
00C67D  1  CA                   dex
00C67E  1  86 0D                stx     Z15
00C680  1  60                   rts
00C681  1               L2739:
00C681  1  4C 80 CE             jmp     IQERR
00C684  1               CLEAR:
00C684  1  D0 EC                bne     RET1
00C686  1  4C 7E C4             jmp     CLEARC
00C689  1               ; ----------------------------------------------------------------------------
00C689  1               ; "RUN" COMMAND
00C689  1               ; ----------------------------------------------------------------------------
00C689  1               RUN:
00C689  1  D0 03                bne     L27CF
00C68B  1  4C 7B C4             jmp     SETPTRS
00C68E  1               L27CF:
00C68E  1  20 7E C4             jsr     CLEARC
00C691  1  4C A8 C6             jmp     L27E9
00C694  1               ; ----------------------------------------------------------------------------
00C694  1               ; "GOSUB" STATEMENT
00C694  1               ;
00C694  1               ; LEAVES 7 BYTES ON STACK:
00C694  1               ; 2 -- RETURN ADDRESS (NEWSTT)
00C694  1               ; 2 -- TXTPTR
00C694  1               ; 2 -- LINE #
00C694  1               ; 1 -- GOSUB TOKEN
00C694  1               ; ----------------------------------------------------------------------------
00C694  1               GOSUB:
00C694  1  A9 03                lda     #$03
00C696  1  20 12 C2             jsr     CHKMEM
00C699  1  A5 C4                lda     TXTPTR+1
00C69B  1  48                   pha
00C69C  1  A5 C3                lda     TXTPTR
00C69E  1  48                   pha
00C69F  1  A5 88                lda     CURLIN+1
00C6A1  1  48                   pha
00C6A2  1  A5 87                lda     CURLIN
00C6A4  1  48                   pha
00C6A5  1  A9 8C                lda     #TOKEN_GOSUB
00C6A7  1  48                   pha
00C6A8  1               L27E9:
00C6A8  1  20 C2 00             jsr     CHRGOT
00C6AB  1  20 B1 C6             jsr     GOTO
00C6AE  1  4C C6 C5             jmp     NEWSTT
00C6B1  1               ; ----------------------------------------------------------------------------
00C6B1  1               ; "GOTO" STATEMENT
00C6B1  1               ; ALSO USED BY "RUN" AND "GOSUB"
00C6B1  1               ; ----------------------------------------------------------------------------
00C6B1  1               GOTO:
00C6B1  1  20 77 C7             jsr     LINGET
00C6B4  1  20 15 C7             jsr     REMN
00C6B7  1  A5 88                lda     CURLIN+1
00C6B9  1  C5 12                cmp     LINNUM+1
00C6BB  1  B0 0B                bcs     L2809
00C6BD  1  98                   tya
00C6BE  1  38                   sec
00C6BF  1  65 C3                adc     TXTPTR
00C6C1  1  A6 C4                ldx     TXTPTR+1
00C6C3  1  90 07                bcc     L280D
00C6C5  1  E8                   inx
00C6C6  1  B0 04                bcs     L280D
00C6C8  1               L2809:
00C6C8  1  A5 79                lda     TXTTAB
00C6CA  1  A6 7A                ldx     TXTTAB+1
00C6CC  1               L280D:
00C6CC  1  20 3A C4             jsr     FL1
00C6CF  1  90 1E                bcc     UNDERR
00C6D1  1  A5 AA                lda     LOWTRX
00C6D3  1  E9 01                sbc     #$01
00C6D5  1  85 C3                sta     TXTPTR
00C6D7  1  A5 AB                lda     LOWTRX+1
00C6D9  1  E9 00                sbc     #$00
00C6DB  1  85 C4                sta     TXTPTR+1
00C6DD  1               L281E:
00C6DD  1  60                   rts
00C6DE  1               ; ----------------------------------------------------------------------------
00C6DE  1               ; "POP" AND "RETURN" STATEMENTS
00C6DE  1               ; ----------------------------------------------------------------------------
00C6DE  1               POP:
00C6DE  1  D0 FD                bne     L281E
00C6E0  1  A9 FF                lda     #$FF
00C6E2  1  85 97                sta     FORPNT
00C6E4  1  20 A1 C1             jsr     GTFORPNT
00C6E7  1  9A                   txs
00C6E8  1  C9 8C                cmp     #TOKEN_GOSUB
00C6EA  1  F0 0B                beq     RETURN
00C6EC  1  A2 04                ldx     #ERR_NOGOSUB
00C6EE  1  2C                   .byte   $2C
00C6EF  1               UNDERR:
00C6EF  1  A2 0E                ldx     #ERR_UNDEFSTAT
00C6F1  1  4C 4E C2             jmp     ERROR
00C6F4  1               ; ----------------------------------------------------------------------------
00C6F4  1               SYNERR2:
00C6F4  1  4C 04 CC             jmp     SYNERR
00C6F7  1               ; ----------------------------------------------------------------------------
00C6F7  1               RETURN:
00C6F7  1  68                   pla
00C6F8  1  68                   pla
00C6F9  1  85 87                sta     CURLIN
00C6FB  1  68                   pla
00C6FC  1  85 88                sta     CURLIN+1
00C6FE  1  68                   pla
00C6FF  1  85 C3                sta     TXTPTR
00C701  1  68                   pla
00C702  1  85 C4                sta     TXTPTR+1
00C704  1               ; ----------------------------------------------------------------------------
00C704  1               ; "DATA" STATEMENT
00C704  1               ; EXECUTED BY SKIPPING TO NEXT COLON OR EOL
00C704  1               ; ----------------------------------------------------------------------------
00C704  1               DATA:
00C704  1  20 12 C7             jsr     DATAN
00C707  1               ; ----------------------------------------------------------------------------
00C707  1               ; ADD (Y) TO TXTPTR
00C707  1               ; ----------------------------------------------------------------------------
00C707  1               ADDON:
00C707  1  98                   tya
00C708  1  18                   clc
00C709  1  65 C3                adc     TXTPTR
00C70B  1  85 C3                sta     TXTPTR
00C70D  1  90 02                bcc     L2852
00C70F  1  E6 C4                inc     TXTPTR+1
00C711  1               L2852:
00C711  1  60                   rts
00C712  1               ; ----------------------------------------------------------------------------
00C712  1               ; SCAN AHEAD TO NEXT ":" OR EOL
00C712  1               ; ----------------------------------------------------------------------------
00C712  1               DATAN:
00C712  1  A2 3A                ldx     #$3A
00C714  1  2C                   .byte   $2C
00C715  1               REMN:
00C715  1  A2 00                ldx     #$00
00C717  1  86 5B                stx     CHARAC
00C719  1  A0 00                ldy     #$00
00C71B  1  84 5C                sty     ENDCHR
00C71D  1               L285E:
00C71D  1  A5 5C                lda     ENDCHR
00C71F  1  A6 5B                ldx     CHARAC
00C721  1  85 5B                sta     CHARAC
00C723  1  86 5C                stx     ENDCHR
00C725  1               L2866:
00C725  1  B1 C3                lda     (TXTPTR),y
00C727  1  F0 E8                beq     L2852
00C729  1  C5 5C                cmp     ENDCHR
00C72B  1  F0 E4                beq     L2852
00C72D  1  C8                   iny
00C72E  1  C9 22                cmp     #$22
00C730  1  F0 EB                beq     L285E; old: swap & cont is faster
00C732  1  D0 F1                bne     L2866
00C734  1               ; ----------------------------------------------------------------------------
00C734  1               ; "IF" STATEMENT
00C734  1               ; ----------------------------------------------------------------------------
00C734  1               IF:
00C734  1  20 B9 CA             jsr     FRMEVL
00C737  1  20 C2 00             jsr     CHRGOT
00C73A  1  C9 88                cmp     #TOKEN_GOTO
00C73C  1  F0 05                beq     L2884
00C73E  1  A9 A0                lda     #TOKEN_THEN
00C740  1  20 FB CB             jsr     SYNCHR
00C743  1               L2884:
00C743  1  A5 AC                lda     FAC
00C745  1  D0 05                bne     L288D
00C747  1               ; ----------------------------------------------------------------------------
00C747  1               ; "REM" STATEMENT, OR FALSE "IF" STATEMENT
00C747  1               ; ----------------------------------------------------------------------------
00C747  1               REM:
00C747  1  20 15 C7             jsr     REMN
00C74A  1  F0 BB                beq     ADDON
00C74C  1               L288D:
00C74C  1  20 C2 00             jsr     CHRGOT
00C74F  1  B0 03                bcs     L2895
00C751  1  4C B1 C6             jmp     GOTO
00C754  1               L2895:
00C754  1  4C 03 C6             jmp     EXECUTE_STATEMENT
00C757  1               ; ----------------------------------------------------------------------------
00C757  1               ; "ON" STATEMENT
00C757  1               ;
00C757  1               ; ON <EXP> GOTO <LIST>
00C757  1               ; ON <EXP> GOSUB <LIST>
00C757  1               ; ----------------------------------------------------------------------------
00C757  1               ON:
00C757  1  20 A6 D3             jsr     GETBYT
00C75A  1  48                   pha
00C75B  1  C9 8C                cmp     #TOKEN_GOSUB
00C75D  1  F0 04                beq     L28A4
00C75F  1               L28A0:
00C75F  1  C9 88                cmp     #TOKEN_GOTO
00C761  1  D0 91                bne     SYNERR2
00C763  1               L28A4:
00C763  1  C6 AF                dec     FAC_LAST
00C765  1  D0 04                bne     L28AC
00C767  1  68                   pla
00C768  1  4C 06 C6             jmp     EXECUTE_STATEMENT1
00C76B  1               L28AC:
00C76B  1  20 BC 00             jsr     CHRGET
00C76E  1  20 77 C7             jsr     LINGET
00C771  1  C9 2C                cmp     #$2C
00C773  1  F0 EE                beq     L28A4
00C775  1  68                   pla
00C776  1               L28B7:
00C776  1  60                   rts
00C777  1               ; ----------------------------------------------------------------------------
00C777  1               ; CONVERT LINE NUMBER
00C777  1               ; ----------------------------------------------------------------------------
00C777  1               LINGET:
00C777  1  A2 00                ldx     #$00
00C779  1  86 11                stx     LINNUM
00C77B  1  86 12                stx     LINNUM+1
00C77D  1               L28BE:
00C77D  1  B0 F7                bcs     L28B7
00C77F  1  E9 2F                sbc     #$2F
00C781  1  85 5B                sta     CHARAC
00C783  1  A5 12                lda     LINNUM+1
00C785  1  85 71                sta     INDEX
00C787  1  C9 19                cmp     #$19
00C789  1  B0 D4                bcs     L28A0
00C78B  1               ; <<<<<DANGEROUS CODE>>>>>
00C78B  1               ; NOTE THAT IF (A) = $AB ON THE LINE ABOVE,
00C78B  1               ; ON.1 WILL COMPARE = AND CAUSE A CATASTROPHIC
00C78B  1               ; JUMP TO $22D9 (FOR GOTO), OR OTHER LOCATIONS
00C78B  1               ; FOR OTHER CALLS TO LINGET.
00C78B  1               ;
00C78B  1               ; YOU CAN SEE THIS IS YOU FIRST PUT "BRK" IN $22D9,
00C78B  1               ; THEN TYPE "GO TO 437761".
00C78B  1               ;
00C78B  1               ; ANY VALUE FROM 437760 THROUGH 440319 WILL CAUSE
00C78B  1               ; THE PROBLEM.  ($AB00 - $ABFF)
00C78B  1               ; <<<<<DANGEROUS CODE>>>>>
00C78B  1  A5 11                lda     LINNUM
00C78D  1  0A                   asl     a
00C78E  1  26 71                rol     INDEX
00C790  1  0A                   asl     a
00C791  1  26 71                rol     INDEX
00C793  1  65 11                adc     LINNUM
00C795  1  85 11                sta     LINNUM
00C797  1  A5 71                lda     INDEX
00C799  1  65 12                adc     LINNUM+1
00C79B  1  85 12                sta     LINNUM+1
00C79D  1  06 11                asl     LINNUM
00C79F  1  26 12                rol     LINNUM+1
00C7A1  1  A5 11                lda     LINNUM
00C7A3  1  65 5B                adc     CHARAC
00C7A5  1  85 11                sta     LINNUM
00C7A7  1  90 02                bcc     L28EC
00C7A9  1  E6 12                inc     LINNUM+1
00C7AB  1               L28EC:
00C7AB  1  20 BC 00             jsr     CHRGET
00C7AE  1  4C 7D C7             jmp     L28BE
00C7B1  1               ; ----------------------------------------------------------------------------
00C7B1  1               ; "LET" STATEMENT
00C7B1  1               ;
00C7B1  1               ; LET <VAR> = <EXP>
00C7B1  1               ; <VAR> = <EXP>
00C7B1  1               ; ----------------------------------------------------------------------------
00C7B1  1               LET:
00C7B1  1  20 03 CD             jsr     PTRGET
00C7B4  1  85 97                sta     FORPNT
00C7B6  1  84 98                sty     FORPNT+1
00C7B8  1  A9 AB                lda     #TOKEN_EQUAL
00C7BA  1  20 FB CB             jsr     SYNCHR
00C7BD  1  A5 5F                lda     VALTYP
00C7BF  1  48                   pha
00C7C0  1  20 B9 CA             jsr     FRMEVL
00C7C3  1  68                   pla
00C7C4  1  2A                   rol     a
00C7C5  1  20 AB CA             jsr     CHKVAL
00C7C8  1  D0 03                bne     LETSTRING
00C7CA  1               ; ----------------------------------------------------------------------------
00C7CA  1               ; REAL VARIABLE = EXPRESSION
00C7CA  1               ; ----------------------------------------------------------------------------
00C7CA  1  4C 6C D7             jmp     SETFOR
00C7CD  1               LETSTRING:
00C7CD  1               ; ----------------------------------------------------------------------------
00C7CD  1               ; INSTALL STRING, DESCRIPTOR ADDRESS IS AT FAC+3,4
00C7CD  1               ; ----------------------------------------------------------------------------
00C7CD  1  A0 02                ldy     #$02
00C7CF  1  B1 AE                lda     (FAC_LAST-1),y
00C7D1  1  C5 82                cmp     FRETOP+1
00C7D3  1  90 17                bcc     L2946
00C7D5  1  D0 07                bne     L2938
00C7D7  1  88                   dey
00C7D8  1  B1 AE                lda     (FAC_LAST-1),y
00C7DA  1  C5 81                cmp     FRETOP
00C7DC  1  90 0E                bcc     L2946
00C7DE  1               L2938:
00C7DE  1  A4 AF                ldy     FAC_LAST
00C7E0  1  C4 7C                cpy     VARTAB+1
00C7E2  1  90 08                bcc     L2946
00C7E4  1  D0 0D                bne     L294D
00C7E6  1  A5 AE                lda     FAC_LAST-1
00C7E8  1  C5 7B                cmp     VARTAB
00C7EA  1  B0 07                bcs     L294D
00C7EC  1               L2946:
00C7EC  1  A5 AE                lda     FAC_LAST-1
00C7EE  1  A4 AF                ldy     FAC_LAST
00C7F0  1  4C 09 C8             jmp     L2963
00C7F3  1               L294D:
00C7F3  1  A0 00                ldy     #$00
00C7F5  1  B1 AE                lda     (FAC_LAST-1),y
00C7F7  1  20 94 D0             jsr     STRINI
00C7FA  1  A5 9E                lda     DSCPTR
00C7FC  1  A4 9F                ldy     DSCPTR+1
00C7FE  1  85 B8                sta     STRNG1
00C800  1  84 B9                sty     STRNG1+1
00C802  1  20 82 D2             jsr     MOVINS
00C805  1  A9 AC                lda     #FAC
00C807  1  A0 00                ldy     #$00
00C809  1               L2963:
00C809  1  85 9E                sta     DSCPTR
00C80B  1  84 9F                sty     DSCPTR+1
00C80D  1  20 E3 D2             jsr     FRETMS
00C810  1  A0 00                ldy     #$00
00C812  1  B1 9E                lda     (DSCPTR),y
00C814  1  91 97                sta     (FORPNT),y
00C816  1  C8                   iny
00C817  1  B1 9E                lda     (DSCPTR),y
00C819  1  91 97                sta     (FORPNT),y
00C81B  1  C8                   iny
00C81C  1  B1 9E                lda     (DSCPTR),y
00C81E  1  91 97                sta     (FORPNT),y
00C820  1  60                   rts
00C821  1               PRSTRING:
00C821  1  20 BE C8             jsr     STRPRT
00C824  1               L297E:
00C824  1  20 C2 00             jsr     CHRGOT
00C827  1               ; ----------------------------------------------------------------------------
00C827  1               ; "PRINT" STATEMENT
00C827  1               ; ----------------------------------------------------------------------------
00C827  1               PRINT:
00C827  1  F0 3B                beq     CRDO
00C829  1               PRINT2:
00C829  1  F0 57                beq     L29DD
00C82B  1  C9 9C                cmp     #TOKEN_TAB
00C82D  1  F0 6B                beq     L29F5
00C82F  1  C9 9F                cmp     #TOKEN_SPC
00C831  1  F0 67                beq     L29F5
00C833  1  C9 2C                cmp     #','
00C835  1  F0 4C                beq     L29DE
00C837  1  C9 3B                cmp     #$3B
00C839  1  F0 7A                beq     L2A0D
00C83B  1  20 B9 CA             jsr     FRMEVL
00C83E  1  24 5F                bit     VALTYP
00C840  1  30 DF                bmi     PRSTRING
00C842  1  20 66 D9             jsr     FOUT
00C845  1  20 A6 D0             jsr     STRLIT
00C848  1  A0 00                ldy     #$00
00C84A  1  B1 AE                lda     (FAC_LAST-1),y
00C84C  1  18                   clc
00C84D  1  65 0E                adc     POSX
00C84F  1  C5 0F                cmp     Z17
00C851  1  90 03                bcc     L29B1
00C853  1  20 64 C8             jsr     CRDO
00C856  1               L29B1:
00C856  1  20 BE C8             jsr     STRPRT
00C859  1  20 D8 C8             jsr     OUTSP
00C85C  1  D0 C6                bne     L297E ; branch always
00C85E  1               L29B9:
00C85E  1  A0 00                ldy     #$00
00C860  1  94 13                sty     INPUTBUFFER,x
00C862  1  A2 12                ldx     #LINNUM+1
00C864  1               CRDO:
00C864  1  A9 0D                lda     #CRLF_1
00C866  1  85 0E                sta     POSX
00C868  1  20 DD C8             jsr     OUTDO
00C86B  1  A9 0A                lda     #CRLF_2
00C86D  1  20 DD C8             jsr     OUTDO
00C870  1               PRINTNULLS:
00C870  1  8A                   txa
00C871  1  48                   pha
00C872  1  A6 0D                ldx     Z15
00C874  1  F0 08                beq     L29D9
00C876  1  A9 00                lda     #$00
00C878  1               L29D3:
00C878  1  20 DD C8             jsr     OUTDO
00C87B  1  CA                   dex
00C87C  1  D0 FA                bne     L29D3
00C87E  1               L29D9:
00C87E  1  86 0E                stx     POSX
00C880  1  68                   pla
00C881  1  AA                   tax
00C882  1               L29DD:
00C882  1  60                   rts
00C883  1               L29DE:
00C883  1  A5 0E                lda     POSX
00C885  1  C5 10                cmp     Z18
00C887  1  90 06                bcc     L29EA
00C889  1  20 64 C8             jsr     CRDO
00C88C  1  4C B5 C8             jmp     L2A0D
00C88F  1               L29EA:
00C88F  1  38                   sec
00C890  1               L29EB:
00C890  1  E9 0E                sbc     #$0E
00C892  1  B0 FC                bcs     L29EB
00C894  1  49 FF                eor     #$FF
00C896  1  69 01                adc     #$01
00C898  1  D0 14                bne     L2A08
00C89A  1               L29F5:
00C89A  1  48                   pha
00C89B  1  20 A3 D3             jsr     GTBYTC
00C89E  1  C9 29                cmp     #')'
00C8A0  1  D0 66                bne     SYNERR4
00C8A2  1  68                   pla
00C8A3  1  C9 9C                cmp     #TOKEN_TAB
00C8A5  1  D0 08                bne     L2A0A
00C8A7  1  8A                   txa
00C8A8  1  E5 0E                sbc     POSX
00C8AA  1  90 09                bcc     L2A0D
00C8AC  1  F0 07                beq     L2A0D
00C8AE  1               L2A08:
00C8AE  1  AA                   tax
00C8AF  1               L2A0A:
00C8AF  1  20 D8 C8             jsr     OUTSP
00C8B2  1  CA                   dex
00C8B3  1  D0 FA                bne     L2A0A
00C8B5  1               L2A0D:
00C8B5  1  20 BC 00             jsr     CHRGET
00C8B8  1  4C 29 C8             jmp     PRINT2
00C8BB  1               ; ----------------------------------------------------------------------------
00C8BB  1               ; PRINT STRING AT (Y,A)
00C8BB  1               ; ----------------------------------------------------------------------------
00C8BB  1               STROUT:
00C8BB  1  20 A6 D0             jsr     STRLIT
00C8BE  1               ; ----------------------------------------------------------------------------
00C8BE  1               ; PRINT STRING AT (FACMO,FACLO)
00C8BE  1               ; ----------------------------------------------------------------------------
00C8BE  1               STRPRT:
00C8BE  1  20 AE D2             jsr     FREFAC
00C8C1  1  AA                   tax
00C8C2  1  A0 00                ldy     #$00
00C8C4  1  E8                   inx
00C8C5  1               L2A22:
00C8C5  1  CA                   dex
00C8C6  1  F0 BA                beq     L29DD
00C8C8  1  B1 71                lda     (INDEX),y
00C8CA  1  20 DD C8             jsr     OUTDO
00C8CD  1  C8                   iny
00C8CE  1  C9 0D                cmp     #$0D
00C8D0  1  D0 F3                bne     L2A22
00C8D2  1  20 70 C8             jsr     PRINTNULLS
00C8D5  1  4C C5 C8             jmp     L2A22
00C8D8  1               ; ----------------------------------------------------------------------------
00C8D8  1               OUTSP:
00C8D8  1  A9 20                lda     #$20
00C8DA  1  2C                   .byte   $2C
00C8DB  1               OUTQUES:
00C8DB  1  A9 3F                lda     #$3F
00C8DD  1               ; ----------------------------------------------------------------------------
00C8DD  1               ; PRINT CHAR FROM (A)
00C8DD  1               ; ----------------------------------------------------------------------------
00C8DD  1               OUTDO:
00C8DD  1  24 64                bit     Z14
00C8DF  1  30 18                bmi     L2A56
00C8E1  1               ; Commodore forgot to remove this in CBM1
00C8E1  1  48                   pha
00C8E2  1  C9 20                cmp     #$20
00C8E4  1  90 0B                bcc     L2A4E
00C8E6  1  A5 0E                lda     POSX
00C8E8  1  C5 0F                cmp     Z17
00C8EA  1  D0 03                bne     L2A4C
00C8EC  1  20 64 C8             jsr     CRDO
00C8EF  1               L2A4C:
00C8EF  1  E6 0E                inc     POSX
00C8F1  1               L2A4E:
00C8F1  1               ; Commodore forgot to remove this in CBM1
00C8F1  1  68                   pla
00C8F2  1  20 39 FF             jsr     MONCOUT
00C8F5  1  EA                   nop
00C8F6  1  EA                   nop
00C8F7  1  EA                   nop
00C8F8  1  EA                   nop
00C8F9  1               L2A56:
00C8F9  1  29 FF                and     #$FF
00C8FB  1  60                   rts
00C8FC  1               ; ----------------------------------------------------------------------------
00C8FC  1               ; ???
00C8FC  1               ; ----------------------------------------------------------------------------
00C8FC  1               ; ----------------------------------------------------------------------------
00C8FC  1               ; INPUT CONVERSION ERROR:  ILLEGAL CHARACTER
00C8FC  1               ; IN NUMERIC FIELD.  MUST DISTINGUISH
00C8FC  1               ; BETWEEN INPUT, READ, AND GET
00C8FC  1               ; ----------------------------------------------------------------------------
00C8FC  1               INPUTERR:
00C8FC  1  A5 62                lda     INPUTFLG
00C8FE  1  F0 0B                beq     RESPERR	; INPUT
00C900  1               ; without this, it treats GET errors
00C900  1               ; like READ errors
00C900  1  A5 8D                lda     Z8C
00C902  1  A4 8E                ldy     Z8C+1
00C904  1  85 87                sta     CURLIN
00C906  1  84 88                sty     CURLIN+1
00C908  1               SYNERR4:
00C908  1  4C 04 CC             jmp     SYNERR
00C90B  1               RESPERR:
00C90B  1  A9 25                lda     #<ERRREENTRY
00C90D  1  A0 CA                ldy     #>ERRREENTRY
00C90F  1  20 BB C8             jsr     STROUT
00C912  1  A5 8B                lda     OLDTEXT
00C914  1  A4 8C                ldy     OLDTEXT+1
00C916  1  85 C3                sta     TXTPTR
00C918  1  84 C4                sty     TXTPTR+1
00C91A  1  60                   rts
00C91B  1               ; ----------------------------------------------------------------------------
00C91B  1               ; "GET" STATEMENT
00C91B  1               ; ----------------------------------------------------------------------------
00C91B  1               GET:
00C91B  1               ; ----------------------------------------------------------------------------
00C91B  1               ; "INPUT#" STATEMENT
00C91B  1               ; ----------------------------------------------------------------------------
00C91B  1               ; ----------------------------------------------------------------------------
00C91B  1               ; "INPUT" STATEMENT
00C91B  1               ; ----------------------------------------------------------------------------
00C91B  1               INPUT:
00C91B  1  46 64                lsr     Z14
00C91D  1  C9 22                cmp     #$22
00C91F  1  D0 0B                bne     L2A9E
00C921  1  20 B9 CB             jsr     STRTXT
00C924  1  A9 3B                lda     #$3B
00C926  1  20 FB CB             jsr     SYNCHR
00C929  1  20 BE C8             jsr     STRPRT
00C92C  1               L2A9E:
00C92C  1  20 CC CF             jsr     ERRDIR
00C92F  1  A9 2C                lda     #$2C
00C931  1  85 12                sta     INPUTBUFFER-1
00C933  1  20 3E C9             jsr     NXIN
00C936  1  A5 13                lda     INPUTBUFFER
00C938  1  D0 12                bne     L2ABE
00C93A  1  18                   clc
00C93B  1  4C 3F C6             jmp     CONTROL_C_TYPED
00C93E  1               NXIN:
00C93E  1  20 DB C8             jsr     OUTQUES	; '?'
00C941  1  20 D8 C8             jsr     OUTSP
00C944  1  4C 57 C3             jmp     INLIN
00C947  1               ; ----------------------------------------------------------------------------
00C947  1               ; "GETC" STATEMENT
00C947  1               ; ----------------------------------------------------------------------------
00C947  1               ; ----------------------------------------------------------------------------
00C947  1               ; "READ" STATEMENT
00C947  1               ; ----------------------------------------------------------------------------
00C947  1               READ:
00C947  1  A6 8F                ldx     DATPTR
00C949  1  A4 90                ldy     DATPTR+1
00C94B  1               ; AppleSoft II, too
00C94B  1  A9                   .byte   $A9	; LDA #$98
00C94C  1               L2ABE:
00C94C  1  98                   tya
00C94D  1               ; ----------------------------------------------------------------------------
00C94D  1               ; PROCESS INPUT LIST
00C94D  1               ;
00C94D  1               ; (Y,X) IS ADDRESS OF INPUT DATA STRING
00C94D  1               ; (A) = VALUE FOR INPUTFLG:  $00 FOR INPUT
00C94D  1               ; 				$40 FOR GET
00C94D  1               ;				$98 FOR READ
00C94D  1               ; ----------------------------------------------------------------------------
00C94D  1  85 62                sta     INPUTFLG
00C94F  1  86 91                stx     INPTR
00C951  1  84 92                sty     INPTR+1
00C953  1               PROCESS_INPUT_ITEM:
00C953  1  20 03 CD             jsr     PTRGET
00C956  1  85 97                sta     FORPNT
00C958  1  84 98                sty     FORPNT+1
00C95A  1  A5 C3                lda     TXTPTR
00C95C  1  A4 C4                ldy     TXTPTR+1
00C95E  1  85 11                sta     TXPSV
00C960  1  84 12                sty     TXPSV+1
00C962  1  A6 91                ldx     INPTR
00C964  1  A4 92                ldy     INPTR+1
00C966  1  86 C3                stx     TXTPTR
00C968  1  84 C4                sty     TXTPTR+1
00C96A  1  20 C2 00             jsr     CHRGOT
00C96D  1  D0 0E                bne     INSTART
00C96F  1  24 62                bit     INPUTFLG
00C971  1               ; BUG: The beq/bne L2AF8 below is supposed
00C971  1               ; to be always taken. For this to happen,
00C971  1               ; the last load must be a 0 for beq
00C971  1               ; and != 0 for bne. The original Microsoft
00C971  1               ; code had ldx/ldy/bne here, which was only
00C971  1               ; correct for a non-ZP INPUTBUFFER. Commodore
00C971  1               ; fixed it in CBMBASIC V1 by swapping the
00C971  1               ; ldx and the ldy. It was broken on KIM,
00C971  1               ; but okay on APPLE and CBM2, because
00C971  1               ; these used a non-ZP INPUTBUFFER.
00C971  1               ; Microsoft fixed this somewhere after KIM
00C971  1               ; and before MICROTAN, by using beq instead
00C971  1               ; of bne in the ZP case.
00C971  1  30 62                bmi     FINDATA
00C973  1  20 DB C8             jsr     OUTQUES
00C976  1  20 3E C9             jsr     NXIN
00C979  1  86 C3                stx     TXTPTR
00C97B  1  84 C4                sty     TXTPTR+1
00C97D  1               ; ----------------------------------------------------------------------------
00C97D  1               INSTART:
00C97D  1  20 BC 00             jsr     CHRGET
00C980  1  24 5F                bit     VALTYP
00C982  1  10 24                bpl     L2B34
00C984  1  85 5B                sta     CHARAC
00C986  1  C9 22                cmp     #$22
00C988  1  F0 07                beq     L2B1D
00C98A  1  A9 3A                lda     #$3A
00C98C  1  85 5B                sta     CHARAC
00C98E  1  A9 2C                lda     #$2C
00C990  1  18                   clc
00C991  1               L2B1D:
00C991  1  85 5C                sta     ENDCHR
00C993  1  A5 C3                lda     TXTPTR
00C995  1  A4 C4                ldy     TXTPTR+1
00C997  1  69 00                adc     #$00
00C999  1  90 01                bcc     L2B28
00C99B  1  C8                   iny
00C99C  1               L2B28:
00C99C  1  20 AC D0             jsr     STRLT2
00C99F  1  20 EB D3             jsr     POINT
00C9A2  1  20 CD C7             jsr     LETSTRING
00C9A5  1  4C AE C9             jmp     INPUT_MORE
00C9A8  1               ; ----------------------------------------------------------------------------
00C9A8  1               L2B34:
00C9A8  1  20 7F D8             jsr     FIN
00C9AB  1  20 6C D7             jsr     SETFOR
00C9AE  1               ; ----------------------------------------------------------------------------
00C9AE  1               INPUT_MORE:
00C9AE  1  20 C2 00             jsr     CHRGOT
00C9B1  1  F0 07                beq     L2B48
00C9B3  1  C9 2C                cmp     #$2C
00C9B5  1  F0 03                beq     L2B48
00C9B7  1  4C FC C8             jmp     INPUTERR
00C9BA  1               L2B48:
00C9BA  1  A5 C3                lda     TXTPTR
00C9BC  1  A4 C4                ldy     TXTPTR+1
00C9BE  1  85 91                sta     INPTR
00C9C0  1  84 92                sty     INPTR+1
00C9C2  1  A5 11                lda     TXPSV
00C9C4  1  A4 12                ldy     TXPSV+1
00C9C6  1  85 C3                sta     TXTPTR
00C9C8  1  84 C4                sty     TXTPTR+1
00C9CA  1  20 C2 00             jsr     CHRGOT
00C9CD  1  F0 2C                beq     INPDONE
00C9CF  1  20 F9 CB             jsr     CHKCOM
00C9D2  1  4C 53 C9             jmp     PROCESS_INPUT_ITEM
00C9D5  1               ; ----------------------------------------------------------------------------
00C9D5  1               FINDATA:
00C9D5  1  20 12 C7             jsr     DATAN
00C9D8  1  C8                   iny
00C9D9  1  AA                   tax
00C9DA  1  D0 12                bne     L2B7C
00C9DC  1  A2 06                ldx     #ERR_NODATA
00C9DE  1  C8                   iny
00C9DF  1  B1 C3                lda     (TXTPTR),y
00C9E1  1  F0 69                beq     GERR
00C9E3  1  C8                   iny
00C9E4  1  B1 C3                lda     (TXTPTR),y
00C9E6  1  85 8D                sta     Z8C
00C9E8  1  C8                   iny
00C9E9  1  B1 C3                lda     (TXTPTR),y
00C9EB  1  C8                   iny
00C9EC  1  85 8E                sta     Z8C+1
00C9EE  1               L2B7C:
00C9EE  1  B1 C3                lda     (TXTPTR),y
00C9F0  1  AA                   tax
00C9F1  1  20 07 C7             jsr     ADDON
00C9F4  1  E0 83                cpx     #$83
00C9F6  1  D0 DD                bne     FINDATA
00C9F8  1  4C 7D C9             jmp     INSTART
00C9FB  1               ; ---NO MORE INPUT REQUESTED------
00C9FB  1               INPDONE:
00C9FB  1  A5 91                lda     INPTR
00C9FD  1  A4 92                ldy     INPTR+1
00C9FF  1  A6 62                ldx     INPUTFLG
00CA01  1  F0 03                beq     L2B94 ; INPUT
00CA03  1  4C 28 C6             jmp     SETDA
00CA06  1               L2B94:
00CA06  1  A0 00                ldy     #$00
00CA08  1  B1 91                lda     (INPTR),y
00CA0A  1  F0 07                beq     L2BA1
00CA0C  1  A9 14                lda     #<ERREXTRA
00CA0E  1  A0 CA                ldy     #>ERREXTRA
00CA10  1  4C BB C8             jmp     STROUT
00CA13  1               L2BA1:
00CA13  1  60                   rts
00CA14  1               ; ----------------------------------------------------------------------------
00CA14  1               ERREXTRA:
00CA14  1  3F 45 58 54          .byte   "?EXTRA IGNORED"
00CA18  1  52 41 20 49  
00CA1C  1  47 4E 4F 52  
00CA22  1               
00CA22  1               
00CA22  1  0D 0A 00             .byte   $0D,$0A,$00
00CA25  1               ERRREENTRY:
00CA25  1  3F 52 45 44          .byte   "?REDO FROM START"
00CA29  1  4F 20 46 52  
00CA2D  1  4F 4D 20 53  
00CA35  1               
00CA35  1               
00CA35  1  0D 0A 00             .byte   $0D,$0A,$00
00CA38  1               ; ----------------------------------------------------------------------------
00CA38  1               ; "NEXT" STATEMENT
00CA38  1               ; ----------------------------------------------------------------------------
00CA38  1               NEXT:
00CA38  1  D0 04                bne     NEXT1
00CA3A  1  A0 00                ldy     #$00
00CA3C  1  F0 03                beq     NEXT2
00CA3E  1               NEXT1:
00CA3E  1  20 03 CD             jsr     PTRGET
00CA41  1               NEXT2:
00CA41  1  85 97                sta     FORPNT
00CA43  1  84 98                sty     FORPNT+1
00CA45  1  20 A1 C1             jsr     GTFORPNT
00CA48  1  F0 04                beq     NEXT3
00CA4A  1  A2 00                ldx     #$00
00CA4C  1               GERR:
00CA4C  1  F0 68                beq     JERROR
00CA4E  1               NEXT3:
00CA4E  1  9A                   txs
00CA4F  1  E8                   inx
00CA50  1  E8                   inx
00CA51  1  E8                   inx
00CA52  1  E8                   inx
00CA53  1  8A                   txa
00CA54  1  E8                   inx
00CA55  1  E8                   inx
00CA56  1  E8                   inx
00CA57  1  E8                   inx
00CA58  1  E8                   inx
00CA59  1  86 73                stx     DEST
00CA5B  1  A0 01                ldy     #>STACK
00CA5D  1  20 43 D7             jsr     LOAD_FAC_FROM_YA
00CA60  1  BA                   tsx
00CA61  1  BD 08 01             lda     STACK+BYTES_FP+4,x
00CA64  1  85 B0                sta     FACSIGN
00CA66  1  A5 97                lda     FORPNT
00CA68  1  A4 98                ldy     FORPNT+1
00CA6A  1  20 64 D4             jsr     FADD
00CA6D  1  20 6C D7             jsr     SETFOR
00CA70  1  A0 01                ldy     #>STACK
00CA72  1  20 F2 D7             jsr     FCOMP2
00CA75  1  BA                   tsx
00CA76  1  38                   sec
00CA77  1  FD 08 01             sbc     STACK+BYTES_FP+4,x
00CA7A  1  F0 17                beq     L2C22
00CA7C  1  BD 0D 01             lda     STACK+2*BYTES_FP+5,x
00CA7F  1  85 87                sta     CURLIN
00CA81  1  BD 0E 01             lda     STACK+2*BYTES_FP+6,x
00CA84  1  85 88                sta     CURLIN+1
00CA86  1  BD 10 01             lda     STACK+2*BYTES_FP+8,x
00CA89  1  85 C3                sta     TXTPTR
00CA8B  1  BD 0F 01             lda     STACK+2*BYTES_FP+7,x
00CA8E  1  85 C4                sta     TXTPTR+1
00CA90  1               L2C1F:
00CA90  1  4C C6 C5             jmp     NEWSTT
00CA93  1               L2C22:
00CA93  1  8A                   txa
00CA94  1  69 0F                adc     #2*BYTES_FP+7
00CA96  1  AA                   tax
00CA97  1  9A                   txs
00CA98  1  20 C2 00             jsr     CHRGOT
00CA9B  1  C9 2C                cmp     #$2C
00CA9D  1  D0 F1                bne     L2C1F
00CA9F  1  20 BC 00             jsr     CHRGET
00CAA2  1  20 3E CA             jsr     NEXT1
00CAA5  1               ; ----------------------------------------------------------------------------
00CAA5  1               ; EVALUATE EXPRESSION, MAKE SURE IT IS NUMERIC
00CAA5  1               ; ----------------------------------------------------------------------------
00CAA5  1               FRMNUM:
00CAA5  1  20 B9 CA             jsr     FRMEVL
00CAA8  1               ; ----------------------------------------------------------------------------
00CAA8  1               ; MAKE SURE (FAC) IS NUMERIC
00CAA8  1               ; ----------------------------------------------------------------------------
00CAA8  1               CHKNUM:
00CAA8  1  18                   clc
00CAA9  1  24                   .byte   $24
00CAAA  1               ; ----------------------------------------------------------------------------
00CAAA  1               ; MAKE SURE (FAC) IS STRING
00CAAA  1               ; ----------------------------------------------------------------------------
00CAAA  1               CHKSTR:
00CAAA  1  38                   sec
00CAAB  1               ; ----------------------------------------------------------------------------
00CAAB  1               ; MAKE SURE (FAC) IS CORRECT TYPE
00CAAB  1               ; IF C=0, TYPE MUST BE NUMERIC
00CAAB  1               ; IF C=1, TYPE MUST BE STRING
00CAAB  1               ; ----------------------------------------------------------------------------
00CAAB  1               CHKVAL:
00CAAB  1  24 5F                bit     VALTYP
00CAAD  1  30 03                bmi     L2C41
00CAAF  1  B0 03                bcs     L2C43
00CAB1  1               L2C40:
00CAB1  1  60                   rts
00CAB2  1               L2C41:
00CAB2  1  B0 FD                bcs     L2C40
00CAB4  1               L2C43:
00CAB4  1  A2 18                ldx     #ERR_BADTYPE
00CAB6  1               JERROR:
00CAB6  1  4C 4E C2             jmp     ERROR
00CAB9  1               ; ----------------------------------------------------------------------------
00CAB9  1               ; EVALUATE THE EXPRESSION AT TXTPTR, LEAVING THE
00CAB9  1               ; RESULT IN FAC.  WORKS FOR BOTH STRING AND NUMERIC
00CAB9  1               ; EXPRESSIONS.
00CAB9  1               ; ----------------------------------------------------------------------------
00CAB9  1               FRMEVL:
00CAB9  1  A6 C3                ldx     TXTPTR
00CABB  1  D0 02                bne     L2C4E
00CABD  1  C6 C4                dec     TXTPTR+1
00CABF  1               L2C4E:
00CABF  1  C6 C3                dec     TXTPTR
00CAC1  1  A2 00                ldx     #$00
00CAC3  1  24                   .byte   $24
00CAC4  1               FRMEVL1:
00CAC4  1  48                   pha
00CAC5  1  8A                   txa
00CAC6  1  48                   pha
00CAC7  1  A9 01                lda     #$01
00CAC9  1  20 12 C2             jsr     CHKMEM
00CACC  1  20 98 CB             jsr     FRM_ELEMENT
00CACF  1  A9 00                lda     #$00
00CAD1  1  85 9B                sta     CPRTYP
00CAD3  1               FRMEVL2:
00CAD3  1  20 C2 00             jsr     CHRGOT
00CAD6  1               L2C65:
00CAD6  1  38                   sec
00CAD7  1  E9 AA                sbc     #TOKEN_GREATER
00CAD9  1  90 17                bcc     L2C81
00CADB  1  C9 03                cmp     #$03
00CADD  1  B0 13                bcs     L2C81
00CADF  1  C9 01                cmp     #$01
00CAE1  1  2A                   rol     a
00CAE2  1  49 01                eor     #$01
00CAE4  1  45 9B                eor     CPRTYP
00CAE6  1  C5 9B                cmp     CPRTYP
00CAE8  1  90 61                bcc     SNTXERR
00CAEA  1  85 9B                sta     CPRTYP
00CAEC  1  20 BC 00             jsr     CHRGET
00CAEF  1  4C D6 CA             jmp     L2C65
00CAF2  1               L2C81:
00CAF2  1  A6 9B                ldx     CPRTYP
00CAF4  1  D0 2C                bne     FRM_RELATIONAL
00CAF6  1  B0 78                bcs     L2D02
00CAF8  1  69 07                adc     #$07
00CAFA  1  90 74                bcc     L2D02
00CAFC  1  65 5F                adc     VALTYP
00CAFE  1  D0 03                bne     L2C92
00CB00  1  4C 45 D2             jmp     CAT
00CB03  1               L2C92:
00CB03  1  69 FF                adc     #$FF
00CB05  1  85 71                sta     INDEX
00CB07  1  0A                   asl     a
00CB08  1  65 71                adc     INDEX
00CB0A  1  A8                   tay
00CB0B  1               FRM_PRECEDENCE_TEST:
00CB0B  1  68                   pla
00CB0C  1  D9 66 C0             cmp     MATHTBL,y
00CB0F  1  B0 64                bcs     FRM_PERFORM1
00CB11  1  20 A8 CA             jsr     CHKNUM
00CB14  1               L2CA3:
00CB14  1  48                   pha
00CB15  1               L2CA4:
00CB15  1  20 3B CB             jsr     FRM_RECURSE
00CB18  1  68                   pla
00CB19  1  A4 99                ldy     LASTOP
00CB1B  1  10 17                bpl     PREFNC
00CB1D  1  AA                   tax
00CB1E  1  F0 53                beq     GOEX
00CB20  1  D0 5C                bne     FRM_PERFORM2
00CB22  1               ; ----------------------------------------------------------------------------
00CB22  1               ; FOUND ONE OR MORE RELATIONAL OPERATORS <,=,>
00CB22  1               ; ----------------------------------------------------------------------------
00CB22  1               FRM_RELATIONAL:
00CB22  1  46 5F                lsr     VALTYP
00CB24  1  8A                   txa
00CB25  1  2A                   rol     a
00CB26  1  A6 C3                ldx     TXTPTR
00CB28  1  D0 02                bne     L2CBB
00CB2A  1  C6 C4                dec     TXTPTR+1
00CB2C  1               L2CBB:
00CB2C  1  C6 C3                dec     TXTPTR
00CB2E  1  A0 1B                ldy     #$1B
00CB30  1  85 9B                sta     CPRTYP
00CB32  1  D0 D7                bne     FRM_PRECEDENCE_TEST
00CB34  1               PREFNC:
00CB34  1  D9 66 C0             cmp     MATHTBL,y
00CB37  1  B0 45                bcs     FRM_PERFORM2
00CB39  1  90 D9                bcc     L2CA3
00CB3B  1               ; ----------------------------------------------------------------------------
00CB3B  1               ; STACK THIS OPERATION AND CALL FRMEVL FOR
00CB3B  1               ; ANOTHER ONE
00CB3B  1               ; ----------------------------------------------------------------------------
00CB3B  1               FRM_RECURSE:
00CB3B  1  B9 68 C0             lda     MATHTBL+2,y
00CB3E  1  48                   pha
00CB3F  1  B9 67 C0             lda     MATHTBL+1,y
00CB42  1  48                   pha
00CB43  1  20 4E CB             jsr     FRM_STACK1
00CB46  1  A5 9B                lda     CPRTYP
00CB48  1  4C C4 CA             jmp     FRMEVL1
00CB4B  1               SNTXERR:
00CB4B  1  4C 04 CC             jmp     SYNERR
00CB4E  1               ; ----------------------------------------------------------------------------
00CB4E  1               ; STACK (FAC)
00CB4E  1               ; THREE ENTRY POINTS:
00CB4E  1               ; 	1, FROM FRMEVL
00CB4E  1               ;	2, FROM "STEP"
00CB4E  1               ;	3, FROM "FOR"
00CB4E  1               ; ----------------------------------------------------------------------------
00CB4E  1               FRM_STACK1:
00CB4E  1  A5 B0                lda     FACSIGN
00CB50  1  BE 66 C0             ldx     MATHTBL,y
00CB53  1               ; ----------------------------------------------------------------------------
00CB53  1               ; ENTER HERE FROM "STEP", TO PUSH STEP SIGN AND VALUE
00CB53  1               ; ----------------------------------------------------------------------------
00CB53  1               FRM_STACK2:
00CB53  1  A8                   tay
00CB54  1  68                   pla
00CB55  1  85 71                sta     INDEX
00CB57  1  E6 71                inc     INDEX ; bug: assumes not on page boundary
00CB59  1               ; bug exists on AppleSoft II
00CB59  1  68                   pla
00CB5A  1  85 72                sta     INDEX+1
00CB5C  1  98                   tya
00CB5D  1  48                   pha
00CB5E  1               ; ----------------------------------------------------------------------------
00CB5E  1               ; ENTER HERE FROM "FOR", WITH (INDEX) = STEP,
00CB5E  1               ; TO PUSH INITIAL VALUE OF "FOR" VARIABLE
00CB5E  1               ; ----------------------------------------------------------------------------
00CB5E  1               FRM_STACK3:
00CB5E  1  20 B2 D7             jsr     ROUND_FAC
00CB61  1  A5 AF                lda     FAC+3
00CB63  1  48                   pha
00CB64  1  A5 AE                lda     FAC+2
00CB66  1  48                   pha
00CB67  1  A5 AD                lda     FAC+1
00CB69  1  48                   pha
00CB6A  1  A5 AC                lda     FAC
00CB6C  1  48                   pha
00CB6D  1  6C 71 00             jmp     (INDEX)
00CB70  1               L2D02:
00CB70  1  A0 FF                ldy     #$FF
00CB72  1  68                   pla
00CB73  1               GOEX:
00CB73  1  F0 20                beq     EXIT
00CB75  1               ; ----------------------------------------------------------------------------
00CB75  1               ; PERFORM STACKED OPERATION
00CB75  1               ;
00CB75  1               ; (A) = PRECEDENCE BYTE
00CB75  1               ; STACK:  1 -- CPRMASK
00CB75  1               ;	5 -- (ARG)
00CB75  1               ;	2 -- ADDR OF PERFORMER
00CB75  1               ; ----------------------------------------------------------------------------
00CB75  1               FRM_PERFORM1:
00CB75  1  C9 64                cmp     #$64
00CB77  1  F0 03                beq     L2D0E
00CB79  1  20 A8 CA             jsr     CHKNUM
00CB7C  1               L2D0E:
00CB7C  1  84 99                sty     LASTOP
00CB7E  1               FRM_PERFORM2:
00CB7E  1  68                   pla
00CB7F  1  4A                   lsr     a
00CB80  1  85 63                sta     CPRMASK
00CB82  1  68                   pla
00CB83  1  85 B3                sta     ARG
00CB85  1  68                   pla
00CB86  1  85 B4                sta     ARG+1
00CB88  1  68                   pla
00CB89  1  85 B5                sta     ARG+2
00CB8B  1  68                   pla
00CB8C  1  85 B6                sta     ARG+3
00CB8E  1  68                   pla
00CB8F  1  85 B7                sta     ARGSIGN
00CB91  1  45 B0                eor     FACSIGN
00CB93  1  85 B8                sta     SGNCPR
00CB95  1               EXIT:
00CB95  1  A5 AC                lda     FAC
00CB97  1  60                   rts
00CB98  1               ; ----------------------------------------------------------------------------
00CB98  1               ; GET ELEMENT IN EXPRESSION
00CB98  1               ;
00CB98  1               ; GET VALUE OF VARIABLE OR NUMBER AT TXTPNT, OR POINT
00CB98  1               ; TO STRING DESCRIPTOR IF A STRING, AND PUT IN FAC.
00CB98  1               ; ----------------------------------------------------------------------------
00CB98  1               FRM_ELEMENT:
00CB98  1  A9 00                lda     #$00
00CB9A  1  85 5F                sta     VALTYP
00CB9C  1               L2D31:
00CB9C  1  20 BC 00             jsr     CHRGET
00CB9F  1  B0 03                bcs     L2D39
00CBA1  1               L2D36:
00CBA1  1  4C 7F D8             jmp     FIN
00CBA4  1               L2D39:
00CBA4  1  20 79 CD             jsr     ISLETC
00CBA7  1  B0 67                bcs     FRM_VARIABLE
00CBA9  1               CON_PI:
00CBA9  1  C9 2E                cmp     #$2E
00CBAB  1  F0 F4                beq     L2D36
00CBAD  1  C9 A4                cmp     #TOKEN_MINUS
00CBAF  1  F0 58                beq     MIN
00CBB1  1  C9 A3                cmp     #TOKEN_PLUS
00CBB3  1  F0 E7                beq     L2D31
00CBB5  1  C9 22                cmp     #$22
00CBB7  1  D0 0F                bne     NOT_
00CBB9  1               ; ----------------------------------------------------------------------------
00CBB9  1               ; STRING CONSTANT ELEMENT
00CBB9  1               ;
00CBB9  1               ; SET Y,A = (TXTPTR)+CARRY
00CBB9  1               ; ----------------------------------------------------------------------------
00CBB9  1               STRTXT:
00CBB9  1  A5 C3                lda     TXTPTR
00CBBB  1  A4 C4                ldy     TXTPTR+1
00CBBD  1  69 00                adc     #$00
00CBBF  1  90 01                bcc     L2D57
00CBC1  1  C8                   iny
00CBC2  1               L2D57:
00CBC2  1  20 A6 D0             jsr     STRLIT
00CBC5  1  4C EB D3             jmp     POINT
00CBC8  1               ; ----------------------------------------------------------------------------
00CBC8  1               ; "NOT" FUNCTION
00CBC8  1               ; IF FAC=0, RETURN FAC=1
00CBC8  1               ; IF FAC<>0, RETURN FAC=0
00CBC8  1               ; ----------------------------------------------------------------------------
00CBC8  1               NOT_:
00CBC8  1  C9 A1                cmp     #TOKEN_NOT
00CBCA  1  D0 13                bne     L2D74
00CBCC  1  A0 18                ldy     #$18
00CBCE  1  D0 3B                bne     EQUL
00CBD0  1               ; ----------------------------------------------------------------------------
00CBD0  1               ; COMPARISON FOR EQUALITY (= OPERATOR)
00CBD0  1               ; ALSO USED TO EVALUATE "NOT" FUNCTION
00CBD0  1               ; ----------------------------------------------------------------------------
00CBD0  1               EQUOP:
00CBD0  1  20 FD CD             jsr     AYINT
00CBD3  1  A5 AF                lda     FAC_LAST
00CBD5  1  49 FF                eor     #$FF
00CBD7  1  A8                   tay
00CBD8  1  A5 AE                lda     FAC_LAST-1
00CBDA  1  49 FF                eor     #$FF
00CBDC  1  4C B9 CF             jmp     GIVAYF
00CBDF  1               L2D74:
00CBDF  1  C9 9E                cmp     #TOKEN_FN
00CBE1  1  D0 03                bne     L2D7B
00CBE3  1  4C 16 D0             jmp     L31F3
00CBE6  1               L2D7B:
00CBE6  1  C9 AD                cmp     #TOKEN_SGN
00CBE8  1  90 03                bcc     PARCHK
00CBEA  1  4C 1F CC             jmp     UNARY
00CBED  1               ; ----------------------------------------------------------------------------
00CBED  1               ; EVALUATE "(EXPRESSION)"
00CBED  1               ; ----------------------------------------------------------------------------
00CBED  1               PARCHK:
00CBED  1  20 F6 CB             jsr     CHKOPN
00CBF0  1  20 B9 CA             jsr     FRMEVL
00CBF3  1               CHKCLS:
00CBF3  1  A9 29                lda     #$29
00CBF5  1  2C                   .byte   $2C
00CBF6  1               CHKOPN:
00CBF6  1  A9 28                lda     #$28
00CBF8  1  2C                   .byte   $2C
00CBF9  1               CHKCOM:
00CBF9  1  A9 2C                lda     #$2C
00CBFB  1               ; ----------------------------------------------------------------------------
00CBFB  1               ; UNLESS CHAR AT TXTPTR = (A), SYNTAX ERROR
00CBFB  1               ; ----------------------------------------------------------------------------
00CBFB  1               SYNCHR:	; XXX all CBM code calls SYNCHR instead of CHKCOM
00CBFB  1  A0 00                ldy     #$00
00CBFD  1  D1 C3                cmp     (TXTPTR),y
00CBFF  1  D0 03                bne     SYNERR
00CC01  1  4C BC 00             jmp     CHRGET
00CC04  1               ; ----------------------------------------------------------------------------
00CC04  1               SYNERR:
00CC04  1  A2 02                ldx     #ERR_SYNTAX
00CC06  1  4C 4E C2             jmp     ERROR
00CC09  1               ; ----------------------------------------------------------------------------
00CC09  1               MIN:
00CC09  1  A0 15                ldy     #$15
00CC0B  1               EQUL:
00CC0B  1  68                   pla
00CC0C  1  68                   pla
00CC0D  1  4C 15 CB             jmp     L2CA4
00CC10  1               ; ----------------------------------------------------------------------------
00CC10  1               FRM_VARIABLE:
00CC10  1  20 03 CD             jsr     PTRGET
00CC13  1               FRM_VARIABLE_CALL	= *-1
00CC13  1  85 AE                sta     FAC_LAST-1
00CC15  1  84 AF                sty     FAC_LAST
00CC17  1  A6 5F                ldx     VALTYP
00CC19  1  F0 01                beq     L2DB1
00CC1B  1               ; bugfix?
00CC1B  1               ; fixed on AppleSoft II, not on any CBM
00CC1B  1  60                   rts
00CC1C  1               L2DB1:
00CC1C  1  4C 43 D7             jmp     LOAD_FAC_FROM_YA
00CC1F  1               ; ----------------------------------------------------------------------------
00CC1F  1               UNARY:
00CC1F  1  0A                   asl     a
00CC20  1  48                   pha
00CC21  1  AA                   tax
00CC22  1  20 BC 00             jsr     CHRGET
00CC25  1  E0 81                cpx     #<(TOKEN_LEFTSTR*2-1)
00CC27  1  90 20                bcc     L2DEF
00CC29  1  20 F6 CB             jsr     CHKOPN
00CC2C  1  20 B9 CA             jsr     FRMEVL
00CC2F  1  20 F9 CB             jsr     CHKCOM
00CC32  1  20 AA CA             jsr     CHKSTR
00CC35  1  68                   pla
00CC36  1  AA                   tax
00CC37  1  A5 AF                lda     FAC_LAST
00CC39  1  48                   pha
00CC3A  1  A5 AE                lda     FAC_LAST-1
00CC3C  1  48                   pha
00CC3D  1  8A                   txa
00CC3E  1  48                   pha
00CC3F  1  20 A6 D3             jsr     GETBYT
00CC42  1  68                   pla
00CC43  1  A8                   tay
00CC44  1  8A                   txa
00CC45  1  48                   pha
00CC46  1  4C 4E CC             jmp     L2DF4
00CC49  1               L2DEF:
00CC49  1  20 ED CB             jsr     PARCHK
00CC4C  1  68                   pla
00CC4D  1  A8                   tay
00CC4E  1               L2DF4:
00CC4E  1  B9 DE BF             lda     UNFNC+($80-TOKEN_SGN)*2,y
00CC51  1  85 A2                sta     JMPADRS+1
00CC53  1  B9 DF BF             lda     UNFNC+($80-TOKEN_SGN)*2+1,y
00CC56  1  85 A3                sta     JMPADRS+2
00CC58  1  20 A1 00             jsr     JMPADRS
00CC5B  1  4C A8 CA             jmp     CHKNUM
00CC5E  1               ; ----------------------------------------------------------------------------
00CC5E  1               OR:
00CC5E  1  A0 FF                ldy     #$FF
00CC60  1  2C                   .byte   $2C
00CC61  1               ; ----------------------------------------------------------------------------
00CC61  1               TAND:
00CC61  1  A0 00                ldy     #$00
00CC63  1  84 5D                sty     EOLPNTR
00CC65  1  20 FD CD             jsr     AYINT
00CC68  1  A5 AE                lda     FAC_LAST-1
00CC6A  1  45 5D                eor     EOLPNTR
00CC6C  1  85 5B                sta     CHARAC
00CC6E  1  A5 AF                lda     FAC_LAST
00CC70  1  45 5D                eor     EOLPNTR
00CC72  1  85 5C                sta     ENDCHR
00CC74  1  20 93 D7             jsr     COPY_ARG_TO_FAC
00CC77  1  20 FD CD             jsr     AYINT
00CC7A  1  A5 AF                lda     FAC_LAST
00CC7C  1  45 5D                eor     EOLPNTR
00CC7E  1  25 5C                and     ENDCHR
00CC80  1  45 5D                eor     EOLPNTR
00CC82  1  A8                   tay
00CC83  1  A5 AE                lda     FAC_LAST-1
00CC85  1  45 5D                eor     EOLPNTR
00CC87  1  25 5B                and     CHARAC
00CC89  1  45 5D                eor     EOLPNTR
00CC8B  1  4C B9 CF             jmp     GIVAYF
00CC8E  1               ; ----------------------------------------------------------------------------
00CC8E  1               ; PERFORM RELATIONAL OPERATIONS
00CC8E  1               ; ----------------------------------------------------------------------------
00CC8E  1               RELOPS:
00CC8E  1  20 AB CA             jsr     CHKVAL
00CC91  1  B0 13                bcs     STRCMP
00CC93  1  A5 B7                lda     ARGSIGN
00CC95  1  09 7F                ora     #$7F
00CC97  1  25 B4                and     ARG+1
00CC99  1  85 B4                sta     ARG+1
00CC9B  1  A9 B3                lda     #<ARG
00CC9D  1  A0 00                ldy     #$00
00CC9F  1  20 F0 D7             jsr     FCOMP
00CCA2  1  AA                   tax
00CCA3  1  4C D9 CC             jmp     NUMCMP
00CCA6  1               ; ----------------------------------------------------------------------------
00CCA6  1               ; STRING COMPARISON
00CCA6  1               ; ----------------------------------------------------------------------------
00CCA6  1               STRCMP:
00CCA6  1  A9 00                lda     #$00
00CCA8  1  85 5F                sta     VALTYP
00CCAA  1  C6 9B                dec     CPRTYP
00CCAC  1  20 AE D2             jsr     FREFAC
00CCAF  1  85 AC                sta     FAC
00CCB1  1  86 AD                stx     FAC+1
00CCB3  1  84 AE                sty     FAC+2
00CCB5  1  A5 B5                lda     ARG_LAST-1
00CCB7  1  A4 B6                ldy     ARG_LAST
00CCB9  1  20 B2 D2             jsr     FRETMP
00CCBC  1  86 B5                stx     ARG_LAST-1
00CCBE  1  84 B6                sty     ARG_LAST
00CCC0  1  AA                   tax
00CCC1  1  38                   sec
00CCC2  1  E5 AC                sbc     FAC
00CCC4  1  F0 08                beq     L2E74
00CCC6  1  A9 01                lda     #$01
00CCC8  1  90 04                bcc     L2E74
00CCCA  1  A6 AC                ldx     FAC
00CCCC  1  A9 FF                lda     #$FF
00CCCE  1               L2E74:
00CCCE  1  85 B0                sta     FACSIGN
00CCD0  1  A0 FF                ldy     #$FF
00CCD2  1  E8                   inx
00CCD3  1               STRCMP1:
00CCD3  1  C8                   iny
00CCD4  1  CA                   dex
00CCD5  1  D0 07                bne     L2E84
00CCD7  1  A6 B0                ldx     FACSIGN
00CCD9  1               NUMCMP:
00CCD9  1  30 0F                bmi     CMPDONE
00CCDB  1  18                   clc
00CCDC  1  90 0C                bcc     CMPDONE
00CCDE  1               L2E84:
00CCDE  1  B1 B5                lda     (ARG_LAST-1),y
00CCE0  1  D1 AD                cmp     (FAC+1),y
00CCE2  1  F0 EF                beq     STRCMP1
00CCE4  1  A2 FF                ldx     #$FF
00CCE6  1  B0 02                bcs     CMPDONE
00CCE8  1  A2 01                ldx     #$01
00CCEA  1               CMPDONE:
00CCEA  1  E8                   inx
00CCEB  1  8A                   txa
00CCEC  1  2A                   rol     a
00CCED  1  25 63                and     CPRMASK
00CCEF  1  F0 02                beq     L2E99
00CCF1  1  A9 FF                lda     #$FF
00CCF3  1               L2E99:
00CCF3  1  4C D3 D7             jmp     FLOAT
00CCF6  1               ; ----------------------------------------------------------------------------
00CCF6  1               ; "DIM" STATEMENT
00CCF6  1               ; ----------------------------------------------------------------------------
00CCF6  1               NXDIM:
00CCF6  1  20 F9 CB             jsr     CHKCOM
00CCF9  1               DIM:
00CCF9  1  AA                   tax
00CCFA  1  20 08 CD             jsr     PTRGET2
00CCFD  1  20 C2 00             jsr     CHRGOT
00CD00  1  D0 F4                bne     NXDIM
00CD02  1  60                   rts
00CD03  1               ; ----------------------------------------------------------------------------
00CD03  1               ; PTRGET -- GENERAL VARIABLE SCAN
00CD03  1               ;
00CD03  1               ; SCANS VARIABLE NAME AT TXTPTR, AND SEARCHES THE
00CD03  1               ; VARTAB AND ARYTAB FOR THE NAME.
00CD03  1               ; IF NOT FOUND, CREATE VARIABLE OF APPROPRIATE TYPE.
00CD03  1               ; RETURN WITH ADDRESS IN VARPNT AND Y,A
00CD03  1               ;
00CD03  1               ; ACTUAL ACTIVITY CONTROLLED SOMEWHAT BY TWO FLAGS:
00CD03  1               ;	DIMFLG -- NONZERO IF CALLED FROM "DIM"
00CD03  1               ;		ELSE = 0
00CD03  1               ;
00CD03  1               ;	SUBFLG -- = $00
00CD03  1               ;		= $40 IF CALLED FROM "GETARYPT"
00CD03  1               ; ----------------------------------------------------------------------------
00CD03  1               PTRGET:
00CD03  1  A2 00                ldx     #$00
00CD05  1  20 C2 00             jsr     CHRGOT
00CD08  1               PTRGET2:
00CD08  1  86 5E                stx     DIMFLG
00CD0A  1               PTRGET3:
00CD0A  1  85 93                sta     VARNAM
00CD0C  1  20 C2 00             jsr     CHRGOT
00CD0F  1  20 79 CD             jsr     ISLETC
00CD12  1  B0 03                bcs     NAMOK
00CD14  1  4C 04 CC             jmp     SYNERR
00CD17  1               NAMOK:
00CD17  1  A2 00                ldx     #$00
00CD19  1  86 5F                stx     VALTYP
00CD1B  1  20 BC 00             jsr     CHRGET
00CD1E  1  90 05                bcc     L2ECD
00CD20  1  20 79 CD             jsr     ISLETC
00CD23  1  90 0B                bcc     L2ED8
00CD25  1               L2ECD:
00CD25  1  AA                   tax
00CD26  1               L2ECE:
00CD26  1  20 BC 00             jsr     CHRGET
00CD29  1  90 FB                bcc     L2ECE
00CD2B  1  20 79 CD             jsr     ISLETC
00CD2E  1  B0 F6                bcs     L2ECE
00CD30  1               L2ED8:
00CD30  1  C9 24                cmp     #$24
00CD32  1  D0 0B                bne     L2EF9
00CD34  1  A9 FF                lda     #$FF
00CD36  1  85 5F                sta     VALTYP
00CD38  1  8A                   txa
00CD39  1  09 80                ora     #$80
00CD3B  1  AA                   tax
00CD3C  1  20 BC 00             jsr     CHRGET
00CD3F  1               L2EF9:
00CD3F  1  86 94                stx     VARNAM+1
00CD41  1  38                   sec
00CD42  1  05 61                ora     SUBFLG
00CD44  1  E9 28                sbc     #$28
00CD46  1  D0 03                bne     L2F05
00CD48  1  4C 0F CE             jmp     ARRAY
00CD4B  1               L2F05:
00CD4B  1  A9 00                lda     #$00
00CD4D  1  85 61                sta     SUBFLG
00CD4F  1  A5 7B                lda     VARTAB
00CD51  1  A6 7C                ldx     VARTAB+1
00CD53  1  A0 00                ldy     #$00
00CD55  1               L2F0F:
00CD55  1  86 AB                stx     LOWTR+1
00CD57  1               L2F11:
00CD57  1  85 AA                sta     LOWTR
00CD59  1  E4 7E                cpx     ARYTAB+1
00CD5B  1  D0 04                bne     L2F1B
00CD5D  1  C5 7D                cmp     ARYTAB
00CD5F  1  F0 22                beq     NAMENOTFOUND
00CD61  1               L2F1B:
00CD61  1  A5 93                lda     VARNAM
00CD63  1  D1 AA                cmp     (LOWTR),y
00CD65  1  D0 08                bne     L2F29
00CD67  1  A5 94                lda     VARNAM+1
00CD69  1  C8                   iny
00CD6A  1  D1 AA                cmp     (LOWTR),y
00CD6C  1  F0 61                beq     SET_VARPNT_AND_YA
00CD6E  1  88                   dey
00CD6F  1               L2F29:
00CD6F  1  18                   clc
00CD70  1  A5 AA                lda     LOWTR
00CD72  1  69 06                adc     #BYTES_PER_VARIABLE
00CD74  1  90 E1                bcc     L2F11
00CD76  1  E8                   inx
00CD77  1  D0 DC                bne     L2F0F
00CD79  1               ; ----------------------------------------------------------------------------
00CD79  1               ; CHECK IF (A) IS ASCII LETTER A-Z
00CD79  1               ;
00CD79  1               ; RETURN CARRY = 1 IF A-Z
00CD79  1               ;	= 0 IF NOT
00CD79  1               ; ----------------------------------------------------------------------------
00CD79  1               ISLETC:
00CD79  1  C9 41                cmp     #$41
00CD7B  1  90 05                bcc     L2F3C
00CD7D  1  E9 5B                sbc     #$5B
00CD7F  1  38                   sec
00CD80  1  E9 A5                sbc     #$A5
00CD82  1               L2F3C:
00CD82  1  60                   rts
00CD83  1               ; ----------------------------------------------------------------------------
00CD83  1               ; VARIABLE NOT FOUND, SO MAKE ONE
00CD83  1               ; ----------------------------------------------------------------------------
00CD83  1               NAMENOTFOUND:
00CD83  1  68                   pla
00CD84  1  48                   pha
00CD85  1  C9 12                cmp     #<FRM_VARIABLE_CALL
00CD87  1  D0 07                bne     MAKENEWVARIABLE
00CD89  1  A9 8E                lda     #<C_ZERO
00CD8B  1  A0 CD                ldy     #>C_ZERO
00CD8D  1  60                   rts
00CD8E  1               ; ----------------------------------------------------------------------------
00CD8E  1               C_ZERO:
00CD8E  1  00 00                .byte   $00,$00
00CD90  1               ; ----------------------------------------------------------------------------
00CD90  1               ; MAKE A NEW SIMPLE VARIABLE
00CD90  1               ;
00CD90  1               ; MOVE ARRAYS UP 7 BYTES TO MAKE ROOM FOR NEW VARIABLE
00CD90  1               ; ENTER 7-BYTE VARIABLE DATA IN THE HOLE
00CD90  1               ; ----------------------------------------------------------------------------
00CD90  1               MAKENEWVARIABLE:
00CD90  1  A5 7D                lda     ARYTAB
00CD92  1  A4 7E                ldy     ARYTAB+1
00CD94  1  85 AA                sta     LOWTR
00CD96  1  84 AB                sty     LOWTR+1
00CD98  1  A5 7F                lda     STREND
00CD9A  1  A4 80                ldy     STREND+1
00CD9C  1  85 A6                sta     HIGHTR
00CD9E  1  84 A7                sty     HIGHTR+1
00CDA0  1  18                   clc
00CDA1  1  69 06                adc     #BYTES_PER_VARIABLE
00CDA3  1  90 01                bcc     L2F68
00CDA5  1  C8                   iny
00CDA6  1               L2F68:
00CDA6  1  85 A4                sta     HIGHDS
00CDA8  1  84 A5                sty     HIGHDS+1
00CDAA  1  20 CF C1             jsr     BLTU
00CDAD  1  A5 A4                lda     HIGHDS
00CDAF  1  A4 A5                ldy     HIGHDS+1
00CDB1  1  C8                   iny
00CDB2  1  85 7D                sta     ARYTAB
00CDB4  1  84 7E                sty     ARYTAB+1
00CDB6  1  A0 00                ldy     #$00
00CDB8  1  A5 93                lda     VARNAM
00CDBA  1  91 AA                sta     (LOWTR),y
00CDBC  1  C8                   iny
00CDBD  1  A5 94                lda     VARNAM+1
00CDBF  1  91 AA                sta     (LOWTR),y
00CDC1  1  A9 00                lda     #$00
00CDC3  1  C8                   iny
00CDC4  1  91 AA                sta     (LOWTR),y
00CDC6  1  C8                   iny
00CDC7  1  91 AA                sta     (LOWTR),y
00CDC9  1  C8                   iny
00CDCA  1  91 AA                sta     (LOWTR),y
00CDCC  1  C8                   iny
00CDCD  1  91 AA                sta     (LOWTR),y
00CDCF  1               ; ----------------------------------------------------------------------------
00CDCF  1               ; PUT ADDRESS OF VALUE OF VARIABLE IN VARPNT AND Y,A
00CDCF  1               ; ----------------------------------------------------------------------------
00CDCF  1               SET_VARPNT_AND_YA:
00CDCF  1  A5 AA                lda     LOWTR
00CDD1  1  18                   clc
00CDD2  1  69 02                adc     #$02
00CDD4  1  A4 AB                ldy     LOWTR+1
00CDD6  1  90 01                bcc     L2F9E
00CDD8  1  C8                   iny
00CDD9  1               L2F9E:
00CDD9  1  85 95                sta     VARPNT
00CDDB  1  84 96                sty     VARPNT+1
00CDDD  1  60                   rts
00CDDE  1               ; ----------------------------------------------------------------------------
00CDDE  1               ; COMPUTE ADDRESS OF FIRST VALUE IN ARRAY
00CDDE  1               ; ARYPNT = (LOWTR) + #DIMS*2 + 5
00CDDE  1               ; ----------------------------------------------------------------------------
00CDDE  1               GETARY:
00CDDE  1  A5 5D                lda     EOLPNTR
00CDE0  1  0A                   asl     a
00CDE1  1  69 05                adc     #$05
00CDE3  1  65 AA                adc     LOWTR
00CDE5  1  A4 AB                ldy     LOWTR+1
00CDE7  1  90 01                bcc     L2FAF
00CDE9  1  C8                   iny
00CDEA  1               L2FAF:
00CDEA  1  85 A4                sta     HIGHDS
00CDEC  1  84 A5                sty     HIGHDS+1
00CDEE  1  60                   rts
00CDEF  1               ; ----------------------------------------------------------------------------
00CDEF  1               NEG32768:
00CDEF  1  90 80 00 00          .byte   $90,$80,$00,$00
00CDF3  1               ; ----------------------------------------------------------------------------
00CDF3  1               ; EVALUATE NUMERIC FORMULA AT TXTPTR
00CDF3  1               ; CONVERTING RESULT TO INTEGER 0 <= X <= 32767
00CDF3  1               ; IN FAC+3,4
00CDF3  1               ; ----------------------------------------------------------------------------
00CDF3  1               MAKINT:
00CDF3  1  20 BC 00             jsr     CHRGET
00CDF6  1  20 A5 CA             jsr     FRMNUM
00CDF9  1               ; ----------------------------------------------------------------------------
00CDF9  1               ; CONVERT FAC TO INTEGER
00CDF9  1               ; MUST BE POSITIVE AND LESS THAN 32768
00CDF9  1               ; ----------------------------------------------------------------------------
00CDF9  1               MKINT:
00CDF9  1  A5 B0                lda     FACSIGN
00CDFB  1  30 0D                bmi     MI1
00CDFD  1               ; ----------------------------------------------------------------------------
00CDFD  1               ; CONVERT FAC TO INTEGER
00CDFD  1               ; MUST BE -32767 <= FAC <= 32767
00CDFD  1               ; ----------------------------------------------------------------------------
00CDFD  1               AYINT:
00CDFD  1  A5 AC                lda     FAC
00CDFF  1  C9 90                cmp     #$90
00CE01  1  90 09                bcc     MI2
00CE03  1  A9 EF                lda     #<NEG32768
00CE05  1  A0 CD                ldy     #>NEG32768
00CE07  1  20 F0 D7             jsr     FCOMP
00CE0A  1               MI1:
00CE0A  1  D0 74                bne     IQERR
00CE0C  1               MI2:
00CE0C  1  4C 29 D8             jmp     QINT
00CE0F  1               ; ----------------------------------------------------------------------------
00CE0F  1               ; LOCATE ARRAY ELEMENT OR CREATE AN ARRAY
00CE0F  1               ; ----------------------------------------------------------------------------
00CE0F  1               ARRAY:
00CE0F  1  A5 5E                lda     DIMFLG
00CE11  1  48                   pha
00CE12  1  A5 5F                lda     VALTYP
00CE14  1  48                   pha
00CE15  1  A0 00                ldy     #$00
00CE17  1               L2FDE:
00CE17  1  98                   tya
00CE18  1  48                   pha
00CE19  1  A5 94                lda     VARNAM+1
00CE1B  1  48                   pha
00CE1C  1  A5 93                lda     VARNAM
00CE1E  1  48                   pha
00CE1F  1  20 F3 CD             jsr     MAKINT
00CE22  1  68                   pla
00CE23  1  85 93                sta     VARNAM
00CE25  1  68                   pla
00CE26  1  85 94                sta     VARNAM+1
00CE28  1  68                   pla
00CE29  1  A8                   tay
00CE2A  1  BA                   tsx
00CE2B  1  BD 02 01             lda     STACK+2,x
00CE2E  1  48                   pha
00CE2F  1  BD 01 01             lda     STACK+1,x
00CE32  1  48                   pha
00CE33  1  A5 AE                lda     FAC_LAST-1
00CE35  1  9D 02 01             sta     STACK+2,x
00CE38  1  A5 AF                lda     FAC_LAST
00CE3A  1  9D 01 01             sta     STACK+1,x
00CE3D  1  C8                   iny
00CE3E  1  20 C2 00             jsr     CHRGOT
00CE41  1  C9 2C                cmp     #$2C
00CE43  1  F0 D2                beq     L2FDE
00CE45  1  84 5D                sty     EOLPNTR
00CE47  1  20 F3 CB             jsr     CHKCLS
00CE4A  1  68                   pla
00CE4B  1  85 5F                sta     VALTYP
00CE4D  1  68                   pla
00CE4E  1  85 5E                sta     DIMFLG
00CE50  1               ; ----------------------------------------------------------------------------
00CE50  1               ; SEARCH ARRAY TABLE FOR THIS ARRAY NAME
00CE50  1               ; ----------------------------------------------------------------------------
00CE50  1  A6 7D                ldx     ARYTAB
00CE52  1  A5 7E                lda     ARYTAB+1
00CE54  1               L301F:
00CE54  1  86 AA                stx     LOWTR
00CE56  1  85 AB                sta     LOWTR+1
00CE58  1  C5 80                cmp     STREND+1
00CE5A  1  D0 04                bne     L302B
00CE5C  1  E4 7F                cpx     STREND
00CE5E  1  F0 39                beq     MAKE_NEW_ARRAY
00CE60  1               L302B:
00CE60  1  A0 00                ldy     #$00
00CE62  1  B1 AA                lda     (LOWTR),y
00CE64  1  C8                   iny
00CE65  1  C5 93                cmp     VARNAM
00CE67  1  D0 06                bne     L303A
00CE69  1  A5 94                lda     VARNAM+1
00CE6B  1  D1 AA                cmp     (LOWTR),y
00CE6D  1  F0 16                beq     USE_OLD_ARRAY
00CE6F  1               L303A:
00CE6F  1  C8                   iny
00CE70  1  B1 AA                lda     (LOWTR),y
00CE72  1  18                   clc
00CE73  1  65 AA                adc     LOWTR
00CE75  1  AA                   tax
00CE76  1  C8                   iny
00CE77  1  B1 AA                lda     (LOWTR),y
00CE79  1  65 AB                adc     LOWTR+1
00CE7B  1  90 D7                bcc     L301F
00CE7D  1               ; ----------------------------------------------------------------------------
00CE7D  1               ; ERROR:  BAD SUBSCRIPTS
00CE7D  1               ; ----------------------------------------------------------------------------
00CE7D  1               SUBERR:
00CE7D  1  A2 10                ldx     #ERR_BADSUBS
00CE7F  1  2C                   .byte   $2C
00CE80  1               ; ----------------------------------------------------------------------------
00CE80  1               ; ERROR:  ILLEGAL QUANTITY
00CE80  1               ; ----------------------------------------------------------------------------
00CE80  1               IQERR:
00CE80  1  A2 08                ldx     #ERR_ILLQTY
00CE82  1               JER:
00CE82  1  4C 4E C2             jmp     ERROR
00CE85  1               ; ----------------------------------------------------------------------------
00CE85  1               ; FOUND THE ARRAY
00CE85  1               ; ----------------------------------------------------------------------------
00CE85  1               USE_OLD_ARRAY:
00CE85  1  A2 12                ldx     #ERR_REDIMD
00CE87  1  A5 5E                lda     DIMFLG
00CE89  1  D0 F7                bne     JER
00CE8B  1  20 DE CD             jsr     GETARY
00CE8E  1  A5 5D                lda     EOLPNTR
00CE90  1  A0 04                ldy     #$04
00CE92  1  D1 AA                cmp     (LOWTR),y
00CE94  1  D0 E7                bne     SUBERR
00CE96  1  4C 1C CF             jmp     FIND_ARRAY_ELEMENT
00CE99  1               ; ----------------------------------------------------------------------------
00CE99  1               ; CREATE A NEW ARRAY, UNLESS CALLED FROM GETARYPT
00CE99  1               ; ----------------------------------------------------------------------------
00CE99  1               MAKE_NEW_ARRAY:
00CE99  1  20 DE CD             jsr     GETARY
00CE9C  1  20 1F C2             jsr     REASON
00CE9F  1  A9 00                lda     #$00
00CEA1  1  A8                   tay
00CEA2  1  85 BB                sta     STRNG2+1
00CEA4  1  A2 04                ldx     #BYTES_PER_ELEMENT
00CEA6  1  86 BA                stx     STRNG2
00CEA8  1  A5 93                lda     VARNAM
00CEAA  1  91 AA                sta     (LOWTR),y
00CEAC  1  C8                   iny
00CEAD  1  A5 94                lda     VARNAM+1
00CEAF  1  91 AA                sta     (LOWTR),y
00CEB1  1  A5 5D                lda     EOLPNTR
00CEB3  1  C8                   iny
00CEB4  1  C8                   iny
00CEB5  1  C8                   iny
00CEB6  1  91 AA                sta     (LOWTR),y
00CEB8  1               L308A:
00CEB8  1  A2 0B                ldx     #$0B
00CEBA  1  A9 00                lda     #$00
00CEBC  1  24 5E                bit     DIMFLG
00CEBE  1  50 08                bvc     L309A
00CEC0  1  68                   pla
00CEC1  1  18                   clc
00CEC2  1  69 01                adc     #$01
00CEC4  1  AA                   tax
00CEC5  1  68                   pla
00CEC6  1  69 00                adc     #$00
00CEC8  1               L309A:
00CEC8  1  C8                   iny
00CEC9  1  91 AA                sta     (LOWTR),y
00CECB  1  C8                   iny
00CECC  1  8A                   txa
00CECD  1  91 AA                sta     (LOWTR),y
00CECF  1  20 74 CF             jsr     MULTIPLY_SUBSCRIPT
00CED2  1  86 BA                stx     STRNG2
00CED4  1  85 BB                sta     STRNG2+1
00CED6  1  A4 71                ldy     INDEX
00CED8  1  C6 5D                dec     EOLPNTR
00CEDA  1  D0 DC                bne     L308A
00CEDC  1  65 A5                adc     HIGHDS+1
00CEDE  1  B0 5D                bcs     GME
00CEE0  1  85 A5                sta     HIGHDS+1
00CEE2  1  A8                   tay
00CEE3  1  8A                   txa
00CEE4  1  65 A4                adc     HIGHDS
00CEE6  1  90 03                bcc     L30BD
00CEE8  1  C8                   iny
00CEE9  1  F0 52                beq     GME
00CEEB  1               L30BD:
00CEEB  1  20 1F C2             jsr     REASON
00CEEE  1  85 7F                sta     STREND
00CEF0  1  84 80                sty     STREND+1
00CEF2  1  A9 00                lda     #$00
00CEF4  1  E6 BB                inc     STRNG2+1
00CEF6  1  A4 BA                ldy     STRNG2
00CEF8  1  F0 05                beq     L30D1
00CEFA  1               L30CC:
00CEFA  1  88                   dey
00CEFB  1  91 A4                sta     (HIGHDS),y
00CEFD  1  D0 FB                bne     L30CC
00CEFF  1               L30D1:
00CEFF  1  C6 A5                dec     HIGHDS+1
00CF01  1  C6 BB                dec     STRNG2+1
00CF03  1  D0 F5                bne     L30CC
00CF05  1  E6 A5                inc     HIGHDS+1
00CF07  1  38                   sec
00CF08  1  A5 7F                lda     STREND
00CF0A  1  E5 AA                sbc     LOWTR
00CF0C  1  A0 02                ldy     #$02
00CF0E  1  91 AA                sta     (LOWTR),y
00CF10  1  A5 80                lda     STREND+1
00CF12  1  C8                   iny
00CF13  1  E5 AB                sbc     LOWTR+1
00CF15  1  91 AA                sta     (LOWTR),y
00CF17  1  A5 5E                lda     DIMFLG
00CF19  1  D0 58                bne     RTS9
00CF1B  1  C8                   iny
00CF1C  1               ; ----------------------------------------------------------------------------
00CF1C  1               ; FIND SPECIFIED ARRAY ELEMENT
00CF1C  1               ;
00CF1C  1               ; (LOWTR),Y POINTS AT # OF DIMS IN ARRAY DESCRIPTOR
00CF1C  1               ; THE SUBSCRIPTS ARE ALL ON THE STACK AS INTEGERS
00CF1C  1               ; ----------------------------------------------------------------------------
00CF1C  1               FIND_ARRAY_ELEMENT:
00CF1C  1  B1 AA                lda     (LOWTR),y
00CF1E  1  85 5D                sta     EOLPNTR
00CF20  1  A9 00                lda     #$00
00CF22  1  85 BA                sta     STRNG2
00CF24  1               L30F6:
00CF24  1  85 BB                sta     STRNG2+1
00CF26  1  C8                   iny
00CF27  1  68                   pla
00CF28  1  AA                   tax
00CF29  1  85 AE                sta     FAC_LAST-1
00CF2B  1  68                   pla
00CF2C  1  85 AF                sta     FAC_LAST
00CF2E  1  D1 AA                cmp     (LOWTR),y
00CF30  1  90 0E                bcc     FAE2
00CF32  1  D0 06                bne     GSE
00CF34  1  C8                   iny
00CF35  1  8A                   txa
00CF36  1  D1 AA                cmp     (LOWTR),y
00CF38  1  90 07                bcc     FAE3
00CF3A  1               ; ----------------------------------------------------------------------------
00CF3A  1               GSE:
00CF3A  1  4C 7D CE             jmp     SUBERR
00CF3D  1               GME:
00CF3D  1  4C 4C C2             jmp     MEMERR
00CF40  1               ; ----------------------------------------------------------------------------
00CF40  1               FAE2:
00CF40  1  C8                   iny
00CF41  1               FAE3:
00CF41  1  A5 BB                lda     STRNG2+1
00CF43  1  05 BA                ora     STRNG2
00CF45  1  18                   clc
00CF46  1  F0 0A                beq     L3124
00CF48  1  20 74 CF             jsr     MULTIPLY_SUBSCRIPT
00CF4B  1  8A                   txa
00CF4C  1  65 AE                adc     FAC_LAST-1
00CF4E  1  AA                   tax
00CF4F  1  98                   tya
00CF50  1  A4 71                ldy     INDEX
00CF52  1               L3124:
00CF52  1  65 AF                adc     FAC_LAST
00CF54  1  86 BA                stx     STRNG2
00CF56  1  C6 5D                dec     EOLPNTR
00CF58  1  D0 CA                bne     L30F6
00CF5A  1  06 BA                asl     STRNG2
00CF5C  1  2A                   rol     a
00CF5D  1  B0 DB                bcs     GSE
00CF5F  1  06 BA                asl     STRNG2
00CF61  1  2A                   rol     a
00CF62  1  B0 D6                bcs     GSE
00CF64  1  A8                   tay
00CF65  1  A5 BA                lda     STRNG2
00CF67  1  65 A4                adc     HIGHDS
00CF69  1  85 95                sta     VARPNT
00CF6B  1  98                   tya
00CF6C  1  65 A5                adc     HIGHDS+1
00CF6E  1  85 96                sta     VARPNT+1
00CF70  1  A8                   tay
00CF71  1  A5 95                lda     VARPNT
00CF73  1               RTS9:
00CF73  1  60                   rts
00CF74  1               ; ----------------------------------------------------------------------------
00CF74  1               ; MULTIPLY (STRNG2) BY ((LOWTR),Y)
00CF74  1               ; LEAVING PRODUCT IN A,X.  (HI-BYTE ALSO IN Y.)
00CF74  1               ; USED ONLY BY ARRAY SUBSCRIPT ROUTINES
00CF74  1               ; ----------------------------------------------------------------------------
00CF74  1               MULTIPLY_SUBSCRIPT:
00CF74  1  84 71                sty     INDEX
00CF76  1  B1 AA                lda     (LOWTR),y
00CF78  1  85 76                sta     RESULT_LAST-2
00CF7A  1  88                   dey
00CF7B  1  B1 AA                lda     (LOWTR),y
00CF7D  1  85 77                sta     RESULT_LAST-1
00CF7F  1  A9 10                lda     #$10
00CF81  1  85 A8                sta     INDX
00CF83  1  A2 00                ldx     #$00
00CF85  1  A0 00                ldy     #$00
00CF87  1               L3163:
00CF87  1  8A                   txa
00CF88  1  0A                   asl     a
00CF89  1  AA                   tax
00CF8A  1  98                   tya
00CF8B  1  2A                   rol     a
00CF8C  1  A8                   tay
00CF8D  1  B0 AE                bcs     GME
00CF8F  1  06 BA                asl     STRNG2
00CF91  1  26 BB                rol     STRNG2+1
00CF93  1  90 0B                bcc     L317C
00CF95  1  18                   clc
00CF96  1  8A                   txa
00CF97  1  65 76                adc     RESULT_LAST-2
00CF99  1  AA                   tax
00CF9A  1  98                   tya
00CF9B  1  65 77                adc     RESULT_LAST-1
00CF9D  1  A8                   tay
00CF9E  1  B0 9D                bcs     GME
00CFA0  1               L317C:
00CFA0  1  C6 A8                dec     INDX
00CFA2  1  D0 E3                bne     L3163
00CFA4  1  60                   rts
00CFA5  1               ; ----------------------------------------------------------------------------
00CFA5  1               ; "FRE" FUNCTION
00CFA5  1               ;
00CFA5  1               ; COLLECTS GARBAGE AND RETURNS # BYTES OF MEMORY LEFT
00CFA5  1               ; ----------------------------------------------------------------------------
00CFA5  1               FRE:
00CFA5  1  A5 5F                lda     VALTYP
00CFA7  1  F0 03                beq     L3188
00CFA9  1  20 AE D2             jsr     FREFAC
00CFAC  1               L3188:
00CFAC  1  20 3F D1             jsr     GARBAG
00CFAF  1  38                   sec
00CFB0  1  A5 81                lda     FRETOP
00CFB2  1  E5 7F                sbc     STREND
00CFB4  1  A8                   tay
00CFB5  1  A5 82                lda     FRETOP+1
00CFB7  1  E5 80                sbc     STREND+1
00CFB9  1               ; FALL INTO GIVAYF TO FLOAT THE VALUE
00CFB9  1               ; NOTE THAT VALUES OVER 32767 WILL RETURN AS NEGATIVE
00CFB9  1               ; ----------------------------------------------------------------------------
00CFB9  1               ; FLOAT THE SIGNED INTEGER IN A,Y
00CFB9  1               ; ----------------------------------------------------------------------------
00CFB9  1               GIVAYF:
00CFB9  1  A2 00                ldx     #$00
00CFBB  1  86 5F                stx     VALTYP
00CFBD  1  85 AD                sta     FAC+1
00CFBF  1  84 AE                sty     FAC+2
00CFC1  1  A2 90                ldx     #$90
00CFC3  1  4C DB D7             jmp     FLOAT1
00CFC6  1               POS:
00CFC6  1  A4 0E                ldy     POSX
00CFC8  1               ; ----------------------------------------------------------------------------
00CFC8  1               ; FLOAT (Y) INTO FAC, GIVING VALUE 0-255
00CFC8  1               ; ----------------------------------------------------------------------------
00CFC8  1               SNGFLT:
00CFC8  1  A9 00                lda     #$00
00CFCA  1  F0 ED                beq     GIVAYF
00CFCC  1               ; ----------------------------------------------------------------------------
00CFCC  1               ; CHECK FOR DIRECT OR RUNNING MODE
00CFCC  1               ; GIVING ERROR IF DIRECT MODE
00CFCC  1               ; ----------------------------------------------------------------------------
00CFCC  1               ERRDIR:
00CFCC  1  A6 88                ldx     CURLIN+1
00CFCE  1  E8                   inx
00CFCF  1  D0 A2                bne     RTS9
00CFD1  1  A2 16                ldx     #ERR_ILLDIR
00CFD3  1               L31AF:
00CFD3  1  4C 4E C2             jmp     ERROR
00CFD6  1               DEF:
00CFD6  1  20 03 D0             jsr     FNC
00CFD9  1  20 CC CF             jsr     ERRDIR
00CFDC  1  20 F6 CB             jsr     CHKOPN
00CFDF  1  A9 80                lda     #$80
00CFE1  1  85 61                sta     SUBFLG
00CFE3  1  20 03 CD             jsr     PTRGET
00CFE6  1  20 A8 CA             jsr     CHKNUM
00CFE9  1  20 F3 CB             jsr     CHKCLS
00CFEC  1  A9 AB                lda     #TOKEN_EQUAL
00CFEE  1  20 FB CB             jsr     SYNCHR
00CFF1  1  A5 96                lda     VARPNT+1
00CFF3  1  48                   pha
00CFF4  1  A5 95                lda     VARPNT
00CFF6  1  48                   pha
00CFF7  1  A5 C4                lda     TXTPTR+1
00CFF9  1  48                   pha
00CFFA  1  A5 C3                lda     TXTPTR
00CFFC  1  48                   pha
00CFFD  1  20 04 C7             jsr     DATA
00D000  1  4C 72 D0             jmp     L3250
00D003  1               FNC:
00D003  1  A9 9E                lda     #TOKEN_FN
00D005  1  20 FB CB             jsr     SYNCHR
00D008  1  09 80                ora     #$80
00D00A  1  85 61                sta     SUBFLG
00D00C  1  20 0A CD             jsr     PTRGET3
00D00F  1  85 9C                sta     FNCNAM
00D011  1  84 9D                sty     FNCNAM+1
00D013  1  4C A8 CA             jmp     CHKNUM
00D016  1               L31F3:
00D016  1  20 03 D0             jsr     FNC
00D019  1  A5 9D                lda     FNCNAM+1
00D01B  1  48                   pha
00D01C  1  A5 9C                lda     FNCNAM
00D01E  1  48                   pha
00D01F  1  20 ED CB             jsr     PARCHK
00D022  1  20 A8 CA             jsr     CHKNUM
00D025  1  68                   pla
00D026  1  85 9C                sta     FNCNAM
00D028  1  68                   pla
00D029  1  85 9D                sta     FNCNAM+1
00D02B  1  A0 02                ldy     #$02
00D02D  1  A2 20                ldx     #ERR_UNDEFFN
00D02F  1  B1 9C                lda     (FNCNAM),y
00D031  1  F0 A0                beq     L31AF
00D033  1  85 95                sta     VARPNT
00D035  1  AA                   tax
00D036  1  C8                   iny
00D037  1  B1 9C                lda     (FNCNAM),y
00D039  1  85 96                sta     VARPNT+1
00D03B  1               L3219:
00D03B  1  B1 95                lda     (VARPNT),y
00D03D  1  48                   pha
00D03E  1  88                   dey
00D03F  1  10 FA                bpl     L3219
00D041  1  A4 96                ldy     VARPNT+1
00D043  1  20 70 D7             jsr     STORE_FAC_AT_YX_ROUNDED
00D046  1  A5 C4                lda     TXTPTR+1
00D048  1  48                   pha
00D049  1  A5 C3                lda     TXTPTR
00D04B  1  48                   pha
00D04C  1  B1 9C                lda     (FNCNAM),y
00D04E  1  85 C3                sta     TXTPTR
00D050  1  C8                   iny
00D051  1  B1 9C                lda     (FNCNAM),y
00D053  1  85 C4                sta     TXTPTR+1
00D055  1  A5 96                lda     VARPNT+1
00D057  1  48                   pha
00D058  1  A5 95                lda     VARPNT
00D05A  1  48                   pha
00D05B  1  20 A5 CA             jsr     FRMNUM
00D05E  1  68                   pla
00D05F  1  85 9C                sta     FNCNAM
00D061  1  68                   pla
00D062  1  85 9D                sta     FNCNAM+1
00D064  1  20 C2 00             jsr     CHRGOT
00D067  1  F0 03                beq     L324A
00D069  1  4C 04 CC             jmp     SYNERR
00D06C  1               L324A:
00D06C  1  68                   pla
00D06D  1  85 C3                sta     TXTPTR
00D06F  1  68                   pla
00D070  1  85 C4                sta     TXTPTR+1
00D072  1               L3250:
00D072  1  A0 00                ldy     #$00
00D074  1  68                   pla
00D075  1  91 9C                sta     (FNCNAM),y
00D077  1  68                   pla
00D078  1  C8                   iny
00D079  1  91 9C                sta     (FNCNAM),y
00D07B  1  68                   pla
00D07C  1  C8                   iny
00D07D  1  91 9C                sta     (FNCNAM),y
00D07F  1  68                   pla
00D080  1  C8                   iny
00D081  1  91 9C                sta     (FNCNAM),y
00D083  1  60                   rts
00D084  1               ; ----------------------------------------------------------------------------
00D084  1               ; "STR$" FUNCTION
00D084  1               ; ----------------------------------------------------------------------------
00D084  1               STR:
00D084  1  20 A8 CA             jsr     CHKNUM
00D087  1  A0 00                ldy     #$00
00D089  1  20 68 D9             jsr     FOUT1
00D08C  1  68                   pla
00D08D  1  68                   pla
00D08E  1  A9 FF                lda     #$FF
00D090  1  A0 00                ldy     #$00
00D092  1  F0 12                beq     STRLIT
00D094  1               ; ----------------------------------------------------------------------------
00D094  1               ; GET SPACE AND MAKE DESCRIPTOR FOR STRING WHOSE
00D094  1               ; ADDRESS IS IN FAC+3,4 AND WHOSE LENGTH IS IN A-REG
00D094  1               ; ----------------------------------------------------------------------------
00D094  1               STRINI:
00D094  1  A6 AE                ldx     FAC_LAST-1
00D096  1  A4 AF                ldy     FAC_LAST
00D098  1  86 9E                stx     DSCPTR
00D09A  1  84 9F                sty     DSCPTR+1
00D09C  1               ; ----------------------------------------------------------------------------
00D09C  1               ; GET SPACE AND MAKE DESCRIPTOR FOR STRING WHOSE
00D09C  1               ; ADDRESS IS IN Y,X AND WHOSE LENGTH IS IN A-REG
00D09C  1               ; ----------------------------------------------------------------------------
00D09C  1               STRSPA:
00D09C  1  20 0D D1             jsr     GETSPA
00D09F  1  86 AD                stx     FAC+1
00D0A1  1  84 AE                sty     FAC+2
00D0A3  1  85 AC                sta     FAC
00D0A5  1  60                   rts
00D0A6  1               ; ----------------------------------------------------------------------------
00D0A6  1               ; BUILD A DESCRIPTOR FOR STRING STARTING AT Y,A
00D0A6  1               ; AND TERMINATED BY $00 OR QUOTATION MARK
00D0A6  1               ; RETURN WITH DESCRIPTOR IN A TEMPORARY
00D0A6  1               ; AND ADDRESS OF DESCRIPTOR IN FAC+3,4
00D0A6  1               ; ----------------------------------------------------------------------------
00D0A6  1               STRLIT:
00D0A6  1  A2 22                ldx     #$22
00D0A8  1  86 5B                stx     CHARAC
00D0AA  1  86 5C                stx     ENDCHR
00D0AC  1               ; ----------------------------------------------------------------------------
00D0AC  1               ; BUILD A DESCRIPTOR FOR STRING STARTING AT Y,A
00D0AC  1               ; AND TERMINATED BY $00, (CHARAC), OR (ENDCHR)
00D0AC  1               ;
00D0AC  1               ; RETURN WITH DESCRIPTOR IN A TEMPORARY
00D0AC  1               ; AND ADDRESS OF DESCRIPTOR IN FAC+3,4
00D0AC  1               ; ----------------------------------------------------------------------------
00D0AC  1               STRLT2:
00D0AC  1  85 B8                sta     STRNG1
00D0AE  1  84 B9                sty     STRNG1+1
00D0B0  1  85 AD                sta     FAC+1
00D0B2  1  84 AE                sty     FAC+2
00D0B4  1  A0 FF                ldy     #$FF
00D0B6  1               L3298:
00D0B6  1  C8                   iny
00D0B7  1  B1 B8                lda     (STRNG1),y
00D0B9  1  F0 0C                beq     L32A9
00D0BB  1  C5 5B                cmp     CHARAC
00D0BD  1  F0 04                beq     L32A5
00D0BF  1  C5 5C                cmp     ENDCHR
00D0C1  1  D0 F3                bne     L3298
00D0C3  1               L32A5:
00D0C3  1  C9 22                cmp     #$22
00D0C5  1  F0 01                beq     L32AA
00D0C7  1               L32A9:
00D0C7  1  18                   clc
00D0C8  1               L32AA:
00D0C8  1  84 AC                sty     FAC
00D0CA  1  98                   tya
00D0CB  1  65 B8                adc     STRNG1
00D0CD  1  85 BA                sta     STRNG2
00D0CF  1  A6 B9                ldx     STRNG1+1
00D0D1  1  90 01                bcc     L32B6
00D0D3  1  E8                   inx
00D0D4  1               L32B6:
00D0D4  1  86 BB                stx     STRNG2+1
00D0D6  1  A5 B9                lda     STRNG1+1
00D0D8  1  D0 0B                bne     PUTNEW
00D0DA  1  98                   tya
00D0DB  1  20 94 D0             jsr     STRINI
00D0DE  1  A6 B8                ldx     STRNG1
00D0E0  1  A4 B9                ldy     STRNG1+1
00D0E2  1  20 90 D2             jsr     MOVSTR
00D0E5  1               ; ----------------------------------------------------------------------------
00D0E5  1               ; STORE DESCRIPTOR IN TEMPORARY DESCRIPTOR STACK
00D0E5  1               ;
00D0E5  1               ; THE DESCRIPTOR IS NOW IN FAC, FAC+1, FAC+2
00D0E5  1               ; PUT ADDRESS OF TEMP DESCRIPTOR IN FAC+3,4
00D0E5  1               ; ----------------------------------------------------------------------------
00D0E5  1               PUTNEW:
00D0E5  1  A6 65                ldx     TEMPPT
00D0E7  1  E0 71                cpx     #TEMPST+9
00D0E9  1  D0 05                bne     PUTEMP
00D0EB  1  A2 1C                ldx     #ERR_FRMCPX
00D0ED  1               JERR:
00D0ED  1  4C 4E C2             jmp     ERROR
00D0F0  1               PUTEMP:
00D0F0  1  A5 AC                lda     FAC
00D0F2  1  95 00                sta     0,x
00D0F4  1  A5 AD                lda     FAC+1
00D0F6  1  95 01                sta     1,x
00D0F8  1  A5 AE                lda     FAC+2
00D0FA  1  95 02                sta     2,x
00D0FC  1  A0 00                ldy     #$00
00D0FE  1  86 AE                stx     FAC_LAST-1
00D100  1  84 AF                sty     FAC_LAST
00D102  1  88                   dey
00D103  1  84 5F                sty     VALTYP
00D105  1  86 66                stx     LASTPT
00D107  1  E8                   inx
00D108  1  E8                   inx
00D109  1  E8                   inx
00D10A  1  86 65                stx     TEMPPT
00D10C  1  60                   rts
00D10D  1               ; ----------------------------------------------------------------------------
00D10D  1               ; MAKE SPACE FOR STRING AT BOTTOM OF STRING SPACE
00D10D  1               ; (A)=# BYTES SPACE TO MAKE
00D10D  1               ;
00D10D  1               ; RETURN WITH (A) SAME,
00D10D  1               ;	AND Y,X = ADDRESS OF SPACE ALLOCATED
00D10D  1               ; ----------------------------------------------------------------------------
00D10D  1               GETSPA:
00D10D  1  46 60                lsr     DATAFLG
00D10F  1               L32F1:
00D10F  1  48                   pha
00D110  1  49 FF                eor     #$FF
00D112  1  38                   sec
00D113  1  65 81                adc     FRETOP
00D115  1  A4 82                ldy     FRETOP+1
00D117  1  B0 01                bcs     L32FC
00D119  1  88                   dey
00D11A  1               L32FC:
00D11A  1  C4 80                cpy     STREND+1
00D11C  1  90 11                bcc     L3311
00D11E  1  D0 04                bne     L3306
00D120  1  C5 7F                cmp     STREND
00D122  1  90 0B                bcc     L3311
00D124  1               L3306:
00D124  1  85 81                sta     FRETOP
00D126  1  84 82                sty     FRETOP+1
00D128  1  85 83                sta     FRESPC
00D12A  1  84 84                sty     FRESPC+1
00D12C  1  AA                   tax
00D12D  1  68                   pla
00D12E  1  60                   rts
00D12F  1               L3311:
00D12F  1  A2 0C                ldx     #ERR_MEMFULL
00D131  1  A5 60                lda     DATAFLG
00D133  1  30 B8                bmi     JERR
00D135  1  20 3F D1             jsr     GARBAG
00D138  1  A9 80                lda     #$80
00D13A  1  85 60                sta     DATAFLG
00D13C  1  68                   pla
00D13D  1  D0 D0                bne     L32F1
00D13F  1               ; ----------------------------------------------------------------------------
00D13F  1               ; SHOVE ALL REFERENCED STRINGS AS HIGH AS POSSIBLE
00D13F  1               ; IN MEMORY (AGAINST HIMEM), FREEING UP SPACE
00D13F  1               ; BELOW STRING AREA DOWN TO STREND.
00D13F  1               ; ----------------------------------------------------------------------------
00D13F  1               GARBAG:
00D13F  1  A6 85                ldx     MEMSIZ
00D141  1  A5 86                lda     MEMSIZ+1
00D143  1               FINDHIGHESTSTRING:
00D143  1  86 81                stx     FRETOP
00D145  1  85 82                sta     FRETOP+1
00D147  1  A0 00                ldy     #$00
00D149  1  84 9D                sty     FNCNAM+1
00D14B  1  A5 7F                lda     STREND
00D14D  1  A6 80                ldx     STREND+1
00D14F  1  85 AA                sta     LOWTR
00D151  1  86 AB                stx     LOWTR+1
00D153  1  A9 68                lda     #TEMPST
00D155  1  A2 00                ldx     #$00
00D157  1  85 71                sta     INDEX
00D159  1  86 72                stx     INDEX+1
00D15B  1               L333D:
00D15B  1  C5 65                cmp     TEMPPT
00D15D  1  F0 05                beq     L3346
00D15F  1  20 D1 D1             jsr     CHECK_VARIABLE
00D162  1  F0 F7                beq     L333D
00D164  1               L3346:
00D164  1  A9 06                lda     #BYTES_PER_VARIABLE
00D166  1  85 A0                sta     DSCLEN
00D168  1  A5 7B                lda     VARTAB
00D16A  1  A6 7C                ldx     VARTAB+1
00D16C  1  85 71                sta     INDEX
00D16E  1  86 72                stx     INDEX+1
00D170  1               L3352:
00D170  1  E4 7E                cpx     ARYTAB+1
00D172  1  D0 04                bne     L335A
00D174  1  C5 7D                cmp     ARYTAB
00D176  1  F0 05                beq     L335F
00D178  1               L335A:
00D178  1  20 CB D1             jsr     CHECK_SIMPLE_VARIABLE
00D17B  1  F0 F3                beq     L3352
00D17D  1               L335F:
00D17D  1  85 A4                sta     HIGHDS
00D17F  1  86 A5                stx     HIGHDS+1
00D181  1  A9 03                lda     #$03	; OSI GC bugfix -> $04 ???
00D183  1  85 A0                sta     DSCLEN
00D185  1               L3367:
00D185  1  A5 A4                lda     HIGHDS
00D187  1  A6 A5                ldx     HIGHDS+1
00D189  1               L336B:
00D189  1  E4 80                cpx     STREND+1
00D18B  1  D0 07                bne     L3376
00D18D  1  C5 7F                cmp     STREND
00D18F  1  D0 03                bne     L3376
00D191  1  4C 10 D2             jmp     MOVE_HIGHEST_STRING_TO_TOP
00D194  1               L3376:
00D194  1  85 71                sta     INDEX
00D196  1  86 72                stx     INDEX+1
00D198  1  A0 01                ldy     #$01
00D19A  1  B1 71                lda     (INDEX),y
00D19C  1  08                   php
00D19D  1  C8                   iny
00D19E  1  B1 71                lda     (INDEX),y
00D1A0  1  65 A4                adc     HIGHDS
00D1A2  1  85 A4                sta     HIGHDS
00D1A4  1  C8                   iny
00D1A5  1  B1 71                lda     (INDEX),y
00D1A7  1  65 A5                adc     HIGHDS+1
00D1A9  1  85 A5                sta     HIGHDS+1
00D1AB  1  28                   plp
00D1AC  1  10 D7                bpl     L3367
00D1AE  1  C8                   iny
00D1AF  1  B1 71                lda     (INDEX),y
00D1B1  1  0A                   asl     a
00D1B2  1  69 05                adc     #$05
00D1B4  1  65 71                adc     INDEX
00D1B6  1  85 71                sta     INDEX
00D1B8  1  90 02                bcc     L33A7
00D1BA  1  E6 72                inc     INDEX+1
00D1BC  1               L33A7:
00D1BC  1  A6 72                ldx     INDEX+1
00D1BE  1               L33A9:
00D1BE  1  E4 A5                cpx     HIGHDS+1
00D1C0  1  D0 04                bne     L33B1
00D1C2  1  C5 A4                cmp     HIGHDS
00D1C4  1  F0 C3                beq     L336B
00D1C6  1               L33B1:
00D1C6  1  20 D1 D1             jsr     CHECK_VARIABLE
00D1C9  1  F0 F3                beq     L33A9
00D1CB  1               ; ----------------------------------------------------------------------------
00D1CB  1               ; PROCESS A SIMPLE VARIABLE
00D1CB  1               ; ----------------------------------------------------------------------------
00D1CB  1               CHECK_SIMPLE_VARIABLE:
00D1CB  1  C8                   iny
00D1CC  1  B1 71                lda     (INDEX),y
00D1CE  1  10 30                bpl     CHECK_BUMP
00D1D0  1  C8                   iny
00D1D1  1               ; ----------------------------------------------------------------------------
00D1D1  1               ; IF STRING IS NOT EMPTY, CHECK IF IT IS HIGHEST
00D1D1  1               ; ----------------------------------------------------------------------------
00D1D1  1               CHECK_VARIABLE:
00D1D1  1  B1 71                lda     (INDEX),y
00D1D3  1  F0 2B                beq     CHECK_BUMP
00D1D5  1  C8                   iny
00D1D6  1  B1 71                lda     (INDEX),y
00D1D8  1  AA                   tax
00D1D9  1  C8                   iny
00D1DA  1  B1 71                lda     (INDEX),y
00D1DC  1  C5 82                cmp     FRETOP+1
00D1DE  1  90 06                bcc     L33D5
00D1E0  1  D0 1E                bne     CHECK_BUMP
00D1E2  1  E4 81                cpx     FRETOP
00D1E4  1  B0 1A                bcs     CHECK_BUMP
00D1E6  1               L33D5:
00D1E6  1  C5 AB                cmp     LOWTR+1
00D1E8  1  90 16                bcc     CHECK_BUMP
00D1EA  1  D0 04                bne     L33DF
00D1EC  1  E4 AA                cpx     LOWTR
00D1EE  1  90 10                bcc     CHECK_BUMP
00D1F0  1               L33DF:
00D1F0  1  86 AA                stx     LOWTR
00D1F2  1  85 AB                sta     LOWTR+1
00D1F4  1  A5 71                lda     INDEX
00D1F6  1  A6 72                ldx     INDEX+1
00D1F8  1  85 9C                sta     FNCNAM
00D1FA  1  86 9D                stx     FNCNAM+1
00D1FC  1  A5 A0                lda     DSCLEN
00D1FE  1  85 A2                sta     Z52
00D200  1               ; ----------------------------------------------------------------------------
00D200  1               ; ADD (DSCLEN) TO PNTR IN INDEX
00D200  1               ; RETURN WITH Y=0, PNTR ALSO IN X,A
00D200  1               ; ----------------------------------------------------------------------------
00D200  1               CHECK_BUMP:
00D200  1  A5 A0                lda     DSCLEN
00D202  1  18                   clc
00D203  1  65 71                adc     INDEX
00D205  1  85 71                sta     INDEX
00D207  1  90 02                bcc     L33FA
00D209  1  E6 72                inc     INDEX+1
00D20B  1               L33FA:
00D20B  1  A6 72                ldx     INDEX+1
00D20D  1  A0 00                ldy     #$00
00D20F  1  60                   rts
00D210  1               ; ----------------------------------------------------------------------------
00D210  1               ; FOUND HIGHEST NON-EMPTY STRING, SO MOVE IT
00D210  1               ; TO TOP AND GO BACK FOR ANOTHER
00D210  1               ; ----------------------------------------------------------------------------
00D210  1               MOVE_HIGHEST_STRING_TO_TOP:
00D210  1  A6 9D                ldx     FNCNAM+1
00D212  1  F0 F7                beq     L33FA
00D214  1  A5 A2                lda     Z52
00D216  1  29 04                and     #$04
00D218  1  4A                   lsr     a
00D219  1  A8                   tay
00D21A  1  85 A2                sta     Z52
00D21C  1  B1 9C                lda     (FNCNAM),y
00D21E  1  65 AA                adc     LOWTR
00D220  1  85 A6                sta     HIGHTR
00D222  1  A5 AB                lda     LOWTR+1
00D224  1  69 00                adc     #$00
00D226  1  85 A7                sta     HIGHTR+1
00D228  1  A5 81                lda     FRETOP
00D22A  1  A6 82                ldx     FRETOP+1
00D22C  1  85 A4                sta     HIGHDS
00D22E  1  86 A5                stx     HIGHDS+1
00D230  1  20 D6 C1             jsr     BLTU2
00D233  1  A4 A2                ldy     Z52
00D235  1  C8                   iny
00D236  1  A5 A4                lda     HIGHDS
00D238  1  91 9C                sta     (FNCNAM),y
00D23A  1  AA                   tax
00D23B  1  E6 A5                inc     HIGHDS+1
00D23D  1  A5 A5                lda     HIGHDS+1
00D23F  1  C8                   iny
00D240  1  91 9C                sta     (FNCNAM),y
00D242  1  4C 43 D1             jmp     FINDHIGHESTSTRING
00D245  1               ; ----------------------------------------------------------------------------
00D245  1               ; CONCATENATE TWO STRINGS
00D245  1               ; ----------------------------------------------------------------------------
00D245  1               CAT:
00D245  1  A5 AF                lda     FAC_LAST
00D247  1  48                   pha
00D248  1  A5 AE                lda     FAC_LAST-1
00D24A  1  48                   pha
00D24B  1  20 98 CB             jsr     FRM_ELEMENT
00D24E  1  20 AA CA             jsr     CHKSTR
00D251  1  68                   pla
00D252  1  85 B8                sta     STRNG1
00D254  1  68                   pla
00D255  1  85 B9                sta     STRNG1+1
00D257  1  A0 00                ldy     #$00
00D259  1  B1 B8                lda     (STRNG1),y
00D25B  1  18                   clc
00D25C  1  71 AE                adc     (FAC_LAST-1),y
00D25E  1  90 05                bcc     L3454
00D260  1  A2 1A                ldx     #ERR_STRLONG
00D262  1  4C 4E C2             jmp     ERROR
00D265  1               L3454:
00D265  1  20 94 D0             jsr     STRINI
00D268  1  20 82 D2             jsr     MOVINS
00D26B  1  A5 9E                lda     DSCPTR
00D26D  1  A4 9F                ldy     DSCPTR+1
00D26F  1  20 B2 D2             jsr     FRETMP
00D272  1  20 94 D2             jsr     MOVSTR1
00D275  1  A5 B8                lda     STRNG1
00D277  1  A4 B9                ldy     STRNG1+1
00D279  1  20 B2 D2             jsr     FRETMP
00D27C  1  20 E5 D0             jsr     PUTNEW
00D27F  1  4C D3 CA             jmp     FRMEVL2
00D282  1               ; ----------------------------------------------------------------------------
00D282  1               ; GET STRING DESCRIPTOR POINTED AT BY (STRNG1)
00D282  1               ; AND MOVE DESCRIBED STRING TO (FRESPC)
00D282  1               ; ----------------------------------------------------------------------------
00D282  1               MOVINS:
00D282  1  A0 00                ldy     #$00
00D284  1  B1 B8                lda     (STRNG1),y
00D286  1  48                   pha
00D287  1  C8                   iny
00D288  1  B1 B8                lda     (STRNG1),y
00D28A  1  AA                   tax
00D28B  1  C8                   iny
00D28C  1  B1 B8                lda     (STRNG1),y
00D28E  1  A8                   tay
00D28F  1  68                   pla
00D290  1               ; ----------------------------------------------------------------------------
00D290  1               ; MOVE STRING AT (Y,X) WITH LENGTH (A)
00D290  1               ; TO DESTINATION WHOSE ADDRESS IS IN FRESPC,FRESPC+1
00D290  1               ; ----------------------------------------------------------------------------
00D290  1               MOVSTR:
00D290  1  86 71                stx     INDEX
00D292  1  84 72                sty     INDEX+1
00D294  1               MOVSTR1:
00D294  1  A8                   tay
00D295  1  F0 0A                beq     L3490
00D297  1  48                   pha
00D298  1               L3487:
00D298  1  88                   dey
00D299  1  B1 71                lda     (INDEX),y
00D29B  1  91 83                sta     (FRESPC),y
00D29D  1  98                   tya
00D29E  1  D0 F8                bne     L3487
00D2A0  1  68                   pla
00D2A1  1               L3490:
00D2A1  1  18                   clc
00D2A2  1  65 83                adc     FRESPC
00D2A4  1  85 83                sta     FRESPC
00D2A6  1  90 02                bcc     L3499
00D2A8  1  E6 84                inc     FRESPC+1
00D2AA  1               L3499:
00D2AA  1  60                   rts
00D2AB  1               ; ----------------------------------------------------------------------------
00D2AB  1               ; IF (FAC) IS A TEMPORARY STRING, RELEASE DESCRIPTOR
00D2AB  1               ; ----------------------------------------------------------------------------
00D2AB  1               FRESTR:
00D2AB  1  20 AA CA             jsr     CHKSTR
00D2AE  1               ; ----------------------------------------------------------------------------
00D2AE  1               ; IF STRING DESCRIPTOR POINTED TO BY FAC+3,4 IS
00D2AE  1               ; A TEMPORARY STRING, RELEASE IT.
00D2AE  1               ; ----------------------------------------------------------------------------
00D2AE  1               FREFAC:
00D2AE  1  A5 AE                lda     FAC_LAST-1
00D2B0  1  A4 AF                ldy     FAC_LAST
00D2B2  1               ; ----------------------------------------------------------------------------
00D2B2  1               ; IF STRING DESCRIPTOR WHOSE ADDRESS IS IN Y,A IS
00D2B2  1               ; A TEMPORARY STRING, RELEASE IT.
00D2B2  1               ; ----------------------------------------------------------------------------
00D2B2  1               FRETMP:
00D2B2  1  85 71                sta     INDEX
00D2B4  1  84 72                sty     INDEX+1
00D2B6  1  20 E3 D2             jsr     FRETMS
00D2B9  1  08                   php
00D2BA  1  A0 00                ldy     #$00
00D2BC  1  B1 71                lda     (INDEX),y
00D2BE  1  48                   pha
00D2BF  1  C8                   iny
00D2C0  1  B1 71                lda     (INDEX),y
00D2C2  1  AA                   tax
00D2C3  1  C8                   iny
00D2C4  1  B1 71                lda     (INDEX),y
00D2C6  1  A8                   tay
00D2C7  1  68                   pla
00D2C8  1  28                   plp
00D2C9  1  D0 13                bne     L34CD
00D2CB  1  C4 82                cpy     FRETOP+1
00D2CD  1  D0 0F                bne     L34CD
00D2CF  1  E4 81                cpx     FRETOP
00D2D1  1  D0 0B                bne     L34CD
00D2D3  1  48                   pha
00D2D4  1  18                   clc
00D2D5  1  65 81                adc     FRETOP
00D2D7  1  85 81                sta     FRETOP
00D2D9  1  90 02                bcc     L34CC
00D2DB  1  E6 82                inc     FRETOP+1
00D2DD  1               L34CC:
00D2DD  1  68                   pla
00D2DE  1               L34CD:
00D2DE  1  86 71                stx     INDEX
00D2E0  1  84 72                sty     INDEX+1
00D2E2  1  60                   rts
00D2E3  1               ; ----------------------------------------------------------------------------
00D2E3  1               ; RELEASE TEMPORARY DESCRIPTOR IF Y,A = LASTPT
00D2E3  1               ; ----------------------------------------------------------------------------
00D2E3  1               FRETMS:
00D2E3  1  C4 67                cpy     LASTPT+1
00D2E5  1  D0 0C                bne     L34E2
00D2E7  1  C5 66                cmp     LASTPT
00D2E9  1  D0 08                bne     L34E2
00D2EB  1  85 65                sta     TEMPPT
00D2ED  1  E9 03                sbc     #$03
00D2EF  1  85 66                sta     LASTPT
00D2F1  1  A0 00                ldy     #$00
00D2F3  1               L34E2:
00D2F3  1  60                   rts
00D2F4  1               ; ----------------------------------------------------------------------------
00D2F4  1               ; "CHR$" FUNCTION
00D2F4  1               ; ----------------------------------------------------------------------------
00D2F4  1               CHRSTR:
00D2F4  1  20 A9 D3             jsr     CONINT
00D2F7  1  8A                   txa
00D2F8  1  48                   pha
00D2F9  1  A9 01                lda     #$01
00D2FB  1  20 9C D0             jsr     STRSPA
00D2FE  1  68                   pla
00D2FF  1  A0 00                ldy     #$00
00D301  1  91 AD                sta     (FAC+1),y
00D303  1  68                   pla
00D304  1  68                   pla
00D305  1  4C E5 D0             jmp     PUTNEW
00D308  1               ; ----------------------------------------------------------------------------
00D308  1               ; "LEFT$" FUNCTION
00D308  1               ; ----------------------------------------------------------------------------
00D308  1               LEFTSTR:
00D308  1  20 67 D3             jsr     SUBSTRING_SETUP
00D30B  1  D1 9E                cmp     (DSCPTR),y
00D30D  1  98                   tya
00D30E  1               SUBSTRING1:
00D30E  1  90 04                bcc     L3503
00D310  1  B1 9E                lda     (DSCPTR),y
00D312  1  AA                   tax
00D313  1  98                   tya
00D314  1               L3503:
00D314  1  48                   pha
00D315  1               SUBSTRING2:
00D315  1  8A                   txa
00D316  1               SUBSTRING3:
00D316  1  48                   pha
00D317  1  20 9C D0             jsr     STRSPA
00D31A  1  A5 9E                lda     DSCPTR
00D31C  1  A4 9F                ldy     DSCPTR+1
00D31E  1  20 B2 D2             jsr     FRETMP
00D321  1  68                   pla
00D322  1  A8                   tay
00D323  1  68                   pla
00D324  1  18                   clc
00D325  1  65 71                adc     INDEX
00D327  1  85 71                sta     INDEX
00D329  1  90 02                bcc     L351C
00D32B  1  E6 72                inc     INDEX+1
00D32D  1               L351C:
00D32D  1  98                   tya
00D32E  1  20 94 D2             jsr     MOVSTR1
00D331  1  4C E5 D0             jmp     PUTNEW
00D334  1               ; ----------------------------------------------------------------------------
00D334  1               ; "RIGHT$" FUNCTION
00D334  1               ; ----------------------------------------------------------------------------
00D334  1               RIGHTSTR:
00D334  1  20 67 D3             jsr     SUBSTRING_SETUP
00D337  1  18                   clc
00D338  1  F1 9E                sbc     (DSCPTR),y
00D33A  1  49 FF                eor     #$FF
00D33C  1  4C 0E D3             jmp     SUBSTRING1
00D33F  1               ; ----------------------------------------------------------------------------
00D33F  1               ; "MID$" FUNCTION
00D33F  1               ; ----------------------------------------------------------------------------
00D33F  1               MIDSTR:
00D33F  1  A9 FF                lda     #$FF
00D341  1  85 AF                sta     FAC_LAST
00D343  1  20 C2 00             jsr     CHRGOT
00D346  1  C9 29                cmp     #$29
00D348  1  F0 06                beq     L353F
00D34A  1  20 F9 CB             jsr     CHKCOM
00D34D  1  20 A6 D3             jsr     GETBYT
00D350  1               L353F:
00D350  1  20 67 D3             jsr     SUBSTRING_SETUP
00D353  1  CA                   dex
00D354  1  8A                   txa
00D355  1  48                   pha
00D356  1  18                   clc
00D357  1  A2 00                ldx     #$00
00D359  1  F1 9E                sbc     (DSCPTR),y
00D35B  1  B0 B8                bcs     SUBSTRING2
00D35D  1  49 FF                eor     #$FF
00D35F  1  C5 AF                cmp     FAC_LAST
00D361  1  90 B3                bcc     SUBSTRING3
00D363  1  A5 AF                lda     FAC_LAST
00D365  1  B0 AF                bcs     SUBSTRING3
00D367  1               ; ----------------------------------------------------------------------------
00D367  1               ; COMMON SETUP ROUTINE FOR LEFT$, RIGHT$, MID$:
00D367  1               ; REQUIRE ")"; POP RETURN ADRS, GET DESCRIPTOR
00D367  1               ; ADDRESS, GET 1ST PARAMETER OF COMMAND
00D367  1               ; ----------------------------------------------------------------------------
00D367  1               SUBSTRING_SETUP:
00D367  1  20 F3 CB             jsr     CHKCLS
00D36A  1  68                   pla
00D36B  1  85 A2                sta     JMPADRS+1
00D36D  1  68                   pla
00D36E  1  85 A3                sta     JMPADRS+2
00D370  1  68                   pla
00D371  1  68                   pla
00D372  1  68                   pla
00D373  1  AA                   tax
00D374  1  68                   pla
00D375  1  85 9E                sta     DSCPTR
00D377  1  68                   pla
00D378  1  85 9F                sta     DSCPTR+1
00D37A  1  A0 00                ldy     #$00
00D37C  1  8A                   txa
00D37D  1  F0 21                beq     GOIQ
00D37F  1  E6 A2                inc     JMPADRS+1
00D381  1  6C A2 00             jmp     (JMPADRS+1)
00D384  1               ; ----------------------------------------------------------------------------
00D384  1               ; "LEN" FUNCTION
00D384  1               ; ----------------------------------------------------------------------------
00D384  1               LEN:
00D384  1  20 8A D3             jsr     GETSTR
00D387  1               SNGFLT1:
00D387  1  4C C8 CF             jmp     SNGFLT
00D38A  1               ; ----------------------------------------------------------------------------
00D38A  1               ; IF LAST RESULT IS A TEMPORARY STRING, FREE IT
00D38A  1               ; MAKE VALTYP NUMERIC, RETURN LENGTH IN Y-REG
00D38A  1               ; ----------------------------------------------------------------------------
00D38A  1               GETSTR:
00D38A  1  20 AB D2             jsr     FRESTR
00D38D  1  A2 00                ldx     #$00
00D38F  1  86 5F                stx     VALTYP
00D391  1  A8                   tay
00D392  1  60                   rts
00D393  1               ; ----------------------------------------------------------------------------
00D393  1               ; "ASC" FUNCTION
00D393  1               ; ----------------------------------------------------------------------------
00D393  1               ASC:
00D393  1  20 8A D3             jsr     GETSTR
00D396  1  F0 08                beq     GOIQ
00D398  1  A0 00                ldy     #$00
00D39A  1  B1 71                lda     (INDEX),y
00D39C  1  A8                   tay
00D39D  1  4C 87 D3             jmp     SNGFLT1
00D3A0  1               ; ----------------------------------------------------------------------------
00D3A0  1               GOIQ:
00D3A0  1  4C 80 CE             jmp     IQERR
00D3A3  1               ; ----------------------------------------------------------------------------
00D3A3  1               ; SCAN TO NEXT CHARACTER AND CONVERT EXPRESSION
00D3A3  1               ; TO SINGLE BYTE IN X-REG
00D3A3  1               ; ----------------------------------------------------------------------------
00D3A3  1               GTBYTC:
00D3A3  1  20 BC 00             jsr     CHRGET
00D3A6  1               ; ----------------------------------------------------------------------------
00D3A6  1               ; EVALUATE EXPRESSION AT TXTPTR, AND
00D3A6  1               ; CONVERT IT TO SINGLE BYTE IN X-REG
00D3A6  1               ; ----------------------------------------------------------------------------
00D3A6  1               GETBYT:
00D3A6  1  20 A5 CA             jsr     FRMNUM
00D3A9  1               ; ----------------------------------------------------------------------------
00D3A9  1               ; CONVERT (FAC) TO SINGLE BYTE INTEGER IN X-REG
00D3A9  1               ; ----------------------------------------------------------------------------
00D3A9  1               CONINT:
00D3A9  1  20 F9 CD             jsr     MKINT
00D3AC  1  A6 AE                ldx     FAC_LAST-1
00D3AE  1  D0 F0                bne     GOIQ
00D3B0  1  A6 AF                ldx     FAC_LAST
00D3B2  1  4C C2 00             jmp     CHRGOT
00D3B5  1               ; ----------------------------------------------------------------------------
00D3B5  1               ; "VAL" FUNCTION
00D3B5  1               ; ----------------------------------------------------------------------------
00D3B5  1               VAL:
00D3B5  1  20 8A D3             jsr     GETSTR
00D3B8  1  D0 03                bne     L35AC
00D3BA  1  4C E9 D4             jmp     ZERO_FAC
00D3BD  1               L35AC:
00D3BD  1  A6 C3                ldx     TXTPTR
00D3BF  1  A4 C4                ldy     TXTPTR+1
00D3C1  1  86 BA                stx     STRNG2
00D3C3  1  84 BB                sty     STRNG2+1
00D3C5  1  A6 71                ldx     INDEX
00D3C7  1  86 C3                stx     TXTPTR
00D3C9  1  18                   clc
00D3CA  1  65 71                adc     INDEX
00D3CC  1  85 73                sta     DEST
00D3CE  1  A6 72                ldx     INDEX+1
00D3D0  1  86 C4                stx     TXTPTR+1
00D3D2  1  90 01                bcc     L35C4
00D3D4  1  E8                   inx
00D3D5  1               L35C4:
00D3D5  1  86 74                stx     DEST+1
00D3D7  1  A0 00                ldy     #$00
00D3D9  1  B1 73                lda     (DEST),y
00D3DB  1  48                   pha
00D3DC  1  A9 00                lda     #$00
00D3DE  1  91 73                sta     (DEST),y
00D3E0  1  20 C2 00             jsr     CHRGOT
00D3E3  1  20 7F D8             jsr     FIN
00D3E6  1  68                   pla
00D3E7  1  A0 00                ldy     #$00
00D3E9  1  91 73                sta     (DEST),y
00D3EB  1               ; ----------------------------------------------------------------------------
00D3EB  1               ; COPY STRNG2 INTO TXTPTR
00D3EB  1               ; ----------------------------------------------------------------------------
00D3EB  1               POINT:
00D3EB  1  A6 BA                ldx     STRNG2
00D3ED  1  A4 BB                ldy     STRNG2+1
00D3EF  1  86 C3                stx     TXTPTR
00D3F1  1  84 C4                sty     TXTPTR+1
00D3F3  1  60                   rts
00D3F4  1               ; ----------------------------------------------------------------------------
00D3F4  1               ; EVALUATE "EXP1,EXP2"
00D3F4  1               ;
00D3F4  1               ; CONVERT EXP1 TO 16-BIT NUMBER IN LINNUM
00D3F4  1               ; CONVERT EXP2 TO 8-BIT NUMBER IN X-REG
00D3F4  1               ; ----------------------------------------------------------------------------
00D3F4  1               GTNUM:
00D3F4  1  20 A5 CA             jsr     FRMNUM
00D3F7  1  20 00 D4             jsr     GETADR
00D3FA  1               ; ----------------------------------------------------------------------------
00D3FA  1               ; EVALUATE ",EXPRESSION"
00D3FA  1               ; CONVERT EXPRESSION TO SINGLE BYTE IN X-REG
00D3FA  1               ; ----------------------------------------------------------------------------
00D3FA  1               COMBYTE:
00D3FA  1  20 F9 CB             jsr     CHKCOM
00D3FD  1  4C A6 D3             jmp     GETBYT
00D400  1               ; ----------------------------------------------------------------------------
00D400  1               ; CONVERT (FAC) TO A 16-BIT VALUE IN LINNUM
00D400  1               ; ----------------------------------------------------------------------------
00D400  1               GETADR:
00D400  1  A5 B0                lda     FACSIGN
00D402  1  30 9C                bmi     GOIQ
00D404  1  A5 AC                lda     FAC
00D406  1  C9 91                cmp     #$91
00D408  1  B0 96                bcs     GOIQ
00D40A  1  20 29 D8             jsr     QINT
00D40D  1  A5 AE                lda     FAC_LAST-1
00D40F  1  A4 AF                ldy     FAC_LAST
00D411  1  84 11                sty     LINNUM
00D413  1  85 12                sta     LINNUM+1
00D415  1  60                   rts
00D416  1               ; ----------------------------------------------------------------------------
00D416  1               ; "PEEK" FUNCTION
00D416  1               ; ----------------------------------------------------------------------------
00D416  1               PEEK:
00D416  1  20 00 D4             jsr     GETADR
00D419  1  A0 00                ldy     #$00
00D41B  1               ; disallow PEEK between $C000 and $DFFF
00D41B  1  B1 11                lda     (LINNUM),y
00D41D  1  A8                   tay
00D41E  1  4C C8 CF             jmp     SNGFLT
00D421  1               ; ----------------------------------------------------------------------------
00D421  1               ; "POKE" STATEMENT
00D421  1               ; ----------------------------------------------------------------------------
00D421  1               POKE:
00D421  1  20 F4 D3             jsr     GTNUM
00D424  1  8A                   txa
00D425  1  A0 00                ldy     #$00
00D427  1  91 11                sta     (LINNUM),y
00D429  1  60                   rts
00D42A  1               ; ----------------------------------------------------------------------------
00D42A  1               ; "WAIT" STATEMENT
00D42A  1               ; ----------------------------------------------------------------------------
00D42A  1               WAIT:
00D42A  1  20 F4 D3             jsr     GTNUM
00D42D  1  86 97                stx     FORPNT
00D42F  1  A2 00                ldx     #$00
00D431  1  20 C2 00             jsr     CHRGOT
00D434  1  F0 03                beq     L3628
00D436  1  20 FA D3             jsr     COMBYTE
00D439  1               L3628:
00D439  1  86 98                stx     FORPNT+1
00D43B  1  A0 00                ldy     #$00
00D43D  1               L362C:
00D43D  1  B1 11                lda     (LINNUM),y
00D43F  1  45 98                eor     FORPNT+1
00D441  1  25 97                and     FORPNT
00D443  1  F0 F8                beq     L362C
00D445  1               RTS3:
00D445  1  60                   rts
00D446  1               TEMP1X = TEMP1+(5-BYTES_FP)
00D446  1               ; ----------------------------------------------------------------------------
00D446  1               ; ADD 0.5 TO FAC
00D446  1               ; ----------------------------------------------------------------------------
00D446  1               FADDH:
00D446  1  A9 8E                lda     #<CON_HALF
00D448  1  A0 DA                ldy     #>CON_HALF
00D44A  1  4C 64 D4             jmp     FADD
00D44D  1               ; ----------------------------------------------------------------------------
00D44D  1               ; FAC = (Y,A) - FAC
00D44D  1               ; ----------------------------------------------------------------------------
00D44D  1               FSUB:
00D44D  1  20 45 D6             jsr     LOAD_ARG_FROM_YA
00D450  1               ; ----------------------------------------------------------------------------
00D450  1               ; FAC = ARG - FAC
00D450  1               ; ----------------------------------------------------------------------------
00D450  1               FSUBT:
00D450  1  A5 B0                lda     FACSIGN
00D452  1  49 FF                eor     #$FF
00D454  1  85 B0                sta     FACSIGN
00D456  1  45 B7                eor     ARGSIGN
00D458  1  85 B8                sta     SGNCPR
00D45A  1  A5 AC                lda     FAC
00D45C  1  4C 67 D4             jmp     FADDT
00D45F  1               ; ----------------------------------------------------------------------------
00D45F  1               ; Commodore BASIC V2 Easter Egg
00D45F  1               ; ----------------------------------------------------------------------------
00D45F  1               ; ----------------------------------------------------------------------------
00D45F  1               ; SHIFT SMALLER ARGUMENT MORE THAN 7 BITS
00D45F  1               ; ----------------------------------------------------------------------------
00D45F  1               FADD1:
00D45F  1  20 73 D5             jsr     SHIFT_RIGHT
00D462  1  90 3C                bcc     FADD3
00D464  1               ; ----------------------------------------------------------------------------
00D464  1               ; FAC = (Y,A) + FAC
00D464  1               ; ----------------------------------------------------------------------------
00D464  1               FADD:
00D464  1  20 45 D6             jsr     LOAD_ARG_FROM_YA
00D467  1               ; ----------------------------------------------------------------------------
00D467  1               ; FAC = ARG + FAC
00D467  1               ; ----------------------------------------------------------------------------
00D467  1               FADDT:
00D467  1  D0 03                bne     L365B
00D469  1  4C 93 D7             jmp     COPY_ARG_TO_FAC
00D46C  1               L365B:
00D46C  1  A6 B9                ldx     FACEXTENSION
00D46E  1  86 A3                stx     ARGEXTENSION
00D470  1  A2 B3                ldx     #ARG
00D472  1  A5 B3                lda     ARG
00D474  1               FADD2:
00D474  1  A8                   tay
00D475  1  F0 CE                beq     RTS3
00D477  1  38                   sec
00D478  1  E5 AC                sbc     FAC
00D47A  1  F0 24                beq     FADD3
00D47C  1  90 12                bcc     L367F
00D47E  1  84 AC                sty     FAC
00D480  1  A4 B7                ldy     ARGSIGN
00D482  1  84 B0                sty     FACSIGN
00D484  1  49 FF                eor     #$FF
00D486  1  69 00                adc     #$00
00D488  1  A0 00                ldy     #$00
00D48A  1  84 A3                sty     ARGEXTENSION
00D48C  1  A2 AC                ldx     #FAC
00D48E  1  D0 04                bne     L3683
00D490  1               L367F:
00D490  1  A0 00                ldy     #$00
00D492  1  84 B9                sty     FACEXTENSION
00D494  1               L3683:
00D494  1  C9 F9                cmp     #$F9
00D496  1  30 C7                bmi     FADD1
00D498  1  A8                   tay
00D499  1  A5 B9                lda     FACEXTENSION
00D49B  1  56 01                lsr     1,x
00D49D  1  20 8A D5             jsr     SHIFT_RIGHT4
00D4A0  1               FADD3:
00D4A0  1  24 B8                bit     SGNCPR
00D4A2  1  10 4C                bpl     FADD4
00D4A4  1  A0 AC                ldy     #FAC
00D4A6  1  E0 B3                cpx     #ARG
00D4A8  1  F0 02                beq     L369B
00D4AA  1  A0 B3                ldy     #ARG
00D4AC  1               L369B:
00D4AC  1  38                   sec
00D4AD  1  49 FF                eor     #$FF
00D4AF  1  65 A3                adc     ARGEXTENSION
00D4B1  1  85 B9                sta     FACEXTENSION
00D4B3  1  B9 03 00             lda     3,y
00D4B6  1  F5 03                sbc     3,x
00D4B8  1  85 AF                sta     FAC+3
00D4BA  1  B9 02 00             lda     2,y
00D4BD  1  F5 02                sbc     2,x
00D4BF  1  85 AE                sta     FAC+2
00D4C1  1  B9 01 00             lda     1,y
00D4C4  1  F5 01                sbc     1,x
00D4C6  1  85 AD                sta     FAC+1
00D4C8  1               ; ----------------------------------------------------------------------------
00D4C8  1               ; NORMALIZE VALUE IN FAC
00D4C8  1               ; ----------------------------------------------------------------------------
00D4C8  1               NORMALIZE_FAC1:
00D4C8  1  B0 03                bcs     NORMALIZE_FAC2
00D4CA  1  20 2F D5             jsr     COMPLEMENT_FAC
00D4CD  1               NORMALIZE_FAC2:
00D4CD  1  A0 00                ldy     #$00
00D4CF  1  98                   tya
00D4D0  1  18                   clc
00D4D1  1               L36C7:
00D4D1  1  A6 AD                ldx     FAC+1
00D4D3  1  D0 3E                bne     NORMALIZE_FAC4
00D4D5  1  A6 AE                ldx     FAC+2
00D4D7  1  86 AD                stx     FAC+1
00D4D9  1  A6 AF                ldx     FAC+3
00D4DB  1  86 AE                stx     FAC+2
00D4DD  1  A6 B9                ldx     FACEXTENSION
00D4DF  1  86 AF                stx     FAC+3
00D4E1  1  84 B9                sty     FACEXTENSION
00D4E3  1  69 08                adc     #$08
00D4E5  1               ; bugfix?
00D4E5  1               ; fix does not exist on AppleSoft 2
00D4E5  1  C9 18                cmp     #MANTISSA_BYTES*8
00D4E7  1  D0 E8                bne     L36C7
00D4E9  1               ; ----------------------------------------------------------------------------
00D4E9  1               ; SET FAC = 0
00D4E9  1               ; (ONLY NECESSARY TO ZERO EXPONENT AND SIGN CELLS)
00D4E9  1               ; ----------------------------------------------------------------------------
00D4E9  1               ZERO_FAC:
00D4E9  1  A9 00                lda     #$00
00D4EB  1               STA_IN_FAC_SIGN_AND_EXP:
00D4EB  1  85 AC                sta     FAC
00D4ED  1               STA_IN_FAC_SIGN:
00D4ED  1  85 B0                sta     FACSIGN
00D4EF  1  60                   rts
00D4F0  1               ; ----------------------------------------------------------------------------
00D4F0  1               ; ADD MANTISSAS OF FAC AND ARG INTO FAC
00D4F0  1               ; ----------------------------------------------------------------------------
00D4F0  1               FADD4:
00D4F0  1  65 A3                adc     ARGEXTENSION
00D4F2  1  85 B9                sta     FACEXTENSION
00D4F4  1  A5 AF                lda     FAC+3
00D4F6  1  65 B6                adc     ARG+3
00D4F8  1  85 AF                sta     FAC+3
00D4FA  1  A5 AE                lda     FAC+2
00D4FC  1  65 B5                adc     ARG+2
00D4FE  1  85 AE                sta     FAC+2
00D500  1  A5 AD                lda     FAC+1
00D502  1  65 B4                adc     ARG+1
00D504  1  85 AD                sta     FAC+1
00D506  1  4C 20 D5             jmp     NORMALIZE_FAC5
00D509  1               ; ----------------------------------------------------------------------------
00D509  1               ; FINISH NORMALIZING FAC
00D509  1               ; ----------------------------------------------------------------------------
00D509  1               NORMALIZE_FAC3:
00D509  1  69 01                adc     #$01
00D50B  1  06 B9                asl     FACEXTENSION
00D50D  1  26 AF                rol     FAC+3
00D50F  1  26 AE                rol     FAC+2
00D511  1  26 AD                rol     FAC+1
00D513  1               NORMALIZE_FAC4:
00D513  1  10 F4                bpl     NORMALIZE_FAC3
00D515  1  38                   sec
00D516  1  E5 AC                sbc     FAC
00D518  1  B0 CF                bcs     ZERO_FAC
00D51A  1  49 FF                eor     #$FF
00D51C  1  69 01                adc     #$01
00D51E  1  85 AC                sta     FAC
00D520  1               NORMALIZE_FAC5:
00D520  1  90 0C                bcc     L3764
00D522  1               NORMALIZE_FAC6:
00D522  1  E6 AC                inc     FAC
00D524  1  F0 36                beq     OVERFLOW
00D526  1  66 AD                ror     FAC+1
00D528  1  66 AE                ror     FAC+2
00D52A  1  66 AF                ror     FAC+3
00D52C  1  66 B9                ror     FACEXTENSION
00D52E  1               L3764:
00D52E  1  60                   rts
00D52F  1               ; ----------------------------------------------------------------------------
00D52F  1               ; 2'S COMPLEMENT OF FAC
00D52F  1               ; ----------------------------------------------------------------------------
00D52F  1               COMPLEMENT_FAC:
00D52F  1  A5 B0                lda     FACSIGN
00D531  1  49 FF                eor     #$FF
00D533  1  85 B0                sta     FACSIGN
00D535  1               ; ----------------------------------------------------------------------------
00D535  1               ; 2'S COMPLEMENT OF FAC MANTISSA ONLY
00D535  1               ; ----------------------------------------------------------------------------
00D535  1               COMPLEMENT_FAC_MANTISSA:
00D535  1  A5 AD                lda     FAC+1
00D537  1  49 FF                eor     #$FF
00D539  1  85 AD                sta     FAC+1
00D53B  1  A5 AE                lda     FAC+2
00D53D  1  49 FF                eor     #$FF
00D53F  1  85 AE                sta     FAC+2
00D541  1  A5 AF                lda     FAC+3
00D543  1  49 FF                eor     #$FF
00D545  1  85 AF                sta     FAC+3
00D547  1  A5 B9                lda     FACEXTENSION
00D549  1  49 FF                eor     #$FF
00D54B  1  85 B9                sta     FACEXTENSION
00D54D  1  E6 B9                inc     FACEXTENSION
00D54F  1  D0 0A                bne     RTS12
00D551  1               ; ----------------------------------------------------------------------------
00D551  1               ; INCREMENT FAC MANTISSA
00D551  1               ; ----------------------------------------------------------------------------
00D551  1               INCREMENT_FAC_MANTISSA:
00D551  1  E6 AF                inc     FAC+3
00D553  1  D0 06                bne     RTS12
00D555  1  E6 AE                inc     FAC+2
00D557  1  D0 02                bne     RTS12
00D559  1  E6 AD                inc     FAC+1
00D55B  1               RTS12:
00D55B  1  60                   rts
00D55C  1               OVERFLOW:
00D55C  1  A2 0A                ldx     #ERR_OVERFLOW
00D55E  1  4C 4E C2             jmp     ERROR
00D561  1               ; ----------------------------------------------------------------------------
00D561  1               ; SHIFT 1,X THRU 5,X RIGHT
00D561  1               ; (A) = NEGATIVE OF SHIFT COUNT
00D561  1               ; (X) = POINTER TO BYTES TO BE SHIFTED
00D561  1               ;
00D561  1               ; RETURN WITH (Y)=0, CARRY=0, EXTENSION BITS IN A-REG
00D561  1               ; ----------------------------------------------------------------------------
00D561  1               SHIFT_RIGHT1:
00D561  1  A2 74                ldx     #RESULT-1
00D563  1               SHIFT_RIGHT2:
00D563  1  B4 03                ldy     3,x
00D565  1  84 B9                sty     FACEXTENSION
00D567  1  B4 02                ldy     2,x
00D569  1  94 03                sty     3,x
00D56B  1  B4 01                ldy     1,x
00D56D  1  94 02                sty     2,x
00D56F  1  A4 B2                ldy     SHIFTSIGNEXT
00D571  1  94 01                sty     1,x
00D573  1               ; ----------------------------------------------------------------------------
00D573  1               ; MAIN ENTRY TO RIGHT SHIFT SUBROUTINE
00D573  1               ; ----------------------------------------------------------------------------
00D573  1               SHIFT_RIGHT:
00D573  1  69 08                adc     #$08
00D575  1  30 EC                bmi     SHIFT_RIGHT2
00D577  1  F0 EA                beq     SHIFT_RIGHT2
00D579  1  E9 08                sbc     #$08
00D57B  1  A8                   tay
00D57C  1  A5 B9                lda     FACEXTENSION
00D57E  1  B0 12                bcs     SHIFT_RIGHT5
00D580  1               LB588:
00D580  1  16 01                asl     1,x
00D582  1  90 02                bcc     LB58E
00D584  1  F6 01                inc     1,x
00D586  1               LB58E:
00D586  1  76 01                ror     1,x
00D588  1  76 01                ror     1,x
00D58A  1               ; ----------------------------------------------------------------------------
00D58A  1               ; ENTER HERE FOR SHORT SHIFTS WITH NO SIGN EXTENSION
00D58A  1               ; ----------------------------------------------------------------------------
00D58A  1               SHIFT_RIGHT4:
00D58A  1  76 02                ror     2,x
00D58C  1  76 03                ror     3,x
00D58E  1  6A                   ror     a
00D58F  1  C8                   iny
00D590  1  D0 EE                bne     LB588
00D592  1               SHIFT_RIGHT5:
00D592  1  18                   clc
00D593  1  60                   rts
00D594  1               ; ----------------------------------------------------------------------------
00D594  1               CON_ONE:
00D594  1  81 00 00 00          .byte   $81,$00,$00,$00
00D598  1               POLY_LOG:
00D598  1  02           		.byte	$02
00D599  1  80 19 56 62  		.byte   $80,$19,$56,$62
00D59D  1  80 76 22 F3  		.byte   $80,$76,$22,$F3
00D5A1  1  82 38 AA 40  		.byte   $82,$38,$AA,$40
00D5A5  1               CON_SQR_HALF:
00D5A5  1  80 35 04 F3  		.byte   $80,$35,$04,$F3
00D5A9  1               CON_SQR_TWO:
00D5A9  1  81 35 04 F3  		.byte   $81,$35,$04,$F3
00D5AD  1               CON_NEG_HALF:
00D5AD  1  80 80 00 00  		.byte   $80,$80,$00,$00
00D5B1  1               CON_LOG_TWO:
00D5B1  1  80 31 72 18  		.byte   $80,$31,$72,$18
00D5B5  1               ; ----------------------------------------------------------------------------
00D5B5  1               ; "LOG" FUNCTION
00D5B5  1               ; ----------------------------------------------------------------------------
00D5B5  1               LOG:
00D5B5  1  20 C2 D7             jsr     SIGN
00D5B8  1  F0 02                beq     GIQ
00D5BA  1  10 03                bpl     LOG2
00D5BC  1               GIQ:
00D5BC  1  4C 80 CE             jmp     IQERR
00D5BF  1               LOG2:
00D5BF  1  A5 AC                lda     FAC
00D5C1  1  E9 7F                sbc     #$7F
00D5C3  1  48                   pha
00D5C4  1  A9 80                lda     #$80
00D5C6  1  85 AC                sta     FAC
00D5C8  1  A9 A5                lda     #<CON_SQR_HALF
00D5CA  1  A0 D5                ldy     #>CON_SQR_HALF
00D5CC  1  20 64 D4             jsr     FADD
00D5CF  1  A9 A9                lda     #<CON_SQR_TWO
00D5D1  1  A0 D5                ldy     #>CON_SQR_TWO
00D5D3  1  20 C2 D6             jsr     FDIV
00D5D6  1  A9 94                lda     #<CON_ONE
00D5D8  1  A0 D5                ldy     #>CON_ONE
00D5DA  1  20 4D D4             jsr     FSUB
00D5DD  1  A9 98                lda     #<POLY_LOG
00D5DF  1  A0 D5                ldy     #>POLY_LOG
00D5E1  1  20 66 DB             jsr     POLYNOMIAL_ODD
00D5E4  1  A9 AD                lda     #<CON_NEG_HALF
00D5E6  1  A0 D5                ldy     #>CON_NEG_HALF
00D5E8  1  20 64 D4             jsr     FADD
00D5EB  1  68                   pla
00D5EC  1  20 0A D9             jsr     ADDACC
00D5EF  1  A9 B1                lda     #<CON_LOG_TWO
00D5F1  1  A0 D5                ldy     #>CON_LOG_TWO
00D5F3  1               ; ----------------------------------------------------------------------------
00D5F3  1               ; FAC = (Y,A) * FAC
00D5F3  1               ; ----------------------------------------------------------------------------
00D5F3  1               FMULT:
00D5F3  1  20 45 D6             jsr     LOAD_ARG_FROM_YA
00D5F6  1               ; ----------------------------------------------------------------------------
00D5F6  1               ; FAC = ARG * FAC
00D5F6  1               ; ----------------------------------------------------------------------------
00D5F6  1               FMULTT:
00D5F6  1  F0 4C                beq     L3903
00D5F8  1  20 6B D6             jsr     ADD_EXPONENTS
00D5FB  1  A9 00                lda     #$00
00D5FD  1  85 75                sta     RESULT
00D5FF  1  85 76                sta     RESULT+1
00D601  1  85 77                sta     RESULT+2
00D603  1  A5 B9                lda     FACEXTENSION
00D605  1  20 1A D6             jsr     MULTIPLY1
00D608  1  A5 AF                lda     FAC+3
00D60A  1  20 1A D6             jsr     MULTIPLY1
00D60D  1  A5 AE                lda     FAC+2
00D60F  1  20 1A D6             jsr     MULTIPLY1
00D612  1  A5 AD                lda     FAC+1
00D614  1  20 1F D6             jsr     MULTIPLY2
00D617  1  4C 34 D7             jmp     COPY_RESULT_INTO_FAC
00D61A  1               ; ----------------------------------------------------------------------------
00D61A  1               ; MULTIPLY ARG BY (A) INTO RESULT
00D61A  1               ; ----------------------------------------------------------------------------
00D61A  1               MULTIPLY1:
00D61A  1  D0 03                bne     MULTIPLY2
00D61C  1  4C 61 D5             jmp     SHIFT_RIGHT1
00D61F  1               MULTIPLY2:
00D61F  1  4A                   lsr     a
00D620  1  09 80                ora     #$80
00D622  1               L38A7:
00D622  1  A8                   tay
00D623  1  90 13                bcc     L38C3
00D625  1  18                   clc
00D626  1  A5 77                lda     RESULT+2
00D628  1  65 B6                adc     ARG+3
00D62A  1  85 77                sta     RESULT+2
00D62C  1  A5 76                lda     RESULT+1
00D62E  1  65 B5                adc     ARG+2
00D630  1  85 76                sta     RESULT+1
00D632  1  A5 75                lda     RESULT
00D634  1  65 B4                adc     ARG+1
00D636  1  85 75                sta     RESULT
00D638  1               L38C3:
00D638  1  66 75                ror     RESULT
00D63A  1  66 76                ror     RESULT+1
00D63C  1               ; this seems to be a bad byte in the dump
00D63C  1  66 77                ror     RESULT+2
00D63E  1  66 B9                ror     FACEXTENSION
00D640  1  98                   tya
00D641  1  4A                   lsr     a
00D642  1  D0 DE                bne     L38A7
00D644  1               L3903:
00D644  1  60                   rts
00D645  1               ; ----------------------------------------------------------------------------
00D645  1               ; UNPACK NUMBER AT (Y,A) INTO ARG
00D645  1               ; ----------------------------------------------------------------------------
00D645  1               LOAD_ARG_FROM_YA:
00D645  1  85 71                sta     INDEX
00D647  1  84 72                sty     INDEX+1
00D649  1  A0 03                ldy     #BYTES_FP-1
00D64B  1  B1 71                lda     (INDEX),y
00D64D  1  85 B6                sta     ARG+3
00D64F  1  88                   dey
00D650  1  B1 71                lda     (INDEX),y
00D652  1  85 B5                sta     ARG+2
00D654  1  88                   dey
00D655  1  B1 71                lda     (INDEX),y
00D657  1  85 B7                sta     ARGSIGN
00D659  1  45 B0                eor     FACSIGN
00D65B  1  85 B8                sta     SGNCPR
00D65D  1  A5 B7                lda     ARGSIGN
00D65F  1  09 80                ora     #$80
00D661  1  85 B4                sta     ARG+1
00D663  1  88                   dey
00D664  1  B1 71                lda     (INDEX),y
00D666  1  85 B3                sta     ARG
00D668  1  A5 AC                lda     FAC
00D66A  1  60                   rts
00D66B  1               ; ----------------------------------------------------------------------------
00D66B  1               ; ADD EXPONENTS OF ARG AND FAC
00D66B  1               ; (CALLED BY FMULT AND FDIV)
00D66B  1               ;
00D66B  1               ; ALSO CHECK FOR OVERFLOW, AND SET RESULT SIGN
00D66B  1               ; ----------------------------------------------------------------------------
00D66B  1               ADD_EXPONENTS:
00D66B  1  A5 B3                lda     ARG
00D66D  1               ADD_EXPONENTS1:
00D66D  1  F0 1F                beq     ZERO
00D66F  1  18                   clc
00D670  1  65 AC                adc     FAC
00D672  1  90 04                bcc     L393C
00D674  1  30 1D                bmi     JOV
00D676  1  18                   clc
00D677  1  2C                   .byte   $2C
00D678  1               L393C:
00D678  1  10 14                bpl     ZERO
00D67A  1  69 80                adc     #$80
00D67C  1  85 AC                sta     FAC
00D67E  1  D0 03                bne     L3947
00D680  1  4C ED D4             jmp     STA_IN_FAC_SIGN
00D683  1               L3947:
00D683  1  A5 B8                lda     SGNCPR
00D685  1  85 B0                sta     FACSIGN
00D687  1  60                   rts
00D688  1               ; ----------------------------------------------------------------------------
00D688  1               ; IF (FAC) IS POSITIVE, GIVE "OVERFLOW" ERROR
00D688  1               ; IF (FAC) IS NEGATIVE, SET FAC=0, POP ONE RETURN, AND RTS
00D688  1               ; CALLED FROM "EXP" FUNCTION
00D688  1               ; ----------------------------------------------------------------------------
00D688  1               OUTOFRNG:
00D688  1  A5 B0                lda     FACSIGN
00D68A  1  49 FF                eor     #$FF
00D68C  1  30 05                bmi     JOV
00D68E  1               ; ----------------------------------------------------------------------------
00D68E  1               ; POP RETURN ADDRESS AND SET FAC=0
00D68E  1               ; ----------------------------------------------------------------------------
00D68E  1               ZERO:
00D68E  1  68                   pla
00D68F  1  68                   pla
00D690  1  4C E9 D4             jmp     ZERO_FAC
00D693  1               JOV:
00D693  1  4C 5C D5             jmp     OVERFLOW
00D696  1               ; ----------------------------------------------------------------------------
00D696  1               ; MULTIPLY FAC BY 10
00D696  1               ; ----------------------------------------------------------------------------
00D696  1               MUL10:
00D696  1  20 A3 D7             jsr     COPY_FAC_TO_ARG_ROUNDED
00D699  1  AA                   tax
00D69A  1  F0 10                beq     L3970
00D69C  1  18                   clc
00D69D  1  69 02                adc     #$02
00D69F  1  B0 F2                bcs     JOV
00D6A1  1  A2 00                ldx     #$00
00D6A3  1  86 B8                stx     SGNCPR
00D6A5  1  20 74 D4             jsr     FADD2
00D6A8  1  E6 AC                inc     FAC
00D6AA  1  F0 E7                beq     JOV
00D6AC  1               L3970:
00D6AC  1  60                   rts
00D6AD  1               ; ----------------------------------------------------------------------------
00D6AD  1               CONTEN:
00D6AD  1  84 20 00 00          .byte   $84,$20,$00,$00
00D6B1  1               ; ----------------------------------------------------------------------------
00D6B1  1               ; DIVIDE FAC BY 10
00D6B1  1               ; ----------------------------------------------------------------------------
00D6B1  1               DIV10:
00D6B1  1  20 A3 D7             jsr     COPY_FAC_TO_ARG_ROUNDED
00D6B4  1  A9 AD                lda     #<CONTEN
00D6B6  1  A0 D6                ldy     #>CONTEN
00D6B8  1  A2 00                ldx     #$00
00D6BA  1               ; ----------------------------------------------------------------------------
00D6BA  1               ; FAC = ARG / (Y,A)
00D6BA  1               ; ----------------------------------------------------------------------------
00D6BA  1               DIV:
00D6BA  1  86 B8                stx     SGNCPR
00D6BC  1  20 43 D7             jsr     LOAD_FAC_FROM_YA
00D6BF  1  4C C5 D6             jmp     FDIVT
00D6C2  1               ; ----------------------------------------------------------------------------
00D6C2  1               ; FAC = (Y,A) / FAC
00D6C2  1               ; ----------------------------------------------------------------------------
00D6C2  1               FDIV:
00D6C2  1  20 45 D6             jsr     LOAD_ARG_FROM_YA
00D6C5  1               ; ----------------------------------------------------------------------------
00D6C5  1               ; FAC = ARG / FAC
00D6C5  1               ; ----------------------------------------------------------------------------
00D6C5  1               FDIVT:
00D6C5  1  F0 68                beq     L3A02
00D6C7  1  20 B2 D7             jsr     ROUND_FAC
00D6CA  1  A9 00                lda     #$00
00D6CC  1  38                   sec
00D6CD  1  E5 AC                sbc     FAC
00D6CF  1  85 AC                sta     FAC
00D6D1  1  20 6B D6             jsr     ADD_EXPONENTS
00D6D4  1  E6 AC                inc     FAC
00D6D6  1  F0 BB                beq     JOV
00D6D8  1  A2 FD                ldx     #-MANTISSA_BYTES+256
00D6DA  1  A9 01                lda     #$01
00D6DC  1               L39A1:
00D6DC  1  A4 B4                ldy     ARG+1
00D6DE  1  C4 AD                cpy     FAC+1
00D6E0  1  D0 0A                bne     L39B7
00D6E2  1  A4 B5                ldy     ARG+2
00D6E4  1  C4 AE                cpy     FAC+2
00D6E6  1  D0 04                bne     L39B7
00D6E8  1  A4 B6                ldy     ARG+3
00D6EA  1  C4 AF                cpy     FAC+3
00D6EC  1               L39B7:
00D6EC  1  08                   php
00D6ED  1  2A                   rol     a
00D6EE  1  90 09                bcc     L39C4
00D6F0  1  E8                   inx
00D6F1  1  95 77                sta     RESULT_LAST-1,x
00D6F3  1  F0 2A                beq     L39F2
00D6F5  1  10 2C                bpl     L39F6
00D6F7  1  A9 01                lda     #$01
00D6F9  1               L39C4:
00D6F9  1  28                   plp
00D6FA  1  B0 0C                bcs     L39D5
00D6FC  1               L39C7:
00D6FC  1  06 B6                asl     ARG_LAST
00D6FE  1  26 B5                rol     ARG+2
00D700  1  26 B4                rol     ARG+1
00D702  1  B0 E8                bcs     L39B7
00D704  1  30 D6                bmi     L39A1
00D706  1  10 E4                bpl     L39B7
00D708  1               L39D5:
00D708  1  A8                   tay
00D709  1  A5 B6                lda     ARG+3
00D70B  1  E5 AF                sbc     FAC+3
00D70D  1  85 B6                sta     ARG+3
00D70F  1  A5 B5                lda     ARG+2
00D711  1  E5 AE                sbc     FAC+2
00D713  1  85 B5                sta     ARG+2
00D715  1  A5 B4                lda     ARG+1
00D717  1  E5 AD                sbc     FAC+1
00D719  1  85 B4                sta     ARG+1
00D71B  1  98                   tya
00D71C  1  4C FC D6             jmp     L39C7
00D71F  1               L39F2:
00D71F  1  A9 40                lda     #$40
00D721  1  D0 D6                bne     L39C4
00D723  1               L39F6:
00D723  1  0A                   asl     a
00D724  1  0A                   asl     a
00D725  1  0A                   asl     a
00D726  1  0A                   asl     a
00D727  1  0A                   asl     a
00D728  1  0A                   asl     a
00D729  1  85 B9                sta     FACEXTENSION
00D72B  1  28                   plp
00D72C  1  4C 34 D7             jmp     COPY_RESULT_INTO_FAC
00D72F  1               L3A02:
00D72F  1  A2 14                ldx     #ERR_ZERODIV
00D731  1  4C 4E C2             jmp     ERROR
00D734  1               ; ----------------------------------------------------------------------------
00D734  1               ; COPY RESULT INTO FAC MANTISSA, AND NORMALIZE
00D734  1               ; ----------------------------------------------------------------------------
00D734  1               COPY_RESULT_INTO_FAC:
00D734  1  A5 75                lda     RESULT
00D736  1  85 AD                sta     FAC+1
00D738  1  A5 76                lda     RESULT+1
00D73A  1  85 AE                sta     FAC+2
00D73C  1  A5 77                lda     RESULT+2
00D73E  1  85 AF                sta     FAC+3
00D740  1  4C CD D4             jmp     NORMALIZE_FAC2
00D743  1               ; ----------------------------------------------------------------------------
00D743  1               ; UNPACK (Y,A) INTO FAC
00D743  1               ; ----------------------------------------------------------------------------
00D743  1               LOAD_FAC_FROM_YA:
00D743  1  85 71                sta     INDEX
00D745  1  84 72                sty     INDEX+1
00D747  1  A0 03                ldy     #MANTISSA_BYTES
00D749  1  B1 71                lda     (INDEX),y
00D74B  1  85 AF                sta     FAC+3
00D74D  1  88                   dey
00D74E  1  B1 71                lda     (INDEX),y
00D750  1  85 AE                sta     FAC+2
00D752  1  88                   dey
00D753  1  B1 71                lda     (INDEX),y
00D755  1  85 B0                sta     FACSIGN
00D757  1  09 80                ora     #$80
00D759  1  85 AD                sta     FAC+1
00D75B  1  88                   dey
00D75C  1  B1 71                lda     (INDEX),y
00D75E  1  85 AC                sta     FAC
00D760  1  84 B9                sty     FACEXTENSION
00D762  1  60                   rts
00D763  1               ; ----------------------------------------------------------------------------
00D763  1               ; ROUND FAC, STORE IN TEMP2
00D763  1               ; ----------------------------------------------------------------------------
00D763  1               STORE_FAC_IN_TEMP2_ROUNDED:
00D763  1  A2 A8                ldx     #TEMP2
00D765  1  2C                   .byte   $2C
00D766  1               ; ----------------------------------------------------------------------------
00D766  1               ; ROUND FAC, STORE IN TEMP1
00D766  1               ; ----------------------------------------------------------------------------
00D766  1               STORE_FAC_IN_TEMP1_ROUNDED:
00D766  1  A2 A4                ldx     #TEMP1X
00D768  1  A0 00                ldy     #$00
00D76A  1  F0 04                beq     STORE_FAC_AT_YX_ROUNDED
00D76C  1               ; ----------------------------------------------------------------------------
00D76C  1               ; ROUND FAC, AND STORE WHERE FORPNT POINTS
00D76C  1               ; ----------------------------------------------------------------------------
00D76C  1               SETFOR:
00D76C  1  A6 97                ldx     FORPNT
00D76E  1  A4 98                ldy     FORPNT+1
00D770  1               ; ----------------------------------------------------------------------------
00D770  1               ; ROUND FAC, AND STORE AT (Y,X)
00D770  1               ; ----------------------------------------------------------------------------
00D770  1               STORE_FAC_AT_YX_ROUNDED:
00D770  1  20 B2 D7             jsr     ROUND_FAC
00D773  1  86 71                stx     INDEX
00D775  1  84 72                sty     INDEX+1
00D777  1  A0 03                ldy     #MANTISSA_BYTES
00D779  1  A5 AF                lda     FAC+3
00D77B  1  91 71                sta     (INDEX),y
00D77D  1  88                   dey
00D77E  1  A5 AE                lda     FAC+2
00D780  1  91 71                sta     (INDEX),y
00D782  1  88                   dey
00D783  1  A5 B0                lda     FACSIGN
00D785  1  09 7F                ora     #$7F
00D787  1  25 AD                and     FAC+1
00D789  1  91 71                sta     (INDEX),y
00D78B  1  88                   dey
00D78C  1  A5 AC                lda     FAC
00D78E  1  91 71                sta     (INDEX),y
00D790  1  84 B9                sty     FACEXTENSION
00D792  1  60                   rts
00D793  1               ; ----------------------------------------------------------------------------
00D793  1               ; COPY ARG INTO FAC
00D793  1               ; ----------------------------------------------------------------------------
00D793  1               COPY_ARG_TO_FAC:
00D793  1  A5 B7                lda     ARGSIGN
00D795  1               MFA:
00D795  1  85 B0                sta     FACSIGN
00D797  1  A2 04                ldx     #BYTES_FP
00D799  1               L3A7A:
00D799  1  B5 B2                lda     SHIFTSIGNEXT,x
00D79B  1  95 AB                sta     EXPSGN,x
00D79D  1  CA                   dex
00D79E  1  D0 F9                bne     L3A7A
00D7A0  1  86 B9                stx     FACEXTENSION
00D7A2  1  60                   rts
00D7A3  1               ; ----------------------------------------------------------------------------
00D7A3  1               ; ROUND FAC AND COPY TO ARG
00D7A3  1               ; ----------------------------------------------------------------------------
00D7A3  1               COPY_FAC_TO_ARG_ROUNDED:
00D7A3  1  20 B2 D7             jsr     ROUND_FAC
00D7A6  1               MAF:
00D7A6  1  A2 05                ldx     #BYTES_FP+1
00D7A8  1               L3A89:
00D7A8  1  B5 AB                lda     EXPSGN,x
00D7AA  1  95 B2                sta     SHIFTSIGNEXT,x
00D7AC  1  CA                   dex
00D7AD  1  D0 F9                bne     L3A89
00D7AF  1  86 B9                stx     FACEXTENSION
00D7B1  1               RTS14:
00D7B1  1  60                   rts
00D7B2  1               ; ----------------------------------------------------------------------------
00D7B2  1               ; ROUND FAC USING EXTENSION BYTE
00D7B2  1               ; ----------------------------------------------------------------------------
00D7B2  1               ROUND_FAC:
00D7B2  1  A5 AC                lda     FAC
00D7B4  1  F0 FB                beq     RTS14
00D7B6  1  06 B9                asl     FACEXTENSION
00D7B8  1  90 F7                bcc     RTS14
00D7BA  1               ; ----------------------------------------------------------------------------
00D7BA  1               ; INCREMENT MANTISSA AND RE-NORMALIZE IF CARRY
00D7BA  1               ; ----------------------------------------------------------------------------
00D7BA  1               INCREMENT_MANTISSA:
00D7BA  1  20 51 D5             jsr     INCREMENT_FAC_MANTISSA
00D7BD  1  D0 F2                bne     RTS14
00D7BF  1  4C 22 D5             jmp     NORMALIZE_FAC6
00D7C2  1               ; ----------------------------------------------------------------------------
00D7C2  1               ; TEST FAC FOR ZERO AND SIGN
00D7C2  1               ;
00D7C2  1               ; FAC > 0, RETURN +1
00D7C2  1               ; FAC = 0, RETURN  0
00D7C2  1               ; FAC < 0, RETURN -1
00D7C2  1               ; ----------------------------------------------------------------------------
00D7C2  1               SIGN:
00D7C2  1  A5 AC                lda     FAC
00D7C4  1  F0 09                beq     RTS15
00D7C6  1               L3AA7:
00D7C6  1  A5 B0                lda     FACSIGN
00D7C8  1               SIGN2:
00D7C8  1  2A                   rol     a
00D7C9  1  A9 FF                lda     #$FF
00D7CB  1  B0 02                bcs     RTS15
00D7CD  1  A9 01                lda     #$01
00D7CF  1               RTS15:
00D7CF  1  60                   rts
00D7D0  1               ; ----------------------------------------------------------------------------
00D7D0  1               ; "SGN" FUNCTION
00D7D0  1               ; ----------------------------------------------------------------------------
00D7D0  1               SGN:
00D7D0  1  20 C2 D7             jsr     SIGN
00D7D3  1               ; ----------------------------------------------------------------------------
00D7D3  1               ; CONVERT (A) INTO FAC, AS SIGNED VALUE -128 TO +127
00D7D3  1               ; ----------------------------------------------------------------------------
00D7D3  1               FLOAT:
00D7D3  1  85 AD                sta     FAC+1
00D7D5  1  A9 00                lda     #$00
00D7D7  1  85 AE                sta     FAC+2
00D7D9  1  A2 88                ldx     #$88
00D7DB  1               ; ----------------------------------------------------------------------------
00D7DB  1               ; FLOAT UNSIGNED VALUE IN FAC+1,2
00D7DB  1               ; (X) = EXPONENT
00D7DB  1               ; ----------------------------------------------------------------------------
00D7DB  1               FLOAT1:
00D7DB  1  A5 AD                lda     FAC+1
00D7DD  1  49 FF                eor     #$FF
00D7DF  1  2A                   rol     a
00D7E0  1               ; ----------------------------------------------------------------------------
00D7E0  1               ; FLOAT UNSIGNED VALUE IN FAC+1,2
00D7E0  1               ; (X) = EXPONENT
00D7E0  1               ; C=0 TO MAKE VALUE NEGATIVE
00D7E0  1               ; C=1 TO MAKE VALUE POSITIVE
00D7E0  1               ; ----------------------------------------------------------------------------
00D7E0  1               FLOAT2:
00D7E0  1  A9 00                lda     #$00
00D7E2  1  85 AF                sta     FAC+3
00D7E4  1  86 AC                stx     FAC
00D7E6  1  85 B9                sta     FACEXTENSION
00D7E8  1  85 B0                sta     FACSIGN
00D7EA  1  4C C8 D4             jmp     NORMALIZE_FAC1
00D7ED  1               ; ----------------------------------------------------------------------------
00D7ED  1               ; "ABS" FUNCTION
00D7ED  1               ; ----------------------------------------------------------------------------
00D7ED  1               ABS:
00D7ED  1  46 B0                lsr     FACSIGN
00D7EF  1  60                   rts
00D7F0  1               ; ----------------------------------------------------------------------------
00D7F0  1               ; COMPARE FAC WITH PACKED # AT (Y,A)
00D7F0  1               ; RETURN A=1,0,-1 AS (Y,A) IS <,=,> FAC
00D7F0  1               ; ----------------------------------------------------------------------------
00D7F0  1               FCOMP:
00D7F0  1  85 73                sta     DEST
00D7F2  1               ; ----------------------------------------------------------------------------
00D7F2  1               ; SPECIAL ENTRY FROM "NEXT" PROCESSOR
00D7F2  1               ; "DEST" ALREADY SET UP
00D7F2  1               ; ----------------------------------------------------------------------------
00D7F2  1               FCOMP2:
00D7F2  1  84 74                sty     DEST+1
00D7F4  1  A0 00                ldy     #$00
00D7F6  1  B1 73                lda     (DEST),y
00D7F8  1  C8                   iny
00D7F9  1  AA                   tax
00D7FA  1  F0 C6                beq     SIGN
00D7FC  1  B1 73                lda     (DEST),y
00D7FE  1  45 B0                eor     FACSIGN
00D800  1  30 C4                bmi     L3AA7
00D802  1  E4 AC                cpx     FAC
00D804  1  D0 1A                bne     L3B0A
00D806  1  B1 73                lda     (DEST),y
00D808  1  09 80                ora     #$80
00D80A  1  C5 AD                cmp     FAC+1
00D80C  1  D0 12                bne     L3B0A
00D80E  1  C8                   iny
00D80F  1  B1 73                lda     (DEST),y
00D811  1  C5 AE                cmp     FAC+2
00D813  1  D0 0B                bne     L3B0A
00D815  1  C8                   iny
00D816  1  A9 7F                lda     #$7F
00D818  1  C5 B9                cmp     FACEXTENSION
00D81A  1  B1 73                lda     (DEST),y
00D81C  1  E5 AF                sbc     FAC_LAST
00D81E  1  F0 28                beq     L3B32
00D820  1               L3B0A:
00D820  1  A5 B0                lda     FACSIGN
00D822  1  90 02                bcc     L3B10
00D824  1  49 FF                eor     #$FF
00D826  1               L3B10:
00D826  1  4C C8 D7             jmp     SIGN2
00D829  1               ; ----------------------------------------------------------------------------
00D829  1               ; QUICK INTEGER FUNCTION
00D829  1               ;
00D829  1               ; CONVERTS FP VALUE IN FAC TO INTEGER VALUE
00D829  1               ; IN FAC+1...FAC+4, BY SHIFTING RIGHT WITH SIGN
00D829  1               ; EXTENSION UNTIL FRACTIONAL BITS ARE OUT.
00D829  1               ;
00D829  1               ; THIS SUBROUTINE ASSUMES THE EXPONENT < 32.
00D829  1               ; ----------------------------------------------------------------------------
00D829  1               QINT:
00D829  1  A5 AC                lda     FAC
00D82B  1  F0 4A                beq     QINT3
00D82D  1  38                   sec
00D82E  1  E9 98                sbc     #120+8*BYTES_FP
00D830  1  24 B0                bit     FACSIGN
00D832  1  10 09                bpl     L3B27
00D834  1  AA                   tax
00D835  1  A9 FF                lda     #$FF
00D837  1  85 B2                sta     SHIFTSIGNEXT
00D839  1  20 35 D5             jsr     COMPLEMENT_FAC_MANTISSA
00D83C  1  8A                   txa
00D83D  1               L3B27:
00D83D  1  A2 AC                ldx     #FAC
00D83F  1  C9 F9                cmp     #$F9
00D841  1  10 06                bpl     QINT2
00D843  1  20 73 D5             jsr     SHIFT_RIGHT
00D846  1  84 B2                sty     SHIFTSIGNEXT
00D848  1               L3B32:
00D848  1  60                   rts
00D849  1               QINT2:
00D849  1  A8                   tay
00D84A  1  A5 B0                lda     FACSIGN
00D84C  1  29 80                and     #$80
00D84E  1  46 AD                lsr     FAC+1
00D850  1  05 AD                ora     FAC+1
00D852  1  85 AD                sta     FAC+1
00D854  1  20 8A D5             jsr     SHIFT_RIGHT4
00D857  1  84 B2                sty     SHIFTSIGNEXT
00D859  1  60                   rts
00D85A  1               ; ----------------------------------------------------------------------------
00D85A  1               ; "INT" FUNCTION
00D85A  1               ;
00D85A  1               ; USES QINT TO CONVERT (FAC) TO INTEGER FORM,
00D85A  1               ; AND THEN REFLOATS THE INTEGER.
00D85A  1               ; ----------------------------------------------------------------------------
00D85A  1               INT:
00D85A  1  A5 AC                lda     FAC
00D85C  1  C9 98                cmp     #120+8*BYTES_FP
00D85E  1  B0 1E                bcs     RTS17
00D860  1  20 29 D8             jsr     QINT
00D863  1  84 B9                sty     FACEXTENSION
00D865  1  A5 B0                lda     FACSIGN
00D867  1  84 B0                sty     FACSIGN
00D869  1  49 80                eor     #$80
00D86B  1  2A                   rol     a
00D86C  1  A9 98                lda     #120+8*BYTES_FP
00D86E  1  85 AC                sta     FAC
00D870  1  A5 AF                lda     FAC_LAST
00D872  1  85 5B                sta     CHARAC
00D874  1  4C C8 D4             jmp     NORMALIZE_FAC1
00D877  1               QINT3:
00D877  1  85 AD                sta     FAC+1
00D879  1  85 AE                sta     FAC+2
00D87B  1  85 AF                sta     FAC+3
00D87D  1  A8                   tay
00D87E  1               RTS17:
00D87E  1  60                   rts
00D87F  1               ; ----------------------------------------------------------------------------
00D87F  1               ; CONVERT STRING TO FP VALUE IN FAC
00D87F  1               ;
00D87F  1               ; STRING POINTED TO BY TXTPTR
00D87F  1               ; FIRST CHAR ALREADY SCANNED BY CHRGET
00D87F  1               ; (A) = FIRST CHAR, C=0 IF DIGIT.
00D87F  1               ; ----------------------------------------------------------------------------
00D87F  1               FIN:
00D87F  1  A0 00                ldy     #$00
00D881  1  A2 09                ldx     #SERLEN-TMPEXP
00D883  1               L3B6F:
00D883  1  94 A8                sty     TMPEXP,x
00D885  1  CA                   dex
00D886  1  10 FB                bpl     L3B6F
00D888  1  90 0F                bcc     FIN2
00D88A  1  C9 2D                cmp     #$2D
00D88C  1  D0 04                bne     L3B7E
00D88E  1  86 B1                stx     SERLEN
00D890  1  F0 04                beq     FIN1
00D892  1               L3B7E:
00D892  1  C9 2B                cmp     #$2B
00D894  1  D0 05                bne     FIN3
00D896  1               FIN1:
00D896  1  20 BC 00             jsr     CHRGET
00D899  1               FIN2:
00D899  1  90 5B                bcc     FIN9
00D89B  1               FIN3:
00D89B  1  C9 2E                cmp     #$2E
00D89D  1  F0 2E                beq     FIN10
00D89F  1  C9 45                cmp     #$45
00D8A1  1  D0 30                bne     FIN7
00D8A3  1  20 BC 00             jsr     CHRGET
00D8A6  1  90 17                bcc     FIN5
00D8A8  1  C9 A4                cmp     #TOKEN_MINUS
00D8AA  1  F0 0E                beq     L3BA6
00D8AC  1  C9 2D                cmp     #$2D
00D8AE  1  F0 0A                beq     L3BA6
00D8B0  1  C9 A3                cmp     #TOKEN_PLUS
00D8B2  1  F0 08                beq     FIN4
00D8B4  1  C9 2B                cmp     #$2B
00D8B6  1  F0 04                beq     FIN4
00D8B8  1  D0 07                bne     FIN6
00D8BA  1               L3BA6:
00D8BA  1  66 AB                ror     EXPSGN
00D8BC  1               FIN4:
00D8BC  1  20 BC 00             jsr     CHRGET
00D8BF  1               FIN5:
00D8BF  1  90 5C                bcc     GETEXP
00D8C1  1               FIN6:
00D8C1  1  24 AB                bit     EXPSGN
00D8C3  1  10 0E                bpl     FIN7
00D8C5  1  A9 00                lda     #$00
00D8C7  1  38                   sec
00D8C8  1  E5 A9                sbc     EXPON
00D8CA  1  4C D5 D8             jmp     FIN8
00D8CD  1               ; ----------------------------------------------------------------------------
00D8CD  1               ; FOUND A DECIMAL POINT
00D8CD  1               ; ----------------------------------------------------------------------------
00D8CD  1               FIN10:
00D8CD  1  66 AA                ror     LOWTR
00D8CF  1  24 AA                bit     LOWTR
00D8D1  1  50 C3                bvc     FIN1
00D8D3  1               ; ----------------------------------------------------------------------------
00D8D3  1               ; NUMBER TERMINATED, ADJUST EXPONENT NOW
00D8D3  1               ; ----------------------------------------------------------------------------
00D8D3  1               FIN7:
00D8D3  1  A5 A9                lda     EXPON
00D8D5  1               FIN8:
00D8D5  1  38                   sec
00D8D6  1  E5 A8                sbc     INDX
00D8D8  1  85 A9                sta     EXPON
00D8DA  1  F0 12                beq     L3BEE
00D8DC  1  10 09                bpl     L3BE7
00D8DE  1               L3BDE:
00D8DE  1  20 B1 D6             jsr     DIV10
00D8E1  1  E6 A9                inc     EXPON
00D8E3  1  D0 F9                bne     L3BDE
00D8E5  1  F0 07                beq     L3BEE
00D8E7  1               L3BE7:
00D8E7  1  20 96 D6             jsr     MUL10
00D8EA  1  C6 A9                dec     EXPON
00D8EC  1  D0 F9                bne     L3BE7
00D8EE  1               L3BEE:
00D8EE  1  A5 B1                lda     SERLEN
00D8F0  1  30 01                bmi     L3BF3
00D8F2  1  60                   rts
00D8F3  1               L3BF3:
00D8F3  1  4C E7 DA             jmp     NEGOP
00D8F6  1               ; ----------------------------------------------------------------------------
00D8F6  1               ; ACCUMULATE A DIGIT INTO FAC
00D8F6  1               ; ----------------------------------------------------------------------------
00D8F6  1               FIN9:
00D8F6  1  48                   pha
00D8F7  1  24 AA                bit     LOWTR
00D8F9  1  10 02                bpl     L3BFD
00D8FB  1  E6 A8                inc     INDX
00D8FD  1               L3BFD:
00D8FD  1  20 96 D6             jsr     MUL10
00D900  1  68                   pla
00D901  1  38                   sec
00D902  1  E9 30                sbc     #$30
00D904  1  20 0A D9             jsr     ADDACC
00D907  1  4C 96 D8             jmp     FIN1
00D90A  1               ; ----------------------------------------------------------------------------
00D90A  1               ; ADD (A) TO FAC
00D90A  1               ; ----------------------------------------------------------------------------
00D90A  1               ADDACC:
00D90A  1  48                   pha
00D90B  1  20 A3 D7             jsr     COPY_FAC_TO_ARG_ROUNDED
00D90E  1  68                   pla
00D90F  1  20 D3 D7             jsr     FLOAT
00D912  1  A5 B7                lda     ARGSIGN
00D914  1  45 B0                eor     FACSIGN
00D916  1  85 B8                sta     SGNCPR
00D918  1  A6 AC                ldx     FAC
00D91A  1  4C 67 D4             jmp     FADDT
00D91D  1               ; ----------------------------------------------------------------------------
00D91D  1               ; ACCUMULATE DIGIT OF EXPONENT
00D91D  1               ; ----------------------------------------------------------------------------
00D91D  1               GETEXP:
00D91D  1  A5 A9                lda     EXPON
00D91F  1  C9 0A                cmp     #MAX_EXPON
00D921  1  90 09                bcc     L3C2C
00D923  1  A9 64                lda     #$64
00D925  1  24 AB                bit     EXPSGN
00D927  1  30 11                bmi     L3C3A
00D929  1  4C 5C D5             jmp     OVERFLOW
00D92C  1               L3C2C:
00D92C  1  0A                   asl     a
00D92D  1  0A                   asl     a
00D92E  1  18                   clc
00D92F  1  65 A9                adc     EXPON
00D931  1  0A                   asl     a
00D932  1  18                   clc
00D933  1  A0 00                ldy     #$00
00D935  1  71 C3                adc     (TXTPTR),y
00D937  1  38                   sec
00D938  1  E9 30                sbc     #$30
00D93A  1               L3C3A:
00D93A  1  85 A9                sta     EXPON
00D93C  1  4C BC D8             jmp     FIN4
00D93F  1               ; ----------------------------------------------------------------------------
00D93F  1               ; these values are /1000 of what the labels say
00D93F  1               CON_99999999_9:
00D93F  1  91 43 4F F8          .byte   $91,$43,$4F,$F8
00D943  1               CON_999999999:
00D943  1  94 74 23 F7  		.byte   $94,$74,$23,$F7
00D947  1               CON_BILLION:
00D947  1  94 74 24 00          .byte   $94,$74,$24,$00
00D94B  1               ; ----------------------------------------------------------------------------
00D94B  1               ; PRINT "IN <LINE #>"
00D94B  1               ; ----------------------------------------------------------------------------
00D94B  1               INPRT:
00D94B  1  A9 8D                lda     #<QT_IN
00D94D  1  A0 C1                ldy     #>QT_IN
00D94F  1  20 63 D9             jsr     GOSTROUT2
00D952  1  A5 88                lda     CURLIN+1
00D954  1  A6 87                ldx     CURLIN
00D956  1               ; ----------------------------------------------------------------------------
00D956  1               ; PRINT A,X AS DECIMAL INTEGER
00D956  1               ; ----------------------------------------------------------------------------
00D956  1               LINPRT:
00D956  1  85 AD                sta     FAC+1
00D958  1  86 AE                stx     FAC+2
00D95A  1  A2 90                ldx     #$90
00D95C  1  38                   sec
00D95D  1  20 E0 D7             jsr     FLOAT2
00D960  1  20 66 D9             jsr     FOUT
00D963  1               GOSTROUT2:
00D963  1  4C BB C8             jmp     STROUT
00D966  1               ; ----------------------------------------------------------------------------
00D966  1               ; CONVERT (FAC) TO STRING STARTING AT STACK
00D966  1               ; RETURN WITH (Y,A) POINTING AT STRING
00D966  1               ; ----------------------------------------------------------------------------
00D966  1               FOUT:
00D966  1  A0 01                ldy     #$01
00D968  1               ; ----------------------------------------------------------------------------
00D968  1               ; "STR$" FUNCTION ENTERS HERE, WITH (Y)=0
00D968  1               ; SO THAT RESULT STRING STARTS AT STACK-1
00D968  1               ; (THIS IS USED AS A FLAG)
00D968  1               ; ----------------------------------------------------------------------------
00D968  1               FOUT1:
00D968  1  A9 20                lda     #$20
00D96A  1  24 B0                bit     FACSIGN
00D96C  1  10 02                bpl     L3C73
00D96E  1  A9 2D                lda     #$2D
00D970  1               L3C73:
00D970  1  99 FF 00             sta     $FF,y
00D973  1  85 B0                sta     FACSIGN
00D975  1  84 BA                sty     STRNG2
00D977  1  C8                   iny
00D978  1  A9 30                lda     #$30
00D97A  1  A6 AC                ldx     FAC
00D97C  1  D0 03                bne     L3C84
00D97E  1  4C 81 DA             jmp     FOUT4
00D981  1               L3C84:
00D981  1  A9 00                lda     #$00
00D983  1  E0 80                cpx     #$80
00D985  1  F0 02                beq     L3C8C
00D987  1  B0 09                bcs     L3C95
00D989  1               L3C8C:
00D989  1  A9 47                lda     #<CON_BILLION
00D98B  1  A0 D9                ldy     #>CON_BILLION
00D98D  1  20 F3 D5             jsr     FMULT
00D990  1  A9 FA                lda     #-6+256 ; exponent adjustment
00D992  1               L3C95:
00D992  1  85 A8                sta     INDX
00D994  1               ; ----------------------------------------------------------------------------
00D994  1               ; ADJUST UNTIL 1E8 <= (FAC) <1E9
00D994  1               ; ----------------------------------------------------------------------------
00D994  1               L3C97:
00D994  1  A9 43                lda     #<CON_999999999
00D996  1  A0 D9                ldy     #>CON_999999999
00D998  1  20 F0 D7             jsr     FCOMP
00D99B  1  F0 1E                beq     L3CBE
00D99D  1  10 12                bpl     L3CB4
00D99F  1               L3CA2:
00D99F  1  A9 3F                lda     #<CON_99999999_9
00D9A1  1  A0 D9                ldy     #>CON_99999999_9
00D9A3  1  20 F0 D7             jsr     FCOMP
00D9A6  1  F0 02                beq     L3CAD
00D9A8  1  10 0E                bpl     L3CBB
00D9AA  1               L3CAD:
00D9AA  1  20 96 D6             jsr     MUL10
00D9AD  1  C6 A8                dec     INDX
00D9AF  1  D0 EE                bne     L3CA2
00D9B1  1               L3CB4:
00D9B1  1  20 B1 D6             jsr     DIV10
00D9B4  1  E6 A8                inc     INDX
00D9B6  1  D0 DC                bne     L3C97
00D9B8  1               L3CBB:
00D9B8  1  20 46 D4             jsr     FADDH
00D9BB  1               L3CBE:
00D9BB  1  20 29 D8             jsr     QINT
00D9BE  1               ; ----------------------------------------------------------------------------
00D9BE  1               ; FAC+1...FAC+4 IS NOW IN INTEGER FORM
00D9BE  1               ; WITH POWER OF TEN ADJUSTMENT IN TMPEXP
00D9BE  1               ;
00D9BE  1               ; IF -10 < TMPEXP > 1, PRINT IN DECIMAL FORM
00D9BE  1               ; OTHERWISE, PRINT IN EXPONENTIAL FORM
00D9BE  1               ; ----------------------------------------------------------------------------
00D9BE  1  A2 01                ldx     #$01
00D9C0  1  A5 A8                lda     INDX
00D9C2  1  18                   clc
00D9C3  1  69 07                adc     #3*BYTES_FP-5
00D9C5  1  30 09                bmi     L3CD3
00D9C7  1  C9 08                cmp     #3*BYTES_FP-4
00D9C9  1  B0 06                bcs     L3CD4
00D9CB  1  69 FF                adc     #$FF
00D9CD  1  AA                   tax
00D9CE  1  A9 02                lda     #$02
00D9D0  1               L3CD3:
00D9D0  1  38                   sec
00D9D1  1               L3CD4:
00D9D1  1  E9 02                sbc     #$02
00D9D3  1  85 A9                sta     EXPON
00D9D5  1  86 A8                stx     INDX
00D9D7  1  8A                   txa
00D9D8  1  F0 02                beq     L3CDF
00D9DA  1  10 13                bpl     L3CF2
00D9DC  1               L3CDF:
00D9DC  1  A4 BA                ldy     STRNG2
00D9DE  1  A9 2E                lda     #$2E
00D9E0  1  C8                   iny
00D9E1  1  99 FF 00             sta     $FF,y
00D9E4  1  8A                   txa
00D9E5  1  F0 06                beq     L3CF0
00D9E7  1  A9 30                lda     #$30
00D9E9  1  C8                   iny
00D9EA  1  99 FF 00             sta     $FF,y
00D9ED  1               L3CF0:
00D9ED  1  84 BA                sty     STRNG2
00D9EF  1               ; ----------------------------------------------------------------------------
00D9EF  1               ; NOW DIVIDE BY POWERS OF TEN TO GET SUCCESSIVE DIGITS
00D9EF  1               ; ----------------------------------------------------------------------------
00D9EF  1               L3CF2:
00D9EF  1  A0 00                ldy     #$00
00D9F1  1  A2 80                ldx     #$80
00D9F3  1               L3CF6:
00D9F3  1  A5 AF                lda     FAC_LAST
00D9F5  1  18                   clc
00D9F6  1  79 94 DA             adc     DECTBL+2,y
00D9F9  1  85 AF                sta     FAC+3
00D9FB  1  A5 AE                lda     FAC+2
00D9FD  1  79 93 DA             adc     DECTBL+1,y
00DA00  1  85 AE                sta     FAC+2
00DA02  1  A5 AD                lda     FAC+1
00DA04  1  79 92 DA             adc     DECTBL,y
00DA07  1  85 AD                sta     FAC+1
00DA09  1  E8                   inx
00DA0A  1  B0 04                bcs     L3D1A
00DA0C  1  10 E5                bpl     L3CF6
00DA0E  1  30 02                bmi     L3D1C
00DA10  1               L3D1A:
00DA10  1  30 E1                bmi     L3CF6
00DA12  1               L3D1C:
00DA12  1  8A                   txa
00DA13  1  90 04                bcc     L3D23
00DA15  1  49 FF                eor     #$FF
00DA17  1  69 0A                adc     #$0A
00DA19  1               L3D23:
00DA19  1  69 2F                adc     #$2F
00DA1B  1  C8                   iny
00DA1C  1  C8                   iny
00DA1D  1  C8                   iny
00DA1E  1  84 95                sty     VARPNT
00DA20  1  A4 BA                ldy     STRNG2
00DA22  1  C8                   iny
00DA23  1  AA                   tax
00DA24  1  29 7F                and     #$7F
00DA26  1  99 FF 00             sta     $FF,y
00DA29  1  C6 A8                dec     INDX
00DA2B  1  D0 06                bne     L3D3E
00DA2D  1  A9 2E                lda     #$2E
00DA2F  1  C8                   iny
00DA30  1  99 FF 00             sta     $FF,y
00DA33  1               L3D3E:
00DA33  1  84 BA                sty     STRNG2
00DA35  1  A4 95                ldy     VARPNT
00DA37  1  8A                   txa
00DA38  1  49 FF                eor     #$FF
00DA3A  1  29 80                and     #$80
00DA3C  1  AA                   tax
00DA3D  1  C0 12                cpy     #DECTBL_END-DECTBL
00DA3F  1  D0 B2                bne     L3CF6
00DA41  1               ; ----------------------------------------------------------------------------
00DA41  1               ; NINE DIGITS HAVE BEEN STORED IN STRING.  NOW LOOK
00DA41  1               ; BACK AND LOP OFF TRAILING ZEROES AND A TRAILING
00DA41  1               ; DECIMAL POINT.
00DA41  1               ; ----------------------------------------------------------------------------
00DA41  1  A4 BA                ldy     STRNG2
00DA43  1               L3D4E:
00DA43  1  B9 FF 00             lda     $FF,y
00DA46  1  88                   dey
00DA47  1  C9 30                cmp     #$30
00DA49  1  F0 F8                beq     L3D4E
00DA4B  1  C9 2E                cmp     #$2E
00DA4D  1  F0 01                beq     L3D5B
00DA4F  1  C8                   iny
00DA50  1               L3D5B:
00DA50  1  A9 2B                lda     #$2B
00DA52  1  A6 A9                ldx     EXPON
00DA54  1  F0 2E                beq     L3D8F
00DA56  1  10 08                bpl     L3D6B
00DA58  1  A9 00                lda     #$00
00DA5A  1  38                   sec
00DA5B  1  E5 A9                sbc     EXPON
00DA5D  1  AA                   tax
00DA5E  1  A9 2D                lda     #$2D
00DA60  1               L3D6B:
00DA60  1  99 01 01             sta     STACK+1,y
00DA63  1  A9 45                lda     #$45
00DA65  1  99 00 01             sta     STACK,y
00DA68  1  8A                   txa
00DA69  1  A2 2F                ldx     #$2F
00DA6B  1  38                   sec
00DA6C  1               L3D77:
00DA6C  1  E8                   inx
00DA6D  1  E9 0A                sbc     #$0A
00DA6F  1  B0 FB                bcs     L3D77
00DA71  1  69 3A                adc     #$3A
00DA73  1  99 03 01             sta     STACK+3,y
00DA76  1  8A                   txa
00DA77  1  99 02 01             sta     STACK+2,y
00DA7A  1  A9 00                lda     #$00
00DA7C  1  99 04 01             sta     STACK+4,y
00DA7F  1  F0 08                beq     L3D94
00DA81  1               FOUT4:
00DA81  1  99 FF 00             sta     $FF,y
00DA84  1               L3D8F:
00DA84  1  A9 00                lda     #$00
00DA86  1  99 00 01             sta     STACK,y
00DA89  1               L3D94:
00DA89  1  A9 00                lda     #$00
00DA8B  1  A0 01                ldy     #$01
00DA8D  1  60                   rts
00DA8E  1               ; ----------------------------------------------------------------------------
00DA8E  1               CON_HALF:
00DA8E  1  80 00 00 00          .byte   $80,$00,$00,$00
00DA92  1               ; ----------------------------------------------------------------------------
00DA92  1               ; POWERS OF 10 FROM 1E8 DOWN TO 1,
00DA92  1               ; AS 32-BIT INTEGERS, WITH ALTERNATING SIGNS
00DA92  1               ; ----------------------------------------------------------------------------
00DA92  1               DECTBL:
00DA92  1  FE 79 60             .byte   $FE,$79,$60 ; -100000
00DA95  1  00 27 10     		.byte	$00,$27,$10 ; 10000
00DA98  1  FF FC 18     		.byte	$FF,$FC,$18 ; -1000
00DA9B  1  00 00 64     		.byte	$00,$00,$64 ; 100
00DA9E  1  FF FF F6     		.byte	$FF,$FF,$F6 ; -10
00DAA1  1  00 00 01     		.byte	$00,$00,$01 ; 1
00DAA4  1               DECTBL_END:
00DAA4  1               ; ----------------------------------------------------------------------------
00DAA4  1               ; "SQR" FUNCTION
00DAA4  1               ; ----------------------------------------------------------------------------
00DAA4  1               SQR:
00DAA4  1  20 A3 D7             jsr     COPY_FAC_TO_ARG_ROUNDED
00DAA7  1  A9 8E                lda     #<CON_HALF
00DAA9  1  A0 DA                ldy     #>CON_HALF
00DAAB  1  20 43 D7             jsr     LOAD_FAC_FROM_YA
00DAAE  1               ; ----------------------------------------------------------------------------
00DAAE  1               ; EXPONENTIATION OPERATION
00DAAE  1               ;
00DAAE  1               ; ARG ^ FAC  =  EXP( LOG(ARG) * FAC )
00DAAE  1               ; ----------------------------------------------------------------------------
00DAAE  1               FPWRT:
00DAAE  1  F0 63                beq     EXP
00DAB0  1  A5 B3                lda     ARG
00DAB2  1  D0 03                bne     L3DD5
00DAB4  1  4C EB D4             jmp     STA_IN_FAC_SIGN_AND_EXP
00DAB7  1               L3DD5:
00DAB7  1  A2 9C                ldx     #TEMP3
00DAB9  1  A0 00                ldy     #$00
00DABB  1  20 70 D7             jsr     STORE_FAC_AT_YX_ROUNDED
00DABE  1  A5 B7                lda     ARGSIGN
00DAC0  1  10 0F                bpl     L3DEF
00DAC2  1  20 5A D8             jsr     INT
00DAC5  1  A9 9C                lda     #TEMP3
00DAC7  1  A0 00                ldy     #$00
00DAC9  1  20 F0 D7             jsr     FCOMP
00DACC  1  D0 03                bne     L3DEF
00DACE  1  98                   tya
00DACF  1  A4 5B                ldy     CHARAC
00DAD1  1               L3DEF:
00DAD1  1  20 95 D7             jsr     MFA
00DAD4  1  98                   tya
00DAD5  1  48                   pha
00DAD6  1  20 B5 D5             jsr     LOG
00DAD9  1  A9 9C                lda     #TEMP3
00DADB  1  A0 00                ldy     #$00
00DADD  1  20 F3 D5             jsr     FMULT
00DAE0  1  20 13 DB             jsr     EXP
00DAE3  1  68                   pla
00DAE4  1  4A                   lsr     a
00DAE5  1  90 0A                bcc     L3E0F
00DAE7  1               ; ----------------------------------------------------------------------------
00DAE7  1               ; NEGATE VALUE IN FAC
00DAE7  1               ; ----------------------------------------------------------------------------
00DAE7  1               NEGOP:
00DAE7  1  A5 AC                lda     FAC
00DAE9  1  F0 06                beq     L3E0F
00DAEB  1  A5 B0                lda     FACSIGN
00DAED  1  49 FF                eor     #$FF
00DAEF  1  85 B0                sta     FACSIGN
00DAF1  1               L3E0F:
00DAF1  1  60                   rts
00DAF2  1               ; ----------------------------------------------------------------------------
00DAF2  1               CON_LOG_E:
00DAF2  1  81 38 AA 3B          .byte   $81,$38,$AA,$3B
00DAF6  1               POLY_EXP:
00DAF6  1  06           		.byte	$06
00DAF7  1  74 63 90 8C  		.byte	$74,$63,$90,$8C
00DAFB  1  77 23 0C AB  		.byte	$77,$23,$0C,$AB
00DAFF  1  7A 1E 94 00  		.byte	$7A,$1E,$94,$00
00DB03  1  7C 63 42 80  		.byte	$7C,$63,$42,$80
00DB07  1  7E 75 FE D0  		.byte	$7E,$75,$FE,$D0
00DB0B  1  80 31 72 15  		.byte	$80,$31,$72,$15
00DB0F  1  81 00 00 00  		.byte	$81,$00,$00,$00
00DB13  1               ; ----------------------------------------------------------------------------
00DB13  1               ; "EXP" FUNCTION
00DB13  1               ;
00DB13  1               ; FAC = E ^ FAC
00DB13  1               ; ----------------------------------------------------------------------------
00DB13  1               EXP:
00DB13  1  A9 F2                lda     #<CON_LOG_E
00DB15  1  A0 DA                ldy     #>CON_LOG_E
00DB17  1  20 F3 D5             jsr     FMULT
00DB1A  1  A5 B9                lda     FACEXTENSION
00DB1C  1  69 50                adc     #$50
00DB1E  1  90 03                bcc     L3E4E
00DB20  1  20 BA D7             jsr     INCREMENT_MANTISSA
00DB23  1               L3E4E:
00DB23  1  85 A3                sta     ARGEXTENSION
00DB25  1  20 A6 D7             jsr     MAF
00DB28  1  A5 AC                lda     FAC
00DB2A  1  C9 88                cmp     #$88
00DB2C  1  90 03                bcc     L3E5C
00DB2E  1               L3E59:
00DB2E  1  20 88 D6             jsr     OUTOFRNG
00DB31  1               L3E5C:
00DB31  1  20 5A D8             jsr     INT
00DB34  1  A5 5B                lda     CHARAC
00DB36  1  18                   clc
00DB37  1  69 81                adc     #$81
00DB39  1  F0 F3                beq     L3E59
00DB3B  1  38                   sec
00DB3C  1  E9 01                sbc     #$01
00DB3E  1  48                   pha
00DB3F  1  A2 04                ldx     #BYTES_FP
00DB41  1               L3E6C:
00DB41  1  B5 B3                lda     ARG,x
00DB43  1  B4 AC                ldy     FAC,x
00DB45  1  95 AC                sta     FAC,x
00DB47  1  94 B3                sty     ARG,x
00DB49  1  CA                   dex
00DB4A  1  10 F5                bpl     L3E6C
00DB4C  1  A5 A3                lda     ARGEXTENSION
00DB4E  1  85 B9                sta     FACEXTENSION
00DB50  1  20 50 D4             jsr     FSUBT
00DB53  1  20 E7 DA             jsr     NEGOP
00DB56  1  A9 F6                lda     #<POLY_EXP
00DB58  1  A0 DA                ldy     #>POLY_EXP
00DB5A  1  20 7C DB             jsr     POLYNOMIAL
00DB5D  1  A9 00                lda     #$00
00DB5F  1  85 B8                sta     SGNCPR
00DB61  1  68                   pla
00DB62  1  20 6D D6             jsr     ADD_EXPONENTS1
00DB65  1  60                   rts
00DB66  1               ; ----------------------------------------------------------------------------
00DB66  1               ; ODD POLYNOMIAL SUBROUTINE
00DB66  1               ;
00DB66  1               ; F(X) = X * P(X^2)
00DB66  1               ;
00DB66  1               ; WHERE:  X IS VALUE IN FAC
00DB66  1               ;	Y,A POINTS AT COEFFICIENT TABLE
00DB66  1               ;	FIRST BYTE OF COEFF. TABLE IS N
00DB66  1               ;	COEFFICIENTS FOLLOW, HIGHEST POWER FIRST
00DB66  1               ;
00DB66  1               ; P(X^2) COMPUTED USING NORMAL POLYNOMIAL SUBROUTINE
00DB66  1               ; ----------------------------------------------------------------------------
00DB66  1               POLYNOMIAL_ODD:
00DB66  1  85 BA                sta     STRNG2
00DB68  1  84 BB                sty     STRNG2+1
00DB6A  1  20 66 D7             jsr     STORE_FAC_IN_TEMP1_ROUNDED
00DB6D  1  A9 A4                lda     #TEMP1X
00DB6F  1  20 F3 D5             jsr     FMULT
00DB72  1  20 80 DB             jsr     SERMAIN
00DB75  1  A9 A4                lda     #TEMP1X
00DB77  1  A0 00                ldy     #$00
00DB79  1  4C F3 D5             jmp     FMULT
00DB7C  1               ; ----------------------------------------------------------------------------
00DB7C  1               ; NORMAL POLYNOMIAL SUBROUTINE
00DB7C  1               ;
00DB7C  1               ; P(X) = C(0)*X^N + C(1)*X^(N-1) + ... + C(N)
00DB7C  1               ;
00DB7C  1               ; WHERE:  X IS VALUE IN FAC
00DB7C  1               ;	Y,A POINTS AT COEFFICIENT TABLE
00DB7C  1               ;	FIRST BYTE OF COEFF. TABLE IS N
00DB7C  1               ;	COEFFICIENTS FOLLOW, HIGHEST POWER FIRST
00DB7C  1               ; ----------------------------------------------------------------------------
00DB7C  1               POLYNOMIAL:
00DB7C  1  85 BA                sta     STRNG2
00DB7E  1  84 BB                sty     STRNG2+1
00DB80  1               SERMAIN:
00DB80  1  20 63 D7             jsr     STORE_FAC_IN_TEMP2_ROUNDED
00DB83  1  B1 BA                lda     (STRNG2),y
00DB85  1  85 B1                sta     SERLEN
00DB87  1  A4 BA                ldy     STRNG2
00DB89  1  C8                   iny
00DB8A  1  98                   tya
00DB8B  1  D0 02                bne     L3EBA
00DB8D  1  E6 BB                inc     STRNG2+1
00DB8F  1               L3EBA:
00DB8F  1  85 BA                sta     STRNG2
00DB91  1  A4 BB                ldy     STRNG2+1
00DB93  1               L3EBE:
00DB93  1  20 F3 D5             jsr     FMULT
00DB96  1  A5 BA                lda     STRNG2
00DB98  1  A4 BB                ldy     STRNG2+1
00DB9A  1  18                   clc
00DB9B  1  69 04                adc     #BYTES_FP
00DB9D  1  90 01                bcc     L3ECB
00DB9F  1  C8                   iny
00DBA0  1               L3ECB:
00DBA0  1  85 BA                sta     STRNG2
00DBA2  1  84 BB                sty     STRNG2+1
00DBA4  1  20 64 D4             jsr     FADD
00DBA7  1  A9 A8                lda     #TEMP2
00DBA9  1  A0 00                ldy     #$00
00DBAB  1  C6 B1                dec     SERLEN
00DBAD  1  D0 E4                bne     L3EBE
00DBAF  1               RTS19:
00DBAF  1  60                   rts
00DBB0  1               ; ----------------------------------------------------------------------------
00DBB0  1               ; "RND" FUNCTION
00DBB0  1               ; ----------------------------------------------------------------------------
00DBB0  1               CONRND1:
00DBB0  1  98 35 44 7A          .byte   $98,$35,$44,$7A
00DBB4  1               CONRND2:
00DBB4  1  68 28 B1 46          .byte   $68,$28,$B1,$46
00DBB8  1               RND:
00DBB8  1  20 C2 D7             jsr     SIGN
00DBBB  1  AA                   tax
00DBBC  1  30 18                bmi     L3F01
00DBBE  1  A9 D4                lda     #<RNDSEED
00DBC0  1  A0 00                ldy     #>RNDSEED
00DBC2  1  20 43 D7             jsr     LOAD_FAC_FROM_YA
00DBC5  1  8A                   txa
00DBC6  1  F0 E7                beq     RTS19
00DBC8  1  A9 B0                lda     #<CONRND1
00DBCA  1  A0 DB                ldy     #>CONRND1
00DBCC  1  20 F3 D5             jsr     FMULT
00DBCF  1  A9 B4                lda     #<CONRND2
00DBD1  1  A0 DB                ldy     #>CONRND2
00DBD3  1  20 64 D4             jsr     FADD
00DBD6  1               L3F01:
00DBD6  1  A6 AF                ldx     FAC_LAST
00DBD8  1  A5 AD                lda     FAC+1
00DBDA  1  85 AF                sta     FAC_LAST
00DBDC  1  86 AD                stx     FAC+1
00DBDE  1  A9 00                lda     #$00
00DBE0  1  85 B0                sta     FACSIGN
00DBE2  1  A5 AC                lda     FAC
00DBE4  1  85 B9                sta     FACEXTENSION
00DBE6  1  A9 80                lda     #$80
00DBE8  1  85 AC                sta     FAC
00DBEA  1  20 CD D4             jsr     NORMALIZE_FAC2
00DBED  1  A2 D4                ldx     #<RNDSEED
00DBEF  1  A0 00                ldy     #>RNDSEED
00DBF1  1               GOMOVMF:
00DBF1  1  4C 70 D7             jmp     STORE_FAC_AT_YX_ROUNDED
00DBF4  1               ; ----------------------------------------------------------------------------
00DBF4  1               ; "COS" FUNCTION
00DBF4  1               ; ----------------------------------------------------------------------------
00DBF4  1               COS:
00DBF4  1  A9 70                lda     #<CON_PI_HALF
00DBF6  1  A0 DC                ldy     #>CON_PI_HALF
00DBF8  1  20 64 D4             jsr     FADD
00DBFB  1               ; ----------------------------------------------------------------------------
00DBFB  1               ; "SIN" FUNCTION
00DBFB  1               ; ----------------------------------------------------------------------------
00DBFB  1               SIN:
00DBFB  1  20 A3 D7             jsr     COPY_FAC_TO_ARG_ROUNDED
00DBFE  1  A9 74                lda     #<CON_PI_DOUB
00DC00  1  A0 DC                ldy     #>CON_PI_DOUB
00DC02  1  A6 B7                ldx     ARGSIGN
00DC04  1  20 BA D6             jsr     DIV
00DC07  1  20 A3 D7             jsr     COPY_FAC_TO_ARG_ROUNDED
00DC0A  1  20 5A D8             jsr     INT
00DC0D  1  A9 00                lda     #$00
00DC0F  1  85 B8                sta     STRNG1
00DC11  1  20 50 D4             jsr     FSUBT
00DC14  1               ; ----------------------------------------------------------------------------
00DC14  1               ; (FAC) = ANGLE AS A FRACTION OF A FULL CIRCLE
00DC14  1               ;
00DC14  1               ; NOW FOLD THE RANGE INTO A QUARTER CIRCLE
00DC14  1               ;
00DC14  1               ; <<< THERE ARE MUCH SIMPLER WAYS TO DO THIS >>>
00DC14  1               ; ----------------------------------------------------------------------------
00DC14  1  A9 78                lda     #<QUARTER
00DC16  1  A0 DC                ldy     #>QUARTER
00DC18  1  20 4D D4             jsr     FSUB
00DC1B  1  A5 B0                lda     FACSIGN
00DC1D  1  48                   pha
00DC1E  1  10 0D                bpl     SIN1
00DC20  1  20 46 D4             jsr     FADDH
00DC23  1  A5 B0                lda     FACSIGN
00DC25  1  30 09                bmi     L3F5B
00DC27  1  A5 63                lda     CPRMASK
00DC29  1  49 FF                eor     #$FF
00DC2B  1  85 63                sta     CPRMASK
00DC2D  1               ; ----------------------------------------------------------------------------
00DC2D  1               ; IF FALL THRU, RANGE IS 0...1/2
00DC2D  1               ; IF BRANCH HERE, RANGE IS 0...1/4
00DC2D  1               ; ----------------------------------------------------------------------------
00DC2D  1               SIN1:
00DC2D  1  20 E7 DA             jsr     NEGOP
00DC30  1               ; ----------------------------------------------------------------------------
00DC30  1               ; IF FALL THRU, RANGE IS -1/2...0
00DC30  1               ; IF BRANCH HERE, RANGE IS -1/4...0
00DC30  1               ; ----------------------------------------------------------------------------
00DC30  1               L3F5B:
00DC30  1  A9 78                lda     #<QUARTER
00DC32  1  A0 DC                ldy     #>QUARTER
00DC34  1  20 64 D4             jsr     FADD
00DC37  1  68                   pla
00DC38  1  10 03                bpl     L3F68
00DC3A  1  20 E7 DA             jsr     NEGOP
00DC3D  1               L3F68:
00DC3D  1  A9 7C                lda     #<POLY_SIN
00DC3F  1  A0 DC                ldy     #>POLY_SIN
00DC41  1  4C 66 DB             jmp     POLYNOMIAL_ODD
00DC44  1               ; ----------------------------------------------------------------------------
00DC44  1               ; "TAN" FUNCTION
00DC44  1               ;
00DC44  1               ; COMPUTE TAN(X) = SIN(X) / COS(X)
00DC44  1               ; ----------------------------------------------------------------------------
00DC44  1               TAN:
00DC44  1  20 66 D7             jsr     STORE_FAC_IN_TEMP1_ROUNDED
00DC47  1  A9 00                lda     #$00
00DC49  1  85 63                sta     CPRMASK
00DC4B  1  20 FB DB             jsr     SIN
00DC4E  1  A2 9C                ldx     #TEMP3
00DC50  1  A0 00                ldy     #$00
00DC52  1  20 F1 DB             jsr     GOMOVMF
00DC55  1  A9 A4                lda     #TEMP1+(5-BYTES_FP)
00DC57  1  A0 00                ldy     #$00
00DC59  1  20 43 D7             jsr     LOAD_FAC_FROM_YA
00DC5C  1  A9 00                lda     #$00
00DC5E  1  85 B0                sta     FACSIGN
00DC60  1  A5 63                lda     CPRMASK
00DC62  1  20 6C DC             jsr     TAN1
00DC65  1  A9 9C                lda     #TEMP3
00DC67  1  A0 00                ldy     #$00
00DC69  1  4C C2 D6             jmp     FDIV
00DC6C  1               TAN1:
00DC6C  1  48                   pha
00DC6D  1  4C 2D DC             jmp     SIN1
00DC70  1               ; ----------------------------------------------------------------------------
00DC70  1               CON_PI_HALF:
00DC70  1  81 49 0F DB          .byte   $81,$49,$0F,$DB
00DC74  1               CON_PI_DOUB:
00DC74  1  83 49 0F DB          .byte   $83,$49,$0F,$DB
00DC78  1               QUARTER:
00DC78  1  7F 00 00 00          .byte   $7F,$00,$00,$00
00DC7C  1               POLY_SIN:
00DC7C  1  04 86 1E D7          .byte   $04,$86,$1E,$D7,$FB,$87,$99,$26
00DC80  1  FB 87 99 26  
00DC84  1  65 87 23 34          .byte   $65,$87,$23,$34,$58,$86,$A5,$5D
00DC88  1  58 86 A5 5D  
00DC8C  1  E1 83 49 0F          .byte   $E1,$83,$49,$0F,$DB
00DC90  1  DB           
00DC91  1               
00DC91  1               ; ----------------------------------------------------------------------------
00DC91  1               ; "ATN" FUNCTION
00DC91  1               ; ----------------------------------------------------------------------------
00DC91  1               ATN:
00DC91  1  A5 B0                lda     FACSIGN
00DC93  1  48                   pha
00DC94  1  10 03                bpl     L3FDB
00DC96  1  20 E7 DA             jsr     NEGOP
00DC99  1               L3FDB:
00DC99  1  A5 AC                lda     FAC
00DC9B  1  48                   pha
00DC9C  1  C9 81                cmp     #$81
00DC9E  1  90 07                bcc     L3FE9
00DCA0  1  A9 94                lda     #<CON_ONE
00DCA2  1  A0 D5                ldy     #>CON_ONE
00DCA4  1  20 C2 D6             jsr     FDIV
00DCA7  1               ; ----------------------------------------------------------------------------
00DCA7  1               ; 0 <= X <= 1
00DCA7  1               ; 0 <= ATN(X) <= PI/8
00DCA7  1               ; ----------------------------------------------------------------------------
00DCA7  1               L3FE9:
00DCA7  1  A9 C1                lda     #<POLY_ATN
00DCA9  1  A0 DC                ldy     #>POLY_ATN
00DCAB  1  20 66 DB             jsr     POLYNOMIAL_ODD
00DCAE  1  68                   pla
00DCAF  1  C9 81                cmp     #$81
00DCB1  1  90 07                bcc     L3FFC
00DCB3  1  A9 70                lda     #<CON_PI_HALF
00DCB5  1  A0 DC                ldy     #>CON_PI_HALF
00DCB7  1  20 4D D4             jsr     FSUB
00DCBA  1               L3FFC:
00DCBA  1  68                   pla
00DCBB  1  10 03                bpl     L4002
00DCBD  1  4C E7 DA             jmp     NEGOP
00DCC0  1               L4002:
00DCC0  1  60                   rts
00DCC1  1               ; ----------------------------------------------------------------------------
00DCC1  1               POLY_ATN:
00DCC1  1  08                   .byte   $08
00DCC2  1  78 3A C5 37  		.byte	$78,$3A,$C5,$37
00DCC6  1  7B 83 A2 5C  		.byte	$7B,$83,$A2,$5C
00DCCA  1  7C 2E DD 4D  		.byte	$7C,$2E,$DD,$4D
00DCCE  1  7D 99 B0 1E  		.byte	$7D,$99,$B0,$1E
00DCD2  1  7D 59 ED 24  		.byte	$7D,$59,$ED,$24
00DCD6  1  7E 91 72 00  		.byte	$7E,$91,$72,$00
00DCDA  1  7E 4C B9 73  		.byte	$7E,$4C,$B9,$73
00DCDE  1  7F AA AA 53  		.byte	$7F,$AA,$AA,$53
00DCE2  1  81 00 00 00  		.byte	$81,$00,$00,$00
00DCE6  1               GENERIC_CHRGET:
00DCE6  1  E6 C3                inc     TXTPTR
00DCE8  1  D0 02                bne     GENERIC_CHRGOT
00DCEA  1  E6 C4                inc     TXTPTR+1
00DCEC  1               GENERIC_CHRGOT:
00DCEC  1               GENERIC_TXTPTR = GENERIC_CHRGOT + 1
00DCEC  1  AD 60 EA             lda     $EA60
00DCEF  1  C9 3A                cmp     #$3A
00DCF1  1  B0 0A                bcs     L4058
00DCF3  1               GENERIC_CHRGOT2:
00DCF3  1  C9 20                cmp     #$20
00DCF5  1  F0 EF                beq     GENERIC_CHRGET
00DCF7  1  38                   sec
00DCF8  1  E9 30                sbc     #$30
00DCFA  1  38                   sec
00DCFB  1  E9 D0                sbc     #$D0
00DCFD  1               L4058:
00DCFD  1  60                   rts
00DCFE  1               GENERIC_RNDSEED:
00DCFE  1               ; random number seed
00DCFE  1  80 4F C7 52          .byte   $80,$4F,$C7,$52
00DD02  1               GENERIC_CHRGET_END:
00DD02  1               ; ----------------------------------------------------------------------------
00DD02  1               PR_WRITTEN_BY:
00DD02  1  A9 46                lda     #<QT_WRITTEN_BY
00DD04  1  A0 DE                ldy     #>QT_WRITTEN_BY
00DD06  1  20 BB C8             jsr     STROUT
00DD09  1               COLD_START:
00DD09  1  A2 FF                ldx     #$FF
00DD0B  1  86 88                stx     CURLIN+1
00DD0D  1  9A                   txs
00DD0E  1  A9 09                lda     #<COLD_START
00DD10  1  A0 DD                ldy     #>COLD_START
00DD12  1  85 01                sta     GORESTART+1
00DD14  1  84 02                sty     GORESTART+2
00DD16  1  85 04                sta     GOSTROUT+1
00DD18  1  84 05                sty     GOSTROUT+2
00DD1A  1  A9 FD                lda     #<AYINT
00DD1C  1  A0 CD                ldy     #>AYINT
00DD1E  1  85 06                sta     GOAYINT
00DD20  1  84 07                sty     GOAYINT+1
00DD22  1  A9 B9                lda     #<GIVAYF
00DD24  1  A0 CF                ldy     #>GIVAYF
00DD26  1  85 08                sta     GOGIVEAYF
00DD28  1  84 09                sty     GOGIVEAYF+1
00DD2A  1  A9 4C                lda     #$4C
00DD2C  1  85 00                sta     GORESTART
00DD2E  1  85 03                sta     GOSTROUT
00DD30  1  85 A1                sta     JMPADRS
00DD32  1  85 0A                sta     USR
00DD34  1  A9 80                lda     #<IQERR
00DD36  1  A0 CE                ldy     #>IQERR
00DD38  1  85 0B                sta     USR+1
00DD3A  1  84 0C                sty     USR+2
00DD3C  1  A9 48                lda     #WIDTH
00DD3E  1  85 0F                sta     Z17
00DD40  1  A9 38                lda     #WIDTH2
00DD42  1  85 10                sta     Z18
00DD44  1  A2 1C                ldx     #GENERIC_CHRGET_END-GENERIC_CHRGET
00DD46  1               L4098:
00DD46  1  BD E5 DC             lda     GENERIC_CHRGET-1,x
00DD49  1  95 BB                sta     CHRGET-1,x
00DD4B  1  CA                   dex
00DD4C  1  D0 F8                bne     L4098
00DD4E  1  8A                   txa
00DD4F  1  85 B2                sta     SHIFTSIGNEXT
00DD51  1  85 67                sta     LASTPT+1
00DD53  1  85 0D                sta     Z15
00DD55  1  85 0E                sta     POSX
00DD57  1  48                   pha
00DD58  1  85 64                sta     Z14
00DD5A  1  A9 03                lda     #$03
00DD5C  1  85 A0                sta     DSCLEN
00DD5E  1  A9 2C                lda     #$2C
00DD60  1  85 12                sta     LINNUM+1
00DD62  1  20 64 C8             jsr     CRDO
00DD65  1  A2 68                ldx     #TEMPST
00DD67  1  86 65                stx     TEMPPT
00DD69  1  A9 6A                lda     #<QT_MEMORY_SIZE
00DD6B  1  A0 DE                ldy     #>QT_MEMORY_SIZE
00DD6D  1  20 BB C8             jsr     STROUT
00DD70  1  20 3E C9             jsr     NXIN
00DD73  1  86 C3                stx     TXTPTR
00DD75  1  84 C4                sty     TXTPTR+1
00DD77  1  20 BC 00             jsr     CHRGET
00DD7A  1  C9 41                cmp     #$41
00DD7C  1  F0 84                beq     PR_WRITTEN_BY
00DD7E  1  A8                   tay
00DD7F  1  D0 21                bne     L40EE
00DD81  1  A9 00                lda     #<RAMSTART2
00DD83  1  A0 02                ldy     #>RAMSTART2
00DD85  1  85 11                sta     LINNUM
00DD87  1  84 12                sty     LINNUM+1
00DD89  1  A0 00                ldy     #$00
00DD8B  1               L40D7:
00DD8B  1  E6 11                inc     LINNUM
00DD8D  1  D0 02                bne     L40DD
00DD8F  1  E6 12                inc     LINNUM+1
00DD91  1               L40DD:
00DD91  1  A9 92                lda     #$92 ; 10010010 / 00100100
00DD93  1  91 11                sta     (LINNUM),y
00DD95  1  D1 11                cmp     (LINNUM),y
00DD97  1  D0 15                bne     L40FA
00DD99  1  0A                   asl     a
00DD9A  1  91 11                sta     (LINNUM),y
00DD9C  1  D1 11                cmp     (LINNUM),y
00DD9E  1  F0 EB                beq     L40D7; old: faster
00DDA0  1  D0 0C                bne     L40FA
00DDA2  1               L40EE:
00DDA2  1  20 C2 00             jsr     CHRGOT
00DDA5  1  20 77 C7             jsr     LINGET
00DDA8  1  A8                   tay
00DDA9  1  F0 03                beq     L40FA
00DDAB  1  4C 04 CC             jmp     SYNERR
00DDAE  1               L40FA:
00DDAE  1  A5 11                lda     LINNUM
00DDB0  1  A4 12                ldy     LINNUM+1
00DDB2  1  85 85                sta     MEMSIZ
00DDB4  1  84 86                sty     MEMSIZ+1
00DDB6  1  85 81                sta     FRETOP
00DDB8  1  84 82                sty     FRETOP+1
00DDBA  1               L4106:
00DDBA  1  A9 76                lda     #<QT_TERMINAL_WIDTH
00DDBC  1  A0 DE                ldy     #>QT_TERMINAL_WIDTH
00DDBE  1  20 BB C8             jsr     STROUT
00DDC1  1  20 3E C9             jsr     NXIN
00DDC4  1  86 C3                stx     TXTPTR
00DDC6  1  84 C4                sty     TXTPTR+1
00DDC8  1  20 BC 00             jsr     CHRGET
00DDCB  1  A8                   tay
00DDCC  1  F0 1C                beq     L4136
00DDCE  1  20 77 C7             jsr     LINGET
00DDD1  1  A5 12                lda     LINNUM+1
00DDD3  1  D0 E5                bne     L4106
00DDD5  1  A5 11                lda     LINNUM
00DDD7  1  C9 10                cmp     #$10
00DDD9  1  90 DF                bcc     L4106
00DDDB  1  85 0F                sta     Z17
00DDDD  1               L4129:
00DDDD  1  E9 0E                sbc     #$0E
00DDDF  1  B0 FC                bcs     L4129
00DDE1  1  49 FF                eor     #$FF
00DDE3  1  E9 0C                sbc     #$0C
00DDE5  1  18                   clc
00DDE6  1  65 0F                adc     Z17
00DDE8  1  85 10                sta     Z18
00DDEA  1               L4136:
00DDEA  1  A2 00                ldx     #<RAMSTART2
00DDEC  1  A0 02                ldy     #>RAMSTART2
00DDEE  1  86 79                stx     TXTTAB
00DDF0  1  84 7A                sty     TXTTAB+1
00DDF2  1  A0 00                ldy     #$00
00DDF4  1  98                   tya
00DDF5  1  91 79                sta     (TXTTAB),y
00DDF7  1  E6 79                inc     TXTTAB
00DDF9  1  D0 02                bne     L4192
00DDFB  1  E6 7A                inc     TXTTAB+1
00DDFD  1               L4192:
00DDFD  1  A5 79                lda     TXTTAB
00DDFF  1  A4 7A                ldy     TXTTAB+1
00DE01  1  20 1F C2             jsr     REASON
00DE04  1  20 64 C8             jsr     CRDO
00DE07  1  A5 85                lda     MEMSIZ
00DE09  1  38                   sec
00DE0A  1  E5 79                sbc     TXTTAB
00DE0C  1  AA                   tax
00DE0D  1  A5 86                lda     MEMSIZ+1
00DE0F  1  E5 7A                sbc     TXTTAB+1
00DE11  1  20 56 D9             jsr     LINPRT
00DE14  1  A9 85                lda     #<QT_BYTES_FREE
00DE16  1  A0 DE                ldy     #>QT_BYTES_FREE
00DE18  1  20 BB C8             jsr     STROUT
00DE1B  1  A9 BB                lda     #<STROUT
00DE1D  1  A0 C8                ldy     #>STROUT
00DE1F  1  85 04                sta     GOSTROUT+1
00DE21  1  84 05                sty     GOSTROUT+2
00DE23  1  20 67 C4             jsr     SCRTCH
00DE26  1  A9 74                lda     #<RESTART
00DE28  1  A0 C2                ldy     #>RESTART
00DE2A  1  85 01                sta     GORESTART+1
00DE2C  1  84 02                sty     GORESTART+2
00DE2E  1  6C 01 00             jmp     (GORESTART+1)
00DE31  1               
00DE31  1               ; OSI is compiled for ROM, but includes
00DE31  1               ; this unused string
00DE31  1  57 41 4E 54          .byte   "WANT SIN-COS-TAN-ATN"
00DE35  1  20 53 49 4E  
00DE39  1  2D 43 4F 53  
00DE45  1  00                   .byte   0
00DE46  1               QT_WRITTEN_BY:
00DE46  1  0D 0A 0C             .byte   CR,LF,$0C ; FORM FEED
00DE49  1  57 52 49 54          .byte   "WRITTEN BY RICHARD W. WEILAND."
00DE4D  1  54 45 4E 20  
00DE51  1  42 59 20 52  
00DE67  1  0D 0A 00             .byte   CR,LF,0
00DE6A  1               QT_MEMORY_SIZE:
00DE6A  1  4D 45 4D 4F          .byte   "MEMORY SIZE"
00DE6E  1  52 59 20 53  
00DE72  1  49 5A 45     
00DE75  1  00                   .byte   0
00DE76  1               QT_TERMINAL_WIDTH:
00DE76  1  54 45 52 4D          .byte   "TERMINAL WIDTH"
00DE7A  1  49 4E 41 4C  
00DE7E  1  20 57 49 44  
00DE84  1  00                   .byte   0
00DE85  1               QT_BYTES_FREE:
00DE85  1  20 42 59 54          .byte   " BYTES FREE"
00DE89  1  45 53 20 46  
00DE8D  1  52 45 45     
00DE90  1  0D 0A 0D 0A          .byte   CR,LF,CR,LF
00DE94  1  4F 53 49 20          .byte   "OSI 6502 BASIC VERSION 1.0 REV 3.2"
00DE98  1  36 35 30 32  
00DE9C  1  20 42 41 53  
00DEB6  1  0D 0A                .byte   CR,LF
00DEB8  1  43 4F 50 59          .byte   "COPYRIGHT 1977 BY MICROSOFT CO."
00DEBC  1  52 49 47 48  
00DEC0  1  54 20 31 39  
00DED7  1  0D 0A 00             .byte   CR,LF,0
00DEDA  1               
00DEDA  1               
00DEDA  1               ; STARTUP AND SERIAL I/O ROUTINES ===========================================================
00DEDA  1               ; BY G. SEARLE 2013 =========================================================================
00DEDA  1               ACIA := $8000
00DEDA  1               ACIAControl := ACIA+3
00DEDA  1               ACIACommand := ACIA+2
00DEDA  1               ACIAStatus := ACIA+1
00DEDA  1               ACIAData := ACIA+0
00DEDA  1               
00DEDA  1               .segment "IOHANDLER"
000000r 1               .org $FF00
00FF00  1               Reset:
00FF00  1  A2 FC        	LDX     #STACK_TOP
00FF02  1  9A           	TXS
00FF03  1               
00FF03  1  A9 0B        	LDA	#$0B
00FF05  1  8D 02 80     	STA	ACIACommand
00FF08  1               
00FF08  1  A9 1F        	LDA 	#$1F		; Set ACIA baud rate, word size and Rx interrupt (to control RTS)
00FF0A  1  8D 03 80     	STA	ACIAControl
00FF0D  1               
00FF0D  1               NextStart:
00FF0D  1  A0 05        	LDY	#$05
00FF0F  1               InnerDelayLoop:
00FF0F  1  A2 FF        	LDX	#$FF
00FF11  1               Wee:
00FF11  1  CA           	DEX
00FF12  1  D0 FD        	BNE Wee
00FF14  1               
00FF14  1  88           	DEY
00FF15  1  D0 F8        	BNE InnerDelayLoop
00FF17  1               
00FF17  1               ; Display startup message
00FF17  1  A0 00        	LDY #0
00FF19  1               ShowStartMsg:
00FF19  1  B9 67 FF     	LDA	StartupMessage,Y
00FF1C  1  F0 06        	BEQ	WaitForKeypress
00FF1E  1  20 39 FF     	JSR	MONCOUT
00FF21  1  C8           	INY
00FF22  1  D0 F5        	BNE	ShowStartMsg
00FF24  1               
00FF24  1               ; Wait for a cold/warm start selection
00FF24  1               WaitForKeypress:
00FF24  1  20 48 FF     	JSR	MONRDKEY
00FF27  1  90 FB        	BCC	WaitForKeypress
00FF29  1               
00FF29  1  29 DF        	AND	#$DF			; Make upper case
00FF2B  1  C9 57        	CMP	#'W'			; compare with [W]arm start
00FF2D  1  F0 07        	BEQ	WarmStart
00FF2F  1               
00FF2F  1  C9 43        	CMP	#'C'			; compare with [C]old start
00FF31  1  D0 CD        	BNE	Reset
00FF33  1               
00FF33  1  4C 09 DD     	JMP	COLD_START	; BASIC cold start
00FF36  1               
00FF36  1               WarmStart:
00FF36  1  4C 74 C2     	JMP	RESTART		; BASIC warm start
00FF39  1               
00FF39  1               MONCOUT:
00FF39  1  48           	PHA
00FF3A  1               SerialOutWait:
00FF3A  1  AD 01 80     	LDA	ACIAStatus
00FF3D  1  29 10        	AND	#$10
00FF3F  1  C9 10        	CMP	#$10
00FF41  1  D0 F7        	BNE	SerialOutWait
00FF43  1  68           	PLA
00FF44  1  8D 00 80     	STA	ACIAData
00FF47  1  60           	RTS
00FF48  1               
00FF48  1               MONRDKEY:
00FF48  1  AD 01 80     	LDA	ACIAStatus
00FF4B  1  29 08        	AND	#$08
00FF4D  1  C9 08        	CMP	#$08
00FF4F  1  D0 05        	BNE	NoDataIn
00FF51  1  AD 00 80     	LDA	ACIAData
00FF54  1  38           	SEC		; Carry set if key available
00FF55  1  60           	RTS
00FF56  1               NoDataIn:
00FF56  1  18           	CLC		; Carry clear if no key pressed
00FF57  1  60           	RTS
00FF58  1               
00FF58  1               MONISCNTC:
00FF58  1  20 48 FF     	JSR	MONRDKEY
00FF5B  1  90 06        	BCC	NotCTRLC ; If no key pressed then exit
00FF5D  1  C9 03        	CMP	#3
00FF5F  1  D0 02        	BNE	NotCTRLC ; if CTRL-C not pressed then exit
00FF61  1  38           	SEC		; Carry set if control C pressed
00FF62  1  60           	RTS
00FF63  1               NotCTRLC:
00FF63  1  18           	CLC		; Carry clear if control C not pressed
00FF64  1  60           	RTS
00FF65  1               
00FF65  1               LOAD:
00FF65  1  60           	RTS
00FF66  1               
00FF66  1               SAVE:
00FF66  1  60           	RTS
00FF67  1               
00FF67  1               StartupMessage:
00FF67  1  0C 43 6F 6C  	.byte	$0C,"Cold [C] or warm [W] start?",$0D,$0A,$00
00FF6B  1  64 20 5B 43  
00FF6F  1  5D 20 6F 72  
00FF86  1               
00FF86  1               .segment "VECTS"
000000r 1               .org $FFFA
00FFFA  1  00 FF        	.word	Reset		; NMI
00FFFC  1  00 FF        	.word	Reset		; RESET
00FFFE  1  00 FF        	.word	Reset		; IRQ
010000  1               
010000  1               
