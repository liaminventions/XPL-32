Sections:
00: "seg701" (701-955)
01: "seg1006" (1006-1252)


Source: "sd_handeler.s"
                        	     1: ; XPL-32 <FOLDER> type loading code
                        	     2: ; (c) 2022-2023 Waverider
                        	     3: ; !WARNING! - this is kind of deprecated, please use xplDOS instead.
                        	     4: ; for now this is a code.xpl autoloader example (load command)
                        	     5: 
                        	     6: charbuffer = $700            ; 1 byte
                        	     7: seed = $01
                        	     8: donefact = $02		     ; vars
                        	     9: irqcount = $03
                        	    10: 
                        	    11:   .org $0701
                        	    12: jumptoit:
00:0701 4C2607          	    13:   jmp sdstart
                        	    14: 
                        	    15:   .include "hwconfig.s"

Source: "hwconfig.s"
                        	     1: PORTB = $b000
                        	     2: PORTA = $b001
                        	     3: DDRB = $b002
                        	     4: DDRA = $b003
                        	     5: 
                        	     6: LCD_E  = %10000000
                        	     7: LCD_RW = %01000000
                        	     8: LCD_RS = %00100000
                        	     9: 
                        	    10: SD_CS   = %00010000
                        	    11: SD_SCK  = %00001000
                        	    12: SD_MOSI = %00000100
                        	    13: SD_MISO = %00000010
                        	    14: 
                        	    15: PORTA_OUTPUTPINS = LCD_E | LCD_RW | LCD_RS | SD_CS | SD_SCK | SD_MOSI
                        	    16: 
                        	    17: via_init:
00:0704 A9FF            	    18:   lda #%11111111          ; Set all pins on port B to output
00:0706 8D02B0          	    19:   sta DDRB
00:0709 A9FC            	    20:   lda #PORTA_OUTPUTPINS   ; Set various pins on port A to output
00:070B 8D03B0          	    21:   sta DDRA
00:070E 60              	    22:   rts
                        	    23: 
                        	    24: 

Source: "sd_handeler.s"
                        	    16:   .include "kernal_def.s"

Source: "kernal_def.s"
                        	     1: ; kernal def
                        	     2: 
                        	     3: ; SD VARIABLES & LOCATIONS
                        	     4: zp_sd_address = $48         ; 2 bytes
                        	     5: zp_sd_currentsector = $4a   ; 4 bytes
                        	     6: zp_fat32_variables = $4f    ; 49 bytes
                        	     7: 
                        	     8: path = $400		    ; page
                        	     9: fat32_workspace = $500      ; two pages
                        	    10: 
                        	    11: fat32_readbuffer = fat32_workspace
                        	    12: 
                        	    13: fat32_fatstart                  = zp_fat32_variables + $00  ; 4 bytes
                        	    14: fat32_datastart                 = zp_fat32_variables + $04  ; 4 bytes
                        	    15: fat32_rootcluster               = zp_fat32_variables + $08  ; 4 bytes
                        	    16: fat32_sectorspercluster         = zp_fat32_variables + $0c  ; 1 byte
                        	    17: fat32_pendingsectors            = zp_fat32_variables + $0d  ; 1 byte
                        	    18: fat32_address                   = zp_fat32_variables + $0e  ; 2 bytes
                        	    19: fat32_nextcluster               = zp_fat32_variables + $10  ; 4 bytes
                        	    20: fat32_bytesremaining            = zp_fat32_variables + $14  ; 4 bytes           
                        	    21: fat32_lastfoundfreecluster      = zp_fat32_variables + $18  ; 4 bytes
                        	    22: fat32_lastcluster               = zp_fat32_variables + $1c  ; 4 bytes
                        	    23: fat32_lastsector                = zp_fat32_variables + $21  ; 4 bytes
                        	    24: fat32_filenamepointer           = zp_fat32_variables + $26  ; 2 bytes
                        	    25: fat32_numfats                   = zp_fat32_variables + $28  ; 1 byte
                        	    26: fat32_filecluster               = zp_fat32_variables + $29  ; 4 bytes
                        	    27: fat32_sectorsperfat             = zp_fat32_variables + $2d  ; 4 bytes
                        	    28: 
                        	    29: fat32_errorstage            = fat32_bytesremaining  ; only used during initialization
                        	    30: 
                        	    31: ;newer routines
                        	    32: sd_writesector = $ff8e
                        	    33: fat32_writenextsector = $ff91
                        	    34: fat32_allocatecluster = $ff94
                        	    35: fat32_findnextfreecluster = $ff97
                        	    36: fat32_writedirent = $ff9a
                        	    37: fat32_deletefile = $ff9d
                        	    38: fat32_file_write = $ffa0
                        	    39: 
                        	    40: ; xpldos
                        	    41: savecmd = $ffa3
                        	    42: cdcmd = $ffa6
                        	    43: lscmd = $ffa9
                        	    44: 
                        	    45: ; inits
                        	    46: acia_init = $ffac		; initialize acia
                        	    47: stock_via = $ffaf		; default via initialization
                        	    48: sd_init = $ffb2			; initialize sd card
                        	    49: fat32_init = $ffb5		; initialize fat32 (requires sd init)
                        	    50: ; acia
                        	    51: print_hex_acia = $ffb8		; prints a hex byte in A
                        	    52: crlf = $ffbb			; prints CR+LF
                        	    53: cleardisplay = $ffbe		; clears the screen
                        	    54: rxpoll = $ffc1			; return if a key pressed
                        	    55: txpoll = $ffc4			; check if we can write to the screen (automaticlly done in all acia routunes)
                        	    56: print_chara = $ffc7		; print one char from A
                        	    57: print_char_acia = $ffc7		; same as print_chara
                        	    58: ascii_home = $ffca		; home the cursor
                        	    59: w_acia_full = $ffcd		; print a null-terminated string, #< in x and #> in y
                        	    60: ; fat32
                        	    61: fat32_seekcluster = $ffd0	; gets ready to read the next cluster, and advances it according to the FAT
                        	    62: fat32_readnextcluster = $ffd3	; reads the next sector from a cluster chain into the buffer at fat32_address.
                        	    63: fat32_openroot = $ffd6		; prepare to read the root directory
                        	    64: fat32_opendirent = $ffd9	; prepare to read a file or directory based on a dirent
                        	    65: fat32_readdirent = $ffdc	; read a directory entry from the open directory
                        	    66: fat32_finddirent = $ffdf	; finds a particular directory entry. X,Y point to the 11-character filename to seek.
                        	    67: fat32_file_readbyte = $ffe2	; read a byte from an open file
                        	    68: fat32_file_read = $ffe5		; read a whole file into memory (assumes the file has just been opened and no data has been re
                        	    69: ; TODO fat32_file_writebyte
                        	    70: sd_readbyte = $ffe8		; read a byte from the sd card
                        	    71: sd_sendcommand = $ffeb		; send a command to the sd card
                        	    72: sd_readsector = $ffee		; read a sector from the sd card (512 bytes)
                        	    73: ; load/save
                        	    74: loadcmd = $fff1			; load /folder/code.xpl (with address at /folder/loadaddr.sar)
                        	    75: tsave = $fff4			; save a file to tape. start address at cnt and end address at len (16-bit)
                        	    76: tload = $fff7			; load a file from tape. the file location header is also loaded from tape
                        	    77: ; TODO loadpath, loadlc, savepath, and savelc COMING SOON
                        	    78: 
                        	    79: 
                        	    80: 

Source: "sd_handeler.s"
                        	    17: 
                        	    18: dirname:
00:070F 524F4F5420202020	    19:   .asciiz "ROOT       "	     ; standard directory name, SHORT format
00:0717 202020
00:071A 00
                        	    20: 
                        	    21: errormsg:
00:071B 0D              	    22:   .byte $0d, $0a, "ERROR!", $0d, $0a, $00	; error msg
00:071C 0A
00:071D 4552524F5221
00:0723 0D
00:0724 0A
00:0725 00
                        	    23: 
                        	    24: sdstart:
00:0726 6400            	    25:   stz $00		; 0
                        	    26: 
00:0728 A955            	    27:   lda #$55		; shftable value
00:072A 8501            	    28:   sta seed
                        	    29: 	
00:072C 20BEFF          	    30:   jsr cleardisplay	; clear display
                        	    31: 
00:072F A29B            	    32:   ldx  #<loadmsg	; title screen
00:0731 A007            	    33:   ldy  #>loadmsg
00:0733 20CDFF          	    34:   jsr  w_acia_full
                        	    35: 
00:0736 A2C8            	    36:   ldx  #<lodmm
00:0738 A007            	    37:   ldy  #>lodmm
00:073A 20CDFF          	    38:   jsr  w_acia_full
                        	    39: 
00:073D 204307          	    40:   jsr rootsetup		; setup sd card
                        	    41: 
                        	    42: findrau:
00:0740 4C6707          	    43:   jmp type		; start "type" program
                        	    44: 
                        	    45: rootsetup:		; setup <ROOT>
00:0743 48              	    46:   pha
00:0744 DA              	    47:   phx
00:0745 5A              	    48:   phy
                        	    49: 
                        	    50:   ; Open root directory
00:0746 20D6FF          	    51:   jsr fat32_openroot
                        	    52: 
                        	    53:   ; Find the subdirectory by name
00:0749 A20F            	    54:   ldx #<dirname
00:074B A007            	    55:   ldy #>dirname
00:074D 20DFFF          	    56:   jsr fat32_finddirent
00:0750 900E            	    57:   bcc foundsubdir
                        	    58: 
                        	    59: error:
                        	    60: 
                        	    61:   ; Subdirectory not found
00:0752 A007            	    62:   ldy #>errormsg
00:0754 A21B            	    63:   ldx #<errormsg
00:0756 20CDFF          	    64:   jsr w_acia_full
00:0759 200409          	    65:   jsr error_sound
00:075C 60              	    66:   rts
00:075D 60              	    67:   rts
00:075E 60              	    68:   rts
00:075F 60              	    69:   rts
                        	    70: 
                        	    71: foundsubdir
                        	    72: 
                        	    73:   ; Open subdirectory
00:0760 20D9FF          	    74:   jsr fat32_opendirent	; open folder
                        	    75: 
00:0763 7A              	    76:   ply
00:0764 FA              	    77:   plx 
00:0765 68              	    78:   pla
00:0766 60              	    79:   rts
                        	    80: 
                        	    81: 
                        	    82: type:			; typing a filename
00:0767 A2F7            	    83:   ldx #<typemsg		; Filename:_
00:0769 A007            	    84:   ldy #>typemsg
00:076B 20CDFF          	    85:   jsr w_acia_full
00:076E A200            	    86:   ldx #0
00:0770 A920            	    87:   lda #' '
00:0772 8504            	    88:   sta $04		; I frogor
00:0774 4CAB08          	    89:   jmp typeloop		; start loop
                        	    90: 
                        	    91: rxpol:
00:0777 AD0180          	    92:   lda $8001
00:077A 2908            	    93:   and #$08		; non-irq rx polling code
00:077C F0F9            	    94:   beq rxpol
00:077E 60              	    95:   rts
                        	    96: 
                        	    97: rxput:
00:077F AD0180          	    98:   lda $8001
00:0782 2908            	    99:   and #$08		; it loops
00:0784 F001            	   100:   beq typelop
00:0786 60              	   101:   rts
                        	   102: typelop:
00:0787 4CAB08          	   103:   jmp typeloop
                        	   104: 
                        	   105: lodmsg:
00:078A 0D              	   106:   .byte $0d, $0a, "Loading...", $0d, $0a, $00
00:078B 0A
00:078C 4C6F6164696E672E
00:0794 2E2E
00:0796 0D
00:0797 0A
00:0798 00
                        	   107: donemsg:
00:0799 0C              	   108:   .byte $0c, $00
00:079A 00
                        	   109: 
                        	   110: loadmsg:
00:079B 2020202020202020	   111:   .byte "          -------- SD Loader --------     ", $0d, $0a, $00
00:07A3 20202D2D2D2D2D2D
00:07AB 2D2D205344204C6F
00:07B3 61646572202D2D2D
00:07BB 2D2D2D2D2D202020
00:07C3 2020
00:07C5 0D
00:07C6 0A
00:07C7 00
                        	   112: lodmm:
00:07C8 2020202020202020	   113:   .byte "          Press (l) to list <FOLDER>      ", $0d, $0a, $0d, $0a, $00
00:07D0 2020507265737320
00:07D8 286C2920746F206C
00:07E0 697374203C464F4C
00:07E8 4445523E20202020
00:07F0 2020
00:07F2 0D
00:07F3 0A
00:07F4 0D
00:07F5 0A
00:07F6 00
                        	   114: 
                        	   115: typemsg:
00:07F7 5479706520746865	   116:   .byte "Type the filename in all caps.", $0d, $0a, "The filename is up to 8 characters long.", $0d, $0a, " Filename: "
00:07FF 2066696C656E616D
00:0807 6520696E20616C6C
00:080F 20636170732E
00:0815 0D
00:0816 0A
00:0817 5468652066696C65
00:081F 6E616D6520697320
00:0827 757020746F203820
00:082F 6368617261637465
00:0837 7273206C6F6E672E
00:083F 0D
00:0840 0A
00:0841 2046696C656E616D
00:0849 653A20
00:084C 02
00:084D 5F
00:084E 00
                        	   117: 
                        	   118: loadbuf:
00:084F 20              	   119:   .byte $20, $20, $20, $20, $20, $20, $20, $20
00:0850 20
00:0851 20
00:0852 20
00:0853 20
00:0854 20
00:0855 20
00:0856 20
00:0857 58504C          	   120:   .byte "XPL"
                        	   121: 
                        	   122: other:
00:085A 20C4FF          	   123:   jsr txpoll		; Write a letter of the filename currently being read
00:085D B148            	   124:   lda (zp_sd_address),y
00:085F 8D0080          	   125:   sta $8000
00:0862 C8              	   126:   iny
00:0863 60              	   127:   rts
                        	   128: 
                        	   129: list:			; list file dir
00:0864 20DCFF          	   130:   jsr fat32_readdirent	; files?
00:0867 B036            	   131:   bcs nofiles
00:0869 2940            	   132:   and #$40
00:086B F005            	   133:   beq arc
                        	   134: dir:
00:086D A944            	   135:   lda #'D'		; directorys show up as 
00:086F 4C7408          	   136:   jmp ebut		; D YOURFILENAME     D TEST      D FOLDER  ...Etc
                        	   137: arc:
00:0872 A946            	   138:   lda #'F'		; files show up as
                        	   139: ebut:			; F TEST.XPL         F MUSIC.XPL        F FILE.BIN  ...Etc
00:0874 20C7FF          	   140:   jsr print_chara	; f or d
00:0877 A920            	   141:   lda #$20		; space
00:0879 20C7FF          	   142:   jsr print_chara
                        	   143:   ; At this point, we know that there are no files, files, or a suddir
                        	   144:   ; Now for the name
00:087C A000            	   145:   ldy #0
                        	   146: nameloop:
00:087E C008            	   147:   cpy #8
00:0880 F006            	   148:   beq dot
00:0882 205A08          	   149:   jsr other
00:0885 4C7E08          	   150:   jmp nameloop
                        	   151: dot:
00:0888 A92E            	   152:   lda #'.'		; shows a file extention
00:088A 20C7FF          	   153:   jsr print_chara
                        	   154: lopii:
00:088D C00B            	   155:   cpy #11
00:088F F006            	   156:   beq endthat		; print 3-letter file extention
00:0891 205A08          	   157:   jsr other
00:0894 4C8D08          	   158:   jmp lopii
                        	   159: endthat:
00:0897 A909            	   160:   lda #$09 ; Tab
00:0899 20C7FF          	   161:   jsr print_chara	; tab
00:089C 4C6408          	   162:   jmp list ; go again	; next file if there are any left
                        	   163: nofiles:		; if not,
                        	   164: endlist:		; exit listing code
00:089F 20BBFF          	   165:   jsr crlf
00:08A2 4C6707          	   166:   jmp type
                        	   167: 
                        	   168: jumptolist:
00:08A5 20BBFF          	   169:   jsr crlf
00:08A8 4C6408          	   170:   jmp list
                        	   171: 
                        	   172: typeloop:		; loop to type filenames
                        	   173: 
00:08AB 207707          	   174:   jsr rxpol		; read a charactor
00:08AE AD0080          	   175:   lda $8000
00:08B1 8D0007          	   176:   sta charbuffer
                        	   177: 
00:08B4 C90D            	   178:   cmp #$0d		; enter?
00:08B6 F017            	   179:   beq exitloop		; if so, load
                        	   180: 			; if not...
00:08B8 AD0007          	   181:   lda charbuffer	
00:08BB C96C            	   182:   cmp #'l'		; check if it's "l"
00:08BD F0E6            	   183:   beq jumptolist	; if so, list files
                        	   184: 			; if not,
00:08BF AD0007          	   185:   lda charbuffer	; echo back
00:08C2 8D0080          	   186:   sta $8000
                        	   187: 
00:08C5 AD0007          	   188:   lda charbuffer	; and store it in the filename buffer
00:08C8 9D4F08          	   189:   sta loadbuf,x
00:08CB E8              	   190:   inx
00:08CC 4CAB08          	   191:   jmp typeloop
                        	   192: 
                        	   193: exitloop:
                        	   194: 
00:08CF 20BBFF          	   195:   jsr crlf
00:08D2 204307          	   196:   jsr rootsetup
                        	   197:   
00:08D5 A008            	   198:   ldy #>loadbuf
00:08D7 A24F            	   199:   ldx #<loadbuf
00:08D9 20DFFF          	   200:   jsr fat32_finddirent
00:08DC 9003            	   201:   bcc foundfile
                        	   202:   
                        	   203:   ; File not found
00:08DE 4C5207          	   204:   jmp error
                        	   205: 
                        	   206: foundfile
                        	   207:  
                        	   208:   ; Open file
00:08E1 20D9FF          	   209:   jsr fat32_opendirent
                        	   210: 
00:08E4 A28A            	   211:   ldx #<lodmsg
00:08E6 A007            	   212:   ldy #>lodmsg
00:08E8 20CDFF          	   213:   jsr w_acia_full
                        	   214: 
00:08EB A900            	   215:   lda #$00
00:08ED 855D            	   216:   sta fat32_address
00:08EF A90F            	   217:   lda #$0f
00:08F1 855E            	   218:   sta fat32_address+1
                        	   219: 
00:08F3 20E5FF          	   220:   jsr fat32_file_read  ; Yes. It is finally time to read the file.
                        	   221: 
                        	   222: end:
00:08F6 A299            	   223:   ldx #<donemsg
00:08F8 A007            	   224:   ldy #>donemsg
00:08FA 20CDFF          	   225:   jsr w_acia_full
00:08FD 20000F          	   226:   jsr $0f00
00:0900 60              	   227:   rts
00:0901 60              	   228:   rts
00:0902 60              	   229:   rts
00:0903 60              	   230:   rts
                        	   231: 
                        	   232: ;clear_sid
                        	   233: ;  ldx #$18
                        	   234: ;csid
                        	   235: ;  stz $b800,x
                        	   236: ;  dex
                        	   237: ;  bne csid
                        	   238: ;  rts
                        	   239: 
                        	   240:   .include "errors.s"

Source: "errors.s"
                        	     1: error_sound:
00:0904 A955            	     2:   lda #$55
00:0906 8502            	     3:   sta donefact
00:0908 6403            	     4:   stz irqcount	; reset irq count
                        	     5: 
                        	     6: runthesound:
00:090A 78              	     7:   sei		; turn off irqs
00:090B A928            	     8:   lda #<irq
00:090D 8DFE7F          	     9:   sta $7ffe
00:0910 A909            	    10:   lda #>irq
00:0912 8DFF7F          	    11:   sta $7fff	; store vectors
00:0915 A9C0            	    12:   lda #$c0
00:0917 8D0EB0          	    13:   sta $b00e	
00:091A A900            	    14:   lda #0 ; Song Number
00:091C 204F09          	    15:   jsr InitSid
00:091F A940            	    16:   lda #$40
00:0921 8D0DB0          	    17:   sta $b00d
00:0924 58              	    18:   cli
00:0925 4C2F12          	    19:   jmp startupsoundloop
                        	    20: 
                        	    21: irq:
00:0928 A940            	    22:   lda #$40
00:092A 8D0DB0          	    23:   sta $b00d
00:092D 203E09          	    24:   jsr putbut		; refresh timers
00:0930 E603            	    25:   inc irqcount		; a irq has occurred
00:0932 A503            	    26:   lda irqcount
00:0934 C940            	    27:   cmp #$40		; if $32 irqs (end of the error sound)
00:0936 D002            	    28:   bne continue24542 	; end the stream
00:0938 6402            	    29:   stz donefact		; its done, tell the loop
                        	    30: continue24542:
00:093A 200610          	    31:   jsr $1006
00:093D 40              	    32:   rti			; exit
                        	    33: 
                        	    34: putbut:
00:093E A29E            	    35:   ldx #$9e
00:0940 8E04B0          	    36:   stx $b004
00:0943 8E06B0          	    37:   stx $b006
00:0946 A20F            	    38:   ldx #$0f  ; 250Hz IRQ
00:0948 8E05B0          	    39:   stx $b005
00:094B 8E07B0          	    40:   stx $b007
00:094E 60              	    41:   rts
                        	    42: InitSid:
00:094F 203E09          	    43:   jsr putbut
00:0952 4C0311          	    44:   jmp $1103
                        	    45: 
                        	    46:   .org $1006
                        	    47: 
                        	    48:   .include "errorsound.s"

Source: "errorsound.s"
                        	     1: d400_sVoc1FreqLo = $b800
                        	     2: d404_sVoc1Control = $b804
                        	     3: d40b_sVoc2Control = $b80b
                        	     4: d412_sVoc3Control = $b812
                        	     5: 
                        	     6:   .org $1006
                        	     7: 
01:1006 A218            	     8: PlaySid             ldx #$18
01:1008 B504            	     9: L1008               lda $04,x
01:100A 9D00B8          	    10:                     sta d400_sVoc1FreqLo,x
01:100D CA              	    11:                     dex
01:100E 10F8            	    12:                     bpl L1008
01:1010 C602            	    13:                     dec $02
01:1012 3001            	    14:                     bmi L1015
01:1014 60              	    15:                     rts
                        	    16:                     
01:1015 8602            	    17: L1015               stx $02
01:1017 A503            	    18:                     lda $03
01:1019 D018            	    19:                     bne L1033
01:101B 201F00          	    20:                     jsr $001f
01:101E F018            	    21:                     beq L1038
01:1020 C9A0            	    22:                     cmp #$a0
01:1022 B00A            	    23:                     bcs L102e
01:1024 852A            	    24:                     sta $2a
01:1026 201F00          	    25:                     jsr $001f
01:1029 8529            	    26:                     sta $29
01:102B 4C7610          	    27:                     jmp L1076
                        	    28:                     
01:102E 38              	    29: L102e               sec
01:102F E99F            	    30:                     sbc #$9f
01:1031 8503            	    31:                     sta $03
01:1033 C603            	    32: L1033               dec $03
01:1035 4C7610          	    33:                     jmp L1076
                        	    34:                     
01:1038 201F00          	    35: L1038               jsr $001f
01:103B C9FD            	    36:                     cmp #$fd
01:103D F02C            	    37:                     beq L106b
01:103F C9FE            	    38:                     cmp #$fe
01:1041 F01D            	    39:                     beq L1060
01:1043 C9FF            	    40:                     cmp #$ff
01:1045 F003            	    41:                     beq L104a
01:1047 8502            	    42:                     sta $02
01:1049 60              	    43:                     rts
                        	    44:                     
01:104A A900            	    45: L104a               lda #$00
01:104C 8D04B8          	    46:                     sta d404_sVoc1Control
01:104F 8D0BB8          	    47:                     sta d40b_sVoc2Control
01:1052 8D12B8          	    48:                     sta d412_sVoc3Control
01:1055 A95E            	    49:                     lda #$5e
01:1057 8526            	    50:                     sta $26
01:1059 A910            	    51:                     lda #$10
01:105B 8527            	    52:                     sta $27
01:105D 60              	    53:                     rts
                        	    54:                     
01:105E FF              	    55:                       .byte $ff, $00 
01:105F 00
01:1060 A51D            	    56: L1060               lda $1d
01:1062 8526            	    57:                     sta $26
01:1064 A51E            	    58:                     lda $1e
01:1066 8527            	    59:                     sta $27
01:1068 4C1510          	    60:                     jmp L1015
                        	    61:                     
01:106B A526            	    62: L106b               lda $26
01:106D 851D            	    63:                     sta $1d
01:106F A527            	    64:                     lda $27
01:1071 851E            	    65:                     sta $1e
01:1073 4C1510          	    66:                     jmp L1015
                        	    67:                     
01:1076 20A110          	    68: L1076               jsr S10a1
01:1079 A9F8            	    69:                     lda #$f8
01:107B 18              	    70: L107b               clc
01:107C 6907            	    71:                     adc #$07
01:107E 48              	    72:                     pha
01:107F AA              	    73:                     tax
01:1080 201F00          	    74:                     jsr $001f
01:1083 4A              	    75:                     lsr a
01:1084 08              	    76:                     php
01:1085 E8              	    77: L1085               inx
01:1086 4A              	    78:                     lsr a
01:1087 B00A            	    79:                     bcs L1093
01:1089 D0FA            	    80:                     bne L1085
01:108B 28              	    81:                     plp
01:108C 68              	    82:                     pla
01:108D B0EC            	    83:                     bcs L107b
01:108F 20A110          	    84:                     jsr S10a1
01:1092 60              	    85:                     rts
                        	    86:                     
01:1093 48              	    87: L1093               pha
01:1094 BCFFFF          	    88:                     ldy $ffff,x
01:1097 201F00          	    89:                     jsr $001f
01:109A 990400          	    90:                     sta $0004,y
01:109D 68              	    91:                     pla
01:109E 4C8510          	    92:                     jmp L1085
                        	    93:                     
01:10A1 A426            	    94: S10a1               ldy $26
01:10A3 A629            	    95:                     ldx $29
01:10A5 8429            	    96:                     sty $29
01:10A7 8626            	    97:                     stx $26
01:10A9 A427            	    98:                     ldy $27
01:10AB A62A            	    99:                     ldx $2a
01:10AD 842A            	   100:                     sty $2a
01:10AF 8627            	   101:                     stx $27
01:10B1 60              	   102:                     rts
                        	   103:                     
01:10B2 8426            	   104: L10b2               sty $26
01:10B4 8627            	   105:                     stx $27
01:10B6 A206            	   106:                     ldx #$06
01:10B8 BDC610          	   107: L10b8               lda $10c6,x
01:10BB 951F            	   108:                     sta $1f,x
01:10BD CA              	   109:                     dex
01:10BE 10F8            	   110:                     bpl L10b8
01:10C0 A960            	   111:                     lda #$60
01:10C2 8528            	   112:                     sta $28
01:10C4 D00A            	   113:                     bne L10d0
01:10C6 E626            	   114:                     inc $26
01:10C8 D002            	   115:                     bne L10cc
01:10CA E627            	   116:                     inc $27
01:10CC ADFFFF          	   117: L10cc               lda $ffff
01:10CF 60              	   118:                     rts
                        	   119:                     
01:10D0 201F00          	   120: L10d0               jsr $001f
01:10D3 8D04DC          	   121:                     sta $dc04
01:10D6 201F00          	   122:                     jsr $001f
01:10D9 8D05DC          	   123:                     sta $dc05
01:10DC 201F00          	   124:                     jsr $001f
01:10DF 8529            	   125:                     sta $29
01:10E1 201F00          	   126:                     jsr $001f
01:10E4 852A            	   127:                     sta $2a
01:10E6 E626            	   128:                     inc $26
01:10E8 D002            	   129:                     bne L10ec
01:10EA E627            	   130:                     inc $27
01:10EC A526            	   131: L10ec               lda $26
01:10EE 8D9510          	   132:                     sta $1095
01:10F1 A527            	   133:                     lda $27
01:10F3 8D9610          	   134:                     sta $1096
01:10F6 A21C            	   135:                     ldx #$1c
01:10F8 A900            	   136:                     lda #$00
01:10FA 9502            	   137: L10fa               sta $02,x
01:10FC CA              	   138:                     dex
01:10FD 10FB            	   139:                     bpl L10fa
01:10FF 20A110          	   140:                     jsr S10a1
01:1102 60              	   141:                     rts
                        	   142:                     
01:1103 A009            	   143: InitSid2            ldy #$09
01:1105 A211            	   144:                     ldx #$11
01:1107 4CB210          	   145:                     jmp L10b2
                        	   146: 
01:110A F00F77110100120D	   147:   .binary "errorsound.bin"
01:1112 04050B1408090706
01:111A 0C030E0F10111713
01:1122 0A1516180200B600
01:112A 6EB60116FF3E0320
01:1132 F0410820FFF000FD
01:113A 00000007FF0000FD
01:1142 070000071E00000F
01:114A FD06166E063E03FF
01:1152 166E080008000863
01:115A 0000004000FF3E03
01:1162 20F04108209FF000
01:116A FD0007BF0000FD07
01:1172 00070E00000F112D
01:117A 00FD114AA0114AA0
01:1182 114AA0114AA0114A
01:118A A0114AA0114AA011
01:1192 4AA0114AA0114AA0
01:119A 114AA0114AA0114A
01:11A2 A0114AA0114AA011
01:11AA 4AA0114AA0114AA0
01:11B2 114AA0114AA0114A
01:11BA A0114AA0114AA011
01:11C2 4AA0114AA0114AA0
01:11CA 114AA0114AA0114A
01:11D2 A0114AA0114AA011
01:11DA 4AA0114AA0114AA0
01:11E2 114AA0114AA0114A
01:11EA A0114AA0114AA011
01:11F2 4AA0114AA0114AA0
01:11FA 114AA0114AA0114A
01:1202 A0114AA0114AA011
01:120A 4AA0114AA0114AA0
01:1212 114AA0114AA0114A
01:121A A0114AA0114AA011
01:1222 4AA0114AA0114AA0
01:122A 114AA200FE
                        	   148: ;          ^^^^^^^^^^^
                        	   149: ; put your data file here.
                        	   150: 
                        	   151: 

Source: "errors.s"
                        	    49: 
                        	    50: startupsoundloop:	
01:122F A502            	    51:   lda donefact		; loop only if the sound is not done
01:1231 D0FC            	    52:   bne startupsoundloop
01:1233 9C0EB0          	    53:   stz $b00e		; if done disable irqs
01:1236 9C0DB0          	    54:   stz $b00d
01:1239 78              	    55:   sei
01:123A A5C0            	    56:   lda $c0		; clear irq vectors
01:123C 8DFF7F          	    57:   sta $7fff
01:123F 9CFE7F          	    58:   stz $7ffe
01:1242 204912          	    59:   jsr clear_sid
01:1245 60              	    60:   rts
01:1246 60              	    61:   rts
01:1247 60              	    62:   rts
01:1248 60              	    63:   rts
                        	    64: 
                        	    65: clear_sid
01:1249 A217            	    66:   ldx #$17 ; 17 cuz no pop
                        	    67: csid
01:124B 9E00B8          	    68:   stz $b800,x
01:124E CA              	    69:   dex
01:124F D0FA            	    70:   bne csid
01:1251 60              	    71:   rts
                        	    72: 
                        	    73: 

Source: "sd_handeler.s"
                        	   241: 


Symbols by name:
DDRA                             E:B003
DDRB                             E:B002
InitSid                          A:094F
InitSid2                         A:1103
L1008                            A:1008
L1015                            A:1015
L102e                            A:102E
L1033                            A:1033
L1038                            A:1038
L104a                            A:104A
L1060                            A:1060
L106b                            A:106B
L1076                            A:1076
L107b                            A:107B
L1085                            A:1085
L1093                            A:1093
L10b2                            A:10B2
L10b8                            A:10B8
L10cc                            A:10CC
L10d0                            A:10D0
L10ec                            A:10EC
L10fa                            A:10FA
LCD_E                            E:0080
LCD_RS                           E:0020
LCD_RW                           E:0040
PORTA_OUTPUTPINS                 E:00FC
PlaySid                          A:1006
S10a1                            A:10A1
SD_CS                            E:0010
SD_MOSI                          E:0004
SD_SCK                           E:0008
arc                              A:0872
charbuffer                       E:0700
clear_sid                        A:1249
cleardisplay                     E:FFBE
continue24542                    A:093A
crlf                             E:FFBB
csid                             A:124B
d400_sVoc1FreqLo                 E:B800
d404_sVoc1Control                E:B804
d40b_sVoc2Control                E:B80B
d412_sVoc3Control                E:B812
dir                              A:086D
dirname                          A:070F
donefact                         E:0002
donemsg                          A:0799
dot                              A:0888
ebut                             A:0874
end                              A:08F6
endlist                          A:089F
endthat                          A:0897
error                            A:0752
error_sound                      A:0904
errormsg                         A:071B
exitloop                         A:08CF
fat32_address                    E:005D
fat32_bytesremaining             E:0063
fat32_file_read                  E:FFE5
fat32_finddirent                 E:FFDF
fat32_opendirent                 E:FFD9
fat32_openroot                   E:FFD6
fat32_readdirent                 E:FFDC
fat32_workspace                  E:0500
findrau                          A:0740
foundfile                        A:08E1
foundsubdir                      A:0760
irq                              A:0928
irqcount                         E:0003
jumptoit                         A:0701
jumptolist                       A:08A5
list                             A:0864
loadbuf                          A:084F
loadmsg                          A:079B
lodmm                            A:07C8
lodmsg                           A:078A
lopii                            A:088D
nameloop                         A:087E
nofiles                          A:089F
other                            A:085A
print_chara                      E:FFC7
putbut                           A:093E
rootsetup                        A:0743
runthesound                      A:090A
rxpol                            A:0777
rxput                            A:077F
sdstart                          A:0726
seed                             E:0001
startupsoundloop                 A:122F
txpoll                           E:FFC4
type                             A:0767
typeloop                         A:08AB
typelop                          A:0787
typemsg                          A:07F7
via_init                         A:0704
w_acia_full                      E:FFCD
zp_fat32_variables               E:004F
zp_sd_address                    E:0048

Symbols by value:
0001 seed
0002 donefact
0003 irqcount
0004 SD_MOSI
0008 SD_SCK
0010 SD_CS
0020 LCD_RS
0040 LCD_RW
0048 zp_sd_address
004F zp_fat32_variables
005D fat32_address
0063 fat32_bytesremaining
0080 LCD_E
00FC PORTA_OUTPUTPINS
0500 fat32_workspace
0700 charbuffer
0701 jumptoit
0704 via_init
070F dirname
071B errormsg
0726 sdstart
0740 findrau
0743 rootsetup
0752 error
0760 foundsubdir
0767 type
0777 rxpol
077F rxput
0787 typelop
078A lodmsg
0799 donemsg
079B loadmsg
07C8 lodmm
07F7 typemsg
084F loadbuf
085A other
0864 list
086D dir
0872 arc
0874 ebut
087E nameloop
0888 dot
088D lopii
0897 endthat
089F endlist
089F nofiles
08A5 jumptolist
08AB typeloop
08CF exitloop
08E1 foundfile
08F6 end
0904 error_sound
090A runthesound
0928 irq
093A continue24542
093E putbut
094F InitSid
1006 PlaySid
1008 L1008
1015 L1015
102E L102e
1033 L1033
1038 L1038
104A L104a
1060 L1060
106B L106b
1076 L1076
107B L107b
1085 L1085
1093 L1093
10A1 S10a1
10B2 L10b2
10B8 L10b8
10CC L10cc
10D0 L10d0
10EC L10ec
10FA L10fa
1103 InitSid2
122F startupsoundloop
1249 clear_sid
124B csid
B002 DDRB
B003 DDRA
B800 d400_sVoc1FreqLo
B804 d404_sVoc1Control
B80B d40b_sVoc2Control
B812 d412_sVoc3Control
FFBB crlf
FFBE cleardisplay
FFC4 txpoll
FFC7 print_chara
FFCD w_acia_full
FFD6 fat32_openroot
FFD9 fat32_opendirent
FFDC fat32_readdirent
FFDF fat32_finddirent
FFE5 fat32_file_read
