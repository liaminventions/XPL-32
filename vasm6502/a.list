Sections:
00: "segf00" (F00-1601)


Source: "pong.s"
                        	     1: ; [PONG]
                        	     2: 
                        	     3: ; TMS9918A
                        	     4: VDP_VRAM               = $8800		; address to set MODE low for a video ram operation on the TMS9918A Video Display Proce
                        	     5: VDP_REG                = $8801		; address to set MODE high for a video register operation on the TMS9918A Video Display
                        	     6: VDP_WRITE_VRAM_BIT     = %01000000  	; pattern of second vram address write: 01AAAAAA
                        	     7: VDP_REGISTER_BITS      = %10000000  	; pattern of second register write: 10000RRR
                        	     8: 
                        	     9: VDP_RAM_START = $0000
                        	    10: VDP_PATTERN_TABLE_BASE = $0800
                        	    11: VDP_SPRITE_PATTERN_TABLE_BASE = $0000
                        	    12: VDP_COLOR_TABLE_BASE = $2000
                        	    13: VDP_NAME_TABLE_BASE = $0400
                        	    14: VDP_SPR_ATT_TABLE_BASE = $0700
                        	    15: 
                        	    16: TEXT_LOC		= VDP_NAME_TABLE_BASE+15
                        	    17: P2_PADDLE_SPR		= VDP_SPR_ATT_TABLE_BASE+4 
                        	    18: P1_PADDLE_SPR		= VDP_SPR_ATT_TABLE_BASE+16
                        	    19: 
                        	    20: ; zero page addresses
                        	    21: VDP_PATTERN_INIT    	= $30
                        	    22: VDP_PATTERN_INIT_HI 	= $31
                        	    23: 
                        	    24: VDP_NAME_POINTER        = $32
                        	    25: 
                        	    26: fc = $34
                        	    27: 
                        	    28: p1dex = $35
                        	    29: p2dex = $37
                        	    30: 
                        	    31: P1_PAD = $39
                        	    32: P2_PAD = $3a
                        	    33: 
                        	    34: balldx = $3b
                        	    35: balldy = $3c
                        	    36: 
                        	    37: ; hitboxes
                        	    38: p1_hitbox_x   = $e1
                        	    39: p2_hitbox_x   = $10
                        	    40: 
                        	    41: screen_bottom = $b0
                        	    42: 
                        	    43: P1_PADDLE = $b819
                        	    44: P2_PADDLE = $b81a
                        	    45: 
                        	    46:   .org $0f00
                        	    47:   .macro vdp_write_vram			; macro to store address in vdp_reg for write
                        	    48:   pha
                        	    49:   lda #<(\1)
                        	    50:   sta VDP_REG
                        	    51:   lda #(VDP_WRITE_VRAM_BIT | >\1)
                        	    52:   sta VDP_REG
                        	    53:   pla
                        	    54:   .endm
                        	    55: ;;;;;;;;;;;;;;;;;;; reset ;;;;;;;;;;;;;;;;;;;
                        	    56: 
                        	    57: reset:
                        	    58: 
                        	    59: ;;;;;;;;;;;;;;;;;;; setup subroutines ;;;;;;;;;;;;;;;;;;;;;;;
                        	    60: 
00:0F00 78              	    61:   sei
00:0F01 A901            	    62:   lda #1
00:0F03 853B            	    63:   sta balldx
00:0F05 853C            	    64:   sta balldy
                        	    65:   ; store irq location
                        	    66:   ;lda #<vdp_irq
                        	    67:   ;sta $7ffe
                        	    68:   ;lda #>vdp_irq
                        	    69:   ;sta $7fff
00:0F07 9C0EB0          	    70:   stz $b00e     ; argguahububefhia! that darn via! short circut!!1!! this is d fix
                        	    71: 
00:0F0A 206010          	    72:   jsr vdp_set_registers
00:0F0D 20E90F          	    73:   jsr vdp_setup
00:0F10 A9CE            	    74:   lda #$ce	; activate display
00:0F12 8D0CB0          	    75:   sta $b00c
00:0F15 8D00B0          	    76:   sta $b000
                        	    77:   ;lda #0
                        	    78:   ;jsr InitSid
00:0F18 A910            	    79:   lda #16
00:0F1A 8534            	    80:   sta fc
00:0F1C A904            	    81:   lda #4
00:0F1E 8535            	    82:   sta p1dex
00:0F20 8537            	    83:   sta p2dex
                        	    84:   ;cli
                        	    85: holding:
                        	    86:   ;;jsr changecolor
00:0F22 AD0188          	    87:   lda VDP_REG
00:0F25 2980            	    88:   and #$80
00:0F27 F0F9            	    89:   beq holding
                        	    90: 
                        	    91: ;  lda #$0e
                        	    92: ;  sta VDP_REG
                        	    93: ;  lda #$87
                        	    94: ;  sta VDP_REG
                        	    95: ;  jsr PlaySid
                        	    96: ;  lda #$00
                        	    97: ;  sta VDP_REG
                        	    98: ;  lda #$87
                        	    99: ;  sta VDP_REG
                        	   100:   ;jmp holding
                        	   101: ;vdp_irq:
                        	   102: 
                        	   103:   ; Update p1 paddle position
00:0F29 20320F          	   104:   jsr update_p1pad
                        	   105: 
                        	   106:   ; Update ball
00:0F2C 204F0F          	   107:   jsr move_ball
                        	   108: 
                        	   109:   ;and #%00100000
                        	   110:   ;bne collision
                        	   111:   ;rti
                        	   112: ;collision:
                        	   113:   ;inc fc
                        	   114:   ;beq col
                        	   115:   ; do nothing yet
                        	   116:   ;rti
                        	   117: ;col:
                        	   118:   ;lda #16
                        	   119:   ;sta fc
                        	   120:   ;jsr changecolor
                        	   121:   ;rti
                        	   122: 
00:0F2F 4C220F          	   123:   jmp holding
                        	   124: 
                        	   125: update_p1pad:
00:0F32 AD19B8          	   126:   lda P1_PADDLE
00:0F35 0A              	   127:   asl
00:0F36 0A              	   128:   asl
00:0F37 8539            	   129:   sta P1_PAD
00:0F39 A200            	   130:   ldx #0
                        	   131: p1cp: 
00:0F3B A539            	   132:   lda P1_PAD
00:0F3D 9D5310          	   133:   sta vdp_spr+16,x
00:0F40 6910            	   134:   adc #$10
00:0F42 8539            	   135:   sta P1_PAD
00:0F44 E8              	   136:   inx
00:0F45 E8              	   137:   inx
00:0F46 E8              	   138:   inx
00:0F47 E8              	   139:   inx
00:0F48 E01C            	   140:   cpx #28
00:0F4A D0EF            	   141:   bne p1cp
00:0F4C 4C2510          	   142:   jmp vdp_put_spr
                        	   143: 
                        	   144: ; one frame ball move
                        	   145: ; if balld(N) is zero, it will decrement
                        	   146: ; y,x btw
                        	   147: move_ball:
00:0F4F A53B            	   148:   lda balldx
00:0F51 D006            	   149:   bne .bx
00:0F53 CE4410          	   150:   dec vdp_spr+1
00:0F56 4C5C0F          	   151:   jmp .dy
                        	   152: .bx
00:0F59 EE4410          	   153:   inc vdp_spr+1
                        	   154: .dy
00:0F5C A53C            	   155:   lda balldy
00:0F5E D006            	   156:   bne .by
00:0F60 CE4310          	   157:   dec vdp_spr
00:0F63 4C690F          	   158:   jmp .nx
                        	   159: .by
00:0F66 EE4310          	   160:   inc vdp_spr
                        	   161: .nx
                        	   162:   ; did we hit the bottom of the screen?
00:0F69 AD4310          	   163:   lda vdp_spr ; y
00:0F6C C9B0            	   164:   cmp #screen_bottom
00:0F6E D006            	   165:   bne .ny1
00:0F70 20DB0F          	   166:   jsr .hity 
00:0F73 4C7E0F          	   167:   jmp .ny2
                        	   168: .ny1
                        	   169:   ; how about the top?
00:0F76 AD4310          	   170:   lda vdp_spr ; if y = 0: hity
00:0F79 D003            	   171:   bne .ny2
00:0F7B 20DB0F          	   172:   jsr .hity
                        	   173: .ny2
                        	   174:   ; alright, have we hit p2? (left)
00:0F7E AD4410          	   175:   lda vdp_spr+1
00:0F81 C910            	   176:   cmp #p2_hitbox_x ; p2 paddle x hitbox
00:0F83 D01C            	   177:   bne .nx1
00:0F85 AD4710          	   178:   lda vdp_spr+4
00:0F88 18              	   179:   clc
00:0F89 6908            	   180:   adc #8 ; p2 paddle y top hitbox ( top block + 8)
00:0F8B CD4310          	   181:   cmp vdp_spr 
00:0F8E 9011            	   182:   bcc .nx1 ; branch if >
00:0F90 AD4F10          	   183:   lda vdp_spr+12
00:0F93 38              	   184:   sec
00:0F94 E909            	   185:   sbc #9
00:0F96 CD4310          	   186:   cmp vdp_spr ; p2 paddle y bot hitbox ( bot block - 9)
00:0F99 B006            	   187:   bcs .nx1 ; branch if <
00:0F9B 20E20F          	   188:   jsr .hitx
00:0F9E 4CD20F          	   189:   jmp .dn
                        	   190: .nx1
                        	   191:   ; or did p2 lose?
00:0FA1 AD4410          	   192:   lda vdp_spr+1
00:0FA4 C900            	   193:   cmp #0
00:0FA6 F02B            	   194:   beq .p1win
                        	   195:   ; how about if we hit p1?  
                        	   196: .p1s
00:0FA8 AD4410          	   197:   lda vdp_spr+1
00:0FAB C9E1            	   198:   cmp #p1_hitbox_x ; p1 paddle x hitbox
00:0FAD D01C            	   199:   bne .ex1
00:0FAF AD5310          	   200:   lda vdp_spr+16
00:0FB2 18              	   201:   clc
00:0FB3 6908            	   202:   adc #8 ; p1 paddle y top hitbox ( top block + 8)
00:0FB5 CD4310          	   203:   cmp vdp_spr 
00:0FB8 9011            	   204:   bcc .ex1 ; branch if >
00:0FBA AD5B10          	   205:   lda vdp_spr+24
00:0FBD 38              	   206:   sec
00:0FBE E909            	   207:   sbc #9
00:0FC0 CD4310          	   208:   cmp vdp_spr ; p1 paddle y bot hitbox ( bot block - 9)
00:0FC3 B006            	   209:   bcs .ex1 ; branch if <
00:0FC5 20E20F          	   210:   jsr .hitx
00:0FC8 4CD20F          	   211:   jmp .dn
                        	   212: .ex1
                        	   213:   ; or did p1 lose?
00:0FCB AD4410          	   214:   lda vdp_spr+1
00:0FCE C9F1            	   215:   cmp #$f1
00:0FD0 F005            	   216:   beq .p2win
                        	   217: .dn
00:0FD2 60              	   218:   rts
                        	   219: .p1win
                        	   220:   ; idk what to do here yet... for now just reverse x
00:0FD3 20E20F          	   221:   jsr .hitx
00:0FD6 60              	   222:   rts
                        	   223: .p2win
00:0FD7 20E20F          	   224:   jsr .hitx
00:0FDA 60              	   225:   rts
                        	   226: .hity
                        	   227: ; reverse y direction
00:0FDB A53C            	   228:   lda balldy
00:0FDD 49FF            	   229:   eor #$ff
00:0FDF 853C            	   230:   sta balldy
00:0FE1 60              	   231:   rts
                        	   232: .hitx
                        	   233: ; reverse x direction
00:0FE2 A53B            	   234:   lda balldx
00:0FE4 49FF            	   235:   eor #$ff
00:0FE6 853B            	   236:   sta balldx
00:0FE8 60              	   237:   rts
                        	   238: 
                        	   239: ;;;;;;;;;;;;;;;;;;; vdp_setup subroutines ;;;;;;;;;;;;;;;;;;;;
                        	   240: 
                        	   241: vdp_setup:
00:0FE9 207810          	   242:   jsr vdp_zapram
00:0FEC 20B510          	   243:   jsr vdp_initialize_name_table
00:0FEF 202D11          	   244:   jsr vdp_initialize_color_table
00:0FF2 20DC10          	   245:   jsr vdp_write_name_table
00:0FF5 20FB10          	   246:   jsr vdp_initialize_pattern_table
00:0FF8 200210          	   247:   jsr vdp_copysprites
00:0FFB 202510          	   248:   jsr vdp_put_spr
00:0FFE 204A11          	   249:   jsr vdp_enable_display
00:1001 60              	   250:   rts
                        	   251: 
                        	   252: vdp_copysprites:
00:1002 48              	   253:   pha
00:1003 DA              	   254:   phx
                        	   255:   vdp_write_vram VDP_SPRITE_PATTERN_TABLE_BASE
00:1004 48              	     1M   pha
00:1005 A900            	     2M   lda #<(VDP_SPRITE_PATTERN_TABLE_BASE)
00:1007 8D0188          	     3M   sta VDP_REG
00:100A A940            	     4M   lda #(VDP_WRITE_VRAM_BIT | >VDP_SPRITE_PATTERN_TABLE_BASE)
00:100C 8D0188          	     5M   sta VDP_REG
00:100F 68              	     6M   pla
00:1010 A200            	   256:   ldx #0
                        	   257: .loop:
00:1012 BD6811          	   258:   lda vdp_block,x
00:1015 8D0088          	   259:   sta VDP_VRAM
00:1018 E8              	   260:   inx
00:1019 E040            	   261:   cpx #64 ; also copy the ball sprite
00:101B D0F5            	   262:   bne .loop
00:101D A9D0            	   263:   lda #$d0
00:101F 8D0088          	   264:   sta VDP_VRAM
00:1022 FA              	   265:   plx
00:1023 68              	   266:   pla
00:1024 60              	   267:   rts
                        	   268: 
                        	   269: vdp_put_spr:
00:1025 48              	   270:   pha
00:1026 DA              	   271:   phx
                        	   272:   vdp_write_vram VDP_SPR_ATT_TABLE_BASE 
00:1027 48              	     1M   pha
00:1028 A900            	     2M   lda #<(VDP_SPR_ATT_TABLE_BASE )
00:102A 8D0188          	     3M   sta VDP_REG
00:102D A947            	     4M   lda #(VDP_WRITE_VRAM_BIT | >VDP_SPR_ATT_TABLE_BASE )
00:102F 8D0188          	     5M   sta VDP_REG
00:1032 68              	     6M   pla
00:1033 A200            	   273:   ldx #0
                        	   274: .loop
00:1035 BD4310          	   275:   lda vdp_spr,x
00:1038 8D0088          	   276:   sta VDP_VRAM
00:103B E8              	   277:   inx
00:103C E01D            	   278:   cpx #$1d
00:103E D0F5            	   279:   bne .loop
00:1040 FA              	   280:   plx 
00:1041 68              	   281:   pla
00:1042 60              	   282:   rts
                        	   283: 
                        	   284: vdp_spr:
                        	   285:   ; ball
                        	   286:   ; Y=0x5f, X=0x77, NAME=4, COL=White
00:1043 5F              	   287:   .byte $5f,$77,$04,$0f
00:1044 77
00:1045 04
00:1046 0F
                        	   288:   ; left paddle
00:1047 6F              	   289:   .byte $6f,$00,$00,$0f
00:1048 00
00:1049 00
00:104A 0F
00:104B 5F              	   290:   .byte $5f,$00,$00,$0f
00:104C 00
00:104D 00
00:104E 0F
00:104F 4F              	   291:   .byte $4f,$00,$00,$0f
00:1050 00
00:1051 00
00:1052 0F
                        	   292:   ; right paddle
00:1053 6F              	   293:   .byte $6f,$f1,$00,$0f
00:1054 F1
00:1055 00
00:1056 0F
00:1057 5F              	   294:   .byte $5f,$f1,$00,$0f
00:1058 F1
00:1059 00
00:105A 0F
00:105B 4F              	   295:   .byte $4f,$f1,$00,$0f
00:105C F1
00:105D 00
00:105E 0F
                        	   296:   ; end (Y=0xD0 means last entry)
00:105F D0              	   297:   .byte $d0
                        	   298: 
                        	   299: ;;;;;;;;;;;;;;;;;;; vdp_set_registers ;;;;;;;;;;;;;;;;;;;;;;;;
                        	   300: 
                        	   301: vdp_set_registers:
00:1060 48              	   302:   pha
00:1061 DA              	   303:   phx
00:1062 A200            	   304:   ldx #0
                        	   305: .loop:
00:1064 BD6011          	   306:   lda vdp_register_inits,x
00:1067 8D0188          	   307:   sta VDP_REG
00:106A 8A              	   308:   txa
00:106B 0980            	   309:   ora #VDP_REGISTER_BITS 				; combine the register number with the second write pattern
00:106D 8D0188          	   310:   sta VDP_REG
00:1070 E8              	   311:   inx
00:1071 E008            	   312:   cpx #8
00:1073 D0EF            	   313:   bne .loop
00:1075 FA              	   314:   plx
00:1076 68              	   315:   pla
00:1077 60              	   316:   rts
                        	   317: 
                        	   318: vdp_zapram:
00:1078 48              	   319:   pha
00:1079 5A              	   320:   phy
00:107A DA              	   321:   phx
00:107B A040            	   322:   ldy #$40
00:107D A900            	   323:   lda #0
00:107F 8D0188          	   324:   sta VDP_REG
00:1082 8C0188          	   325:   sty VDP_REG
00:1085 A2C0            	   326:   ldx #$c0
                        	   327: nexf:
00:1087 A000            	   328:   ldy #0
                        	   329: zapf:
00:1089 8D0088          	   330:   sta VDP_VRAM
00:108C C8              	   331:   iny
00:108D D0FA            	   332:   bne zapf
00:108F E8              	   333:   inx
00:1090 D0F5            	   334:   bne nexf
00:1092 FA              	   335:   plx
00:1093 7A              	   336:   ply
00:1094 68              	   337:   pla
00:1095 60              	   338:   rts
                        	   339: 
                        	   340: wait:
00:1096 DA              	   341: 	phx
00:1097 5A              	   342: 	phy
00:1098 A8              	   343:         tay          ; load secondary loop cycle count (A reg)
00:1099 A2FF            	   344:         ldx  #$ff
00:109B CA              	   345: delay   dex          ; (2 cycles)
00:109C D0FD            	   346:         bne  delay   ; (3 cycles in loop, 2 cycles at end)
00:109E 88              	   347:         dey          ; (2 cycles)
00:109F D0FA            	   348:         bne  delay   ; (3 cycles in loop, 2 cycles at end)
00:10A1 7A              	   349: 	ply
00:10A2 FA              	   350: 	plx
00:10A3 60              	   351: 	rts
                        	   352: 
                        	   353: changecolor:
00:10A4 48              	   354:   pha
00:10A5 EE6711          	   355:   inc vdp_register_7
00:10A8 AD6711          	   356:   lda vdp_register_7
00:10AB 8D0188          	   357:   sta VDP_REG
00:10AE A987            	   358:   lda #$87
00:10B0 8D0188          	   359:   sta VDP_REG
00:10B3 68              	   360:   pla
00:10B4 60              	   361:   rts
                        	   362: 
                        	   363: ;;;;;;;;;;;;;;;;;;; vdp_initialize_name_table ;;;;;;;;;;;;;;;;;;;
                        	   364: 
                        	   365: vdp_initialize_name_table:
00:10B5 48              	   366:   pha
00:10B6 DA              	   367:   phx
00:10B7 5A              	   368:   phy
                        	   369:   vdp_write_vram VDP_NAME_TABLE_BASE
00:10B8 48              	     1M   pha
00:10B9 A900            	     2M   lda #<(VDP_NAME_TABLE_BASE)
00:10BB 8D0188          	     3M   sta VDP_REG
00:10BE A944            	     4M   lda #(VDP_WRITE_VRAM_BIT | >VDP_NAME_TABLE_BASE)
00:10C0 8D0188          	     5M   sta VDP_REG
00:10C3 68              	     6M   pla
00:10C4 6432            	   370:   stz VDP_NAME_POINTER
00:10C6 A920            	   371:   lda #$20
00:10C8 A000            	   372:   ldy #0
                        	   373: vdp_name_table_loop:
                        	   374:   ;sty VDP_VRAM
00:10CA 8D0088          	   375:   sta VDP_VRAM
00:10CD C8              	   376:   iny
00:10CE D0FA            	   377:   bne vdp_name_table_loop
                        	   378: 
00:10D0 E632            	   379:   inc VDP_NAME_POINTER
00:10D2 A632            	   380:   ldx VDP_NAME_POINTER
00:10D4 E003            	   381:   cpx #3
00:10D6 D0F2            	   382:   bne vdp_name_table_loop
                        	   383:   
00:10D8 7A              	   384:   ply
00:10D9 FA              	   385:   plx
00:10DA 68              	   386:   pla
00:10DB 60              	   387:   rts
                        	   388: 
                        	   389: vdp_write_name_table:
00:10DC 48              	   390:   pha
00:10DD DA              	   391:   phx
                        	   392:   vdp_write_vram TEXT_LOC
00:10DE 48              	     1M   pha
00:10DF A90F            	     2M   lda #<(TEXT_LOC)
00:10E1 8D0188          	     3M   sta VDP_REG
00:10E4 A944            	     4M   lda #(VDP_WRITE_VRAM_BIT | >TEXT_LOC)
00:10E6 8D0188          	     5M   sta VDP_REG
00:10E9 68              	     6M   pla
00:10EA A200            	   393:   ldx #0
                        	   394: .loop:
00:10EC BD5711          	   395:   lda text_vdp,x
00:10EF F007            	   396:   beq end_write
00:10F1 8D0088          	   397:   sta VDP_VRAM
00:10F4 E8              	   398:   inx
00:10F5 4CEC10          	   399:   jmp .loop
                        	   400: end_write:  
                        	   401: 
                        	   402:   ; make dotted vertical line
                        	   403: ;  lda #<TEXT_LOC
                        	   404: ;  sta $00
                        	   405: ;  lda #>TEXT_LOC
                        	   406: ;  sta $01
                        	   407: ;.lp
                        	   408: ;  lda #$01 ; vertical line
                        	   409: ;  sta VDP_VRAM
                        	   410: ;  lda $00
                        	   411: ;  adc #64 ; 64 cuz dotted
                        	   412: ;  sta $00
                        	   413: ;  sta VDP_REG ; low
                        	   414: ;  adc #0 ; carry
                        	   415: ;  sta $01
                        	   416: ;  cmp #$03 ; done?
                        	   417: ;  beq .done
                        	   418: ;  ora #VDP_WRITE_VRAM_BIT ; send vram
                        	   419: ;  sta VDP_REG
                        	   420: ;  jmp .lp
                        	   421: ;.done
00:10F8 FA              	   422:   plx
00:10F9 68              	   423:   pla
00:10FA 60              	   424:   rts 
                        	   425: 
                        	   426: ;  .include "wavid.s"
                        	   427: 
                        	   428: ;;;;;;;;;;;;;;;;;;; vdp_initialize_pattern_table ;;;;;;;;;;;;;;;;;;;
                        	   429: 
                        	   430: vdp_initialize_pattern_table:
00:10FB 48              	   431:   pha
00:10FC DA              	   432:   phx
                        	   433:   vdp_write_vram VDP_PATTERN_TABLE_BASE
00:10FD 48              	     1M   pha
00:10FE A900            	     2M   lda #<(VDP_PATTERN_TABLE_BASE)
00:1100 8D0188          	     3M   sta VDP_REG
00:1103 A948            	     4M   lda #(VDP_WRITE_VRAM_BIT | >VDP_PATTERN_TABLE_BASE)
00:1105 8D0188          	     5M   sta VDP_REG
00:1108 68              	     6M   pla
00:1109 A900            	   434:   lda #<vdp_pattern                         ; load the start address of the patterns to zero page
00:110B 8530            	   435:   sta VDP_PATTERN_INIT
00:110D A912            	   436:   lda #>vdp_pattern
00:110F 8531            	   437:   sta VDP_PATTERN_INIT_HI
                        	   438: vdp_pattern_table_loop:
00:1111 B230            	   439:   lda (VDP_PATTERN_INIT)                  ; load A with the value at VDP_PATTERN_INIT 
00:1113 8D0088          	   440:   sta VDP_VRAM                            ; and store it to VRAM
00:1116 E630            	   441:   inc VDP_PATTERN_INIT
00:1118 A530            	   442:   lda VDP_PATTERN_INIT
00:111A D002            	   443:   bne wopeee
00:111C E631            	   444:   inc VDP_PATTERN_INIT_HI
                        	   445: wopeee:
00:111E A530            	   446:   lda VDP_PATTERN_INIT
00:1120 C900            	   447:   cmp #<vdp_pattern_end
00:1122 D0ED            	   448:   bne vdp_pattern_table_loop
00:1124 A531            	   449:   lda VDP_PATTERN_INIT_HI
00:1126 C916            	   450:   cmp #>vdp_pattern_end
00:1128 D0E7            	   451:   bne vdp_pattern_table_loop
00:112A FA              	   452:   plx
00:112B 68              	   453:   pla
00:112C 60              	   454:   rts
                        	   455: 
                        	   456: ;;;;;;;;;;;;;;;;;;; vdp_initialize_color_table ;;;;;;;;;;;;;;;;;;;
                        	   457: 
                        	   458: vdp_initialize_color_table:
                        	   459: ;  pha
                        	   460: ;  phx
                        	   461: ;  vdp_write_vram VDP_COLOR_TABLE_BASE
                        	   462: ;  lda #<vdp_color                         ; load the start address of the patterns to zero page
                        	   463: ;  sta VDP_PATTERN_INIT
                        	   464: ;  lda #>vdp_color
                        	   465: ;  sta VDP_PATTERN_INIT_HI
                        	   466: ;vdp_color_table_loop:
                        	   467: ;  lda (VDP_PATTERN_INIT)                  ; load A with the value at VDP_PATTERN_INIT 
                        	   468: ;  sta VDP_VRAM                            ; and store it to VRAM
                        	   469: ;  inc VDP_PATTERN_INIT
                        	   470: ;  lda VDP_PATTERN_INIT
                        	   471: ;  bne wopee
                        	   472: ;  inc VDP_PATTERN_INIT_HI
                        	   473: ;wopee:
                        	   474: ;  lda VDP_PATTERN_INIT
                        	   475: ;  cmp #<vdp_color_end
                        	   476: ;  bne vdp_color_table_loop
                        	   477: ;  lda VDP_PATTERN_INIT_HI
                        	   478: ;  cmp #>vdp_color_end
                        	   479: ;  bne vdp_color_table_loop
                        	   480: ;  plx
                        	   481: ;  pla
                        	   482: ;  rts
00:112D 48              	   483:   pha
00:112E DA              	   484:   phx
                        	   485:   vdp_write_vram VDP_COLOR_TABLE_BASE
00:112F 48              	     1M   pha
00:1130 A900            	     2M   lda #<(VDP_COLOR_TABLE_BASE)
00:1132 8D0188          	     3M   sta VDP_REG
00:1135 A960            	     4M   lda #(VDP_WRITE_VRAM_BIT | >VDP_COLOR_TABLE_BASE)
00:1137 8D0188          	     5M   sta VDP_REG
00:113A 68              	     6M   pla
00:113B A200            	   486:   ldx #0
                        	   487: vdpclp:
00:113D A9F0            	   488:   lda #$f0
00:113F 8D0088          	   489:   sta VDP_VRAM
00:1142 E8              	   490:   inx
00:1143 E020            	   491:   cpx #32
00:1145 D0F6            	   492:   bne vdpclp
00:1147 FA              	   493:   plx
00:1148 68              	   494:   pla
00:1149 60              	   495:   rts
                        	   496: 
                        	   497: ;;;;;;;;;;;;;;;;;;; vdp_enable_display ;;;;;;;;;;;;;;;;;;;;;;;;;
                        	   498: 
                        	   499: vdp_enable_display:
00:114A 48              	   500:   pha
00:114B A9E2            	   501:   lda #%11100010			; select 16k bytes of vram, enable the active display, enable vdp interrupt, set gfx mode 1
00:114D 8D0188          	   502:   sta VDP_REG
00:1150 A981            	   503:   lda #(VDP_REGISTER_BITS | 1)
00:1152 8D0188          	   504:   sta VDP_REG
00:1155 68              	   505:   pla
00:1156 60              	   506:   rts
                        	   507: 
                        	   508: text_vdp:
                        	   509:   ;.byte "Hello, World!", $00
00:1157 53434F5245      	   510:   .byte "SCORE", $3a, " 0", $00
00:115C 3A
00:115D 2030
00:115F 00
                        	   511: 
                        	   512: 
                        	   513: vdp_register_inits:
00:1160 00              	   514: vdp_register_0: .byte %00000000 ; 0  0  0  0  0  0  M3 EXTVDP
00:1161 82              	   515: vdp_register_1: .byte %10000010 ;16k Bl IE M1 M2 0 Siz MAG
00:1162 01              	   516: vdp_register_2: .byte $01       ; Name table base / $400. $01 = $0400
00:1163 80              	   517: vdp_register_3: .byte $80       ; Color table base = $2000
00:1164 01              	   518: vdp_register_4: .byte $01       ; Pattern table base / $800. $01 = $0800
00:1165 0E              	   519: vdp_register_5: .byte $0e       ; Sprite attribute table base = $0700
00:1166 00              	   520: vdp_register_6: .byte $00       ; Sprite pattern generator = $0000
00:1167 01              	   521: vdp_register_7: .byte $01       ; FG/BG. 1=>Black, F=>White
                        	   522: vdp_end_register_inits:
                        	   523: 
                        	   524: ;;;;;;;;;;;;;;;;;;; vdp_sprpatterns ;;;;;;;;;;;;;;;;;;;;;
                        	   525: vdp_block: ; (0x00)
00:1168 FF              	   526:   .byte $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff
00:1169 FF
00:116A FF
00:116B FF
00:116C FF
00:116D FF
00:116E FF
00:116F FF
00:1170 FF              	   527:   .byte $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff
00:1171 FF
00:1172 FF
00:1173 FF
00:1174 FF
00:1175 FF
00:1176 FF
00:1177 FF
00:1178 FF              	   528:   .byte $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff
00:1179 FF
00:117A FF
00:117B FF
00:117C FF
00:117D FF
00:117E FF
00:117F FF
00:1180 FF              	   529:   .byte $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff
00:1181 FF
00:1182 FF
00:1183 FF
00:1184 FF
00:1185 FF
00:1186 FF
00:1187 FF
                        	   530: vdp_ball: ; (0x04)
                        	   531:   ;.byte $00,$00,$00,$ff,$ff,$00,$00,$00
                        	   532:   ;.byte $00,$00,$ff,$ff,$ff,$ff,$00,$00 
                        	   533:   ;.byte $00,$00,$ff,$ff,$ff,$ff,$00,$00
                        	   534:   ;.byte $00,$00,$00,$ff,$ff,$00,$00,$00
00:1188 07              	   535:   .byte $07,$1f,$3f,$7f,$7f,$ff,$ff,$ff
00:1189 1F
00:118A 3F
00:118B 7F
00:118C 7F
00:118D FF
00:118E FF
00:118F FF
00:1190 FF              	   536:   .byte $ff,$ff,$ff,$7f,$7f,$3f,$1f,$07
00:1191 FF
00:1192 FF
00:1193 7F
00:1194 7F
00:1195 3F
00:1196 1F
00:1197 07
00:1198 E0              	   537:   .byte $e0,$f8,$fc,$fe,$fe,$ff,$ff,$ff
00:1199 F8
00:119A FC
00:119B FE
00:119C FE
00:119D FF
00:119E FF
00:119F FF
00:11A0 FF              	   538:   .byte $ff,$ff,$ff,$fe,$fe,$fc,$f8,$e0
00:11A1 FF
00:11A2 FF
00:11A3 FE
00:11A4 FE
00:11A5 FC
00:11A6 F8
00:11A7 E0
                        	   539: 
                        	   540: ;;;;;;;;;;;;;;;;;;; vdp_color ;;;;;;;;;;;;;;;;;;;;;
                        	   541: ;  .align 8
                        	   542: ;vdp_color:
                        	   543: ;  .binary "???.TIAC"
                        	   544: ;vdp_color_end:
                        	   545: ;  .byte $00
                        	   546: 
                        	   547: ;;;;;;;;;;;;;;;;;;; vdp_patterns ;;;;;;;;;;;;;;;;;;;;;
                        	   548: 
                        	   549:   .align 8
                        	   550: vdp_pattern:
                        	   551: ;  .binary "???.TIAP"
                        	   552: ; line drawing
00:1200 00              	   553:   .byte $00,$00,$00,$FF,$FF,$00,$00,$00 ; lr
00:1201 00
00:1202 00
00:1203 FF
00:1204 FF
00:1205 00
00:1206 00
00:1207 00
00:1208 18              	   554:   .byte $18,$18,$18,$18,$18,$18,$18,$18 ; ud
00:1209 18
00:120A 18
00:120B 18
00:120C 18
00:120D 18
00:120E 18
00:120F 18
00:1210 00              	   555:   .byte $00,$00,$00,$F8,$F8,$18,$18,$18 ; ld
00:1211 00
00:1212 00
00:1213 F8
00:1214 F8
00:1215 18
00:1216 18
00:1217 18
00:1218 00              	   556:   .byte $00,$00,$00,$1F,$1F,$18,$18,$18 ; rd
00:1219 00
00:121A 00
00:121B 1F
00:121C 1F
00:121D 18
00:121E 18
00:121F 18
00:1220 18              	   557:   .byte $18,$18,$18,$F8,$F8,$00,$00,$00 ; lu
00:1221 18
00:1222 18
00:1223 F8
00:1224 F8
00:1225 00
00:1226 00
00:1227 00
00:1228 18              	   558:   .byte $18,$18,$18,$1F,$1F,$00,$00,$00 ; ur
00:1229 18
00:122A 18
00:122B 1F
00:122C 1F
00:122D 00
00:122E 00
00:122F 00
00:1230 18              	   559:   .byte $18,$18,$18,$FF,$FF,$18,$18,$18 ; lurd
00:1231 18
00:1232 18
00:1233 FF
00:1234 FF
00:1235 18
00:1236 18
00:1237 18
                        	   560: ; <nonsense for debug>
00:1238 07              	   561:   .byte $07,$07,$07,$07,$07,$07,$07,$00 ; 07
00:1239 07
00:123A 07
00:123B 07
00:123C 07
00:123D 07
00:123E 07
00:123F 00
00:1240 08              	   562:   .byte $08,$08,$08,$08,$08,$08,$08,$00 ; 08
00:1241 08
00:1242 08
00:1243 08
00:1244 08
00:1245 08
00:1246 08
00:1247 00
00:1248 09              	   563:   .byte $09,$09,$09,$09,$09,$09,$09,$00 ; 09
00:1249 09
00:124A 09
00:124B 09
00:124C 09
00:124D 09
00:124E 09
00:124F 00
00:1250 0A              	   564:   .byte $0A,$0A,$0A,$0A,$0A,$0A,$0A,$00 ; 0A
00:1251 0A
00:1252 0A
00:1253 0A
00:1254 0A
00:1255 0A
00:1256 0A
00:1257 00
00:1258 0B              	   565:   .byte $0B,$0B,$0B,$0B,$0B,$0B,$0B,$00 ; 0B
00:1259 0B
00:125A 0B
00:125B 0B
00:125C 0B
00:125D 0B
00:125E 0B
00:125F 00
00:1260 0C              	   566:   .byte $0C,$0C,$0C,$0C,$0C,$0C,$0C,$00 ; 0C
00:1261 0C
00:1262 0C
00:1263 0C
00:1264 0C
00:1265 0C
00:1266 0C
00:1267 00
00:1268 0D              	   567:   .byte $0D,$0D,$0D,$0D,$0D,$0D,$0D,$00 ; 0D
00:1269 0D
00:126A 0D
00:126B 0D
00:126C 0D
00:126D 0D
00:126E 0D
00:126F 00
00:1270 0E              	   568:   .byte $0E,$0E,$0E,$0E,$0E,$0E,$0E,$00 ; 0E
00:1271 0E
00:1272 0E
00:1273 0E
00:1274 0E
00:1275 0E
00:1276 0E
00:1277 00
00:1278 0F              	   569:   .byte $0F,$0F,$0F,$0F,$0F,$0F,$0F,$00 ; 0F
00:1279 0F
00:127A 0F
00:127B 0F
00:127C 0F
00:127D 0F
00:127E 0F
00:127F 00
00:1280 10              	   570:   .byte $10,$10,$10,$10,$10,$10,$10,$00 ; 10
00:1281 10
00:1282 10
00:1283 10
00:1284 10
00:1285 10
00:1286 10
00:1287 00
00:1288 11              	   571:   .byte $11,$11,$11,$11,$11,$11,$11,$00 ; 11
00:1289 11
00:128A 11
00:128B 11
00:128C 11
00:128D 11
00:128E 11
00:128F 00
00:1290 12              	   572:   .byte $12,$12,$12,$12,$12,$12,$12,$00 ; 12
00:1291 12
00:1292 12
00:1293 12
00:1294 12
00:1295 12
00:1296 12
00:1297 00
00:1298 13              	   573:   .byte $13,$13,$13,$13,$13,$13,$13,$00 ; 13
00:1299 13
00:129A 13
00:129B 13
00:129C 13
00:129D 13
00:129E 13
00:129F 00
00:12A0 14              	   574:   .byte $14,$14,$14,$14,$14,$14,$14,$00 ; 14
00:12A1 14
00:12A2 14
00:12A3 14
00:12A4 14
00:12A5 14
00:12A6 14
00:12A7 00
00:12A8 15              	   575:   .byte $15,$15,$15,$15,$15,$15,$15,$00 ; 15
00:12A9 15
00:12AA 15
00:12AB 15
00:12AC 15
00:12AD 15
00:12AE 15
00:12AF 00
00:12B0 16              	   576:   .byte $16,$16,$16,$16,$16,$16,$16,$00 ; 16
00:12B1 16
00:12B2 16
00:12B3 16
00:12B4 16
00:12B5 16
00:12B6 16
00:12B7 00
00:12B8 17              	   577:   .byte $17,$17,$17,$17,$17,$17,$17,$00 ; 17
00:12B9 17
00:12BA 17
00:12BB 17
00:12BC 17
00:12BD 17
00:12BE 17
00:12BF 00
00:12C0 18              	   578:   .byte $18,$18,$18,$18,$18,$18,$18,$00 ; 18
00:12C1 18
00:12C2 18
00:12C3 18
00:12C4 18
00:12C5 18
00:12C6 18
00:12C7 00
00:12C8 19              	   579:   .byte $19,$19,$19,$19,$19,$19,$19,$00 ; 19
00:12C9 19
00:12CA 19
00:12CB 19
00:12CC 19
00:12CD 19
00:12CE 19
00:12CF 00
00:12D0 1A              	   580:   .byte $1A,$1A,$1A,$1A,$1A,$1A,$1A,$00 ; 1A
00:12D1 1A
00:12D2 1A
00:12D3 1A
00:12D4 1A
00:12D5 1A
00:12D6 1A
00:12D7 00
00:12D8 1B              	   581:   .byte $1B,$1B,$1B,$1B,$1B,$1B,$1B,$00 ; 1B
00:12D9 1B
00:12DA 1B
00:12DB 1B
00:12DC 1B
00:12DD 1B
00:12DE 1B
00:12DF 00
00:12E0 1C              	   582:   .byte $1C,$1C,$1C,$1C,$1C,$1C,$1C,$00 ; 1C
00:12E1 1C
00:12E2 1C
00:12E3 1C
00:12E4 1C
00:12E5 1C
00:12E6 1C
00:12E7 00
00:12E8 1D              	   583:   .byte $1D,$1D,$1D,$1D,$1D,$1D,$1D,$00 ; 1D
00:12E9 1D
00:12EA 1D
00:12EB 1D
00:12EC 1D
00:12ED 1D
00:12EE 1D
00:12EF 00
00:12F0 1E              	   584:   .byte $1E,$1E,$1E,$1E,$1E,$1E,$1E,$00 ; 1E
00:12F1 1E
00:12F2 1E
00:12F3 1E
00:12F4 1E
00:12F5 1E
00:12F6 1E
00:12F7 00
00:12F8 1F              	   585:   .byte $1F,$1F,$1F,$1F,$1F,$1F,$1F,$00 ; 1F
00:12F9 1F
00:12FA 1F
00:12FB 1F
00:12FC 1F
00:12FD 1F
00:12FE 1F
00:12FF 00
                        	   586: ; </nonsense>
00:1300 00              	   587:   .byte $00,$00,$00,$00,$00,$00,$00,$00 ; ' '
00:1301 00
00:1302 00
00:1303 00
00:1304 00
00:1305 00
00:1306 00
00:1307 00
00:1308 20              	   588:   .byte $20,$20,$20,$00,$20,$20,$00,$00 ; !
00:1309 20
00:130A 20
00:130B 00
00:130C 20
00:130D 20
00:130E 00
00:130F 00
00:1310 50              	   589:   .byte $50,$50,$50,$00,$00,$00,$00,$00 ; "
00:1311 50
00:1312 50
00:1313 00
00:1314 00
00:1315 00
00:1316 00
00:1317 00
00:1318 50              	   590:   .byte $50,$50,$F8,$50,$F8,$50,$50,$00 ; #
00:1319 50
00:131A F8
00:131B 50
00:131C F8
00:131D 50
00:131E 50
00:131F 00
00:1320 20              	   591:   .byte $20,$78,$A0,$70,$28,$F0,$20,$00 ; $
00:1321 78
00:1322 A0
00:1323 70
00:1324 28
00:1325 F0
00:1326 20
00:1327 00
00:1328 C0              	   592:   .byte $C0,$C8,$10,$20,$40,$98,$18,$00 ; %
00:1329 C8
00:132A 10
00:132B 20
00:132C 40
00:132D 98
00:132E 18
00:132F 00
00:1330 40              	   593:   .byte $40,$A0,$A0,$40,$A8,$90,$68,$00 ; &
00:1331 A0
00:1332 A0
00:1333 40
00:1334 A8
00:1335 90
00:1336 68
00:1337 00
00:1338 20              	   594:   .byte $20,$20,$40,$00,$00,$00,$00,$00 ; '
00:1339 20
00:133A 40
00:133B 00
00:133C 00
00:133D 00
00:133E 00
00:133F 00
00:1340 20              	   595:   .byte $20,$40,$80,$80,$80,$40,$20,$00 ; (
00:1341 40
00:1342 80
00:1343 80
00:1344 80
00:1345 40
00:1346 20
00:1347 00
00:1348 20              	   596:   .byte $20,$10,$08,$08,$08,$10,$20,$00 ; )
00:1349 10
00:134A 08
00:134B 08
00:134C 08
00:134D 10
00:134E 20
00:134F 00
00:1350 20              	   597:   .byte $20,$A8,$70,$20,$70,$A8,$20,$00 ; *
00:1351 A8
00:1352 70
00:1353 20
00:1354 70
00:1355 A8
00:1356 20
00:1357 00
00:1358 00              	   598:   .byte $00,$20,$20,$F8,$20,$20,$00,$00 ; +
00:1359 20
00:135A 20
00:135B F8
00:135C 20
00:135D 20
00:135E 00
00:135F 00
00:1360 00              	   599:   .byte $00,$00,$00,$00,$20,$20,$40,$00 ; ,
00:1361 00
00:1362 00
00:1363 00
00:1364 20
00:1365 20
00:1366 40
00:1367 00
00:1368 00              	   600:   .byte $00,$00,$00,$F8,$00,$00,$00,$00 ; -
00:1369 00
00:136A 00
00:136B F8
00:136C 00
00:136D 00
00:136E 00
00:136F 00
00:1370 00              	   601:   .byte $00,$00,$00,$00,$20,$20,$00,$00 ; .
00:1371 00
00:1372 00
00:1373 00
00:1374 20
00:1375 20
00:1376 00
00:1377 00
00:1378 00              	   602:   .byte $00,$08,$10,$20,$40,$80,$00,$00 ; /
00:1379 08
00:137A 10
00:137B 20
00:137C 40
00:137D 80
00:137E 00
00:137F 00
00:1380 70              	   603:   .byte $70,$88,$98,$A8,$C8,$88,$70,$00 ; 0
00:1381 88
00:1382 98
00:1383 A8
00:1384 C8
00:1385 88
00:1386 70
00:1387 00
00:1388 20              	   604:   .byte $20,$60,$20,$20,$20,$20,$70,$00 ; 1
00:1389 60
00:138A 20
00:138B 20
00:138C 20
00:138D 20
00:138E 70
00:138F 00
00:1390 70              	   605:   .byte $70,$88,$08,$30,$40,$80,$F8,$00 ; 2
00:1391 88
00:1392 08
00:1393 30
00:1394 40
00:1395 80
00:1396 F8
00:1397 00
00:1398 F8              	   606:   .byte $F8,$08,$10,$30,$08,$88,$70,$00 ; 3
00:1399 08
00:139A 10
00:139B 30
00:139C 08
00:139D 88
00:139E 70
00:139F 00
00:13A0 10              	   607:   .byte $10,$30,$50,$90,$F8,$10,$10,$00 ; 4
00:13A1 30
00:13A2 50
00:13A3 90
00:13A4 F8
00:13A5 10
00:13A6 10
00:13A7 00
00:13A8 F8              	   608:   .byte $F8,$80,$F0,$08,$08,$88,$70,$00 ; 5
00:13A9 80
00:13AA F0
00:13AB 08
00:13AC 08
00:13AD 88
00:13AE 70
00:13AF 00
00:13B0 38              	   609:   .byte $38,$40,$80,$F0,$88,$88,$70,$00 ; 6
00:13B1 40
00:13B2 80
00:13B3 F0
00:13B4 88
00:13B5 88
00:13B6 70
00:13B7 00
00:13B8 F8              	   610:   .byte $F8,$08,$10,$20,$40,$40,$40,$00 ; 7
00:13B9 08
00:13BA 10
00:13BB 20
00:13BC 40
00:13BD 40
00:13BE 40
00:13BF 00
00:13C0 70              	   611:   .byte $70,$88,$88,$70,$88,$88,$70,$00 ; 8
00:13C1 88
00:13C2 88
00:13C3 70
00:13C4 88
00:13C5 88
00:13C6 70
00:13C7 00
00:13C8 70              	   612:   .byte $70,$88,$88,$78,$08,$10,$E0,$00 ; 9
00:13C9 88
00:13CA 88
00:13CB 78
00:13CC 08
00:13CD 10
00:13CE E0
00:13CF 00
00:13D0 00              	   613:   .byte $00,$00,$20,$00,$20,$00,$00,$00 ; :
00:13D1 00
00:13D2 20
00:13D3 00
00:13D4 20
00:13D5 00
00:13D6 00
00:13D7 00
00:13D8 00              	   614:   .byte $00,$00,$20,$00,$20,$20,$40,$00 ; ;
00:13D9 00
00:13DA 20
00:13DB 00
00:13DC 20
00:13DD 20
00:13DE 40
00:13DF 00
00:13E0 10              	   615:   .byte $10,$20,$40,$80,$40,$20,$10,$00 ; <
00:13E1 20
00:13E2 40
00:13E3 80
00:13E4 40
00:13E5 20
00:13E6 10
00:13E7 00
00:13E8 00              	   616:   .byte $00,$00,$F8,$00,$F8,$00,$00,$00 ; =
00:13E9 00
00:13EA F8
00:13EB 00
00:13EC F8
00:13ED 00
00:13EE 00
00:13EF 00
00:13F0 40              	   617:   .byte $40,$20,$10,$08,$10,$20,$40,$00 ; >
00:13F1 20
00:13F2 10
00:13F3 08
00:13F4 10
00:13F5 20
00:13F6 40
00:13F7 00
00:13F8 70              	   618:   .byte $70,$88,$10,$20,$20,$00,$20,$00 ; ?
00:13F9 88
00:13FA 10
00:13FB 20
00:13FC 20
00:13FD 00
00:13FE 20
00:13FF 00
00:1400 70              	   619:   .byte $70,$88,$A8,$B8,$B0,$80,$78,$00 ; @
00:1401 88
00:1402 A8
00:1403 B8
00:1404 B0
00:1405 80
00:1406 78
00:1407 00
00:1408 20              	   620:   .byte $20,$50,$88,$88,$F8,$88,$88,$00 ; A
00:1409 50
00:140A 88
00:140B 88
00:140C F8
00:140D 88
00:140E 88
00:140F 00
00:1410 F0              	   621:   .byte $F0,$88,$88,$F0,$88,$88,$F0,$00 ; B
00:1411 88
00:1412 88
00:1413 F0
00:1414 88
00:1415 88
00:1416 F0
00:1417 00
00:1418 70              	   622:   .byte $70,$88,$80,$80,$80,$88,$70,$00 ; C
00:1419 88
00:141A 80
00:141B 80
00:141C 80
00:141D 88
00:141E 70
00:141F 00
00:1420 F0              	   623:   .byte $F0,$88,$88,$88,$88,$88,$F0,$00 ; D
00:1421 88
00:1422 88
00:1423 88
00:1424 88
00:1425 88
00:1426 F0
00:1427 00
00:1428 F8              	   624:   .byte $F8,$80,$80,$F0,$80,$80,$F8,$00 ; E
00:1429 80
00:142A 80
00:142B F0
00:142C 80
00:142D 80
00:142E F8
00:142F 00
00:1430 F8              	   625:   .byte $F8,$80,$80,$F0,$80,$80,$80,$00 ; F
00:1431 80
00:1432 80
00:1433 F0
00:1434 80
00:1435 80
00:1436 80
00:1437 00
00:1438 78              	   626:   .byte $78,$80,$80,$80,$98,$88,$78,$00 ; G
00:1439 80
00:143A 80
00:143B 80
00:143C 98
00:143D 88
00:143E 78
00:143F 00
00:1440 88              	   627:   .byte $88,$88,$88,$F8,$88,$88,$88,$00 ; H
00:1441 88
00:1442 88
00:1443 F8
00:1444 88
00:1445 88
00:1446 88
00:1447 00
00:1448 70              	   628:   .byte $70,$20,$20,$20,$20,$20,$70,$00 ; I
00:1449 20
00:144A 20
00:144B 20
00:144C 20
00:144D 20
00:144E 70
00:144F 00
00:1450 08              	   629:   .byte $08,$08,$08,$08,$08,$88,$70,$00 ; J
00:1451 08
00:1452 08
00:1453 08
00:1454 08
00:1455 88
00:1456 70
00:1457 00
00:1458 88              	   630:   .byte $88,$90,$A0,$C0,$A0,$90,$88,$00 ; K
00:1459 90
00:145A A0
00:145B C0
00:145C A0
00:145D 90
00:145E 88
00:145F 00
00:1460 80              	   631:   .byte $80,$80,$80,$80,$80,$80,$F8,$00 ; L
00:1461 80
00:1462 80
00:1463 80
00:1464 80
00:1465 80
00:1466 F8
00:1467 00
00:1468 88              	   632:   .byte $88,$D8,$A8,$A8,$88,$88,$88,$00 ; M
00:1469 D8
00:146A A8
00:146B A8
00:146C 88
00:146D 88
00:146E 88
00:146F 00
00:1470 88              	   633:   .byte $88,$88,$C8,$A8,$98,$88,$88,$00 ; N
00:1471 88
00:1472 C8
00:1473 A8
00:1474 98
00:1475 88
00:1476 88
00:1477 00
00:1478 70              	   634:   .byte $70,$88,$88,$88,$88,$88,$70,$00 ; O
00:1479 88
00:147A 88
00:147B 88
00:147C 88
00:147D 88
00:147E 70
00:147F 00
00:1480 F0              	   635:   .byte $F0,$88,$88,$F0,$80,$80,$80,$00 ; P
00:1481 88
00:1482 88
00:1483 F0
00:1484 80
00:1485 80
00:1486 80
00:1487 00
00:1488 70              	   636:   .byte $70,$88,$88,$88,$A8,$90,$68,$00 ; Q
00:1489 88
00:148A 88
00:148B 88
00:148C A8
00:148D 90
00:148E 68
00:148F 00
00:1490 F0              	   637:   .byte $F0,$88,$88,$F0,$A0,$90,$88,$00 ; R
00:1491 88
00:1492 88
00:1493 F0
00:1494 A0
00:1495 90
00:1496 88
00:1497 00
00:1498 70              	   638:   .byte $70,$88,$80,$70,$08,$88,$70,$00 ; S
00:1499 88
00:149A 80
00:149B 70
00:149C 08
00:149D 88
00:149E 70
00:149F 00
00:14A0 F8              	   639:   .byte $F8,$20,$20,$20,$20,$20,$20,$00 ; T
00:14A1 20
00:14A2 20
00:14A3 20
00:14A4 20
00:14A5 20
00:14A6 20
00:14A7 00
00:14A8 88              	   640:   .byte $88,$88,$88,$88,$88,$88,$70,$00 ; U
00:14A9 88
00:14AA 88
00:14AB 88
00:14AC 88
00:14AD 88
00:14AE 70
00:14AF 00
00:14B0 88              	   641:   .byte $88,$88,$88,$88,$50,$50,$20,$00 ; V
00:14B1 88
00:14B2 88
00:14B3 88
00:14B4 50
00:14B5 50
00:14B6 20
00:14B7 00
00:14B8 88              	   642:   .byte $88,$88,$88,$A8,$A8,$D8,$88,$00 ; W
00:14B9 88
00:14BA 88
00:14BB A8
00:14BC A8
00:14BD D8
00:14BE 88
00:14BF 00
00:14C0 88              	   643:   .byte $88,$88,$50,$20,$50,$88,$88,$00 ; X
00:14C1 88
00:14C2 50
00:14C3 20
00:14C4 50
00:14C5 88
00:14C6 88
00:14C7 00
00:14C8 88              	   644:   .byte $88,$88,$50,$20,$20,$20,$20,$00 ; Y
00:14C9 88
00:14CA 50
00:14CB 20
00:14CC 20
00:14CD 20
00:14CE 20
00:14CF 00
00:14D0 F8              	   645:   .byte $F8,$08,$10,$20,$40,$80,$F8,$00 ; Z
00:14D1 08
00:14D2 10
00:14D3 20
00:14D4 40
00:14D5 80
00:14D6 F8
00:14D7 00
00:14D8 F8              	   646:   .byte $F8,$C0,$C0,$C0,$C0,$C0,$F8,$00 ; [
00:14D9 C0
00:14DA C0
00:14DB C0
00:14DC C0
00:14DD C0
00:14DE F8
00:14DF 00
00:14E0 00              	   647:   .byte $00,$80,$40,$20,$10,$08,$00,$00 ; \
00:14E1 80
00:14E2 40
00:14E3 20
00:14E4 10
00:14E5 08
00:14E6 00
00:14E7 00
00:14E8 F8              	   648:   .byte $F8,$18,$18,$18,$18,$18,$F8,$00 ; ]
00:14E9 18
00:14EA 18
00:14EB 18
00:14EC 18
00:14ED 18
00:14EE F8
00:14EF 00
00:14F0 00              	   649:   .byte $00,$00,$20,$50,$88,$00,$00,$00 ; ^
00:14F1 00
00:14F2 20
00:14F3 50
00:14F4 88
00:14F5 00
00:14F6 00
00:14F7 00
00:14F8 00              	   650:   .byte $00,$00,$00,$00,$00,$00,$F8,$00 ; _
00:14F9 00
00:14FA 00
00:14FB 00
00:14FC 00
00:14FD 00
00:14FE F8
00:14FF 00
00:1500 40              	   651:   .byte $40,$20,$10,$00,$00,$00,$00,$00 ; `
00:1501 20
00:1502 10
00:1503 00
00:1504 00
00:1505 00
00:1506 00
00:1507 00
00:1508 00              	   652:   .byte $00,$00,$70,$88,$88,$98,$68,$00 ; a
00:1509 00
00:150A 70
00:150B 88
00:150C 88
00:150D 98
00:150E 68
00:150F 00
00:1510 80              	   653:   .byte $80,$80,$F0,$88,$88,$88,$F0,$00 ; b
00:1511 80
00:1512 F0
00:1513 88
00:1514 88
00:1515 88
00:1516 F0
00:1517 00
00:1518 00              	   654:   .byte $00,$00,$78,$80,$80,$80,$78,$00 ; c
00:1519 00
00:151A 78
00:151B 80
00:151C 80
00:151D 80
00:151E 78
00:151F 00
00:1520 08              	   655:   .byte $08,$08,$78,$88,$88,$88,$78,$00 ; d
00:1521 08
00:1522 78
00:1523 88
00:1524 88
00:1525 88
00:1526 78
00:1527 00
00:1528 00              	   656:   .byte $00,$00,$70,$88,$F8,$80,$78,$00 ; e
00:1529 00
00:152A 70
00:152B 88
00:152C F8
00:152D 80
00:152E 78
00:152F 00
00:1530 30              	   657:   .byte $30,$40,$E0,$40,$40,$40,$40,$00 ; f
00:1531 40
00:1532 E0
00:1533 40
00:1534 40
00:1535 40
00:1536 40
00:1537 00
00:1538 00              	   658:   .byte $00,$00,$70,$88,$F8,$08,$F0,$00 ; g
00:1539 00
00:153A 70
00:153B 88
00:153C F8
00:153D 08
00:153E F0
00:153F 00
00:1540 80              	   659:   .byte $80,$80,$F0,$88,$88,$88,$88,$00 ; h
00:1541 80
00:1542 F0
00:1543 88
00:1544 88
00:1545 88
00:1546 88
00:1547 00
00:1548 00              	   660:   .byte $00,$40,$00,$40,$40,$40,$40,$00 ; i
00:1549 40
00:154A 00
00:154B 40
00:154C 40
00:154D 40
00:154E 40
00:154F 00
00:1550 00              	   661:   .byte $00,$20,$00,$20,$20,$A0,$60,$00 ; j
00:1551 20
00:1552 00
00:1553 20
00:1554 20
00:1555 A0
00:1556 60
00:1557 00
00:1558 00              	   662:   .byte $00,$80,$80,$A0,$C0,$A0,$90,$00 ; k
00:1559 80
00:155A 80
00:155B A0
00:155C C0
00:155D A0
00:155E 90
00:155F 00
00:1560 C0              	   663:   .byte $C0,$40,$40,$40,$40,$40,$60,$00 ; l
00:1561 40
00:1562 40
00:1563 40
00:1564 40
00:1565 40
00:1566 60
00:1567 00
00:1568 00              	   664:   .byte $00,$00,$D8,$A8,$A8,$A8,$A8,$00 ; m
00:1569 00
00:156A D8
00:156B A8
00:156C A8
00:156D A8
00:156E A8
00:156F 00
00:1570 00              	   665:   .byte $00,$00,$F0,$88,$88,$88,$88,$00 ; n
00:1571 00
00:1572 F0
00:1573 88
00:1574 88
00:1575 88
00:1576 88
00:1577 00
00:1578 00              	   666:   .byte $00,$00,$70,$88,$88,$88,$70,$00 ; o
00:1579 00
00:157A 70
00:157B 88
00:157C 88
00:157D 88
00:157E 70
00:157F 00
00:1580 00              	   667:   .byte $00,$00,$70,$88,$F0,$80,$80,$00 ; p
00:1581 00
00:1582 70
00:1583 88
00:1584 F0
00:1585 80
00:1586 80
00:1587 00
00:1588 00              	   668:   .byte $00,$00,$F0,$88,$78,$08,$08,$00 ; q
00:1589 00
00:158A F0
00:158B 88
00:158C 78
00:158D 08
00:158E 08
00:158F 00
00:1590 00              	   669:   .byte $00,$00,$70,$88,$80,$80,$80,$00 ; r
00:1591 00
00:1592 70
00:1593 88
00:1594 80
00:1595 80
00:1596 80
00:1597 00
00:1598 00              	   670:   .byte $00,$00,$78,$80,$70,$08,$F0,$00 ; s
00:1599 00
00:159A 78
00:159B 80
00:159C 70
00:159D 08
00:159E F0
00:159F 00
00:15A0 40              	   671:   .byte $40,$40,$F0,$40,$40,$40,$30,$00 ; t
00:15A1 40
00:15A2 F0
00:15A3 40
00:15A4 40
00:15A5 40
00:15A6 30
00:15A7 00
00:15A8 00              	   672:   .byte $00,$00,$88,$88,$88,$88,$78,$00 ; u
00:15A9 00
00:15AA 88
00:15AB 88
00:15AC 88
00:15AD 88
00:15AE 78
00:15AF 00
00:15B0 00              	   673:   .byte $00,$00,$88,$88,$90,$A0,$40,$00 ; v
00:15B1 00
00:15B2 88
00:15B3 88
00:15B4 90
00:15B5 A0
00:15B6 40
00:15B7 00
00:15B8 00              	   674:   .byte $00,$00,$88,$88,$88,$A8,$D8,$00 ; w
00:15B9 00
00:15BA 88
00:15BB 88
00:15BC 88
00:15BD A8
00:15BE D8
00:15BF 00
00:15C0 00              	   675:   .byte $00,$00,$88,$50,$20,$50,$88,$00 ; x
00:15C1 00
00:15C2 88
00:15C3 50
00:15C4 20
00:15C5 50
00:15C6 88
00:15C7 00
00:15C8 00              	   676:   .byte $00,$00,$88,$88,$78,$08,$F0,$00 ; y
00:15C9 00
00:15CA 88
00:15CB 88
00:15CC 78
00:15CD 08
00:15CE F0
00:15CF 00
00:15D0 00              	   677:   .byte $00,$00,$F8,$10,$20,$40,$F8,$00 ; z
00:15D1 00
00:15D2 F8
00:15D3 10
00:15D4 20
00:15D5 40
00:15D6 F8
00:15D7 00
00:15D8 38              	   678:   .byte $38,$40,$20,$C0,$20,$40,$38,$00 ; {
00:15D9 40
00:15DA 20
00:15DB C0
00:15DC 20
00:15DD 40
00:15DE 38
00:15DF 00
00:15E0 40              	   679:   .byte $40,$40,$40,$00,$40,$40,$40,$00 ; |
00:15E1 40
00:15E2 40
00:15E3 00
00:15E4 40
00:15E5 40
00:15E6 40
00:15E7 00
00:15E8 E0              	   680:   .byte $E0,$10,$20,$18,$20,$10,$E0,$00 ; }
00:15E9 10
00:15EA 20
00:15EB 18
00:15EC 20
00:15ED 10
00:15EE E0
00:15EF 00
00:15F0 40              	   681:   .byte $40,$A8,$10,$00,$00,$00,$00,$00 ; ~
00:15F1 A8
00:15F2 10
00:15F3 00
00:15F4 00
00:15F5 00
00:15F6 00
00:15F7 00
00:15F8 A8              	   682:   .byte $A8,$50,$A8,$50,$A8,$50,$A8,$00 ; checkerboard
00:15F9 50
00:15FA A8
00:15FB 50
00:15FC A8
00:15FD 50
00:15FE A8
00:15FF 00
                        	   683: vdp_pattern_end:
                        	   684: 
00:1600 00              	   685:   .byte $00
                        	   686: 


Symbols by name:
P1_PAD                           E:0039
P1_PADDLE                        E:B819
TEXT_LOC                         E:040F
VDP_COLOR_TABLE_BASE             E:2000
VDP_NAME_POINTER                 E:0032
VDP_NAME_TABLE_BASE              E:0400
VDP_PATTERN_INIT                 E:0030
VDP_PATTERN_INIT_HI              E:0031
VDP_PATTERN_TABLE_BASE           E:0800
VDP_REG                          E:8801
VDP_REGISTER_BITS                E:0080
VDP_SPRITE_PATTERN_TABLE_BASE    E:0000
VDP_SPR_ATT_TABLE_BASE           E:0700
VDP_VRAM                         E:8800
VDP_WRITE_VRAM_BIT               E:0040
balldx                           E:003B
balldy                           E:003C
changecolor                      A:10A4
delay                            A:109B
end_write                        A:10F8
fc                               E:0034
holding                          A:0F22
move_ball                        A:0F4F
nexf                             A:1087
p1_hitbox_x                      E:00E1
p1cp                             A:0F3B
p1dex                            E:0035
p2_hitbox_x                      E:0010
p2dex                            E:0037
reset                            A:0F00
screen_bottom                    E:00B0
text_vdp                         A:1157
update_p1pad                     A:0F32
vdp_ball                         A:1188
vdp_block                        A:1168
vdp_copysprites                  A:1002
vdp_enable_display               A:114A
vdp_end_register_inits           A:1168
vdp_initialize_color_table       A:112D
vdp_initialize_name_table        A:10B5
vdp_initialize_pattern_table     A:10FB
vdp_name_table_loop              A:10CA
vdp_pattern                      A:1200
vdp_pattern_end                  A:1600
vdp_pattern_table_loop           A:1111
vdp_put_spr                      A:1025
vdp_register_0                   A:1160
vdp_register_1                   A:1161
vdp_register_2                   A:1162
vdp_register_3                   A:1163
vdp_register_4                   A:1164
vdp_register_5                   A:1165
vdp_register_6                   A:1166
vdp_register_7                   A:1167
vdp_register_inits               A:1160
vdp_set_registers                A:1060
vdp_setup                        A:0FE9
vdp_spr                          A:1043
vdp_write_name_table             A:10DC
vdp_zapram                       A:1078
vdpclp                           A:113D
wait                             A:1096
wopeee                           A:111E
zapf                             A:1089

Symbols by value:
0000 VDP_SPRITE_PATTERN_TABLE_BASE
0010 p2_hitbox_x
0030 VDP_PATTERN_INIT
0031 VDP_PATTERN_INIT_HI
0032 VDP_NAME_POINTER
0034 fc
0035 p1dex
0037 p2dex
0039 P1_PAD
003B balldx
003C balldy
0040 VDP_WRITE_VRAM_BIT
0080 VDP_REGISTER_BITS
00B0 screen_bottom
00E1 p1_hitbox_x
0400 VDP_NAME_TABLE_BASE
040F TEXT_LOC
0700 VDP_SPR_ATT_TABLE_BASE
0800 VDP_PATTERN_TABLE_BASE
0F00 reset
0F22 holding
0F32 update_p1pad
0F3B p1cp
0F4F move_ball
0FE9 vdp_setup
1002 vdp_copysprites
1025 vdp_put_spr
1043 vdp_spr
1060 vdp_set_registers
1078 vdp_zapram
1087 nexf
1089 zapf
1096 wait
109B delay
10A4 changecolor
10B5 vdp_initialize_name_table
10CA vdp_name_table_loop
10DC vdp_write_name_table
10F8 end_write
10FB vdp_initialize_pattern_table
1111 vdp_pattern_table_loop
111E wopeee
112D vdp_initialize_color_table
113D vdpclp
114A vdp_enable_display
1157 text_vdp
1160 vdp_register_0
1160 vdp_register_inits
1161 vdp_register_1
1162 vdp_register_2
1163 vdp_register_3
1164 vdp_register_4
1165 vdp_register_5
1166 vdp_register_6
1167 vdp_register_7
1168 vdp_block
1168 vdp_end_register_inits
1188 vdp_ball
1200 vdp_pattern
1600 vdp_pattern_end
2000 VDP_COLOR_TABLE_BASE
8800 VDP_VRAM
8801 VDP_REG
B819 P1_PADDLE
