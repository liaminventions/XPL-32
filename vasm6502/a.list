Sections:
00: "seg800" (800-A54)
01: "seg1006" (1006-1252)


Source: "sd_handeler.s"
                        	     1: ; XPL-32 <FOLDER> type loading code
                        	     2: ; (c) 2022 Waverider
                        	     3: 
                        	     4: charbuffer = $601            ; 1 byte
                        	     5: seed = $01
                        	     6: donefact = $02		     ; vars
                        	     7: irqcount = $03
                        	     8: 
                        	     9: zp_sd_address = $40         ; 2 bytes
                        	    10: zp_sd_currentsector = $42   ; 4 bytes
                        	    11: zp_fat32_variables = $46    ; 24 bytes
                        	    12: 
                        	    13: fat32_workspace = $200      ; two pages
                        	    14: 
                        	    15: buffer = $400               ; 512 bytes
                        	    16: endbuf = $600
                        	    17: 
                        	    18: fat32_readbuffer = fat32_workspace
                        	    19: 
                        	    20: fat32_fatstart          = zp_fat32_variables + $00  ; 4 bytes
                        	    21: fat32_datastart         = zp_fat32_variables + $04  ; 4 bytes
                        	    22: fat32_rootcluster       = zp_fat32_variables + $08  ; 4 bytes
                        	    23: fat32_sectorspercluster = zp_fat32_variables + $0c  ; 1 byte
                        	    24: fat32_pendingsectors    = zp_fat32_variables + $0d  ; 1 byte
                        	    25: fat32_address           = zp_fat32_variables + $0e  ; 2 bytes
                        	    26: fat32_nextcluster       = zp_fat32_variables + $10  ; 4 bytes
                        	    27: fat32_bytesremaining    = zp_fat32_variables + $14  ; 4 bytes 
                        	    28: 
                        	    29: fat32_errorstage        = fat32_bytesremaining  ; only used during initializatio
                        	    30: fat32_filenamepointer   = fat32_bytesremaining  ; only used when searching for a file
                        	    31: 
                        	    32:   .org $0800
                        	    33: jumptoit:
00:0800 4C2508          	    34:   jmp sdstart
                        	    35: 
                        	    36:   .include "hwconfig.s"

Source: "hwconfig.s"
                        	     1: PORTB = $b000
                        	     2: PORTA = $b001
                        	     3: DDRB = $b002
                        	     4: DDRA = $b003
                        	     5: 
                        	     6: LCD_E  = %10000000
                        	     7: LCD_RW = %01000000
                        	     8: LCD_RS = %00100000
                        	     9: 
                        	    10: SD_CS   = %00010000
                        	    11: SD_SCK  = %00001000
                        	    12: SD_MOSI = %00000100
                        	    13: SD_MISO = %00000010
                        	    14: 
                        	    15: PORTA_OUTPUTPINS = LCD_E | LCD_RW | LCD_RS | SD_CS | SD_SCK | SD_MOSI
                        	    16: 
                        	    17: via_init:
00:0803 A9FF            	    18:   lda #%11111111          ; Set all pins on port B to output
00:0805 8D02B0          	    19:   sta DDRB
00:0808 A9FC            	    20:   lda #PORTA_OUTPUTPINS   ; Set various pins on port A to output
00:080A 8D03B0          	    21:   sta DDRA
00:080D 60              	    22:   rts
                        	    23: 
                        	    24: 

Source: "sd_handeler.s"
                        	    37:   .include "kernal_def.s"

Source: "kernal_def.s"
                        	     1: ; kernal def
                        	     2: 
                        	     3: acia_init = $ffac
                        	     4: 
                        	     5: stock_via = $ffaf
                        	     6: 
                        	     7: sd_init = $ffb2
                        	     8: 
                        	     9: fat32_init = $ffb5
                        	    10: 
                        	    11: print_hex_acia = $ffb8
                        	    12: 
                        	    13: crlf = $ffbb
                        	    14: 
                        	    15: cleardisplay = $ffbe
                        	    16: 
                        	    17: rxpoll = $ffc1
                        	    18: 
                        	    19: txpoll = $ffc4
                        	    20: 
                        	    21: print_chara = $ffc7
                        	    22: print_char_acia = $ffc7
                        	    23: 
                        	    24: ascii_home = $ffca
                        	    25: 
                        	    26: w_acia_full = $ffcd
                        	    27: 
                        	    28: fat32_seekcluster = $ffd0
                        	    29: 
                        	    30: fat32_readnextcluster = $ffd3
                        	    31: 
                        	    32: fat32_openroot = $ffd6
                        	    33: 
                        	    34: fat32_opendirent = $ffd9
                        	    35: 
                        	    36: fat32_readdirent = $ffdc
                        	    37: 
                        	    38: fat32_finddirent = $ffdf
                        	    39: 
                        	    40: fat32_file_readbyte = $ffe2
                        	    41: 
                        	    42: fat32_file_read = $ffe5
                        	    43: 
                        	    44: sd_readbyte = $ffe8
                        	    45: 
                        	    46: sd_sendcommand = $ffeb
                        	    47: 
                        	    48: sd_readsector = $ffee
                        	    49: 
                        	    50: loadcmd = $fff1
                        	    51: 
                        	    52: tsave = $fff4
                        	    53: 
                        	    54: tload = $fff7
                        	    55: 

Source: "sd_handeler.s"
                        	    38: 
                        	    39: dirname:
00:080E 464F4C4445522020	    40:   .asciiz "FOLDER     "	     ; standard directory name, SHORT format
00:0816 202020
00:0819 00
                        	    41: 
                        	    42: errormsg:
00:081A 0D              	    43:   .byte $0d, $0a, "ERROR!", $0d, $0a, $00	; error msg
00:081B 0A
00:081C 4552524F5221
00:0822 0D
00:0823 0A
00:0824 00
                        	    44: 
                        	    45: sdstart:
00:0825 6400            	    46:   stz $00		; 0
                        	    47: 
00:0827 A955            	    48:   lda #$55		; shftable value
00:0829 8501            	    49:   sta seed
                        	    50: 	
00:082B 20BEFF          	    51:   jsr cleardisplay	; clear display
                        	    52: 
00:082E A29A            	    53:   ldx  #<loadmsg	; title screen
00:0830 A008            	    54:   ldy  #>loadmsg
00:0832 20CDFF          	    55:   jsr  w_acia_full
                        	    56: 
00:0835 A2C7            	    57:   ldx  #<lodmm
00:0837 A008            	    58:   ldy  #>lodmm
00:0839 20CDFF          	    59:   jsr  w_acia_full
                        	    60: 
00:083C 204208          	    61:   jsr rootsetup		; setup sd card
                        	    62: 
                        	    63: findrau:
00:083F 4C6608          	    64:   jmp type		; start "type" program
                        	    65: 
                        	    66: rootsetup:		; setup <ROOT>
00:0842 48              	    67:   pha
00:0843 DA              	    68:   phx
00:0844 5A              	    69:   phy
                        	    70: 
                        	    71:   ; Open root directory
00:0845 20D6FF          	    72:   jsr fat32_openroot
                        	    73: 
                        	    74:   ; Find the subdirectory by name
00:0848 A20E            	    75:   ldx #<dirname
00:084A A008            	    76:   ldy #>dirname
00:084C 20DFFF          	    77:   jsr fat32_finddirent
00:084F 900E            	    78:   bcc foundsubdir
                        	    79: 
                        	    80: error:
                        	    81: 
                        	    82:   ; Subdirectory not found
00:0851 A008            	    83:   ldy #>errormsg
00:0853 A21A            	    84:   ldx #<errormsg
00:0855 20CDFF          	    85:   jsr w_acia_full
00:0858 20030A          	    86:   jsr error_sound
00:085B 60              	    87:   rts
00:085C 60              	    88:   rts
00:085D 60              	    89:   rts
00:085E 60              	    90:   rts
                        	    91: 
                        	    92: foundsubdir
                        	    93: 
                        	    94:   ; Open subdirectory
00:085F 20D9FF          	    95:   jsr fat32_opendirent	; open folder
                        	    96: 
00:0862 7A              	    97:   ply
00:0863 FA              	    98:   plx 
00:0864 68              	    99:   pla
00:0865 60              	   100:   rts
                        	   101: 
                        	   102: 
                        	   103: type:			; typing a filename
00:0866 A2F6            	   104:   ldx #<typemsg		; Filename:_
00:0868 A008            	   105:   ldy #>typemsg
00:086A 20CDFF          	   106:   jsr w_acia_full
00:086D A200            	   107:   ldx #0
00:086F A920            	   108:   lda #' '
00:0871 8504            	   109:   sta $04		; I frogor
00:0873 4CAA09          	   110:   jmp typeloop		; start loop
                        	   111: 
                        	   112: rxpol:
00:0876 AD0180          	   113:   lda $8001
00:0879 2908            	   114:   and #$08		; non-irq rx polling code
00:087B F0F9            	   115:   beq rxpol
00:087D 60              	   116:   rts
                        	   117: 
                        	   118: rxput:
00:087E AD0180          	   119:   lda $8001
00:0881 2908            	   120:   and #$08		; it loops
00:0883 F001            	   121:   beq typelop
00:0885 60              	   122:   rts
                        	   123: typelop:
00:0886 4CAA09          	   124:   jmp typeloop
                        	   125: 
                        	   126: lodmsg:
00:0889 0D              	   127:   .byte $0d, $0a, "Loading...", $0d, $0a, $00
00:088A 0A
00:088B 4C6F6164696E672E
00:0893 2E2E
00:0895 0D
00:0896 0A
00:0897 00
                        	   128: donemsg:
00:0898 0C              	   129:   .byte $0c, $00
00:0899 00
                        	   130: 
                        	   131: loadmsg:
00:089A 2020202020202020	   132:   .byte "          -------- SD Loader --------     ", $0d, $0a, $00
00:08A2 20202D2D2D2D2D2D
00:08AA 2D2D205344204C6F
00:08B2 61646572202D2D2D
00:08BA 2D2D2D2D2D202020
00:08C2 2020
00:08C4 0D
00:08C5 0A
00:08C6 00
                        	   133: lodmm:
00:08C7 2020202020202020	   134:   .byte "          Press (l) to list <FOLDER>      ", $0d, $0a, $0d, $0a, $00
00:08CF 2020507265737320
00:08D7 286C2920746F206C
00:08DF 697374203C464F4C
00:08E7 4445523E20202020
00:08EF 2020
00:08F1 0D
00:08F2 0A
00:08F3 0D
00:08F4 0A
00:08F5 00
                        	   135: 
                        	   136: typemsg:
00:08F6 5479706520746865	   137:   .byte "Type the filename in all caps.", $0d, $0a, "The filename is up to 8 characters long.", $0d, $0a, " Filename: "
00:08FE 2066696C656E616D
00:0906 6520696E20616C6C
00:090E 20636170732E
00:0914 0D
00:0915 0A
00:0916 5468652066696C65
00:091E 6E616D6520697320
00:0926 757020746F203820
00:092E 6368617261637465
00:0936 7273206C6F6E672E
00:093E 0D
00:093F 0A
00:0940 2046696C656E616D
00:0948 653A20
00:094B 02
00:094C 5F
00:094D 00
                        	   138: 
                        	   139: loadbuf:
00:094E 20              	   140:   .byte $20, $20, $20, $20, $20, $20, $20, $20
00:094F 20
00:0950 20
00:0951 20
00:0952 20
00:0953 20
00:0954 20
00:0955 20
00:0956 58504C          	   141:   .byte "XPL"
                        	   142: 
                        	   143: other:
00:0959 20C4FF          	   144:   jsr txpoll		; Write a letter of the filename currently being read
00:095C B140            	   145:   lda (zp_sd_address),y
00:095E 8D0080          	   146:   sta $8000
00:0961 C8              	   147:   iny
00:0962 60              	   148:   rts
                        	   149: 
                        	   150: list:			; list file dir
00:0963 20DCFF          	   151:   jsr fat32_readdirent	; files?
00:0966 B036            	   152:   bcs nofiles
00:0968 2940            	   153:   and #$40
00:096A F005            	   154:   beq arc
                        	   155: dir:
00:096C A944            	   156:   lda #'D'		; directorys show up as 
00:096E 4C7309          	   157:   jmp ebut		; D YOURFILENAME     D TEST      D FOLDER  ...Etc
                        	   158: arc:
00:0971 A946            	   159:   lda #'F'		; files show up as
                        	   160: ebut:			; F TEST.XPL         F MUSIC.XPL        F FILE.BIN  ...Etc
00:0973 20C7FF          	   161:   jsr print_chara	; f or d
00:0976 A920            	   162:   lda #$20		; space
00:0978 20C7FF          	   163:   jsr print_chara
                        	   164:   ; At this point, we know that there are no files, files, or a suddir
                        	   165:   ; Now for the name
00:097B A000            	   166:   ldy #0
                        	   167: nameloop:
00:097D C008            	   168:   cpy #8
00:097F F006            	   169:   beq dot
00:0981 205909          	   170:   jsr other
00:0984 4C7D09          	   171:   jmp nameloop
                        	   172: dot:
00:0987 A92E            	   173:   lda #'.'		; shows a file extention
00:0989 20C7FF          	   174:   jsr print_chara
                        	   175: lopii:
00:098C C00B            	   176:   cpy #11
00:098E F006            	   177:   beq endthat		; print 3-letter file extention
00:0990 205909          	   178:   jsr other
00:0993 4C8C09          	   179:   jmp lopii
                        	   180: endthat:
00:0996 A909            	   181:   lda #$09 ; Tab
00:0998 20C7FF          	   182:   jsr print_chara	; tab
00:099B 4C6309          	   183:   jmp list ; go again	; next file if there are any left
                        	   184: nofiles:		; if not,
                        	   185: endlist:		; exit listing code
00:099E 20BBFF          	   186:   jsr crlf
00:09A1 4C6608          	   187:   jmp type
                        	   188: 
                        	   189: jumptolist:
00:09A4 20BBFF          	   190:   jsr crlf
00:09A7 4C6309          	   191:   jmp list
                        	   192: 
                        	   193: typeloop:		; loop to type filenames
                        	   194: 
00:09AA 207608          	   195:   jsr rxpol		; read a charactor
00:09AD AD0080          	   196:   lda $8000
00:09B0 8D0106          	   197:   sta charbuffer
                        	   198: 
00:09B3 C90D            	   199:   cmp #$0d		; enter?
00:09B5 F017            	   200:   beq exitloop		; if so, load
                        	   201: 			; if not...
00:09B7 AD0106          	   202:   lda charbuffer	
00:09BA C96C            	   203:   cmp #'l'		; check if it's "l"
00:09BC F0E6            	   204:   beq jumptolist	; if so, list files
                        	   205: 			; if not,
00:09BE AD0106          	   206:   lda charbuffer	; echo back
00:09C1 8D0080          	   207:   sta $8000
                        	   208: 
00:09C4 AD0106          	   209:   lda charbuffer	; and store it in the filename buffer
00:09C7 9D4E09          	   210:   sta loadbuf,x
00:09CA E8              	   211:   inx
00:09CB 4CAA09          	   212:   jmp typeloop
                        	   213: 
                        	   214: exitloop:
                        	   215: 
00:09CE 20BBFF          	   216:   jsr crlf
00:09D1 204208          	   217:   jsr rootsetup
                        	   218:   
00:09D4 A009            	   219:   ldy #>loadbuf
00:09D6 A24E            	   220:   ldx #<loadbuf
00:09D8 20DFFF          	   221:   jsr fat32_finddirent
00:09DB 9003            	   222:   bcc foundfile
                        	   223:   
                        	   224:   ; File not found
00:09DD 4C5108          	   225:   jmp error
                        	   226: 
                        	   227: foundfile
                        	   228:  
                        	   229:   ; Open file
00:09E0 20D9FF          	   230:   jsr fat32_opendirent
                        	   231: 
00:09E3 A289            	   232:   ldx #<lodmsg
00:09E5 A008            	   233:   ldy #>lodmsg
00:09E7 20CDFF          	   234:   jsr w_acia_full
                        	   235: 
00:09EA A900            	   236:   lda #$00
00:09EC 8554            	   237:   sta fat32_address
00:09EE A90F            	   238:   lda #$0f
00:09F0 8555            	   239:   sta fat32_address+1
                        	   240: 
00:09F2 20E5FF          	   241:   jsr fat32_file_read  ; Yes. It is finally time to read the file.
                        	   242: 
                        	   243: end:
00:09F5 A298            	   244:   ldx #<donemsg
00:09F7 A008            	   245:   ldy #>donemsg
00:09F9 20CDFF          	   246:   jsr w_acia_full
00:09FC 20000F          	   247:   jsr $0f00
00:09FF 60              	   248:   rts
00:0A00 60              	   249:   rts
00:0A01 60              	   250:   rts
00:0A02 60              	   251:   rts
                        	   252: 
                        	   253: ;clear_sid
                        	   254: ;  ldx #$18
                        	   255: ;csid
                        	   256: ;  stz $b800,x
                        	   257: ;  dex
                        	   258: ;  bne csid
                        	   259: ;  rts
                        	   260: 
                        	   261:   .include "errors.s"

Source: "errors.s"
                        	     1: error_sound:
00:0A03 A955            	     2:   lda #$55
00:0A05 8502            	     3:   sta donefact
00:0A07 6403            	     4:   stz irqcount	; reset irq count
                        	     5: 
                        	     6: runthesound:
00:0A09 78              	     7:   sei		; turn off irqs
00:0A0A A927            	     8:   lda #<irq
00:0A0C 8DFE7F          	     9:   sta $7ffe
00:0A0F A90A            	    10:   lda #>irq
00:0A11 8DFF7F          	    11:   sta $7fff	; store vectors
00:0A14 A9C0            	    12:   lda #$c0
00:0A16 8D0EB0          	    13:   sta $b00e	
00:0A19 A900            	    14:   lda #0 ; Song Number
00:0A1B 204E0A          	    15:   jsr InitSid
00:0A1E A940            	    16:   lda #$40
00:0A20 8D0DB0          	    17:   sta $b00d
00:0A23 58              	    18:   cli
00:0A24 4C2F12          	    19:   jmp startupsoundloop
                        	    20: 
                        	    21: irq:
00:0A27 A940            	    22:   lda #$40
00:0A29 8D0DB0          	    23:   sta $b00d
00:0A2C 203D0A          	    24:   jsr putbut		; refresh timers
00:0A2F E603            	    25:   inc irqcount		; a irq has occurred
00:0A31 A503            	    26:   lda irqcount
00:0A33 C940            	    27:   cmp #$40		; if $32 irqs (end of the error sound)
00:0A35 D002            	    28:   bne continue24542 	; end the stream
00:0A37 6402            	    29:   stz donefact		; its done, tell the loop
                        	    30: continue24542:
00:0A39 200610          	    31:   jsr $1006
00:0A3C 40              	    32:   rti			; exit
                        	    33: 
                        	    34: putbut:
00:0A3D A29E            	    35:   ldx #$9e
00:0A3F 8E04B0          	    36:   stx $b004
00:0A42 8E06B0          	    37:   stx $b006
00:0A45 A20F            	    38:   ldx #$0f  ; 250Hz IRQ
00:0A47 8E05B0          	    39:   stx $b005
00:0A4A 8E07B0          	    40:   stx $b007
00:0A4D 60              	    41:   rts
                        	    42: InitSid:
00:0A4E 203D0A          	    43:   jsr putbut
00:0A51 4C0311          	    44:   jmp $1103
                        	    45: 
                        	    46:   .org $1006
                        	    47: 
                        	    48:   .include "errorsound.s"

Source: "errorsound.s"
                        	     1: d400_sVoc1FreqLo = $b800
                        	     2: d404_sVoc1Control = $b804
                        	     3: d40b_sVoc2Control = $b80b
                        	     4: d412_sVoc3Control = $b812
                        	     5: 
                        	     6:   .org $1006
                        	     7: 
01:1006 A218            	     8: PlaySid             ldx #$18
01:1008 B504            	     9: L1008               lda $04,x
01:100A 9D00B8          	    10:                     sta d400_sVoc1FreqLo,x
01:100D CA              	    11:                     dex
01:100E 10F8            	    12:                     bpl L1008
01:1010 C602            	    13:                     dec $02
01:1012 3001            	    14:                     bmi L1015
01:1014 60              	    15:                     rts
                        	    16:                     
01:1015 8602            	    17: L1015               stx $02
01:1017 A503            	    18:                     lda $03
01:1019 D018            	    19:                     bne L1033
01:101B 201F00          	    20:                     jsr $001f
01:101E F018            	    21:                     beq L1038
01:1020 C9A0            	    22:                     cmp #$a0
01:1022 B00A            	    23:                     bcs L102e
01:1024 852A            	    24:                     sta $2a
01:1026 201F00          	    25:                     jsr $001f
01:1029 8529            	    26:                     sta $29
01:102B 4C7610          	    27:                     jmp L1076
                        	    28:                     
01:102E 38              	    29: L102e               sec
01:102F E99F            	    30:                     sbc #$9f
01:1031 8503            	    31:                     sta $03
01:1033 C603            	    32: L1033               dec $03
01:1035 4C7610          	    33:                     jmp L1076
                        	    34:                     
01:1038 201F00          	    35: L1038               jsr $001f
01:103B C9FD            	    36:                     cmp #$fd
01:103D F02C            	    37:                     beq L106b
01:103F C9FE            	    38:                     cmp #$fe
01:1041 F01D            	    39:                     beq L1060
01:1043 C9FF            	    40:                     cmp #$ff
01:1045 F003            	    41:                     beq L104a
01:1047 8502            	    42:                     sta $02
01:1049 60              	    43:                     rts
                        	    44:                     
01:104A A900            	    45: L104a               lda #$00
01:104C 8D04B8          	    46:                     sta d404_sVoc1Control
01:104F 8D0BB8          	    47:                     sta d40b_sVoc2Control
01:1052 8D12B8          	    48:                     sta d412_sVoc3Control
01:1055 A95E            	    49:                     lda #$5e
01:1057 8526            	    50:                     sta $26
01:1059 A910            	    51:                     lda #$10
01:105B 8527            	    52:                     sta $27
01:105D 60              	    53:                     rts
                        	    54:                     
01:105E FF              	    55:                       .byte $ff, $00 
01:105F 00
01:1060 A51D            	    56: L1060               lda $1d
01:1062 8526            	    57:                     sta $26
01:1064 A51E            	    58:                     lda $1e
01:1066 8527            	    59:                     sta $27
01:1068 4C1510          	    60:                     jmp L1015
                        	    61:                     
01:106B A526            	    62: L106b               lda $26
01:106D 851D            	    63:                     sta $1d
01:106F A527            	    64:                     lda $27
01:1071 851E            	    65:                     sta $1e
01:1073 4C1510          	    66:                     jmp L1015
                        	    67:                     
01:1076 20A110          	    68: L1076               jsr S10a1
01:1079 A9F8            	    69:                     lda #$f8
01:107B 18              	    70: L107b               clc
01:107C 6907            	    71:                     adc #$07
01:107E 48              	    72:                     pha
01:107F AA              	    73:                     tax
01:1080 201F00          	    74:                     jsr $001f
01:1083 4A              	    75:                     lsr a
01:1084 08              	    76:                     php
01:1085 E8              	    77: L1085               inx
01:1086 4A              	    78:                     lsr a
01:1087 B00A            	    79:                     bcs L1093
01:1089 D0FA            	    80:                     bne L1085
01:108B 28              	    81:                     plp
01:108C 68              	    82:                     pla
01:108D B0EC            	    83:                     bcs L107b
01:108F 20A110          	    84:                     jsr S10a1
01:1092 60              	    85:                     rts
                        	    86:                     
01:1093 48              	    87: L1093               pha
01:1094 BCFFFF          	    88:                     ldy $ffff,x
01:1097 201F00          	    89:                     jsr $001f
01:109A 990400          	    90:                     sta $0004,y
01:109D 68              	    91:                     pla
01:109E 4C8510          	    92:                     jmp L1085
                        	    93:                     
01:10A1 A426            	    94: S10a1               ldy $26
01:10A3 A629            	    95:                     ldx $29
01:10A5 8429            	    96:                     sty $29
01:10A7 8626            	    97:                     stx $26
01:10A9 A427            	    98:                     ldy $27
01:10AB A62A            	    99:                     ldx $2a
01:10AD 842A            	   100:                     sty $2a
01:10AF 8627            	   101:                     stx $27
01:10B1 60              	   102:                     rts
                        	   103:                     
01:10B2 8426            	   104: L10b2               sty $26
01:10B4 8627            	   105:                     stx $27
01:10B6 A206            	   106:                     ldx #$06
01:10B8 BDC610          	   107: L10b8               lda $10c6,x
01:10BB 951F            	   108:                     sta $1f,x
01:10BD CA              	   109:                     dex
01:10BE 10F8            	   110:                     bpl L10b8
01:10C0 A960            	   111:                     lda #$60
01:10C2 8528            	   112:                     sta $28
01:10C4 D00A            	   113:                     bne L10d0
01:10C6 E626            	   114:                     inc $26
01:10C8 D002            	   115:                     bne L10cc
01:10CA E627            	   116:                     inc $27
01:10CC ADFFFF          	   117: L10cc               lda $ffff
01:10CF 60              	   118:                     rts
                        	   119:                     
01:10D0 201F00          	   120: L10d0               jsr $001f
01:10D3 8D04DC          	   121:                     sta $dc04
01:10D6 201F00          	   122:                     jsr $001f
01:10D9 8D05DC          	   123:                     sta $dc05
01:10DC 201F00          	   124:                     jsr $001f
01:10DF 8529            	   125:                     sta $29
01:10E1 201F00          	   126:                     jsr $001f
01:10E4 852A            	   127:                     sta $2a
01:10E6 E626            	   128:                     inc $26
01:10E8 D002            	   129:                     bne L10ec
01:10EA E627            	   130:                     inc $27
01:10EC A526            	   131: L10ec               lda $26
01:10EE 8D9510          	   132:                     sta $1095
01:10F1 A527            	   133:                     lda $27
01:10F3 8D9610          	   134:                     sta $1096
01:10F6 A21C            	   135:                     ldx #$1c
01:10F8 A900            	   136:                     lda #$00
01:10FA 9502            	   137: L10fa               sta $02,x
01:10FC CA              	   138:                     dex
01:10FD 10FB            	   139:                     bpl L10fa
01:10FF 20A110          	   140:                     jsr S10a1
01:1102 60              	   141:                     rts
                        	   142:                     
01:1103 A009            	   143: InitSid2            ldy #$09
01:1105 A211            	   144:                     ldx #$11
01:1107 4CB210          	   145:                     jmp L10b2
                        	   146: 
01:110A F00F77110100120D	   147:   .binary "errorsound.bin"
01:1112 04050B1408090706
01:111A 0C030E0F10111713
01:1122 0A1516180200B600
01:112A 6EB60116FF3E0320
01:1132 F0410820FFF000FD
01:113A 00000007FF0000FD
01:1142 070000071E00000F
01:114A FD06166E063E03FF
01:1152 166E080008000863
01:115A 0000004000FF3E03
01:1162 20F04108209FF000
01:116A FD0007BF0000FD07
01:1172 00070E00000F112D
01:117A 00FD114AA0114AA0
01:1182 114AA0114AA0114A
01:118A A0114AA0114AA011
01:1192 4AA0114AA0114AA0
01:119A 114AA0114AA0114A
01:11A2 A0114AA0114AA011
01:11AA 4AA0114AA0114AA0
01:11B2 114AA0114AA0114A
01:11BA A0114AA0114AA011
01:11C2 4AA0114AA0114AA0
01:11CA 114AA0114AA0114A
01:11D2 A0114AA0114AA011
01:11DA 4AA0114AA0114AA0
01:11E2 114AA0114AA0114A
01:11EA A0114AA0114AA011
01:11F2 4AA0114AA0114AA0
01:11FA 114AA0114AA0114A
01:1202 A0114AA0114AA011
01:120A 4AA0114AA0114AA0
01:1212 114AA0114AA0114A
01:121A A0114AA0114AA011
01:1222 4AA0114AA0114AA0
01:122A 114AA200FE
                        	   148: ;          ^^^^^^^^^^^
                        	   149: ; put your data file here.
                        	   150: 
                        	   151: 

Source: "errors.s"
                        	    49: 
                        	    50: startupsoundloop:	
01:122F A502            	    51:   lda donefact		; loop only if the sound is not done
01:1231 D0FC            	    52:   bne startupsoundloop
01:1233 9C0EB0          	    53:   stz $b00e		; if done disable irqs
01:1236 9C0DB0          	    54:   stz $b00d
01:1239 78              	    55:   sei
01:123A A5C0            	    56:   lda $c0		; clear irq vectors
01:123C 8DFF7F          	    57:   sta $7fff
01:123F 9CFE7F          	    58:   stz $7ffe
01:1242 204912          	    59:   jsr clear_sid
01:1245 60              	    60:   rts
01:1246 60              	    61:   rts
01:1247 60              	    62:   rts
01:1248 60              	    63:   rts
                        	    64: 
                        	    65: clear_sid
01:1249 A217            	    66:   ldx #$17 ; 17 cuz no pop
                        	    67: csid
01:124B 9E00B8          	    68:   stz $b800,x
01:124E CA              	    69:   dex
01:124F D0FA            	    70:   bne csid
01:1251 60              	    71:   rts
                        	    72: 
                        	    73: 

Source: "sd_handeler.s"
                        	   262: 


Symbols by name:
DDRA                             E:B003
DDRB                             E:B002
InitSid                          A:0A4E
InitSid2                         A:1103
L1008                            A:1008
L1015                            A:1015
L102e                            A:102E
L1033                            A:1033
L1038                            A:1038
L104a                            A:104A
L1060                            A:1060
L106b                            A:106B
L1076                            A:1076
L107b                            A:107B
L1085                            A:1085
L1093                            A:1093
L10b2                            A:10B2
L10b8                            A:10B8
L10cc                            A:10CC
L10d0                            A:10D0
L10ec                            A:10EC
L10fa                            A:10FA
LCD_E                            E:0080
LCD_RS                           E:0020
LCD_RW                           E:0040
PORTA_OUTPUTPINS                 E:00FC
PlaySid                          A:1006
S10a1                            A:10A1
SD_CS                            E:0010
SD_MOSI                          E:0004
SD_SCK                           E:0008
arc                              A:0971
charbuffer                       E:0601
clear_sid                        A:1249
cleardisplay                     E:FFBE
continue24542                    A:0A39
crlf                             E:FFBB
csid                             A:124B
d400_sVoc1FreqLo                 E:B800
d404_sVoc1Control                E:B804
d40b_sVoc2Control                E:B80B
d412_sVoc3Control                E:B812
dir                              A:096C
dirname                          A:080E
donefact                         E:0002
donemsg                          A:0898
dot                              A:0987
ebut                             A:0973
end                              A:09F5
endlist                          A:099E
endthat                          A:0996
error                            A:0851
error_sound                      A:0A03
errormsg                         A:081A
exitloop                         A:09CE
fat32_address                    E:0054
fat32_bytesremaining             E:005A
fat32_file_read                  E:FFE5
fat32_finddirent                 E:FFDF
fat32_opendirent                 E:FFD9
fat32_openroot                   E:FFD6
fat32_readdirent                 E:FFDC
fat32_workspace                  E:0200
findrau                          A:083F
foundfile                        A:09E0
foundsubdir                      A:085F
irq                              A:0A27
irqcount                         E:0003
jumptoit                         A:0800
jumptolist                       A:09A4
list                             A:0963
loadbuf                          A:094E
loadmsg                          A:089A
lodmm                            A:08C7
lodmsg                           A:0889
lopii                            A:098C
nameloop                         A:097D
nofiles                          A:099E
other                            A:0959
print_chara                      E:FFC7
putbut                           A:0A3D
rootsetup                        A:0842
runthesound                      A:0A09
rxpol                            A:0876
rxput                            A:087E
sdstart                          A:0825
seed                             E:0001
startupsoundloop                 A:122F
txpoll                           E:FFC4
type                             A:0866
typeloop                         A:09AA
typelop                          A:0886
typemsg                          A:08F6
via_init                         A:0803
w_acia_full                      E:FFCD
zp_fat32_variables               E:0046
zp_sd_address                    E:0040

Symbols by value:
0001 seed
0002 donefact
0003 irqcount
0004 SD_MOSI
0008 SD_SCK
0010 SD_CS
0020 LCD_RS
0040 LCD_RW
0040 zp_sd_address
0046 zp_fat32_variables
0054 fat32_address
005A fat32_bytesremaining
0080 LCD_E
00FC PORTA_OUTPUTPINS
0200 fat32_workspace
0601 charbuffer
0800 jumptoit
0803 via_init
080E dirname
081A errormsg
0825 sdstart
083F findrau
0842 rootsetup
0851 error
085F foundsubdir
0866 type
0876 rxpol
087E rxput
0886 typelop
0889 lodmsg
0898 donemsg
089A loadmsg
08C7 lodmm
08F6 typemsg
094E loadbuf
0959 other
0963 list
096C dir
0971 arc
0973 ebut
097D nameloop
0987 dot
098C lopii
0996 endthat
099E endlist
099E nofiles
09A4 jumptolist
09AA typeloop
09CE exitloop
09E0 foundfile
09F5 end
0A03 error_sound
0A09 runthesound
0A27 irq
0A39 continue24542
0A3D putbut
0A4E InitSid
1006 PlaySid
1008 L1008
1015 L1015
102E L102e
1033 L1033
1038 L1038
104A L104a
1060 L1060
106B L106b
1076 L1076
107B L107b
1085 L1085
1093 L1093
10A1 S10a1
10B2 L10b2
10B8 L10b8
10CC L10cc
10D0 L10d0
10EC L10ec
10FA L10fa
1103 InitSid2
122F startupsoundloop
1249 clear_sid
124B csid
B002 DDRB
B003 DDRA
B800 d400_sVoc1FreqLo
B804 d404_sVoc1Control
B80B d40b_sVoc2Control
B812 d412_sVoc3Control
FFBB crlf
FFBE cleardisplay
FFC4 txpoll
FFC7 print_chara
FFCD w_acia_full
FFD6 fat32_openroot
FFD9 fat32_opendirent
FFDC fat32_readdirent
FFDF fat32_finddirent
FFE5 fat32_file_read
