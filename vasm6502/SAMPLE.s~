done = $00
sample = $01
flag = $02
SID = $b800

flagSeed = $55           ; flag seed, 8kHz
freq     = $80           ; CIA NMI timer delay, 8kHz
;flagSeed = $00           ; flag seed, 4Hz
;freq    = $100          ; CIA NMI timer delay, 4kHz

	.org $0f00
darn
	jmp $1000

	.org $1000

;-------------------------------------------------------------------------------
; Initialize DIGI_Player

        PHA                     ; We need to save both A
        TXA                     ;
        PHA                     ; and X as we use them

        ; disable interrupts
        LDA #$00                ; was $7f in the_c64_digi.txt
        STA $B00D               ; ICR CIA #2
               ; read acks any pending interrupt
        LDA $B00D
        SEI                    ; disables maskable interrupts

        ; switch out kernal rom while sample playing
        LDA #$35                ;
        STA $01                 ; 6510 banking register

        ; initialize SID
        LDA #$00                ; zeros out all SID registers
        LDX #$00                ;
SIDCLR                          
        STA SID,x               ; 
        INX                     ;
        BNE SIDCLR             

        ; SID voices modulated too, increases volume on 8580 SIDs
        LDA #$00                ; 
        STA SID+$05             ; voice 1 Attach/Decay 
        LDA #$F0                ;
        STA SID+$06             ;         Systain/Release 
        LDA #$01                ;
        STA SID+$04             ;         ctrl 
        LDA #$00 
        STA SID+$0C             ; voice 2 Attach/Decay 
        LDA #$F0                ;
        STA SID+$0D             ;         Systain/Release 
        LDA #$01                ;
        STA SID+$0B             ;         ctrl 
        LDA #$00        
        STA SID+$13             ; voice 3 Attach/Decay 
        LDA #$F0                ;
        STA SID+$14             ;         Systain/Release 
        LDA #$01                ;
        STA SID+$12             ;         ctrl 
        LDA #$00 
        STA SID+$15             ; filter  lo 
        LDA #$10                ;
        STA SID+$16             ; filter  hi 
        LDA #$F7                ;
        STA SID+$17             ; filter  voices+reso 

        ; point to our player routine
        LDA #<NMI_HANDLER       ; set NMI handler address low byte
        STA $FFFF               ;
        LDA #>NMI_HANDLER       ; set NMI handler address hi byte
        STA $FFFE               ;

        LDA #<DATASTART         ; low byte
        STA loadnew+1           ;
        LDA #>DATASTART         ; high byte
        STA loadnew+2           ;

        LDA #flagSeed           ; initialize flag used for
        STA flag                ; indicating which nibble to play
        LDA DATASTART           ; loads first sample byte
        STA sample              ; save to temp storage address
        INC loadnew+1           ; # - increment self-mod pointer LSB

	JSR wee


        LDA #$81                ; ICR set to TMR A underflow
        STA $B00D               ; ICR CIA #2
        LDA #$11                ;
        STA $B00E               ; CRA interrupt enable

        LDA #$00                ;
        STA done                ; reset player done flag

pause
        LDA done                ; player sets'done' flag when finished, pause
        BEQ pause               ; until then for clean return to BASIC

        PLA                     ; Let's get our saved
        TAX                     ; X register and
        PLA                     ; A register back
        CLI                     ; enable maskable interrutps again
        RTS                     ; and return
wee
        ; setup CIA #2, do last as it starts interrupts!
        LDA #<freq              ; interrupt freq
        STA $B004               ; TA LO
        LDA #>freq              ;
        STA $B005               ; TA HI
        ; setup CIA #2, do last as it starts interrupts!
        LDA #<freq              ; interrupt freq
        STA $B006               ; TA LO
        LDA #>freq              ;
        STA $B007               ; TA HI
	RTS


;-------------------------------------------------------------------------------
; NMI handler routine, plays one 4bit sample per pass
; Path A -> Play Lower, shift upper down. 3+19+13+23=58 cycles
; Path B -> Play upper, load new sample. 3+19+8+25=55 cycles
; Path C -> Play upper. load sample, new page. 3+19+8+14+21=65 cycles
; Sample's lower nybble holds the 4-bit sample to played on the "even" NMIs
; The upper nybble holds the next nybble to be played on "odd" NMIs
NMI_HANDLER        
        ; start with saving state       
        PHA                     ; 3- (3) will restore when returning

	JSR wee

        ; play 4-bit sample, first sample byte saved during Init
        LDA sample              ; 3- load sample byte
        ORA #$10                ; 2- make sure we don't kill filter settings
        AND #$1F                ; 2- git rid of any dangling high bits
        STA SID+$18             ; 4- save to SID volume regsiter
        LDA $B00D               ; 4- (19)clear NMI

        ; flag init to $AA or $55, We shift alternating pattern though flag byte
        ASL flag                ; 5- shift patten left thru flag byte
        BCC loadnew             ; 2-3 
        INC flag                ; 5 (8-13) so skip ahead to load new byte
   
shftupr
        LDA sample              ; 3- *1 shift upper nibble down
        LSR a                   ; 2-
        LSR a                   ; 2-
        LSR a                   ; 2-
        LSR a                   ; 2-
        STA sample              ; 3- store it back to play next pass

        PLA                     ; 3- local exit code is smaller and 
        RTI                     ; 6- (23) faster than jumps/branches

        ; loadnew+1,+2 is self-modifying ptr to sample, gets set in init
loadnew
        LDA $FFFB               ; 3 -self-mod pointer to sample
        STA sample              ; 3- save to temp location
        INC loadnew+1           ; 5 - increment self-mod pointer LSB
        BEQ nextPage           ; 2-3- (??) did we cross a page?

        PLA                     ; 3- local exit code is smaller and
        RTI                     ; 6- (14-25)faster than jumps/branches

nextPage
        ; this is only executed every 512 samples
        LDA loadnew+2           ; 3- increment self-mod pointer MSB
        ADC #$01                ; 2- carry is clear from flag test
        CMP #>DATASTOP          ; 2- are we done?
        BEQ stop               ; 2-3- yes, then stop
        STA loadnew+2           ; 3- no, save new MSB

        PLA                     ; 3- local exit code is smaller and
        RTI                     ; 6- (18-21)faster than jumps/branches

stop
        LDA #$08                ; 2- turn off NMI
        STA $B00E               ; 4- timer A stop-CRA, CIA #1 DC0E
        LDA #$4F                ; 2- disable all CIA-2 NMIs 
        STA $B00D               ; 4- ICR - interrupt control / status
        LDA $B00D               ; 4- (16) sta/lda to ack any pending int

        LDA #$37                ; 2- reset kernal banking
        STA $01                 ; 3- (5)

        INC done                ; set player done flag
        
        PLA                     ; 3- local exit code is smaller and
        RTI                     ; 6- faster than jumps/branches

	.org $2000

DATASTART 

          BYTE $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
          BYTE $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
          BYTE $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
          BYTE $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
          BYTE $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
          BYTE $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
          BYTE $87,$88,$88,$88,$88,$88,$89,$88,$88,$89,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
          BYTE $97,$88,$88,$88,$88,$89,$88,$78,$79,$88,$78,$79,$88,$97,$B5,$76,$8A,$97,$59,$8B
          BYTE $A6,$68,$99,$86,$69,$98,$87,$79,$98,$87,$79,$88,$88,$59,$8A,$B4,$68,$A9,$A5,$5A
          BYTE $AA,$85,$69,$B7,$76,$7A,$A7,$77,$6A,$A7,$77,$59,$7C,$C5,$58,$9A,$A5,$58,$9A,$95
          BYTE $6A,$A8,$86,$6A,$98,$86,$6A,$B8,$96,$97,$49,$8C,$A4,$59,$A9,$95,$5B,$A9,$87,$79
          BYTE $A6,$77,$89,$A7,$77,$89,$86,$4C,$E7,$65,$6D,$B6,$67,$8B,$96,$78,$97,$77,$7A,$A8
          BYTE $87,$69,$B6,$84,$3D,$D9,$64,$5C,$B6,$67,$9A,$86,$6A,$A7,$67,$8A,$A7,$68,$69,$78
          BYTE $D6,$83,$4E,$C6,$66,$6B,$A8,$88,$88,$67,$88,$97,$98,$89,$99,$96,$76,$4C,$D8,$75
          BYTE $7A,$98,$98,$8A,$89,$87,$76,$78,$A8,$88,$98,$88,$58,$8C,$E2,$19,$9C,$B1,$5B,$BA
          BYTE $77,$7A,$A4,$58,$99,$96,$69,$8A,$68,$AC,$C1,$1D,$C7,$53,$8C,$C7,$68,$A7,$76,$8A
          BYTE $89,$87,$77,$69,$69,$DA,$A2,$2E,$B6,$65,$9A,$B8,$78,$85,$69,$99,$99,$97,$57,$79
          BYTE $77,$CA,$93,$1F,$E5,$64,$9B,$98,$78,$85,$68,$99,$A8,$78,$78,$88,$68,$BB,$A2,$2E
          BYTE $C5,$56,$AA,$79,$98,$84,$7A,$97,$89,$87,$67,$89,$77,$9C,$C2,$1C,$B8,$75,$A8,$6A
          BYTE $98,$85,$7B,$A7,$89,$87,$78,$98,$77,$7D,$D3,$1A,$A9,$85,$98,$6A,$88,$86,$89,$96
          BYTE $7A,$96,$77,$88,$86,$5D,$E5,$27,$9B,$85,$A8,$5A,$89,$96,$79,$96,$7A,$A7,$87,$78
          BYTE $A6,$3B,$E8,$45,$6D,$95,$B7,$5A,$9A,$96,$78,$87,$8A,$A7,$87,$78,$B6,$3A,$EA,$63
          BYTE $6C,$96,$B8,$59,$99,$86,$69,$98,$89,$98,$87,$78,$A6,$3B,$E9,$63,$6C,$96,$B7,$49
          BYTE $99,$86,$69,$98,$89,$88,$87,$78,$B6,$3B,$DA,$73,$6B,$87,$D8,$58,$8A,$86,$68,$88
          BYTE $89,$88,$88,$87,$B6,$3B,$CA,$73,$6B,$77,$D9,$57,$8A,$86,$69,$98,$89,$78,$78,$78
          BYTE $C6,$39,$BC,$82,$6A,$77,$DA,$65,$7A,$96,$78,$98,$89,$87,$68,$68,$D8,$66,$7E,$A3
          BYTE $69,$78,$BB,$74,$7A,$96,$79,$A7,$79,$97,$78,$77,$AC,$B4,$2D,$C5,$67,$98,$8C,$84
          BYTE $7A,$96,$69,$B7,$69,$98,$78,$95,$6D,$E5,$18,$C9,$66,$A8,$6B,$95,$69,$98,$67,$A9
          BYTE $68,$88,$68,$D6,$3A,$EA,$23,$AC,$75,$BA,$58,$A7,$68,$99,$75,$9B,$76,$89,$48,$E9
          BYTE $54,$9F,$71,$8D,$84,$AB,$66,$99,$77,$8A,$84,$8B,$86,$98,$55,$9E,$C1,$3E,$B3,$6B
          BYTE $A5,$7B,$86,$8A,$87,$69,$A5,$7B,$97,$88,$B3,$2D,$F7,$26,$C9,$48,$C8,$58,$A8,$78
          BYTE $98,$57,$B8,$69,$89,$48,$E7,$36,$CE,$61,$AC,$65,$AB,$65,$9A,$87,$88,$65,$AA,$87
          BYTE $99,$56,$9D,$A3,$4E,$A4,$7B,$A4,$5C,$95,$7A,$98,$67,$96,$8B,$97,$79,$A4,$3C,$F7
          BYTE $27,$C9,$58,$C8,$48,$B8,$78,$8A,$65,$A8,$79,$99,$58,$C8,$45,$AE,$72,$AC,$65,$AB
          BYTE $64,$9B,$A6,$5B,$85,$9A,$87,$89,$85,$7C,$B4,$3C,$C5,$5B,$B5,$4A,$A6,$6A,$C8,$37
          BYTE $A7,$79,$98,$59,$D7,$37,$DA,$45,$CA,$47,$CA,$55,$AA,$77,$9B,$54,$A9,$88,$99,$66
          BYTE $8C,$94,$6C,$84,$9B,$84,$6C,$94,$89,$A7,$6A,$85,$8A,$88,$78,$B6,$49,$C9,$56,$A8
          BYTE $5A,$C7,$47,$A8,$88,$AA,$66,$97,$89,$89,$78,$AA,$74,$8C,$84,$9A,$77,$8B,$85,$89
          BYTE $97,$6A,$85,$88,$98,$78,$88,$7A,$A5,$5A,$A6,$79,$96,$79,$97,$78,$A8,$58,$98,$88
          BYTE $89,$88,$8A,$96,$68,$8A,$97,$79,$89,$A7,$78,$87,$9A,$77,$88,$88,$78,$A8,$68,$86
          BYTE $87,$8B,$A7,$58,$88,$99,$87,$88,$88,$88,$88,$77,$88,$AA,$77,$78,$97,$89,$8A,$76
          BYTE $87,$89,$89,$87,$88,$87,$99,$77,$97,$8A,$87,$77,$98,$88,$7A,$76,$87,$89,$98,$78
          BYTE $78,$87,$89,$77,$98,$78,$89,$77,$89,$97,$79,$97,$78,$98,$88,$89,$77,$87,$89,$98
          BYTE $88,$76,$89,$97,$79,$87,$78,$A8,$78,$88,$87,$89,$78,$87,$89,$98,$78,$87,$78,$A9
          BYTE $78,$88,$87,$89,$77,$79,$97,$89,$77,$88,$87,$99,$88,$78,$87,$89,$88,$77,$88,$88
          BYTE $98,$78,$98,$78,$88,$88,$98,$88,$88,$78,$98,$88,$88,$87,$88,$87,$88,$88,$89,$87
          BYTE $88,$88,$98,$88,$88,$87,$88,$88,$88,$87,$88,$87,$98,$88,$88,$88,$88,$88,$88,$88
          BYTE $89,$87,$88,$88,$88,$88,$78,$87,$88,$88,$88,$88,$88,$88,$88,$88,$89,$88,$78,$88
          BYTE $88,$98,$78,$87,$88,$88,$88,$87,$88,$88,$88,$88,$88,$98,$78,$88,$88,$88,$88,$88
          BYTE $88,$88,$88,$88,$88,$88,$88,$88,$87,$88,$88,$88,$88,$88,$88,$88,$88,$98,$88,$89
          BYTE $77,$88,$98,$89,$87,$78,$98,$88,$88,$78,$88,$88,$87,$88,$88,$89,$87,$88,$98,$88
          BYTE $88,$77,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$78,$88,$88,$88
          BYTE $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
          BYTE $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
          BYTE $88,$88,$88,$78,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$78
          BYTE $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
          BYTE $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
          BYTE $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
          BYTE $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
          BYTE $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
          BYTE $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
          BYTE $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
          BYTE $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
          BYTE $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
          BYTE $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
          BYTE $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
          BYTE $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
          BYTE $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
          BYTE $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
          BYTE $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
          BYTE $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
          BYTE $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
          BYTE $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
          BYTE $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
          BYTE $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
          BYTE $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
          BYTE $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
          BYTE $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
          BYTE $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
          BYTE $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
          BYTE $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
          BYTE $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
          BYTE $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
          BYTE $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
          BYTE $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
          BYTE $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
          BYTE $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
          BYTE $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
          BYTE $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
          BYTE $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
          BYTE $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
          BYTE $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
          BYTE $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
          BYTE $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
          BYTE $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
          BYTE $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
          BYTE $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
          BYTE $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
          BYTE $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
          BYTE $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
          BYTE $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
          BYTE $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
          BYTE $88,$88,$88,$88,$88,$88,$88,$88

DATASTOP
