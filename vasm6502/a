F00:0001       ; The Kansas City Standard for the XPL-32
F00:0002       ; 2400hz = 1
F00:0003       ; 1200hz = 0
F00:0004       ; data is encoded with 2400hz starting sound (for alignment)
F00:0005       ; start bit is a 0
F00:0006       ; end bit is a >2 1s
F00:0007       ; a byte is LEAST SIGNIFICANT TO MOST SIGNIFICANT as in 011 -> 110
F00:0008       
F00:0009       thing  = $00
F00:0010       odd    = $01
F00:0011       buf    = $02
F00:0012       eorr   = $03
F00:0013       tapest = $04
F00:0014       
F00:0015       
F00:0016         .org $0f00
F00:0017       
F00:0018       start:
F00:0019         jsr via_init		; init VIA
               S01:00000F00:  20 4F 10
F00:0020         stz $b00e
               S01:00000F03:  9C 0E B0
F00:0021         stz tapest
               S01:00000F06:  64 04
F00:0022       ;  ldx #0
F00:0023       ;datlop:
F00:0024       ;  txa
F00:0025       ;  sta dat,x		; store data that counts
F00:0026       ;  inx
F00:0027       ;  bne datlop
F00:0028       
F00:0029         ldx #<msg
               S01:00000F08:  A2 E5
F00:0030         ldy #>msg		; press rec and play
               S01:00000F0A:  A0 10
F00:0031         jsr w_acia_full
               S01:00000F0C:  20 C2 10
F00:0032       
F00:0033         lda #$18		; 4 seconds
               S01:00000F0F:  A9 18
F00:0034         jsr tape_delay		; (ye fumble)
               S01:00000F11:  20 40 10
F00:0035       
F00:0036         ldx #<saving_msg	; Saving...
               S01:00000F14:  A2 13
F00:0037         ldy #>saving_msg
               S01:00000F16:  A0 11
F00:0038         jsr w_acia_full
               S01:00000F18:  20 C2 10
F00:0039       
F00:0040         jsr inout		; intro sound
               S01:00000F1B:  20 66 0F
F00:0041       
F00:0042         jsr zero
               S01:00000F1E:  20 E7 0F
F00:0043       
F00:0044         ldx #0
               S01:00000F21:  A2 00
F00:0045         ldy #1
               S01:00000F23:  A0 01
F00:0046         sty thing		; first bit
               S01:00000F25:  84 00
F00:0047       wop:
F00:0048         lda dat,x		; load data
               S01:00000F27:  BD 27 11
F00:0049         and thing		; mask it
               S01:00000F2A:  25 00
F00:0050         bne jsrone		; one
               S01:00000F2C:  D0 0E
F00:0051         jsr zero		; or zero
               S01:00000F2E:  20 E7 0F
F00:0052       oner:
F00:0053         lda thing		; load the bitmask
               S01:00000F31:  A5 00
F00:0054         cmp #$80		; end of byte?
               S01:00000F33:  C9 80
F00:0055         beq noo
               S01:00000F35:  F0 0B
F00:0056         asl thing
               S01:00000F37:  06 00
F00:0057         jmp wop		; next bit
               S01:00000F39:  4C 27 0F
F00:0058       jsrone:
F00:0059         jsr one		; a one
               S01:00000F3C:  20 7A 0F
F00:0060         jmp oner
               S01:00000F3F:  4C 31 0F
F00:0061       noo:
F00:0062         lda #1		; byte done
               S01:00000F42:  A9 01
F00:0063         sta thing
               S01:00000F44:  85 00
F00:0064         jsr one
               S01:00000F46:  20 7A 0F
F00:0065         jsr one
               S01:00000F49:  20 7A 0F
F00:0066         lda dat,x
               S01:00000F4C:  BD 27 11
F00:0067         beq savedone
               S01:00000F4F:  F0 06
F00:0068         jsr zero
               S01:00000F51:  20 E7 0F
F00:0069         inx			; next byte
               S01:00000F54:  E8
F00:0070         bne wop
               S01:00000F55:  D0 D0
F00:0071       savedone
F00:0072         jsr inout		; we are done, ending sound  
               S01:00000F57:  20 66 0F
F00:0073       
F00:0074         ; done
F00:0075         ldx #<msg2
               S01:00000F5A:  A2 1D
F00:0076         ldy #>msg2		; "Done!"
               S01:00000F5C:  A0 11
F00:0077         jsr w_acia_full
               S01:00000F5E:  20 C2 10
F00:0078       
F00:0079         rts
               S01:00000F61:  60
F00:0080         rts
               S01:00000F62:  60
F00:0081         rts			; return
               S01:00000F63:  60
F00:0082         rts
               S01:00000F64:  60
F00:0083         rts
               S01:00000F65:  60
F00:0084       
F00:0085       
F00:0086       
F00:0087       ; subs
F00:0088       
F00:0089       inout:
F00:0090         pha
               S01:00000F66:  48
F00:0091         phx
               S01:00000F67:  DA
F00:0092         phy
               S01:00000F68:  5A
F00:0093         ldy #$40
               S01:00000F69:  A0 40
F00:0094       outer:
F00:0095         ldx #$10		; $40 * $10 times make the sound
               S01:00000F6B:  A2 10
F00:0096       starter:
F00:0097         jsr one		; sound
               S01:00000F6D:  20 7A 0F
F00:0098         dex
               S01:00000F70:  CA
F00:0099         bne starter
               S01:00000F71:  D0 FA
F00:0100         dey
               S01:00000F73:  88
F00:0101         bne outer
               S01:00000F74:  D0 F5
F00:0102         ply
               S01:00000F76:  7A
F00:0103         plx
               S01:00000F77:  FA
F00:0104         pla
               S01:00000F78:  68
F00:0105         rts
               S01:00000F79:  60
F00:0106       
F00:0107       one:			; 2400hz sound 8 cyc
F00:0108         pha
               S01:00000F7A:  48
F00:0109         jsr togtap ; 1
               S01:00000F7B:  20 DD 0F
F00:0110         jsr onefreq
               S01:00000F7E:  20 1A 10
F00:0111         jsr togtap
               S01:00000F81:  20 DD 0F
F00:0112         jsr onefreq
               S01:00000F84:  20 1A 10
F00:0113         jsr togtap ; 2
               S01:00000F87:  20 DD 0F
F00:0114         jsr onefreq
               S01:00000F8A:  20 1A 10
F00:0115         jsr togtap
               S01:00000F8D:  20 DD 0F
F00:0116         jsr onefreq
               S01:00000F90:  20 1A 10
F00:0117         jsr togtap ; 3
               S01:00000F93:  20 DD 0F
F00:0118         jsr onefreq
               S01:00000F96:  20 1A 10
F00:0119         jsr togtap
               S01:00000F99:  20 DD 0F
F00:0120         jsr onefreq
               S01:00000F9C:  20 1A 10
F00:0121         jsr togtap ; 4
               S01:00000F9F:  20 DD 0F
F00:0122         jsr onefreq
               S01:00000FA2:  20 1A 10
F00:0123         jsr togtap
               S01:00000FA5:  20 DD 0F
F00:0124         jsr onefreq
               S01:00000FA8:  20 1A 10
F00:0125         jsr togtap ; 5
               S01:00000FAB:  20 DD 0F
F00:0126         jsr onefreq
               S01:00000FAE:  20 1A 10
F00:0127         jsr togtap
               S01:00000FB1:  20 DD 0F
F00:0128         jsr onefreq
               S01:00000FB4:  20 1A 10
F00:0129         jsr togtap ; 6
               S01:00000FB7:  20 DD 0F
F00:0130         jsr onefreq
               S01:00000FBA:  20 1A 10
F00:0131         jsr togtap
               S01:00000FBD:  20 DD 0F
F00:0132         jsr onefreq
               S01:00000FC0:  20 1A 10
F00:0133         jsr togtap ; 7
               S01:00000FC3:  20 DD 0F
F00:0134         jsr onefreq
               S01:00000FC6:  20 1A 10
F00:0135         jsr togtap
               S01:00000FC9:  20 DD 0F
F00:0136         jsr onefreq
               S01:00000FCC:  20 1A 10
F00:0137         jsr togtap ; 8
               S01:00000FCF:  20 DD 0F
F00:0138         jsr onefreq
               S01:00000FD2:  20 1A 10
F00:0139         jsr togtap
               S01:00000FD5:  20 DD 0F
F00:0140         jsr onefreq
               S01:00000FD8:  20 1A 10
F00:0141         pla
               S01:00000FDB:  68
F00:0142         rts
               S01:00000FDC:  60
F00:0143       
F00:0144       togtap:
F00:0145         lda tapest
               S01:00000FDD:  A5 04
F00:0146         eor #%10000000
               S01:00000FDF:  49 80
F00:0147         sta tapest
               S01:00000FE1:  85 04
F00:0148         sta PORTA
               S01:00000FE3:  8D 01 B0
F00:0149         rts
               S01:00000FE6:  60
F00:0150       
F00:0151       zero: 			; 1200hz sound 4 cyc
F00:0152         pha 
               S01:00000FE7:  48
F00:0153         jsr togtap ; 1
               S01:00000FE8:  20 DD 0F
F00:0154         jsr zerofreq
               S01:00000FEB:  20 2D 10
F00:0155         jsr togtap
               S01:00000FEE:  20 DD 0F
F00:0156         jsr zerofreq
               S01:00000FF1:  20 2D 10
F00:0157         jsr togtap ; 2
               S01:00000FF4:  20 DD 0F
F00:0158         jsr zerofreq
               S01:00000FF7:  20 2D 10
F00:0159         jsr togtap
               S01:00000FFA:  20 DD 0F
F00:0160         jsr zerofreq
               S01:00000FFD:  20 2D 10
F00:0161         jsr togtap ; 3
               S01:00001000:  20 DD 0F
F00:0162         jsr zerofreq
               S01:00001003:  20 2D 10
F00:0163         jsr togtap
               S01:00001006:  20 DD 0F
F00:0164         jsr zerofreq
               S01:00001009:  20 2D 10
F00:0165         jsr togtap ; 4
               S01:0000100C:  20 DD 0F
F00:0166         jsr zerofreq
               S01:0000100F:  20 2D 10
F00:0167         jsr togtap
               S01:00001012:  20 DD 0F
F00:0168         jsr zerofreq
               S01:00001015:  20 2D 10
F00:0169         pla
               S01:00001018:  68
F00:0170         rts
               S01:00001019:  60
F00:0171       
F00:0172       onefreq:
F00:0173         stz $b00b
               S01:0000101A:  9C 0B B0
F00:0174         lda #$ae
               S01:0000101D:  A9 AE
F00:0175         sta $b004		; freq
               S01:0000101F:  8D 04 B0
F00:0176         lda #$00
               S01:00001022:  A9 00
F00:0177         sta $b005
               S01:00001024:  8D 05 B0
F00:0178       intro:
F00:0179         bit $b00d		; delay complete?
               S01:00001027:  2C 0D B0
F00:0180         bvc intro
               S01:0000102A:  50 FB
F00:0181         rts
               S01:0000102C:  60
F00:0182       
F00:0183       zerofreq:
F00:0184         stz $b00b
               S01:0000102D:  9C 0B B0
F00:0185         lda #$3f
               S01:00001030:  A9 3F
F00:0186         sta $b004
               S01:00001032:  8D 04 B0
F00:0187         lda #$01
               S01:00001035:  A9 01
F00:0188         sta $b005
               S01:00001037:  8D 05 B0
F00:0189       intro2:
F00:0190         bit $b00d
               S01:0000103A:  2C 0D B0
F00:0191         bvc intro2
               S01:0000103D:  50 FB
F00:0192         rts
               S01:0000103F:  60
F00:0193       
F00:0194       tape_delay:
F00:0195         ldx #$ff		; wait for ye fumble.
               S01:00001040:  A2 FF
F00:0196       rd1:
F00:0197         lda #$7a		; (Y times through inner loop,
               S01:00001042:  A9 7A
F00:0198       rd2:     
F00:0199         sbc #$01		;  Y * $FF * 650uS = uS / 1e-6 = S )
               S01:00001044:  E9 01
F00:0200         bne rd2
               S01:00001046:  D0 FC
F00:0201       rd3:
F00:0202         dex
               S01:00001048:  CA
F00:0203         bne rd1
               S01:00001049:  D0 F7
F00:0204         dey
               S01:0000104B:  88
F00:0205         bne tape_delay
               S01:0000104C:  D0 F2
F00:0206         rts
               S01:0000104E:  60
F00:0207       
F00:0208         .include "hwtape.s"
F01:0001       PORTB = $b000
F01:0002       PORTA = $b001
F01:0003       DDRB = $b002
F01:0004       DDRA = $b003
F01:0005       
F01:0006       LCD_E  = %10000000
F01:0007       LCD_RW = %01000000
F01:0008       LCD_RS = %00100000
F01:0009       
F01:0010       SD_CS    = %00010000
F01:0011       SD_SCK   = %00001000
F01:0012       SD_MOSI  = %00000100
F01:0013       SD_MISO  = %00000010
F01:0014       TAPE_EAR = %00000000 ; PA0 IN
F01:0015       TAPE_MIC = %10000000 ; PA1 OUT
F01:0016       
F01:0017       PORTA_OUTPUTPINS = TAPE_EAR | TAPE_MIC
F01:0018       
F01:0019       via_init:
F01:0020         lda #%11111111          ; Set all pins on port B to output
               S01:0000104F:  A9 FF
F01:0021         sta DDRB
               S01:00001051:  8D 02 B0
F01:0022         lda #PORTA_OUTPUTPINS   ; Set various pins on port A to output
               S01:00001054:  A9 80
F01:0023         sta DDRA
               S01:00001056:  8D 03 B0
F01:0024         rts
               S01:00001059:  60
F01:0025       
F01:0026       
F00:0209         .include "libacia.s"
F02:0001       ;       ------------------ 6551 ACIA Subroutine Library -------------------
F02:0002       ; Includes:
F02:0003       ; acia_init       - Initializes the ACIA
F02:0004       ; print_hex_acia  - Prints a hex value in A
F02:0005       ; crlf		  - Prints <CR> followed by <LF>
F02:0006       ; clear_display   - Sends a <CLS> command
F02:0007       ; txpoll          - Polls the TX bit to see if the ACIA is ready
F02:0008       ; print_chara     - Prints a Character that is stored in A
F02:0009       ; print_char_acia - Same as print_chara
F02:0010       ; ascii_home      - Home the cursor
F02:0011       ; w_acia_full     - Print a NULL-Termintated String with >HIGH in Y and <LOW in X
F02:0012       
F02:0013       acia_init:
F02:0014         pha
               S01:0000105A:  48
F02:0015         lda #%00001011          ; No parity, no echo, no interrupt
               S01:0000105B:  A9 0B
F02:0016         sta $8002
               S01:0000105D:  8D 02 80
F02:0017         lda #%00011111          ; 1 stop bit, 8 data bits, 19200 baud
               S01:00001060:  A9 1F
F02:0018         sta $8003
               S01:00001062:  8D 03 80
F02:0019         pla
               S01:00001065:  68
F02:0020         rts
               S01:00001066:  60
F02:0021       
F02:0022       print_hex_acia:
F02:0023         pha
               S01:00001067:  48
F02:0024         ror
               S01:00001068:  6A
F02:0025         ror
               S01:00001069:  6A
F02:0026         ror
               S01:0000106A:  6A
F02:0027         ror
               S01:0000106B:  6A
F02:0028         jsr print_nybble   ; This is just som usful hex cod
               S01:0000106C:  20 70 10
F02:0029         pla
               S01:0000106F:  68
F02:0030       print_nybble:
F02:0031         and #15
               S01:00001070:  29 0F
F02:0032         cmp #10
               S01:00001072:  C9 0A
F02:0033         bmi cskipletter
               S01:00001074:  30 02
F02:0034         adc #6
               S01:00001076:  69 06
F02:0035       cskipletter:
F02:0036         adc #48
               S01:00001078:  69 30
F02:0037        ; jsr print_char
F02:0038         jsr print_chara
               S01:0000107A:  20 AE 10
F02:0039         rts
               S01:0000107D:  60
F02:0040       
F02:0041       crlf:
F02:0042         pha
               S01:0000107E:  48
F02:0043         txa
               S01:0000107F:  8A
F02:0044         pha
               S01:00001080:  48
F02:0045         tya
               S01:00001081:  98
F02:0046         pha
               S01:00001082:  48
F02:0047         lda #$0d
               S01:00001083:  A9 0D
F02:0048         jsr print_chara
               S01:00001085:  20 AE 10
F02:0049         lda #$0a
               S01:00001088:  A9 0A
F02:0050         jsr print_chara
               S01:0000108A:  20 AE 10
F02:0051         pla
               S01:0000108D:  68
F02:0052         tay
               S01:0000108E:  A8
F02:0053         pla
               S01:0000108F:  68
F02:0054         tax
               S01:00001090:  AA
F02:0055         pla
               S01:00001091:  68
F02:0056         rts
               S01:00001092:  60
F02:0057       
F02:0058       cleardisplay:
F02:0059         pha
               S01:00001093:  48
F02:0060         jsr txpoll  ; Poll the TX bit
               S01:00001094:  20 9E 10
F02:0061         lda #12     ; Print decimal 12 (CLS)
               S01:00001097:  A9 0C
F02:0062         sta $8000
               S01:00001099:  8D 00 80
F02:0063         pla
               S01:0000109C:  68
F02:0064         rts
               S01:0000109D:  60
F02:0065       
F02:0066       txpoll:
F02:0067         lda $8001
               S01:0000109E:  AD 01 80
F02:0068         and #$10    ; Poll the TX bit
               S01:000010A1:  29 10
F02:0069         beq txpoll
               S01:000010A3:  F0 F9
F02:0070         rts
               S01:000010A5:  60
F02:0071       
F02:0072       rxpoll:
F02:0073         lda $8001
               S01:000010A6:  AD 01 80
F02:0074         and #$08    ; Poll the RX bit
               S01:000010A9:  29 08
F02:0075         beq rxpoll
               S01:000010AB:  F0 F9
F02:0076         rts
               S01:000010AD:  60
F02:0077       
F02:0078       
F02:0079       print_chara:
F02:0080         pha
               S01:000010AE:  48
F02:0081         jsr txpoll  ; Poll the TX bit
               S01:000010AF:  20 9E 10
F02:0082         pla
               S01:000010B2:  68
F02:0083         sta $8000   ; Print character from A
               S01:000010B3:  8D 00 80
F02:0084         rts
               S01:000010B6:  60
F02:0085       
F02:0086       print_char_acia:
F02:0087         jmp print_chara  ; Same as "print_chara"
               S01:000010B7:  4C AE 10
F02:0088       
F02:0089       ascii_home:
F02:0090         pha
               S01:000010BA:  48
F02:0091         lda #1
               S01:000010BB:  A9 01
F02:0092         jsr print_chara  ; Print 1 (HOME)
               S01:000010BD:  20 AE 10
F02:0093         pla
               S01:000010C0:  68
F02:0094         rts
               S01:000010C1:  60
F02:0095       
F02:0096       w_acia_full:
F02:0097         pha
               S01:000010C2:  48
F02:0098         lda $ff
               S01:000010C3:  A5 FF
F02:0099         pha        ; Push Previous States onto the stack
               S01:000010C5:  48
F02:0100         lda $fe
               S01:000010C6:  A5 FE
F02:0101         pha
               S01:000010C8:  48
F02:0102         sty $ff    ; Set Y as the Upper Address (8-15)
               S01:000010C9:  84 FF
F02:0103         stx $fe    ; Set X as the Lower Adderss (0-7)
               S01:000010CB:  86 FE
F02:0104         ldy #0
               S01:000010CD:  A0 00
F02:0105       acia_man:
F02:0106         jsr txpoll   ; Poll TX
               S01:000010CF:  20 9E 10
F02:0107         lda ($fe),y  ; Load the Address
               S01:000010D2:  B1 FE
F02:0108         sta $8000    ; Print what is at the address
               S01:000010D4:  8D 00 80
F02:0109         beq endwacia ; If Done, End
               S01:000010D7:  F0 04
F02:0110         iny          ; Next Character
               S01:000010D9:  C8
F02:0111         jmp acia_man ; Back to the top
               S01:000010DA:  4C CF 10
F02:0112       endwacia:
F02:0113         pla
               S01:000010DD:  68
F02:0114         sta $fe
               S01:000010DE:  85 FE
F02:0115         pla          ; Restore Variables
               S01:000010E0:  68
F02:0116         sta $ff
               S01:000010E1:  85 FF
F02:0117         pla
               S01:000010E3:  68
F02:0118         rts
               S01:000010E4:  60
F02:0119       
F00:0210       ;     cursor off   |                               | CR | LF | NULL
F00:0211       msg:
F00:0212         .byte $02, $ff, "Press Record And play on Tape.", $0d, $0a, $00
               S01:000010E5:  02
               S01:000010E6:  FF
               S01:000010E7:  50 72 65 73 73 20 52 65 63 6F 72 64 20 41 6E 64
               S01:000010F7:  20 70 6C 61 79 20 6F 6E 20 54 61 70 65 2E
               S01:00001105:  0D
               S01:00001106:  0A
               S01:00001107:  00
F00:0213       loading_msg:         ;NULL
F00:0214         .byte "Loading...", $00
               S01:00001108:  4C 6F 61 64 69 6E 67 2E 2E 2E
               S01:00001112:  00
F00:0215       saving_msg:
F00:0216         .byte "Saving...", $00
               S01:00001113:  53 61 76 69 6E 67 2E 2E 2E
               S01:0000111C:  00
F00:0217       msg2:
F00:0218       ;       |      | CR | LF |cursor on| NULL
F00:0219         .byte "Done!", $0d, $0a, $02, $5f, $00
               S01:0000111D:  44 6F 6E 65 21
               S01:00001122:  0D
               S01:00001123:  0A
               S01:00001124:  02
               S01:00001125:  5F
               S01:00001126:  00
F00:0220       dat:
F00:0221         .byte "Hello, World! This is a test of the Kansas City tape protocol. If your are reading this, yay!", $0d, $0a, $0d, 
               S01:00001127:  48 65 6C 6C 6F 2C 20 57 6F 72 6C 64 21 20 54 68
               S01:00001137:  69 73 20 69 73 20 61 20 74 65 73 74 20 6F 66 20
               S01:00001147:  0D
               S01:00001148:  0A
               S01:00001149:  0D
               S01:0000114A:  0A
               S01:0000114B:  00
F00:0222       
F00:0223         .org $1200
F00:0224       
F00:0225       clear:
F00:0226         ldx #0
               S02:00001200:  A2 00
F00:0227       clearlop:
F00:0228         stz dat,x
               S02:00001202:  9E 27 11
F00:0229         dex
               S02:00001205:  CA
F00:0230         cpx #$50
               S02:00001206:  E0 50
F00:0231         bne clearlop
               S02:00001208:  D0 F8
F00:0232         ldx #<clearmsg
               S02:0000120A:  A2 15
F00:0233         ldy #>clearmsg
               S02:0000120C:  A0 12
F00:0234         jsr w_acia_full
               S02:0000120E:  20 C2 10
F00:0235         rts
               S02:00001211:  60
F00:0236         rts
               S02:00001212:  60
F00:0237         rts
               S02:00001213:  60
F00:0238         rts
               S02:00001214:  60
F00:0239       
F00:0240       clearmsg:
F00:0241         .byte "Cleared!", $0d, $0a, $00
               S02:00001215:  43 6C 65 61 72 65 64 21
               S02:0000121D:  0D
               S02:0000121E:  0A
               S02:0000121F:  00
F00:0242       
F00:0243         .org $1300
F00:0244       
F00:0245       load:
F00:0246         stz PORTA
               S03:00001300:  9C 01 B0
F00:0247         stz DDRA
               S03:00001303:  9C 03 B0
F00:0248         jsr via_init
               S03:00001306:  20 4F 10
F00:0249       
F00:0250         ldx #<loadmsg		; PRESS PLAY ON TAPE
               S03:00001309:  A2 5C
F00:0251         ldy #>loadmsg
               S03:0000130B:  A0 13
F00:0252         jsr w_acia_full
               S03:0000130D:  20 C2 10
F00:0253       
F00:0254         lda #$18		; ye fumble
               S03:00001310:  A9 18
F00:0255         jsr tape_delay		; 4 second delay
               S03:00001312:  20 40 10
F00:0256       
F00:0257         ldx #<loading_msg	; Loading...
               S03:00001315:  A2 08
F00:0258         ldy #>loading_msg
               S03:00001317:  A0 11
F00:0259         jsr w_acia_full
               S03:00001319:  20 C2 10
F00:0260       
F00:0261         ldy #0
               S03:0000131C:  A0 00
F00:0262       
F00:0263         ; thanks to ben eater for this code
F00:0264       
F00:0265       rx_wait:
F00:0266         bit PORTA
               S03:0000131E:  2C 01 B0
F00:0267         bvs rx_wait
               S03:00001321:  70 FB
F00:0268       
F00:0269         ldx #8
               S03:00001323:  A2 08
F00:0270       read_bit:
F00:0271         jsr rx_delay
               S03:00001325:  20 4D 13
F00:0272         bit PORTA
               S03:00001328:  2C 01 B0
F00:0273         bvs recv_1
               S03:0000132B:  70 04
F00:0274         clc
               S03:0000132D:  18
F00:0275         jmp rx_done
               S03:0000132E:  4C 34 13
F00:0276       recv_1:
F00:0277         sec
               S03:00001331:  38
F00:0278         nop
               S03:00001332:  EA
F00:0279         nop
               S03:00001333:  EA
F00:0280       rx_done:
F00:0281         ror
               S03:00001334:  6A
F00:0282         inx
               S03:00001335:  E8
F00:0283         bne read_bit
               S03:00001336:  D0 ED
F00:0284       
F00:0285         sta dat,y
               S03:00001338:  99 27 11
F00:0286         cmp #0
               S03:0000133B:  C9 00
F00:0287         beq load_done
               S03:0000133D:  F0 03
F00:0288       
F00:0289         jmp rx_wait
               S03:0000133F:  4C 1E 13
F00:0290       
F00:0291       load_done:
F00:0292         ldx #<msg2
               S03:00001342:  A2 1D
F00:0293         ldy #>msg2
               S03:00001344:  A0 11
F00:0294         jsr w_acia_full
               S03:00001346:  20 C2 10
F00:0295       
F00:0296         rts
               S03:00001349:  60
F00:0297         rts
               S03:0000134A:  60
F00:0298         rts
               S03:0000134B:  60
F00:0299         rts
               S03:0000134C:  60
F00:0300       
F00:0301       rx_delay:
F00:0302         phx
               S03:0000134D:  DA
F00:0303         phy
               S03:0000134E:  5A
F00:0304         ldy #$02
               S03:0000134F:  A0 02
F00:0305       rx_delay_outer:
F00:0306         ldx #$8e
               S03:00001351:  A2 8E
F00:0307       rx_delay_inner:
F00:0308         dex
               S03:00001353:  CA
F00:0309         bne rx_delay_inner
               S03:00001354:  D0 FD
F00:0310         dey
               S03:00001356:  88
F00:0311         bne rx_delay_outer
               S03:00001357:  D0 F8
F00:0312         ply
               S03:00001359:  7A
F00:0313         plx
               S03:0000135A:  FA
F00:0314         rts
               S03:0000135B:  60
F00:0315       
F00:0316       loadmsg:
F00:0317         .byte "Press Play On Tape.", $0d, $0a, $00
               S03:0000135C:  50 72 65 73 73 20 50 6C 61 79 20 4F 6E 20 54 61
               S03:0000136C:  70 65 2E
               S03:0000136F:  0D
               S03:00001370:  0A
               S03:00001371:  00
F00:0318       


Sections:
S01  segf00
S02  seg1200
S03  seg1300


Sources:
F00  tap.s
F01  hwtape.s
F02  libacia.s


Symbols:
rx_delay_inner EXPR(4947=0x1353) ABS 
rx_delay_outer EXPR(4945=0x1351) ABS 
load_done EXPR(4930=0x1342) ABS 
rx_done EXPR(4916=0x1334) ABS 
recv_1 EXPR(4913=0x1331) ABS 
rx_delay EXPR(4941=0x134d) ABS 
read_bit EXPR(4901=0x1325) ABS 
rx_wait EXPR(4894=0x131e) ABS 
loadmsg EXPR(4956=0x135c) ABS 
load EXPR(4864=0x1300) UNUSED ABS 
clearmsg EXPR(4629=0x1215) ABS 
clearlop EXPR(4610=0x1202) ABS 
clear EXPR(4608=0x1200) UNUSED ABS 
loading_msg EXPR(4360=0x1108) ABS 
endwacia EXPR(4317=0x10dd) ABS 
acia_man EXPR(4303=0x10cf) ABS 
ascii_home EXPR(4282=0x10ba) UNUSED ABS 
print_char_acia EXPR(4279=0x10b7) UNUSED ABS 
rxpoll EXPR(4262=0x10a6) ABS 
txpoll EXPR(4254=0x109e) ABS 
cleardisplay EXPR(4243=0x1093) UNUSED ABS 
crlf EXPR(4222=0x107e) UNUSED ABS 
print_chara EXPR(4270=0x10ae) ABS 
cskipletter EXPR(4216=0x1078) ABS 
print_nybble EXPR(4208=0x1070) ABS 
print_hex_acia EXPR(4199=0x1067) UNUSED ABS 
acia_init EXPR(4186=0x105a) UNUSED ABS 
PORTA_OUTPUTPINS EXPR(128=0x80) EQU 
TAPE_MIC EXPR(128=0x80) EQU 
TAPE_EAR EXPR(0=0x0) EQU 
SD_MISO EXPR(2=0x2) UNUSED EQU 
SD_MOSI EXPR(4=0x4) UNUSED EQU 
SD_SCK EXPR(8=0x8) UNUSED EQU 
SD_CS EXPR(16=0x10) UNUSED EQU 
LCD_RS EXPR(32=0x20) UNUSED EQU 
LCD_RW EXPR(64=0x40) UNUSED EQU 
LCD_E EXPR(128=0x80) UNUSED EQU 
DDRA EXPR(45059=0xb003) EQU 
DDRB EXPR(45058=0xb002) EQU 
PORTB EXPR(45056=0xb000) UNUSED EQU 
rd3 EXPR(4168=0x1048) UNUSED ABS 
rd2 EXPR(4164=0x1044) ABS 
rd1 EXPR(4162=0x1042) ABS 
intro2 EXPR(4154=0x103a) ABS 
intro EXPR(4135=0x1027) ABS 
zerofreq EXPR(4141=0x102d) ABS 
PORTA EXPR(45057=0xb001) EQU 
onefreq EXPR(4122=0x101a) ABS 
togtap EXPR(4061=0xfdd) ABS 
starter EXPR(3949=0xf6d) ABS 
outer EXPR(3947=0xf6b) ABS 
msg2 EXPR(4381=0x111d) ABS 
savedone EXPR(3927=0xf57) ABS 
one EXPR(3962=0xf7a) ABS 
noo EXPR(3906=0xf42) ABS 
oner EXPR(3889=0xf31) ABS 
jsrone EXPR(3900=0xf3c) ABS 
dat EXPR(4391=0x1127) ABS 
wop EXPR(3879=0xf27) ABS 
zero EXPR(4071=0xfe7) ABS 
inout EXPR(3942=0xf66) ABS 
saving_msg EXPR(4371=0x1113) ABS 
tape_delay EXPR(4160=0x1040) ABS 
w_acia_full EXPR(4290=0x10c2) ABS 
msg EXPR(4325=0x10e5) ABS 
via_init EXPR(4175=0x104f) ABS 
start EXPR(3840=0xf00) UNUSED ABS 
tapest EXPR(4=0x4) EQU 
eorr EXPR(3=0x3) UNUSED EQU 
buf EXPR(2=0x2) UNUSED EQU 
odd EXPR(1=0x1) UNUSED EQU 
thing EXPR(0=0x0) EQU 
__RPTCNT EXPR(-1=0xffff) INTERNAL 
__VASM EXPR(0=0x0) INTERNAL 

There have been no errors.
