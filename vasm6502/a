F00:0001       ; The Kansas City Standard for the XPL-32
F00:0002       ; 2400hz = 1
F00:0003       ; 1200hz = 0
F00:0004       ; data is encoded with 2400hz starting sound (for alignment)
F00:0005       ; start bit is a 0
F00:0006       ; end bit is =>2 1s
F00:0007       ; a byte is LEAST SIGNIFICANT TO MOST SIGNIFICANT as in 0111 -> 1110
F00:0008       
F00:0009       thing  = $00 ; 1byt
F00:0010       tapest = $01 ; 1byt
F00:0011       cnt    = $02 ; 2byt
F00:0012       len    = $04 ; 2byt
F00:0013       
F00:0014         .org $0f00
F00:0015       
F00:0016       start:
F00:0017         lda #%10111111
               S01:00000F00:  A9 BF
F00:0018         sta DDRB
               S01:00000F02:  8D 02 B0
F00:0019         stz $b00e
               S01:00000F05:  9C 0E B0
F00:0020         stz tapest
               S01:00000F08:  64 01
F00:0021       
F00:0022         ldx #<msg
               S01:00000F0A:  A2 10
F00:0023         ldy #>msg		; press rec and play
               S01:00000F0C:  A0 11
F00:0024         jsr w_acia_full
               S01:00000F0E:  20 ED 10
F00:0025       
F00:0026         lda #$18		; 4 seconds
               S01:00000F11:  A9 18
F00:0027         jsr tape_delay		; (ye fumble)
               S01:00000F13:  20 70 10
F00:0028       
F00:0029         ldx #<saving_msg	; Saving...
               S01:00000F16:  A2 BF
F00:0030         ldy #>saving_msg
               S01:00000F18:  A0 13
F00:0031         jsr w_acia_full
               S01:00000F1A:  20 ED 10
F00:0032       
F00:0033         ldy #$40
               S01:00000F1D:  A0 40
F00:0034         jsr inout		; intro sound
               S01:00000F1F:  20 9E 0F
F00:0035       
F00:0036         jsr zero
               S01:00000F22:  20 17 10
F00:0037       
F00:0038         lda #1
               S01:00000F25:  A9 01
F00:0039         sta thing
               S01:00000F27:  85 00
F00:0040         ldy #2
               S01:00000F29:  A0 02
F00:0041       begin:
F00:0042         lda #100		; our data is 100 bytes long
               S01:00000F2B:  A9 64
F00:0043         and thing
               S01:00000F2D:  25 00
F00:0044         bne head1
               S01:00000F2F:  D0 0E
F00:0045         jsr zero
               S01:00000F31:  20 17 10
F00:0046       head:
F00:0047         lda thing
               S01:00000F34:  A5 00
F00:0048         cmp #$80
               S01:00000F36:  C9 80
F00:0049         beq header_done
               S01:00000F38:  F0 0B
F00:0050         asl thing
               S01:00000F3A:  06 00
F00:0051         jmp begin
               S01:00000F3C:  4C 2B 0F
F00:0052       head1:
F00:0053         jsr one
               S01:00000F3F:  20 AA 0F
F00:0054         jmp head
               S01:00000F42:  4C 34 0F
F00:0055       header_done:
F00:0056         dey
               S01:00000F45:  88
F00:0057         beq afterhead
               S01:00000F46:  F0 08
F00:0058         lda #0
               S01:00000F48:  A9 00
F00:0059         sta begin+1
               S01:00000F4A:  8D 2C 0F
F00:0060         jmp begin
               S01:00000F4D:  4C 2B 0F
F00:0061       afterhead:
F00:0062         ldy #$20
               S01:00000F50:  A0 20
F00:0063         jsr inout
               S01:00000F52:  20 9E 0F
F00:0064         ; now to send the actual data
F00:0065         ldx #0
               S01:00000F55:  A2 00
F00:0066         lda #1
               S01:00000F57:  A9 01
F00:0067         sta thing		; first bit
               S01:00000F59:  85 00
F00:0068       wop:
F00:0069         lda dat,x		; load data
               S01:00000F5B:  BD 48 11
F00:0070         and thing		; mask it
               S01:00000F5E:  25 00
F00:0071         bne jsrone		; one
               S01:00000F60:  D0 0E
F00:0072         jsr zero		; or zero
               S01:00000F62:  20 17 10
F00:0073       oner:
F00:0074         lda thing		; load the bitmask
               S01:00000F65:  A5 00
F00:0075         cmp #$80		; end of byte?
               S01:00000F67:  C9 80
F00:0076         beq noo
               S01:00000F69:  F0 0B
F00:0077         asl thing
               S01:00000F6B:  06 00
F00:0078         jmp wop		; next bit
               S01:00000F6D:  4C 5B 0F
F00:0079       jsrone:
F00:0080         jsr one		; a one
               S01:00000F70:  20 AA 0F
F00:0081         jmp oner
               S01:00000F73:  4C 65 0F
F00:0082       noo:
F00:0083         lda #1		; byte done
               S01:00000F76:  A9 01
F00:0084         sta thing
               S01:00000F78:  85 00
F00:0085         jsr one
               S01:00000F7A:  20 AA 0F
F00:0086         jsr one
               S01:00000F7D:  20 AA 0F
F00:0087         lda dat,x
               S01:00000F80:  BD 48 11
F00:0088         beq savedone
               S01:00000F83:  F0 08
F00:0089         jsr zero
               S01:00000F85:  20 17 10
F00:0090         inx			; next byte
               S01:00000F88:  E8
F00:0091         cpx #100 		; are we done reading the data?
               S01:00000F89:  E0 64
F00:0092         bne wop
               S01:00000F8B:  D0 CE
F00:0093       savedone
F00:0094         ldy #$40
               S01:00000F8D:  A0 40
F00:0095         jsr inout		; we are done, ending sound  
               S01:00000F8F:  20 9E 0F
F00:0096       
F00:0097         ; done
F00:0098         ldx #<msg2
               S01:00000F92:  A2 3E
F00:0099         ldy #>msg2		; "Done!"
               S01:00000F94:  A0 11
F00:0100         jsr w_acia_full
               S01:00000F96:  20 ED 10
F00:0101       
F00:0102         rts
               S01:00000F99:  60
F00:0103         rts
               S01:00000F9A:  60
F00:0104         rts			; return
               S01:00000F9B:  60
F00:0105         rts
               S01:00000F9C:  60
F00:0106         rts
               S01:00000F9D:  60
F00:0107       
F00:0108       
F00:0109       
F00:0110       ; subs
F00:0111       
F00:0112       inout:
F00:0113       outer:
F00:0114         ldx #$10		; $40 * $10 times make the sound
               S01:00000F9E:  A2 10
F00:0115       starter:
F00:0116         jsr one		; sound
               S01:00000FA0:  20 AA 0F
F00:0117         dex
               S01:00000FA3:  CA
F00:0118         bne starter
               S01:00000FA4:  D0 FA
F00:0119         dey
               S01:00000FA6:  88
F00:0120         bne outer
               S01:00000FA7:  D0 F5
F00:0121         rts
               S01:00000FA9:  60
F00:0122       
F00:0123       one:			; 2400hz sound 8 cyc
F00:0124         pha
               S01:00000FAA:  48
F00:0125         jsr togtap ; 1
               S01:00000FAB:  20 0D 10
F00:0126         jsr onefreq
               S01:00000FAE:  20 4A 10
F00:0127         jsr togtap
               S01:00000FB1:  20 0D 10
F00:0128         jsr onefreq
               S01:00000FB4:  20 4A 10
F00:0129         jsr togtap ; 2
               S01:00000FB7:  20 0D 10
F00:0130         jsr onefreq
               S01:00000FBA:  20 4A 10
F00:0131         jsr togtap
               S01:00000FBD:  20 0D 10
F00:0132         jsr onefreq
               S01:00000FC0:  20 4A 10
F00:0133         jsr togtap ; 3
               S01:00000FC3:  20 0D 10
F00:0134         jsr onefreq
               S01:00000FC6:  20 4A 10
F00:0135         jsr togtap
               S01:00000FC9:  20 0D 10
F00:0136         jsr onefreq
               S01:00000FCC:  20 4A 10
F00:0137         jsr togtap ; 4
               S01:00000FCF:  20 0D 10
F00:0138         jsr onefreq
               S01:00000FD2:  20 4A 10
F00:0139         jsr togtap
               S01:00000FD5:  20 0D 10
F00:0140         jsr onefreq
               S01:00000FD8:  20 4A 10
F00:0141         jsr togtap ; 5
               S01:00000FDB:  20 0D 10
F00:0142         jsr onefreq
               S01:00000FDE:  20 4A 10
F00:0143         jsr togtap
               S01:00000FE1:  20 0D 10
F00:0144         jsr onefreq
               S01:00000FE4:  20 4A 10
F00:0145         jsr togtap ; 6
               S01:00000FE7:  20 0D 10
F00:0146         jsr onefreq
               S01:00000FEA:  20 4A 10
F00:0147         jsr togtap
               S01:00000FED:  20 0D 10
F00:0148         jsr onefreq
               S01:00000FF0:  20 4A 10
F00:0149         jsr togtap ; 7
               S01:00000FF3:  20 0D 10
F00:0150         jsr onefreq
               S01:00000FF6:  20 4A 10
F00:0151         jsr togtap
               S01:00000FF9:  20 0D 10
F00:0152         jsr onefreq
               S01:00000FFC:  20 4A 10
F00:0153         jsr togtap ; 8
               S01:00000FFF:  20 0D 10
F00:0154         jsr onefreq
               S01:00001002:  20 4A 10
F00:0155         jsr togtap
               S01:00001005:  20 0D 10
F00:0156         jsr onefreq
               S01:00001008:  20 4A 10
F00:0157         pla
               S01:0000100B:  68
F00:0158         rts
               S01:0000100C:  60
F00:0159       
F00:0160       togtap:
F00:0161         lda tapest
               S01:0000100D:  A5 01
F00:0162         eor #%10000000 	; data out on PA7
               S01:0000100F:  49 80
F00:0163         sta tapest
               S01:00001011:  85 01
F00:0164         sta PORTB
               S01:00001013:  8D 00 B0
F00:0165         rts
               S01:00001016:  60
F00:0166       
F00:0167       zero: 			; 1200hz sound 4 cyc
F00:0168         pha 
               S01:00001017:  48
F00:0169         jsr togtap ; 1
               S01:00001018:  20 0D 10
F00:0170         jsr zerofreq
               S01:0000101B:  20 5D 10
F00:0171         jsr togtap
               S01:0000101E:  20 0D 10
F00:0172         jsr zerofreq
               S01:00001021:  20 5D 10
F00:0173         jsr togtap ; 2
               S01:00001024:  20 0D 10
F00:0174         jsr zerofreq
               S01:00001027:  20 5D 10
F00:0175         jsr togtap
               S01:0000102A:  20 0D 10
F00:0176         jsr zerofreq
               S01:0000102D:  20 5D 10
F00:0177         jsr togtap ; 3
               S01:00001030:  20 0D 10
F00:0178         jsr zerofreq
               S01:00001033:  20 5D 10
F00:0179         jsr togtap
               S01:00001036:  20 0D 10
F00:0180         jsr zerofreq
               S01:00001039:  20 5D 10
F00:0181         jsr togtap ; 4
               S01:0000103C:  20 0D 10
F00:0182         jsr zerofreq
               S01:0000103F:  20 5D 10
F00:0183         jsr togtap
               S01:00001042:  20 0D 10
F00:0184         jsr zerofreq
               S01:00001045:  20 5D 10
F00:0185         pla
               S01:00001048:  68
F00:0186         rts
               S01:00001049:  60
F00:0187       
F00:0188       onefreq:
F00:0189         stz $b00b
               S01:0000104A:  9C 0B B0
F00:0190         lda #$ae
               S01:0000104D:  A9 AE
F00:0191         sta $b004		; freq
               S01:0000104F:  8D 04 B0
F00:0192         lda #$00
               S01:00001052:  A9 00
F00:0193         sta $b005
               S01:00001054:  8D 05 B0
F00:0194       intro:
F00:0195         bit $b00d		; delay complete?
               S01:00001057:  2C 0D B0
F00:0196         bvc intro
               S01:0000105A:  50 FB
F00:0197         rts
               S01:0000105C:  60
F00:0198       
F00:0199       zerofreq:
F00:0200         stz $b00b
               S01:0000105D:  9C 0B B0
F00:0201         lda #$3f
               S01:00001060:  A9 3F
F00:0202         sta $b004
               S01:00001062:  8D 04 B0
F00:0203         lda #$01
               S01:00001065:  A9 01
F00:0204         sta $b005
               S01:00001067:  8D 05 B0
F00:0205       intro2:
F00:0206         bit $b00d
               S01:0000106A:  2C 0D B0
F00:0207         bvc intro2
               S01:0000106D:  50 FB
F00:0208         rts
               S01:0000106F:  60
F00:0209       
F00:0210       tape_delay:
F00:0211         ldx #$ff		; wait for ye fumble.
               S01:00001070:  A2 FF
F00:0212       rd1:
F00:0213         lda #$7a		; (Y times through inner loop,
               S01:00001072:  A9 7A
F00:0214       rd2:     
F00:0215         sbc #$01		;  Y * $FF * 650uS = uS / 1e-6 = S )
               S01:00001074:  E9 01
F00:0216         bne rd2
               S01:00001076:  D0 FC
F00:0217       rd3:
F00:0218         dex
               S01:00001078:  CA
F00:0219         bne rd1
               S01:00001079:  D0 F7
F00:0220         dey
               S01:0000107B:  88
F00:0221         bne tape_delay
               S01:0000107C:  D0 F2
F00:0222         rts
               S01:0000107E:  60
F00:0223       
F00:0224         .include "hwtape.s"
F01:0001       PORTB = $b000
F01:0002       PORTA = $b001
F01:0003       DDRB = $b002
F01:0004       DDRA = $b003
F01:0005       
F01:0006       ;LCD_E  = %10000000
F01:0007       ;LCD_RW = %01000000
F01:0008       ;LCD_RS = %00100000
F01:0009       
F01:0010       SD_CS    = %00010000
F01:0011       SD_SCK   = %00001000
F01:0012       SD_MOSI  = %00000100
F01:0013       SD_MISO  = %00000010
F01:0014       TAPE_EAR = %00000000 ; PA6 IN
F01:0015       TAPE_MIC = %10000000 ; PA7 OUT
F01:0016       
F01:0017       PORTB_OUTPUTPINS = TAPE_EAR | TAPE_MIC
F01:0018       
F01:0019       via_init:
F01:0020         lda PORTB_OUTPUTPINS		; Set various pins on port B to output
               S01:0000107F:  A5 80
F01:0021         sta DDRB
               S01:00001081:  8D 02 B0
F01:0022         ;lda #%11111111 ; Set all pins on port A to output 
F01:0023         ;sta DDRA
F01:0024         rts
               S01:00001084:  60
F01:0025       
F01:0026       
F00:0225         .include "libacia.s"
F02:0001       ;       ------------------ 6551 ACIA Subroutine Library -------------------
F02:0002       ; Includes:
F02:0003       ; acia_init       - Initializes the ACIA
F02:0004       ; print_hex_acia  - Prints a hex value in A
F02:0005       ; crlf		  - Prints <CR> followed by <LF>
F02:0006       ; clear_display   - Sends a <CLS> command
F02:0007       ; txpoll          - Polls the TX bit to see if the ACIA is ready
F02:0008       ; print_chara     - Prints a Character that is stored in A
F02:0009       ; print_char_acia - Same as print_chara
F02:0010       ; ascii_home      - Home the cursor
F02:0011       ; w_acia_full     - Print a NULL-Termintated String with >HIGH in Y and <LOW in X
F02:0012       
F02:0013       acia_init:
F02:0014         pha
               S01:00001085:  48
F02:0015         lda #%00001011          ; No parity, no echo, no interrupt
               S01:00001086:  A9 0B
F02:0016         sta $8002
               S01:00001088:  8D 02 80
F02:0017         lda #%00011111          ; 1 stop bit, 8 data bits, 19200 baud
               S01:0000108B:  A9 1F
F02:0018         sta $8003
               S01:0000108D:  8D 03 80
F02:0019         pla
               S01:00001090:  68
F02:0020         rts
               S01:00001091:  60
F02:0021       
F02:0022       print_hex_acia:
F02:0023         pha
               S01:00001092:  48
F02:0024         ror
               S01:00001093:  6A
F02:0025         ror
               S01:00001094:  6A
F02:0026         ror
               S01:00001095:  6A
F02:0027         ror
               S01:00001096:  6A
F02:0028         jsr print_nybble   ; This is just som usful hex cod
               S01:00001097:  20 9B 10
F02:0029         pla
               S01:0000109A:  68
F02:0030       print_nybble:
F02:0031         and #15
               S01:0000109B:  29 0F
F02:0032         cmp #10
               S01:0000109D:  C9 0A
F02:0033         bmi cskipletter
               S01:0000109F:  30 02
F02:0034         adc #6
               S01:000010A1:  69 06
F02:0035       cskipletter:
F02:0036         adc #48
               S01:000010A3:  69 30
F02:0037        ; jsr print_char
F02:0038         jsr print_chara
               S01:000010A5:  20 D9 10
F02:0039         rts
               S01:000010A8:  60
F02:0040       
F02:0041       crlf:
F02:0042         pha
               S01:000010A9:  48
F02:0043         txa
               S01:000010AA:  8A
F02:0044         pha
               S01:000010AB:  48
F02:0045         tya
               S01:000010AC:  98
F02:0046         pha
               S01:000010AD:  48
F02:0047         lda #$0d
               S01:000010AE:  A9 0D
F02:0048         jsr print_chara
               S01:000010B0:  20 D9 10
F02:0049         lda #$0a
               S01:000010B3:  A9 0A
F02:0050         jsr print_chara
               S01:000010B5:  20 D9 10
F02:0051         pla
               S01:000010B8:  68
F02:0052         tay
               S01:000010B9:  A8
F02:0053         pla
               S01:000010BA:  68
F02:0054         tax
               S01:000010BB:  AA
F02:0055         pla
               S01:000010BC:  68
F02:0056         rts
               S01:000010BD:  60
F02:0057       
F02:0058       cleardisplay:
F02:0059         pha
               S01:000010BE:  48
F02:0060         jsr txpoll  ; Poll the TX bit
               S01:000010BF:  20 C9 10
F02:0061         lda #12     ; Print decimal 12 (CLS)
               S01:000010C2:  A9 0C
F02:0062         sta $8000
               S01:000010C4:  8D 00 80
F02:0063         pla
               S01:000010C7:  68
F02:0064         rts
               S01:000010C8:  60
F02:0065       
F02:0066       txpoll:
F02:0067         lda $8001
               S01:000010C9:  AD 01 80
F02:0068         and #$10    ; Poll the TX bit
               S01:000010CC:  29 10
F02:0069         beq txpoll
               S01:000010CE:  F0 F9
F02:0070         rts
               S01:000010D0:  60
F02:0071       
F02:0072       rxpoll:
F02:0073         lda $8001
               S01:000010D1:  AD 01 80
F02:0074         and #$08    ; Poll the RX bit
               S01:000010D4:  29 08
F02:0075         beq rxpoll
               S01:000010D6:  F0 F9
F02:0076         rts
               S01:000010D8:  60
F02:0077       
F02:0078       
F02:0079       print_chara:
F02:0080         pha
               S01:000010D9:  48
F02:0081         jsr txpoll  ; Poll the TX bit
               S01:000010DA:  20 C9 10
F02:0082         pla
               S01:000010DD:  68
F02:0083         sta $8000   ; Print character from A
               S01:000010DE:  8D 00 80
F02:0084         rts
               S01:000010E1:  60
F02:0085       
F02:0086       print_char_acia:
F02:0087         jmp print_chara  ; Same as "print_chara"
               S01:000010E2:  4C D9 10
F02:0088       
F02:0089       ascii_home:
F02:0090         pha
               S01:000010E5:  48
F02:0091         lda #1
               S01:000010E6:  A9 01
F02:0092         jsr print_chara  ; Print 1 (HOME)
               S01:000010E8:  20 D9 10
F02:0093         pla
               S01:000010EB:  68
F02:0094         rts
               S01:000010EC:  60
F02:0095       
F02:0096       w_acia_full:
F02:0097         pha
               S01:000010ED:  48
F02:0098         lda $ff
               S01:000010EE:  A5 FF
F02:0099         pha        ; Push Previous States onto the stack
               S01:000010F0:  48
F02:0100         lda $fe
               S01:000010F1:  A5 FE
F02:0101         pha
               S01:000010F3:  48
F02:0102         sty $ff    ; Set Y as the Upper Address (8-15)
               S01:000010F4:  84 FF
F02:0103         stx $fe    ; Set X as the Lower Adderss (0-7)
               S01:000010F6:  86 FE
F02:0104         ldy #0
               S01:000010F8:  A0 00
F02:0105       acia_man:
F02:0106         jsr txpoll   ; Poll TX
               S01:000010FA:  20 C9 10
F02:0107         lda ($fe),y  ; Load the Address
               S01:000010FD:  B1 FE
F02:0108         sta $8000    ; Print what is at the address
               S01:000010FF:  8D 00 80
F02:0109         beq endwacia ; If Done, End
               S01:00001102:  F0 04
F02:0110         iny          ; Next Character
               S01:00001104:  C8
F02:0111         jmp acia_man ; Back to the top
               S01:00001105:  4C FA 10
F02:0112       endwacia:
F02:0113         pla
               S01:00001108:  68
F02:0114         sta $fe
               S01:00001109:  85 FE
F02:0115         pla          ; Restore Variables
               S01:0000110B:  68
F02:0116         sta $ff
               S01:0000110C:  85 FF
F02:0117         pla
               S01:0000110E:  68
F02:0118         rts
               S01:0000110F:  60
F02:0119       
F00:0226       ;     cursor off   |                               | CR | LF | NULL
F00:0227       msg:
F00:0228         .byte $02, $ff, "Press Record And play on Tape.", $0d, $0a, $00
               S01:00001110:  02
               S01:00001111:  FF
               S01:00001112:  50 72 65 73 73 20 52 65 63 6F 72 64 20 41 6E 64
               S01:00001122:  20 70 6C 61 79 20 6F 6E 20 54 61 70 65 2E
               S01:00001130:  0D
               S01:00001131:  0A
               S01:00001132:  00
F00:0229       loading_msg:         ;NULL
F00:0230         .byte "Loading...", $00
               S01:00001133:  4C 6F 61 64 69 6E 67 2E 2E 2E
               S01:0000113D:  00
F00:0231       msg2:
F00:0232       ;       |      | CR | LF |cursor on| NULL
F00:0233         .byte "Done!", $0d, $0a, $02, $5f, $00
               S01:0000113E:  44 6F 6E 65 21
               S01:00001143:  0D
               S01:00001144:  0A
               S01:00001145:  02
               S01:00001146:  5F
               S01:00001147:  00
F00:0234       dat:
F00:0235         .byte "Hello, World! This is a test of the Kansas City tape protocol. If your are reading this, yay!", $0d, $0a, $0d, 
               S01:00001148:  48 65 6C 6C 6F 2C 20 57 6F 72 6C 64 21 20 54 68
               S01:00001158:  69 73 20 69 73 20 61 20 74 65 73 74 20 6F 66 20
               S01:00001168:  0D
               S01:00001169:  0A
               S01:0000116A:  0D
               S01:0000116B:  0A
               S01:0000116C:  00
F00:0236       
F00:0237         .org $1200
F00:0238       
F00:0239       clear:
F00:0240         ldx #0
               S02:00001200:  A2 00
F00:0241       clearlop:
F00:0242         stz dat,x
               S02:00001202:  9E 48 11
F00:0243         inx
               S02:00001205:  E8
F00:0244         cpx #100 ; our message is 100 bytes long
               S02:00001206:  E0 64
F00:0245         bne clearlop
               S02:00001208:  D0 F8
F00:0246         ldx #<clearmsg
               S02:0000120A:  A2 15
F00:0247         ldy #>clearmsg
               S02:0000120C:  A0 12
F00:0248         jsr w_acia_full
               S02:0000120E:  20 ED 10
F00:0249         rts
               S02:00001211:  60
F00:0250         rts
               S02:00001212:  60
F00:0251         rts
               S02:00001213:  60
F00:0252         rts
               S02:00001214:  60
F00:0253       
F00:0254       clearmsg:
F00:0255         .byte "Cleared!", $0d, $0a, $00
               S02:00001215:  43 6C 65 61 72 65 64 21
               S02:0000121D:  0D
               S02:0000121E:  0A
               S02:0000121F:  00
F00:0256       
F00:0257         .org $1300
F00:0258       
F00:0259       load:
F00:0260         lda #%10111111
               S03:00001300:  A9 BF
F00:0261         sta DDRB
               S03:00001302:  8D 02 B0
F00:0262       
F00:0263         lda #$20
               S03:00001305:  A9 20
F00:0264         sta cnt+1
               S03:00001307:  85 03
F00:0265         stz cnt
               S03:00001309:  64 02
F00:0266       
F00:0267         ldx #<loadmsg		; PRESS PLAY ON TAPE
               S03:0000130B:  A2 A9
F00:0268         ldy #>loadmsg
               S03:0000130D:  A0 13
F00:0269         jsr w_acia_full
               S03:0000130F:  20 ED 10
F00:0270       
F00:0271         lda #$18		; ye fumble
               S03:00001312:  A9 18
F00:0272         jsr tape_delay	; 4 second delay
               S03:00001314:  20 70 10
F00:0273       
F00:0274         ldx #<loading_msg	; Loading...
               S03:00001317:  A2 33
F00:0275         ldy #>loading_msg
               S03:00001319:  A0 11
F00:0276         jsr w_acia_full
               S03:0000131B:  20 ED 10
F00:0277       
F00:0278         ldy #2
               S03:0000131E:  A0 02
F00:0279       
F00:0280         ; thanks to ben eater for this code
F00:0281       
F00:0282       rx_wait_start:
F00:0283         bit PORTB	; wait until PORTB.6 = 0 (start bit)
               S03:00001320:  2C 00 B0
F00:0284         bvs rx_wait_start
               S03:00001323:  70 FB
F00:0285       
F00:0286         jsr rx_delay
               S03:00001325:  20 95 13
F00:0287         ldx #8
               S03:00001328:  A2 08
F00:0288         jmp rba
               S03:0000132A:  4C 33 13
F00:0289       read_bita:
F00:0290         jsr rx_delay	; run bit delay for 300 baud serial stream
               S03:0000132D:  20 95 13
F00:0291         jsr rx_delay
               S03:00001330:  20 95 13
F00:0292       rba:
F00:0293         bit PORTB	; read in the state
               S03:00001333:  2C 00 B0
F00:0294         bvs recv_1a	; if it's not a one,
               S03:00001336:  70 04
F00:0295         clc		; it's a zero.
               S03:00001338:  18
F00:0296         jmp rx_donea
               S03:00001339:  4C 3F 13
F00:0297       recv_1a:
F00:0298         sec		; it's a one.
               S03:0000133C:  38
F00:0299         nop		; nops for timing
               S03:0000133D:  EA
F00:0300         nop
               S03:0000133E:  EA
F00:0301       rx_donea:
F00:0302         ror		; rotate carry into accumulator
               S03:0000133F:  6A
F00:0303         stz PORTB
               S03:00001340:  9C 00 B0
F00:0304         dex
               S03:00001343:  CA
F00:0305         bne read_bita	; repeat until 8 bits read
               S03:00001344:  D0 E7
F00:0306         dey
               S03:00001346:  88
F00:0307         beq got_len
               S03:00001347:  F0 05
F00:0308         sta len
               S03:00001349:  85 04
F00:0309         jmp rx_wait_start
               S03:0000134B:  4C 20 13
F00:0310       got_len:
F00:0311         sta len+1
               S03:0000134E:  85 05
F00:0312       
F00:0313       rx_wait:
F00:0314         bit PORTB	; wait until PORTB.6 = 0 (start bit)
               S03:00001350:  2C 00 B0
F00:0315         bvs rx_wait
               S03:00001353:  70 FB
F00:0316       
F00:0317         jsr rx_delay
               S03:00001355:  20 95 13
F00:0318         ldx #8
               S03:00001358:  A2 08
F00:0319         jmp rbb
               S03:0000135A:  4C 63 13
F00:0320       read_bit:
F00:0321         jsr rx_delay	; run bit delay for 300 baud serial stream
               S03:0000135D:  20 95 13
F00:0322         jsr rx_delay
               S03:00001360:  20 95 13
F00:0323       rbb:
F00:0324         bit PORTB	; read in the state
               S03:00001363:  2C 00 B0
F00:0325         bvs recv_1	; if it's not a one,
               S03:00001366:  70 04
F00:0326         clc		; it's a zero.
               S03:00001368:  18
F00:0327         jmp rx_done
               S03:00001369:  4C 6F 13
F00:0328       recv_1:
F00:0329         sec		; it's a one.
               S03:0000136C:  38
F00:0330         nop		; nops for timing
               S03:0000136D:  EA
F00:0331         nop
               S03:0000136E:  EA
F00:0332       rx_done:
F00:0333         ror		; rotate carry into accumulator
               S03:0000136F:  6A
F00:0334         stz PORTB
               S03:00001370:  9C 00 B0
F00:0335         dex
               S03:00001373:  CA
F00:0336         bne read_bit	; repeat until 8 bits read
               S03:00001374:  D0 E7
F00:0337       
F00:0338         sta (cnt)	; store data
               S03:00001376:  92 02
F00:0339         inc cnt
               S03:00001378:  E6 02
F00:0340         bne declen
               S03:0000137A:  D0 02
F00:0341         inc cnt+1
               S03:0000137C:  E6 03
F00:0342       declen:
F00:0343         lda cnt	; are we done?
               S03:0000137E:  A5 02
F00:0344         cmp len
               S03:00001380:  C5 04
F00:0345         bne rx_wait
               S03:00001382:  D0 CC
F00:0346         lda cnt+1
               S03:00001384:  A5 03
F00:0347         cmp len+1
               S03:00001386:  C5 05
F00:0348         bne rx_wait	; if not, get another byte
               S03:00001388:  D0 C6
F00:0349         ;jmp rx_wait
F00:0350       
F00:0351       load_done:
F00:0352         ldx #<msg2	; Done!
               S03:0000138A:  A2 3E
F00:0353         ldy #>msg2
               S03:0000138C:  A0 11
F00:0354         jsr w_acia_full
               S03:0000138E:  20 ED 10
F00:0355       
F00:0356         rts
               S03:00001391:  60
F00:0357         rts
               S03:00001392:  60
F00:0358         rts
               S03:00001393:  60
F00:0359         rts
               S03:00001394:  60
F00:0360       
F00:0361       rx_delay:
F00:0362         phx
               S03:00001395:  DA
F00:0363         phy
               S03:00001396:  5A
F00:0364         ldy #$02
               S03:00001397:  A0 02
F00:0365       rx_delay_outer:
F00:0366         ldx #$92
               S03:00001399:  A2 92
F00:0367       rx_delay_inner:
F00:0368         dex
               S03:0000139B:  CA
F00:0369         bne rx_delay_inner
               S03:0000139C:  D0 FD
F00:0370         dey
               S03:0000139E:  88
F00:0371         bne rx_delay_outer
               S03:0000139F:  D0 F8
F00:0372         ply
               S03:000013A1:  7A
F00:0373         plx
               S03:000013A2:  FA
F00:0374         lda #$01
               S03:000013A3:  A9 01
F00:0375         sta PORTB
               S03:000013A5:  8D 00 B0
F00:0376         rts
               S03:000013A8:  60
F00:0377       
F00:0378       loadmsg:
F00:0379         .byte "Press Play On Tape.", $0d, $0a, $00
               S03:000013A9:  50 72 65 73 73 20 50 6C 61 79 20 4F 6E 20 54 61
               S03:000013B9:  70 65 2E
               S03:000013BC:  0D
               S03:000013BD:  0A
               S03:000013BE:  00
F00:0380       saving_msg:
F00:0381         .byte "Saving...", $00
               S03:000013BF:  53 61 76 69 6E 67 2E 2E 2E
               S03:000013C8:  00
F00:0382       
F00:0383       


Sections:
S01  segf00
S02  seg1200
S03  seg1300


Sources:
F00  tap.s
F01  hwtape.s
F02  libacia.s


Symbols:
rx_delay_inner EXPR(5019=0x139b) ABS 
rx_delay_outer EXPR(5017=0x1399) ABS 
load_done EXPR(5002=0x138a) UNUSED ABS 
declen EXPR(4990=0x137e) ABS 
rx_done EXPR(4975=0x136f) ABS 
recv_1 EXPR(4972=0x136c) ABS 
read_bit EXPR(4957=0x135d) ABS 
rbb EXPR(4963=0x1363) ABS 
rx_wait EXPR(4944=0x1350) ABS 
got_len EXPR(4942=0x134e) ABS 
rx_donea EXPR(4927=0x133f) ABS 
recv_1a EXPR(4924=0x133c) ABS 
read_bita EXPR(4909=0x132d) ABS 
rba EXPR(4915=0x1333) ABS 
rx_delay EXPR(5013=0x1395) ABS 
rx_wait_start EXPR(4896=0x1320) ABS 
loadmsg EXPR(5033=0x13a9) ABS 
load EXPR(4864=0x1300) UNUSED ABS 
clearmsg EXPR(4629=0x1215) ABS 
clearlop EXPR(4610=0x1202) ABS 
clear EXPR(4608=0x1200) UNUSED ABS 
loading_msg EXPR(4403=0x1133) ABS 
endwacia EXPR(4360=0x1108) ABS 
acia_man EXPR(4346=0x10fa) ABS 
ascii_home EXPR(4325=0x10e5) UNUSED ABS 
print_char_acia EXPR(4322=0x10e2) UNUSED ABS 
rxpoll EXPR(4305=0x10d1) ABS 
txpoll EXPR(4297=0x10c9) ABS 
cleardisplay EXPR(4286=0x10be) UNUSED ABS 
crlf EXPR(4265=0x10a9) UNUSED ABS 
print_chara EXPR(4313=0x10d9) ABS 
cskipletter EXPR(4259=0x10a3) ABS 
print_nybble EXPR(4251=0x109b) ABS 
print_hex_acia EXPR(4242=0x1092) UNUSED ABS 
acia_init EXPR(4229=0x1085) UNUSED ABS 
via_init EXPR(4223=0x107f) UNUSED ABS 
PORTB_OUTPUTPINS EXPR(128=0x80) EQU 
TAPE_MIC EXPR(128=0x80) EQU 
TAPE_EAR EXPR(0=0x0) EQU 
SD_MISO EXPR(2=0x2) UNUSED EQU 
SD_MOSI EXPR(4=0x4) UNUSED EQU 
SD_SCK EXPR(8=0x8) UNUSED EQU 
SD_CS EXPR(16=0x10) UNUSED EQU 
DDRA EXPR(45059=0xb003) UNUSED EQU 
PORTA EXPR(45057=0xb001) UNUSED EQU 
rd3 EXPR(4216=0x1078) UNUSED ABS 
rd2 EXPR(4212=0x1074) ABS 
rd1 EXPR(4210=0x1072) ABS 
intro2 EXPR(4202=0x106a) ABS 
intro EXPR(4183=0x1057) ABS 
zerofreq EXPR(4189=0x105d) ABS 
PORTB EXPR(45056=0xb000) EQU 
onefreq EXPR(4170=0x104a) ABS 
togtap EXPR(4109=0x100d) ABS 
starter EXPR(4000=0xfa0) ABS 
outer EXPR(3998=0xf9e) ABS 
msg2 EXPR(4414=0x113e) ABS 
savedone EXPR(3981=0xf8d) ABS 
noo EXPR(3958=0xf76) ABS 
oner EXPR(3941=0xf65) ABS 
jsrone EXPR(3952=0xf70) ABS 
dat EXPR(4424=0x1148) ABS 
wop EXPR(3931=0xf5b) ABS 
afterhead EXPR(3920=0xf50) ABS 
one EXPR(4010=0xfaa) ABS 
header_done EXPR(3909=0xf45) ABS 
head EXPR(3892=0xf34) ABS 
head1 EXPR(3903=0xf3f) ABS 
begin EXPR(3883=0xf2b) ABS 
zero EXPR(4119=0x1017) ABS 
inout EXPR(3998=0xf9e) ABS 
saving_msg EXPR(5055=0x13bf) ABS 
tape_delay EXPR(4208=0x1070) ABS 
w_acia_full EXPR(4333=0x10ed) ABS 
msg EXPR(4368=0x1110) ABS 
DDRB EXPR(45058=0xb002) EQU 
start EXPR(3840=0xf00) UNUSED ABS 
len EXPR(4=0x4) EQU 
cnt EXPR(2=0x2) EQU 
tapest EXPR(1=0x1) EQU 
thing EXPR(0=0x0) EQU 
__RPTCNT EXPR(-1=0xffff) INTERNAL 
__VASM EXPR(0=0x0) INTERNAL 

There have been no errors.
