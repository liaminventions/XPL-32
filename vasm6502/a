F00:0001       ; The Kansas City Standard for the XPL-32
F00:0002       ; 2400hz = 1
F00:0003       ; 1200hz = 0
F00:0004       ; data is encoded with 2400hz starting sound (for alignment)
F00:0005       ; start bit is a 0
F00:0006       ; end bit is =>2 1s
F00:0007       ; a byte is LEAST SIGNIFICANT TO MOST SIGNIFICANT as in 0111 -> 1110
F00:0008       
F00:0009       thing  = $00 ; 1byt
F00:0010       tapest = $01 ; 1byt
F00:0011       cnt    = $02 ; 2byt
F00:0012       len    = $04 ; 2byt
F00:0013       
F00:0014         .org $0f00
F00:0015       
F00:0016       start:
F00:0017         lda #%10111111
               S01:00000F00:  A9 BF
F00:0018         sta DDRB
               S01:00000F02:  8D 02 B0
F00:0019         stz $b00e
               S01:00000F05:  9C 0E B0
F00:0020         stz tapest
               S01:00000F08:  64 01
F00:0021       
F00:0022         ldx #<msg
               S01:00000F0A:  A2 03
F00:0023         ldy #>msg		; press rec and play
               S01:00000F0C:  A0 11
F00:0024         jsr w_acia_full
               S01:00000F0E:  20 E0 10
F00:0025       
F00:0026         lda #$18		; 4 seconds
               S01:00000F11:  A9 18
F00:0027         jsr tape_delay		; (ye fumble)
               S01:00000F13:  20 63 10
F00:0028       
F00:0029         ldx #<saving_msg	; Saving...
               S01:00000F16:  A2 9C
F00:0030         ldy #>saving_msg
               S01:00000F18:  A0 13
F00:0031         jsr w_acia_full
               S01:00000F1A:  20 E0 10
F00:0032       
F00:0033         ldy #$40
               S01:00000F1D:  A0 40
F00:0034         jsr inout		; intro sound
               S01:00000F1F:  20 91 0F
F00:0035       
F00:0036         jsr zero
               S01:00000F22:  20 0A 10
F00:0037       
F00:0038         lda #1
               S01:00000F25:  A9 01
F00:0039         sta thing
               S01:00000F27:  85 00
F00:0040       begin:
F00:0041         lda #100		; our data is 100 bytes long
               S01:00000F29:  A9 64
F00:0042         and thing
               S01:00000F2B:  25 00
F00:0043         bne head1
               S01:00000F2D:  D0 0E
F00:0044         jsr zero
               S01:00000F2F:  20 0A 10
F00:0045       head:
F00:0046         lda thing
               S01:00000F32:  A5 00
F00:0047         cmp #$80
               S01:00000F34:  C9 80
F00:0048         beq header_done
               S01:00000F36:  F0 0B
F00:0049         asl thing
               S01:00000F38:  06 00
F00:0050         jmp begin
               S01:00000F3A:  4C 29 0F
F00:0051       head1:
F00:0052         jsr one
               S01:00000F3D:  20 9D 0F
F00:0053         jmp head
               S01:00000F40:  4C 32 0F
F00:0054       header_done:
F00:0055         ldy #$20
               S01:00000F43:  A0 20
F00:0056         jsr inout
               S01:00000F45:  20 91 0F
F00:0057         ; now to send the actual data
F00:0058         ldx #0
               S01:00000F48:  A2 00
F00:0059         lda #1
               S01:00000F4A:  A9 01
F00:0060         sta thing		; first bit
               S01:00000F4C:  85 00
F00:0061       wop:
F00:0062         lda dat,x		; load data
               S01:00000F4E:  BD 3B 11
F00:0063         and thing		; mask it
               S01:00000F51:  25 00
F00:0064         bne jsrone		; one
               S01:00000F53:  D0 0E
F00:0065         jsr zero		; or zero
               S01:00000F55:  20 0A 10
F00:0066       oner:
F00:0067         lda thing		; load the bitmask
               S01:00000F58:  A5 00
F00:0068         cmp #$80		; end of byte?
               S01:00000F5A:  C9 80
F00:0069         beq noo
               S01:00000F5C:  F0 0B
F00:0070         asl thing
               S01:00000F5E:  06 00
F00:0071         jmp wop		; next bit
               S01:00000F60:  4C 4E 0F
F00:0072       jsrone:
F00:0073         jsr one		; a one
               S01:00000F63:  20 9D 0F
F00:0074         jmp oner
               S01:00000F66:  4C 58 0F
F00:0075       noo:
F00:0076         lda #1		; byte done
               S01:00000F69:  A9 01
F00:0077         sta thing
               S01:00000F6B:  85 00
F00:0078         jsr one
               S01:00000F6D:  20 9D 0F
F00:0079         jsr one
               S01:00000F70:  20 9D 0F
F00:0080         lda dat,x
               S01:00000F73:  BD 3B 11
F00:0081         beq savedone
               S01:00000F76:  F0 08
F00:0082         jsr zero
               S01:00000F78:  20 0A 10
F00:0083         inx			; next byte
               S01:00000F7B:  E8
F00:0084         cpx #100 		; are we done reading the data?
               S01:00000F7C:  E0 64
F00:0085         bne wop
               S01:00000F7E:  D0 CE
F00:0086       savedone
F00:0087         ldy #$40
               S01:00000F80:  A0 40
F00:0088         jsr inout		; we are done, ending sound  
               S01:00000F82:  20 91 0F
F00:0089       
F00:0090         ; done
F00:0091         ldx #<msg2
               S01:00000F85:  A2 31
F00:0092         ldy #>msg2		; "Done!"
               S01:00000F87:  A0 11
F00:0093         jsr w_acia_full
               S01:00000F89:  20 E0 10
F00:0094       
F00:0095         rts
               S01:00000F8C:  60
F00:0096         rts
               S01:00000F8D:  60
F00:0097         rts			; return
               S01:00000F8E:  60
F00:0098         rts
               S01:00000F8F:  60
F00:0099         rts
               S01:00000F90:  60
F00:0100       
F00:0101       
F00:0102       
F00:0103       ; subs
F00:0104       
F00:0105       inout:
F00:0106       outer:
F00:0107         ldx #$10		; $40 * $10 times make the sound
               S01:00000F91:  A2 10
F00:0108       starter:
F00:0109         jsr one		; sound
               S01:00000F93:  20 9D 0F
F00:0110         dex
               S01:00000F96:  CA
F00:0111         bne starter
               S01:00000F97:  D0 FA
F00:0112         dey
               S01:00000F99:  88
F00:0113         bne outer
               S01:00000F9A:  D0 F5
F00:0114         rts
               S01:00000F9C:  60
F00:0115       
F00:0116       one:			; 2400hz sound 8 cyc
F00:0117         pha
               S01:00000F9D:  48
F00:0118         jsr togtap ; 1
               S01:00000F9E:  20 00 10
F00:0119         jsr onefreq
               S01:00000FA1:  20 3D 10
F00:0120         jsr togtap
               S01:00000FA4:  20 00 10
F00:0121         jsr onefreq
               S01:00000FA7:  20 3D 10
F00:0122         jsr togtap ; 2
               S01:00000FAA:  20 00 10
F00:0123         jsr onefreq
               S01:00000FAD:  20 3D 10
F00:0124         jsr togtap
               S01:00000FB0:  20 00 10
F00:0125         jsr onefreq
               S01:00000FB3:  20 3D 10
F00:0126         jsr togtap ; 3
               S01:00000FB6:  20 00 10
F00:0127         jsr onefreq
               S01:00000FB9:  20 3D 10
F00:0128         jsr togtap
               S01:00000FBC:  20 00 10
F00:0129         jsr onefreq
               S01:00000FBF:  20 3D 10
F00:0130         jsr togtap ; 4
               S01:00000FC2:  20 00 10
F00:0131         jsr onefreq
               S01:00000FC5:  20 3D 10
F00:0132         jsr togtap
               S01:00000FC8:  20 00 10
F00:0133         jsr onefreq
               S01:00000FCB:  20 3D 10
F00:0134         jsr togtap ; 5
               S01:00000FCE:  20 00 10
F00:0135         jsr onefreq
               S01:00000FD1:  20 3D 10
F00:0136         jsr togtap
               S01:00000FD4:  20 00 10
F00:0137         jsr onefreq
               S01:00000FD7:  20 3D 10
F00:0138         jsr togtap ; 6
               S01:00000FDA:  20 00 10
F00:0139         jsr onefreq
               S01:00000FDD:  20 3D 10
F00:0140         jsr togtap
               S01:00000FE0:  20 00 10
F00:0141         jsr onefreq
               S01:00000FE3:  20 3D 10
F00:0142         jsr togtap ; 7
               S01:00000FE6:  20 00 10
F00:0143         jsr onefreq
               S01:00000FE9:  20 3D 10
F00:0144         jsr togtap
               S01:00000FEC:  20 00 10
F00:0145         jsr onefreq
               S01:00000FEF:  20 3D 10
F00:0146         jsr togtap ; 8
               S01:00000FF2:  20 00 10
F00:0147         jsr onefreq
               S01:00000FF5:  20 3D 10
F00:0148         jsr togtap
               S01:00000FF8:  20 00 10
F00:0149         jsr onefreq
               S01:00000FFB:  20 3D 10
F00:0150         pla
               S01:00000FFE:  68
F00:0151         rts
               S01:00000FFF:  60
F00:0152       
F00:0153       togtap:
F00:0154         lda tapest
               S01:00001000:  A5 01
F00:0155         eor #%10000000 	; data out on PA7
               S01:00001002:  49 80
F00:0156         sta tapest
               S01:00001004:  85 01
F00:0157         sta PORTB
               S01:00001006:  8D 00 B0
F00:0158         rts
               S01:00001009:  60
F00:0159       
F00:0160       zero: 			; 1200hz sound 4 cyc
F00:0161         pha 
               S01:0000100A:  48
F00:0162         jsr togtap ; 1
               S01:0000100B:  20 00 10
F00:0163         jsr zerofreq
               S01:0000100E:  20 50 10
F00:0164         jsr togtap
               S01:00001011:  20 00 10
F00:0165         jsr zerofreq
               S01:00001014:  20 50 10
F00:0166         jsr togtap ; 2
               S01:00001017:  20 00 10
F00:0167         jsr zerofreq
               S01:0000101A:  20 50 10
F00:0168         jsr togtap
               S01:0000101D:  20 00 10
F00:0169         jsr zerofreq
               S01:00001020:  20 50 10
F00:0170         jsr togtap ; 3
               S01:00001023:  20 00 10
F00:0171         jsr zerofreq
               S01:00001026:  20 50 10
F00:0172         jsr togtap
               S01:00001029:  20 00 10
F00:0173         jsr zerofreq
               S01:0000102C:  20 50 10
F00:0174         jsr togtap ; 4
               S01:0000102F:  20 00 10
F00:0175         jsr zerofreq
               S01:00001032:  20 50 10
F00:0176         jsr togtap
               S01:00001035:  20 00 10
F00:0177         jsr zerofreq
               S01:00001038:  20 50 10
F00:0178         pla
               S01:0000103B:  68
F00:0179         rts
               S01:0000103C:  60
F00:0180       
F00:0181       onefreq:
F00:0182         stz $b00b
               S01:0000103D:  9C 0B B0
F00:0183         lda #$ae
               S01:00001040:  A9 AE
F00:0184         sta $b004		; freq
               S01:00001042:  8D 04 B0
F00:0185         lda #$00
               S01:00001045:  A9 00
F00:0186         sta $b005
               S01:00001047:  8D 05 B0
F00:0187       intro:
F00:0188         bit $b00d		; delay complete?
               S01:0000104A:  2C 0D B0
F00:0189         bvc intro
               S01:0000104D:  50 FB
F00:0190         rts
               S01:0000104F:  60
F00:0191       
F00:0192       zerofreq:
F00:0193         stz $b00b
               S01:00001050:  9C 0B B0
F00:0194         lda #$3f
               S01:00001053:  A9 3F
F00:0195         sta $b004
               S01:00001055:  8D 04 B0
F00:0196         lda #$01
               S01:00001058:  A9 01
F00:0197         sta $b005
               S01:0000105A:  8D 05 B0
F00:0198       intro2:
F00:0199         bit $b00d
               S01:0000105D:  2C 0D B0
F00:0200         bvc intro2
               S01:00001060:  50 FB
F00:0201         rts
               S01:00001062:  60
F00:0202       
F00:0203       tape_delay:
F00:0204         ldx #$ff		; wait for ye fumble.
               S01:00001063:  A2 FF
F00:0205       rd1:
F00:0206         lda #$7a		; (Y times through inner loop,
               S01:00001065:  A9 7A
F00:0207       rd2:     
F00:0208         sbc #$01		;  Y * $FF * 650uS = uS / 1e-6 = S )
               S01:00001067:  E9 01
F00:0209         bne rd2
               S01:00001069:  D0 FC
F00:0210       rd3:
F00:0211         dex
               S01:0000106B:  CA
F00:0212         bne rd1
               S01:0000106C:  D0 F7
F00:0213         dey
               S01:0000106E:  88
F00:0214         bne tape_delay
               S01:0000106F:  D0 F2
F00:0215         rts
               S01:00001071:  60
F00:0216       
F00:0217         .include "hwtape.s"
F01:0001       PORTB = $b000
F01:0002       PORTA = $b001
F01:0003       DDRB = $b002
F01:0004       DDRA = $b003
F01:0005       
F01:0006       ;LCD_E  = %10000000
F01:0007       ;LCD_RW = %01000000
F01:0008       ;LCD_RS = %00100000
F01:0009       
F01:0010       SD_CS    = %00010000
F01:0011       SD_SCK   = %00001000
F01:0012       SD_MOSI  = %00000100
F01:0013       SD_MISO  = %00000010
F01:0014       TAPE_EAR = %00000000 ; PA6 IN
F01:0015       TAPE_MIC = %10000000 ; PA7 OUT
F01:0016       
F01:0017       PORTB_OUTPUTPINS = TAPE_EAR | TAPE_MIC
F01:0018       
F01:0019       via_init:
F01:0020         lda PORTB_OUTPUTPINS		; Set various pins on port B to output
               S01:00001072:  A5 80
F01:0021         sta DDRB
               S01:00001074:  8D 02 B0
F01:0022         ;lda #%11111111 ; Set all pins on port A to output 
F01:0023         ;sta DDRA
F01:0024         rts
               S01:00001077:  60
F01:0025       
F01:0026       
F00:0218         .include "libacia.s"
F02:0001       ;       ------------------ 6551 ACIA Subroutine Library -------------------
F02:0002       ; Includes:
F02:0003       ; acia_init       - Initializes the ACIA
F02:0004       ; print_hex_acia  - Prints a hex value in A
F02:0005       ; crlf		  - Prints <CR> followed by <LF>
F02:0006       ; clear_display   - Sends a <CLS> command
F02:0007       ; txpoll          - Polls the TX bit to see if the ACIA is ready
F02:0008       ; print_chara     - Prints a Character that is stored in A
F02:0009       ; print_char_acia - Same as print_chara
F02:0010       ; ascii_home      - Home the cursor
F02:0011       ; w_acia_full     - Print a NULL-Termintated String with >HIGH in Y and <LOW in X
F02:0012       
F02:0013       acia_init:
F02:0014         pha
               S01:00001078:  48
F02:0015         lda #%00001011          ; No parity, no echo, no interrupt
               S01:00001079:  A9 0B
F02:0016         sta $8002
               S01:0000107B:  8D 02 80
F02:0017         lda #%00011111          ; 1 stop bit, 8 data bits, 19200 baud
               S01:0000107E:  A9 1F
F02:0018         sta $8003
               S01:00001080:  8D 03 80
F02:0019         pla
               S01:00001083:  68
F02:0020         rts
               S01:00001084:  60
F02:0021       
F02:0022       print_hex_acia:
F02:0023         pha
               S01:00001085:  48
F02:0024         ror
               S01:00001086:  6A
F02:0025         ror
               S01:00001087:  6A
F02:0026         ror
               S01:00001088:  6A
F02:0027         ror
               S01:00001089:  6A
F02:0028         jsr print_nybble   ; This is just som usful hex cod
               S01:0000108A:  20 8E 10
F02:0029         pla
               S01:0000108D:  68
F02:0030       print_nybble:
F02:0031         and #15
               S01:0000108E:  29 0F
F02:0032         cmp #10
               S01:00001090:  C9 0A
F02:0033         bmi cskipletter
               S01:00001092:  30 02
F02:0034         adc #6
               S01:00001094:  69 06
F02:0035       cskipletter:
F02:0036         adc #48
               S01:00001096:  69 30
F02:0037        ; jsr print_char
F02:0038         jsr print_chara
               S01:00001098:  20 CC 10
F02:0039         rts
               S01:0000109B:  60
F02:0040       
F02:0041       crlf:
F02:0042         pha
               S01:0000109C:  48
F02:0043         txa
               S01:0000109D:  8A
F02:0044         pha
               S01:0000109E:  48
F02:0045         tya
               S01:0000109F:  98
F02:0046         pha
               S01:000010A0:  48
F02:0047         lda #$0d
               S01:000010A1:  A9 0D
F02:0048         jsr print_chara
               S01:000010A3:  20 CC 10
F02:0049         lda #$0a
               S01:000010A6:  A9 0A
F02:0050         jsr print_chara
               S01:000010A8:  20 CC 10
F02:0051         pla
               S01:000010AB:  68
F02:0052         tay
               S01:000010AC:  A8
F02:0053         pla
               S01:000010AD:  68
F02:0054         tax
               S01:000010AE:  AA
F02:0055         pla
               S01:000010AF:  68
F02:0056         rts
               S01:000010B0:  60
F02:0057       
F02:0058       cleardisplay:
F02:0059         pha
               S01:000010B1:  48
F02:0060         jsr txpoll  ; Poll the TX bit
               S01:000010B2:  20 BC 10
F02:0061         lda #12     ; Print decimal 12 (CLS)
               S01:000010B5:  A9 0C
F02:0062         sta $8000
               S01:000010B7:  8D 00 80
F02:0063         pla
               S01:000010BA:  68
F02:0064         rts
               S01:000010BB:  60
F02:0065       
F02:0066       txpoll:
F02:0067         lda $8001
               S01:000010BC:  AD 01 80
F02:0068         and #$10    ; Poll the TX bit
               S01:000010BF:  29 10
F02:0069         beq txpoll
               S01:000010C1:  F0 F9
F02:0070         rts
               S01:000010C3:  60
F02:0071       
F02:0072       rxpoll:
F02:0073         lda $8001
               S01:000010C4:  AD 01 80
F02:0074         and #$08    ; Poll the RX bit
               S01:000010C7:  29 08
F02:0075         beq rxpoll
               S01:000010C9:  F0 F9
F02:0076         rts
               S01:000010CB:  60
F02:0077       
F02:0078       
F02:0079       print_chara:
F02:0080         pha
               S01:000010CC:  48
F02:0081         jsr txpoll  ; Poll the TX bit
               S01:000010CD:  20 BC 10
F02:0082         pla
               S01:000010D0:  68
F02:0083         sta $8000   ; Print character from A
               S01:000010D1:  8D 00 80
F02:0084         rts
               S01:000010D4:  60
F02:0085       
F02:0086       print_char_acia:
F02:0087         jmp print_chara  ; Same as "print_chara"
               S01:000010D5:  4C CC 10
F02:0088       
F02:0089       ascii_home:
F02:0090         pha
               S01:000010D8:  48
F02:0091         lda #1
               S01:000010D9:  A9 01
F02:0092         jsr print_chara  ; Print 1 (HOME)
               S01:000010DB:  20 CC 10
F02:0093         pla
               S01:000010DE:  68
F02:0094         rts
               S01:000010DF:  60
F02:0095       
F02:0096       w_acia_full:
F02:0097         pha
               S01:000010E0:  48
F02:0098         lda $ff
               S01:000010E1:  A5 FF
F02:0099         pha        ; Push Previous States onto the stack
               S01:000010E3:  48
F02:0100         lda $fe
               S01:000010E4:  A5 FE
F02:0101         pha
               S01:000010E6:  48
F02:0102         sty $ff    ; Set Y as the Upper Address (8-15)
               S01:000010E7:  84 FF
F02:0103         stx $fe    ; Set X as the Lower Adderss (0-7)
               S01:000010E9:  86 FE
F02:0104         ldy #0
               S01:000010EB:  A0 00
F02:0105       acia_man:
F02:0106         jsr txpoll   ; Poll TX
               S01:000010ED:  20 BC 10
F02:0107         lda ($fe),y  ; Load the Address
               S01:000010F0:  B1 FE
F02:0108         sta $8000    ; Print what is at the address
               S01:000010F2:  8D 00 80
F02:0109         beq endwacia ; If Done, End
               S01:000010F5:  F0 04
F02:0110         iny          ; Next Character
               S01:000010F7:  C8
F02:0111         jmp acia_man ; Back to the top
               S01:000010F8:  4C ED 10
F02:0112       endwacia:
F02:0113         pla
               S01:000010FB:  68
F02:0114         sta $fe
               S01:000010FC:  85 FE
F02:0115         pla          ; Restore Variables
               S01:000010FE:  68
F02:0116         sta $ff
               S01:000010FF:  85 FF
F02:0117         pla
               S01:00001101:  68
F02:0118         rts
               S01:00001102:  60
F02:0119       
F00:0219       ;     cursor off   |                               | CR | LF | NULL
F00:0220       msg:
F00:0221         .byte $02, $ff, "Press Record And play on Tape.", $0d, $0a, $00
               S01:00001103:  02
               S01:00001104:  FF
               S01:00001105:  50 72 65 73 73 20 52 65 63 6F 72 64 20 41 6E 64
               S01:00001115:  20 70 6C 61 79 20 6F 6E 20 54 61 70 65 2E
               S01:00001123:  0D
               S01:00001124:  0A
               S01:00001125:  00
F00:0222       loading_msg:         ;NULL
F00:0223         .byte "Loading...", $00
               S01:00001126:  4C 6F 61 64 69 6E 67 2E 2E 2E
               S01:00001130:  00
F00:0224       msg2:
F00:0225       ;       |      | CR | LF |cursor on| NULL
F00:0226         .byte "Done!", $0d, $0a, $02, $5f, $00
               S01:00001131:  44 6F 6E 65 21
               S01:00001136:  0D
               S01:00001137:  0A
               S01:00001138:  02
               S01:00001139:  5F
               S01:0000113A:  00
F00:0227       dat:
F00:0228         .byte "Hello, World! This is a test of the Kansas City tape protocol. If your are reading this, yay!", $0d, $0a, $0d, 
               S01:0000113B:  48 65 6C 6C 6F 2C 20 57 6F 72 6C 64 21 20 54 68
               S01:0000114B:  69 73 20 69 73 20 61 20 74 65 73 74 20 6F 66 20
               S01:0000115B:  0D
               S01:0000115C:  0A
               S01:0000115D:  0D
               S01:0000115E:  0A
               S01:0000115F:  00
F00:0229       
F00:0230         .org $1200
F00:0231       
F00:0232       clear:
F00:0233         ldx #0
               S02:00001200:  A2 00
F00:0234       clearlop:
F00:0235         stz dat,x
               S02:00001202:  9E 3B 11
F00:0236         inx
               S02:00001205:  E8
F00:0237         cpx #100 ; our message is 100 bytes long
               S02:00001206:  E0 64
F00:0238         bne clearlop
               S02:00001208:  D0 F8
F00:0239         ldx #<clearmsg
               S02:0000120A:  A2 15
F00:0240         ldy #>clearmsg
               S02:0000120C:  A0 12
F00:0241         jsr w_acia_full
               S02:0000120E:  20 E0 10
F00:0242         rts
               S02:00001211:  60
F00:0243         rts
               S02:00001212:  60
F00:0244         rts
               S02:00001213:  60
F00:0245         rts
               S02:00001214:  60
F00:0246       
F00:0247       clearmsg:
F00:0248         .byte "Cleared!", $0d, $0a, $00
               S02:00001215:  43 6C 65 61 72 65 64 21
               S02:0000121D:  0D
               S02:0000121E:  0A
               S02:0000121F:  00
F00:0249       
F00:0250         .org $1300
F00:0251       
F00:0252       load:
F00:0253         lda #%10111111
               S03:00001300:  A9 BF
F00:0254         sta DDRB
               S03:00001302:  8D 02 B0
F00:0255       
F00:0256         ldx #<loadmsg		; PRESS PLAY ON TAPE
               S03:00001305:  A2 86
F00:0257         ldy #>loadmsg
               S03:00001307:  A0 13
F00:0258         jsr w_acia_full
               S03:00001309:  20 E0 10
F00:0259       
F00:0260         lda #$18		; ye fumble
               S03:0000130C:  A9 18
F00:0261         jsr tape_delay	; 4 second delay
               S03:0000130E:  20 63 10
F00:0262       
F00:0263         ldx #<loading_msg	; Loading...
               S03:00001311:  A2 26
F00:0264         ldy #>loading_msg
               S03:00001313:  A0 11
F00:0265         jsr w_acia_full
               S03:00001315:  20 E0 10
F00:0266       
F00:0267         ldy #0
               S03:00001318:  A0 00
F00:0268       
F00:0269         ; thanks to ben eater for this code
F00:0270       
F00:0271       rx_wait_start:
F00:0272         bit PORTB	; wait until PORTB.6 = 0 (start bit)
               S03:0000131A:  2C 00 B0
F00:0273         bvs rx_wait_start
               S03:0000131D:  70 FB
F00:0274       
F00:0275         ldx #8
               S03:0000131F:  A2 08
F00:0276       read_bita:
F00:0277         jsr rx_delay	; run bit delay for 300 baud serial stream
               S03:00001321:  20 77 13
F00:0278         bit PORTB	; read in the state
               S03:00001324:  2C 00 B0
F00:0279         bvs recv_1a	; if it's not a one,
               S03:00001327:  70 04
F00:0280         clc		; it's a zero.
               S03:00001329:  18
F00:0281         jmp rx_donea
               S03:0000132A:  4C 30 13
F00:0282       recv_1a:
F00:0283         sec		; it's a one.
               S03:0000132D:  38
F00:0284         nop		; nops for timing
               S03:0000132E:  EA
F00:0285         nop
               S03:0000132F:  EA
F00:0286       rx_donea:
F00:0287         ror		; rotate carry into accumulator
               S03:00001330:  6A
F00:0288         inx
               S03:00001331:  E8
F00:0289         bne read_bita	; repeat until 8 bits read
               S03:00001332:  D0 ED
F00:0290         dey
               S03:00001334:  88
F00:0291         beq got_len
               S03:00001335:  F0 05
F00:0292         sta len
               S03:00001337:  85 04
F00:0293         jmp rx_wait_start
               S03:00001339:  4C 1A 13
F00:0294       got_len:
F00:0295         sta len+1
               S03:0000133C:  85 05
F00:0296       
F00:0297       rx_wait:
F00:0298         bit PORTB	; wait until PORTB.6 = 0 (start bit)
               S03:0000133E:  2C 00 B0
F00:0299         bvs rx_wait
               S03:00001341:  70 FB
F00:0300       
F00:0301         ldx #8
               S03:00001343:  A2 08
F00:0302       read_bit:
F00:0303         jsr rx_delay	; run bit delay for 300 baud serial stream
               S03:00001345:  20 77 13
F00:0304         bit PORTB	; read in the state
               S03:00001348:  2C 00 B0
F00:0305         bvs recv_1	; if it's not a one,
               S03:0000134B:  70 04
F00:0306         clc		; it's a zero.
               S03:0000134D:  18
F00:0307         jmp rx_done
               S03:0000134E:  4C 54 13
F00:0308       recv_1:
F00:0309         sec		; it's a one.
               S03:00001351:  38
F00:0310         nop		; nops for timing
               S03:00001352:  EA
F00:0311         nop
               S03:00001353:  EA
F00:0312       rx_done:
F00:0313         ror		; rotate carry into accumulator
               S03:00001354:  6A
F00:0314         dex
               S03:00001355:  CA
F00:0315         bne read_bit	; repeat until 8 bits read
               S03:00001356:  D0 ED
F00:0316       
F00:0317         sta (cnt)	; store data
               S03:00001358:  92 02
F00:0318         inc cnt
               S03:0000135A:  E6 02
F00:0319         bne declen
               S03:0000135C:  D0 02
F00:0320         inc cnt+1
               S03:0000135E:  E6 03
F00:0321       declen:
F00:0322         lda cnt	; are we done?
               S03:00001360:  A5 02
F00:0323         cmp len
               S03:00001362:  C5 04
F00:0324         bne rx_wait
               S03:00001364:  D0 D8
F00:0325         lda cnt+1
               S03:00001366:  A5 03
F00:0326         cmp len+1
               S03:00001368:  C5 05
F00:0327         bne rx_wait	; if not, get another byte
               S03:0000136A:  D0 D2
F00:0328         ;jmp rx_wait
F00:0329       
F00:0330       load_done:
F00:0331         ldx #<msg2	; Done!
               S03:0000136C:  A2 31
F00:0332         ldy #>msg2
               S03:0000136E:  A0 11
F00:0333         jsr w_acia_full
               S03:00001370:  20 E0 10
F00:0334       
F00:0335         rts
               S03:00001373:  60
F00:0336         rts
               S03:00001374:  60
F00:0337         rts
               S03:00001375:  60
F00:0338         rts
               S03:00001376:  60
F00:0339       
F00:0340       rx_delay:
F00:0341         phx
               S03:00001377:  DA
F00:0342         phy
               S03:00001378:  5A
F00:0343         ldy #$05
               S03:00001379:  A0 05
F00:0344       rx_delay_outer:
F00:0345         ldx #$1c
               S03:0000137B:  A2 1C
F00:0346       rx_delay_inner:
F00:0347         dex
               S03:0000137D:  CA
F00:0348         bne rx_delay_inner
               S03:0000137E:  D0 FD
F00:0349         dey
               S03:00001380:  88
F00:0350         bne rx_delay_outer
               S03:00001381:  D0 F8
F00:0351         ply
               S03:00001383:  7A
F00:0352         plx
               S03:00001384:  FA
F00:0353         rts
               S03:00001385:  60
F00:0354       
F00:0355       loadmsg:
F00:0356         .byte "Press Play On Tape.", $0d, $0a, $00
               S03:00001386:  50 72 65 73 73 20 50 6C 61 79 20 4F 6E 20 54 61
               S03:00001396:  70 65 2E
               S03:00001399:  0D
               S03:0000139A:  0A
               S03:0000139B:  00
F00:0357       saving_msg:
F00:0358         .byte "Saving...", $00
               S03:0000139C:  53 61 76 69 6E 67 2E 2E 2E
               S03:000013A5:  00
F00:0359       
F00:0360       


Sections:
S01  segf00
S02  seg1200
S03  seg1300


Sources:
F00  tap.s
F01  hwtape.s
F02  libacia.s


Symbols:
rx_delay_inner EXPR(4989=0x137d) ABS 
rx_delay_outer EXPR(4987=0x137b) ABS 
load_done EXPR(4972=0x136c) UNUSED ABS 
declen EXPR(4960=0x1360) ABS 
rx_done EXPR(4948=0x1354) ABS 
recv_1 EXPR(4945=0x1351) ABS 
read_bit EXPR(4933=0x1345) ABS 
rx_wait EXPR(4926=0x133e) ABS 
got_len EXPR(4924=0x133c) ABS 
rx_donea EXPR(4912=0x1330) ABS 
recv_1a EXPR(4909=0x132d) ABS 
rx_delay EXPR(4983=0x1377) ABS 
read_bita EXPR(4897=0x1321) ABS 
rx_wait_start EXPR(4890=0x131a) ABS 
loadmsg EXPR(4998=0x1386) ABS 
load EXPR(4864=0x1300) UNUSED ABS 
clearmsg EXPR(4629=0x1215) ABS 
clearlop EXPR(4610=0x1202) ABS 
clear EXPR(4608=0x1200) UNUSED ABS 
loading_msg EXPR(4390=0x1126) ABS 
endwacia EXPR(4347=0x10fb) ABS 
acia_man EXPR(4333=0x10ed) ABS 
ascii_home EXPR(4312=0x10d8) UNUSED ABS 
print_char_acia EXPR(4309=0x10d5) UNUSED ABS 
rxpoll EXPR(4292=0x10c4) ABS 
txpoll EXPR(4284=0x10bc) ABS 
cleardisplay EXPR(4273=0x10b1) UNUSED ABS 
crlf EXPR(4252=0x109c) UNUSED ABS 
print_chara EXPR(4300=0x10cc) ABS 
cskipletter EXPR(4246=0x1096) ABS 
print_nybble EXPR(4238=0x108e) ABS 
print_hex_acia EXPR(4229=0x1085) UNUSED ABS 
acia_init EXPR(4216=0x1078) UNUSED ABS 
via_init EXPR(4210=0x1072) UNUSED ABS 
PORTB_OUTPUTPINS EXPR(128=0x80) EQU 
TAPE_MIC EXPR(128=0x80) EQU 
TAPE_EAR EXPR(0=0x0) EQU 
SD_MISO EXPR(2=0x2) UNUSED EQU 
SD_MOSI EXPR(4=0x4) UNUSED EQU 
SD_SCK EXPR(8=0x8) UNUSED EQU 
SD_CS EXPR(16=0x10) UNUSED EQU 
DDRA EXPR(45059=0xb003) UNUSED EQU 
PORTA EXPR(45057=0xb001) UNUSED EQU 
rd3 EXPR(4203=0x106b) UNUSED ABS 
rd2 EXPR(4199=0x1067) ABS 
rd1 EXPR(4197=0x1065) ABS 
intro2 EXPR(4189=0x105d) ABS 
intro EXPR(4170=0x104a) ABS 
zerofreq EXPR(4176=0x1050) ABS 
PORTB EXPR(45056=0xb000) EQU 
onefreq EXPR(4157=0x103d) ABS 
togtap EXPR(4096=0x1000) ABS 
starter EXPR(3987=0xf93) ABS 
outer EXPR(3985=0xf91) ABS 
msg2 EXPR(4401=0x1131) ABS 
savedone EXPR(3968=0xf80) ABS 
noo EXPR(3945=0xf69) ABS 
oner EXPR(3928=0xf58) ABS 
jsrone EXPR(3939=0xf63) ABS 
dat EXPR(4411=0x113b) ABS 
wop EXPR(3918=0xf4e) ABS 
one EXPR(3997=0xf9d) ABS 
header_done EXPR(3907=0xf43) ABS 
head EXPR(3890=0xf32) ABS 
head1 EXPR(3901=0xf3d) ABS 
begin EXPR(3881=0xf29) ABS 
zero EXPR(4106=0x100a) ABS 
inout EXPR(3985=0xf91) ABS 
saving_msg EXPR(5020=0x139c) ABS 
tape_delay EXPR(4195=0x1063) ABS 
w_acia_full EXPR(4320=0x10e0) ABS 
msg EXPR(4355=0x1103) ABS 
DDRB EXPR(45058=0xb002) EQU 
start EXPR(3840=0xf00) UNUSED ABS 
len EXPR(4=0x4) EQU 
cnt EXPR(2=0x2) EQU 
tapest EXPR(1=0x1) EQU 
thing EXPR(0=0x0) EQU 
__RPTCNT EXPR(-1=0xffff) INTERNAL 
__VASM EXPR(0=0x0) INTERNAL 

There have been no errors.
