F00:0001       ; The Kansas City Standard for the XPL-32
F00:0002       ; 2400hz = 1
F00:0003       ; 1200hz = 0
F00:0004       ; data is encoded with 2400hz starting sound (for alignment)
F00:0005       ; start bit is a 0
F00:0006       ; end bit is a >2 1s
F00:0007       ; a byte is LEAST SIGNIFICANT TO MOST SIGNIFICANT as in 011 -> 110
F00:0008       
F00:0009       thing  = $00
F00:0010       odd    = $01
F00:0011       buf    = $02
F00:0012       eorr   = $03
F00:0013       tapest = $04
F00:0014       
F00:0015         .org $0f00
F00:0016       
F00:0017       start:
F00:0018         jsr via_init		; init VIA
               S01:00000F00:  20 56 10
F00:0019         stz $b00e
               S01:00000F03:  9C 0E B0
F00:0020         stz tapest
               S01:00000F06:  64 04
F00:0021       ;  ldx #0
F00:0022       ;datlop:
F00:0023       ;  txa
F00:0024       ;  sta dat,x		; store data that counts
F00:0025       ;  inx
F00:0026       ;  bne datlop
F00:0027       
F00:0028         ldx #<msg
               S01:00000F08:  A2 EC
F00:0029         ldy #>msg		; press rec and play
               S01:00000F0A:  A0 10
F00:0030         jsr w_acia_full
               S01:00000F0C:  20 C9 10
F00:0031       
F00:0032         lda #$18		; 4 seconds
               S01:00000F0F:  A9 18
F00:0033         jsr TDELAY		; (ye fumble)
               S01:00000F11:  20 47 10
F00:0034       
F00:0035         ldx #<saving_msg	; Saving...
               S01:00000F14:  A2 1A
F00:0036         ldy #>saving_msg
               S01:00000F16:  A0 11
F00:0037         jsr w_acia_full
               S01:00000F18:  20 C9 10
F00:0038       
F00:0039         jsr inout		; intro sound
               S01:00000F1B:  20 61 0F
F00:0040       
F00:0041         jsr zero
               S01:00000F1E:  20 E7 0F
F00:0042       
F00:0043         ldx #0
               S01:00000F21:  A2 00
F00:0044         ldy #1
               S01:00000F23:  A0 01
F00:0045         sty thing		; first bit
               S01:00000F25:  84 00
F00:0046       wop:
F00:0047         lda dat,x		; load data
               S01:00000F27:  BD 2E 11
F00:0048         and thing		; mask it
               S01:00000F2A:  25 00
F00:0049         bne jsrone		; one
               S01:00000F2C:  D0 0E
F00:0050         jsr zero		; or zero
               S01:00000F2E:  20 E7 0F
F00:0051       oner:
F00:0052         lda thing		; load the bitmask
               S01:00000F31:  A5 00
F00:0053         cmp #$80		; end of byte?
               S01:00000F33:  C9 80
F00:0054         beq noo
               S01:00000F35:  F0 0B
F00:0055         asl thing
               S01:00000F37:  06 00
F00:0056         jmp wop		; next bit
               S01:00000F39:  4C 27 0F
F00:0057       jsrone:
F00:0058         jsr one		; a one
               S01:00000F3C:  20 75 0F
F00:0059         jmp oner
               S01:00000F3F:  4C 31 0F
F00:0060       noo:
F00:0061         lda #1		; byte done
               S01:00000F42:  A9 01
F00:0062         sta thing
               S01:00000F44:  85 00
F00:0063         jsr zero		; end prev. byte, start new byte
               S01:00000F46:  20 E7 0F
F00:0064         jsr zero
               S01:00000F49:  20 E7 0F
F00:0065         jsr one
               S01:00000F4C:  20 75 0F
F00:0066         inx			; next byte
               S01:00000F4F:  E8
F00:0067         bne wop
               S01:00000F50:  D0 D5
F00:0068       
F00:0069         jsr inout		; we are done, ending sound  
               S01:00000F52:  20 61 0F
F00:0070       
F00:0071         ; done
F00:0072         ldx #<msg2
               S01:00000F55:  A2 24
F00:0073         ldy #>msg2		; "Done!"
               S01:00000F57:  A0 11
F00:0074         jsr w_acia_full
               S01:00000F59:  20 C9 10
F00:0075       
F00:0076         rts
               S01:00000F5C:  60
F00:0077         rts
               S01:00000F5D:  60
F00:0078         rts			; return
               S01:00000F5E:  60
F00:0079         rts
               S01:00000F5F:  60
F00:0080         rts
               S01:00000F60:  60
F00:0081       
F00:0082       
F00:0083       
F00:0084       ; subs
F00:0085       
F00:0086       inout:
F00:0087         pha
               S01:00000F61:  48
F00:0088         phx
               S01:00000F62:  DA
F00:0089         phy
               S01:00000F63:  5A
F00:0090         ldy #$40
               S01:00000F64:  A0 40
F00:0091       outer:
F00:0092         ldx #$10		; $40 * $10 times make the sound
               S01:00000F66:  A2 10
F00:0093       starter:
F00:0094         jsr one		; sound
               S01:00000F68:  20 75 0F
F00:0095         dex
               S01:00000F6B:  CA
F00:0096         bne starter
               S01:00000F6C:  D0 FA
F00:0097         dey
               S01:00000F6E:  88
F00:0098         bne outer
               S01:00000F6F:  D0 F5
F00:0099         ply
               S01:00000F71:  7A
F00:0100         plx
               S01:00000F72:  FA
F00:0101         pla
               S01:00000F73:  68
F00:0102         rts
               S01:00000F74:  60
F00:0103       
F00:0104       one:			; 2400hz sound 8 cyc
F00:0105         pha
               S01:00000F75:  48
F00:0106         stz tapest
               S01:00000F76:  64 04
F00:0107         stz PORTA
               S01:00000F78:  9C 01 B0
F00:0108         jsr togtap ; 1
               S01:00000F7B:  20 DD 0F
F00:0109         jsr onefreq
               S01:00000F7E:  20 21 10
F00:0110         jsr togtap
               S01:00000F81:  20 DD 0F
F00:0111         jsr onefreq
               S01:00000F84:  20 21 10
F00:0112         jsr togtap ; 2
               S01:00000F87:  20 DD 0F
F00:0113         jsr onefreq
               S01:00000F8A:  20 21 10
F00:0114         jsr togtap
               S01:00000F8D:  20 DD 0F
F00:0115         jsr onefreq
               S01:00000F90:  20 21 10
F00:0116         jsr togtap ; 3
               S01:00000F93:  20 DD 0F
F00:0117         jsr onefreq
               S01:00000F96:  20 21 10
F00:0118         jsr togtap
               S01:00000F99:  20 DD 0F
F00:0119         jsr onefreq
               S01:00000F9C:  20 21 10
F00:0120         jsr togtap ; 4
               S01:00000F9F:  20 DD 0F
F00:0121         jsr onefreq
               S01:00000FA2:  20 21 10
F00:0122         jsr togtap
               S01:00000FA5:  20 DD 0F
F00:0123         jsr onefreq
               S01:00000FA8:  20 21 10
F00:0124         jsr togtap ; 1
               S01:00000FAB:  20 DD 0F
F00:0125         jsr onefreq
               S01:00000FAE:  20 21 10
F00:0126         jsr togtap
               S01:00000FB1:  20 DD 0F
F00:0127         jsr onefreq
               S01:00000FB4:  20 21 10
F00:0128         jsr togtap ; 2
               S01:00000FB7:  20 DD 0F
F00:0129         jsr onefreq
               S01:00000FBA:  20 21 10
F00:0130         jsr togtap
               S01:00000FBD:  20 DD 0F
F00:0131         jsr onefreq
               S01:00000FC0:  20 21 10
F00:0132         jsr togtap ; 3
               S01:00000FC3:  20 DD 0F
F00:0133         jsr onefreq
               S01:00000FC6:  20 21 10
F00:0134         jsr togtap
               S01:00000FC9:  20 DD 0F
F00:0135         jsr onefreq
               S01:00000FCC:  20 21 10
F00:0136         jsr togtap ; 4
               S01:00000FCF:  20 DD 0F
F00:0137         jsr onefreq
               S01:00000FD2:  20 21 10
F00:0138         jsr togtap
               S01:00000FD5:  20 DD 0F
F00:0139         jsr onefreq
               S01:00000FD8:  20 21 10
F00:0140         pla
               S01:00000FDB:  68
F00:0141         rts
               S01:00000FDC:  60
F00:0142       
F00:0143       togtap:
F00:0144         lda tapest
               S01:00000FDD:  A5 04
F00:0145         eor #%00000010
               S01:00000FDF:  49 02
F00:0146         sta tapest
               S01:00000FE1:  85 04
F00:0147         sta PORTA
               S01:00000FE3:  8D 01 B0
F00:0148         rts
               S01:00000FE6:  60
F00:0149       
F00:0150       zero: 			; 1200hz sound 4 cyc
F00:0151         pha 
               S01:00000FE7:  48
F00:0152         lda #$55
               S01:00000FE8:  A9 55
F00:0153         sta odd
               S01:00000FEA:  85 01
F00:0154         stz PORTA
               S01:00000FEC:  9C 01 B0
F00:0155         jsr togtap ; 1
               S01:00000FEF:  20 DD 0F
F00:0156         jsr zerofreq
               S01:00000FF2:  20 34 10
F00:0157         jsr togtap ; 2
               S01:00000FF5:  20 DD 0F
F00:0158         jsr zerofreq
               S01:00000FF8:  20 34 10
F00:0159         jsr togtap ; 3
               S01:00000FFB:  20 DD 0F
F00:0160         jsr zerofreq
               S01:00000FFE:  20 34 10
F00:0161         jsr togtap ; 4
               S01:00001001:  20 DD 0F
F00:0162         jsr zerofreq
               S01:00001004:  20 34 10
F00:0163         jsr togtap ; 1
               S01:00001007:  20 DD 0F
F00:0164         jsr zerofreq
               S01:0000100A:  20 34 10
F00:0165         jsr togtap ; 2
               S01:0000100D:  20 DD 0F
F00:0166         jsr zerofreq
               S01:00001010:  20 34 10
F00:0167         jsr togtap ; 3
               S01:00001013:  20 DD 0F
F00:0168         jsr zerofreq
               S01:00001016:  20 34 10
F00:0169         jsr togtap ; 4
               S01:00001019:  20 DD 0F
F00:0170         jsr zerofreq
               S01:0000101C:  20 34 10
F00:0171       
F00:0172         pla
               S01:0000101F:  68
F00:0173         rts
               S01:00001020:  60
F00:0174       
F00:0175       onefreq:
F00:0176         stz $b00b
               S01:00001021:  9C 0B B0
F00:0177         lda #$ce
               S01:00001024:  A9 CE
F00:0178         sta $b004		; freq
               S01:00001026:  8D 04 B0
F00:0179         lda #$00
               S01:00001029:  A9 00
F00:0180         sta $b005
               S01:0000102B:  8D 05 B0
F00:0181       intro:
F00:0182         bit $b00d		; delay complete?
               S01:0000102E:  2C 0D B0
F00:0183         bvc intro
               S01:00001031:  50 FB
F00:0184         rts
               S01:00001033:  60
F00:0185       
F00:0186       zerofreq:
F00:0187         stz $b00b
               S01:00001034:  9C 0B B0
F00:0188         lda #$9e
               S01:00001037:  A9 9E
F00:0189         sta $b004
               S01:00001039:  8D 04 B0
F00:0190         lda #$01
               S01:0000103C:  A9 01
F00:0191         sta $b005
               S01:0000103E:  8D 05 B0
F00:0192       intro2:
F00:0193         bit $b00d
               S01:00001041:  2C 0D B0
F00:0194         bvc intro2
               S01:00001044:  50 FB
F00:0195         rts
               S01:00001046:  60
F00:0196       
F00:0197       TDELAY  LDX     #$FF            ; wait for ye fumble.
               S01:00001047:  A2 FF
F00:0198       RD1     LDA     #$7A            ; (Y times through inner loop,
               S01:00001049:  A9 7A
F00:0199       RD2     SBC     #$01            ;  Y * $FF * 650uS = uS / 1e-6 = S )
               S01:0000104B:  E9 01
F00:0200               BNE     RD2
               S01:0000104D:  D0 FC
F00:0201       RD3     DEX
               S01:0000104F:  CA
F00:0202               BNE     RD1
               S01:00001050:  D0 F7
F00:0203               DEY
               S01:00001052:  88
F00:0204               BNE     TDELAY
               S01:00001053:  D0 F2
F00:0205               RTS
               S01:00001055:  60
F00:0206       
F00:0207         .include "hwtape.s"
F01:0001       PORTB = $b000
F01:0002       PORTA = $b001
F01:0003       DDRB = $b002
F01:0004       DDRA = $b003
F01:0005       
F01:0006       LCD_E  = %10000000
F01:0007       LCD_RW = %01000000
F01:0008       LCD_RS = %00100000
F01:0009       
F01:0010       SD_CS    = %00010000
F01:0011       SD_SCK   = %00001000
F01:0012       SD_MOSI  = %00000100
F01:0013       SD_MISO  = %00000010
F01:0014       TAPE_EAR = %00000000 ; PA0 IN
F01:0015       TAPE_MIC = %00000010 ; PA1 OUT
F01:0016       
F01:0017       PORTA_OUTPUTPINS = TAPE_EAR | TAPE_MIC
F01:0018       
F01:0019       via_init:
F01:0020         lda #%11111111          ; Set all pins on port B to output
               S01:00001056:  A9 FF
F01:0021         sta DDRB
               S01:00001058:  8D 02 B0
F01:0022         lda #PORTA_OUTPUTPINS   ; Set various pins on port A to output
               S01:0000105B:  A9 02
F01:0023         sta DDRA
               S01:0000105D:  8D 03 B0
F01:0024         rts
               S01:00001060:  60
F01:0025       
F01:0026       
F00:0208         .include "libacia.s"
F02:0001       ;       ------------------ 6551 ACIA Subroutine Library -------------------
F02:0002       ; Includes:
F02:0003       ; acia_init       - Initializes the ACIA
F02:0004       ; print_hex_acia  - Prints a hex value in A
F02:0005       ; crlf		  - Prints <CR> followed by <LF>
F02:0006       ; clear_display   - Sends a <CLS> command
F02:0007       ; txpoll          - Polls the TX bit to see if the ACIA is ready
F02:0008       ; print_chara     - Prints a Character that is stored in A
F02:0009       ; print_char_acia - Same as print_chara
F02:0010       ; ascii_home      - Home the cursor
F02:0011       ; w_acia_full     - Print a NULL-Termintated String with >HIGH in Y and <LOW in X
F02:0012       
F02:0013       acia_init:
F02:0014         pha
               S01:00001061:  48
F02:0015         lda #%00001011          ; No parity, no echo, no interrupt
               S01:00001062:  A9 0B
F02:0016         sta $8002
               S01:00001064:  8D 02 80
F02:0017         lda #%00011111          ; 1 stop bit, 8 data bits, 19200 baud
               S01:00001067:  A9 1F
F02:0018         sta $8003
               S01:00001069:  8D 03 80
F02:0019         pla
               S01:0000106C:  68
F02:0020         rts
               S01:0000106D:  60
F02:0021       
F02:0022       print_hex_acia:
F02:0023         pha
               S01:0000106E:  48
F02:0024         ror
               S01:0000106F:  6A
F02:0025         ror
               S01:00001070:  6A
F02:0026         ror
               S01:00001071:  6A
F02:0027         ror
               S01:00001072:  6A
F02:0028         jsr print_nybble   ; This is just som usful hex cod
               S01:00001073:  20 77 10
F02:0029         pla
               S01:00001076:  68
F02:0030       print_nybble:
F02:0031         and #15
               S01:00001077:  29 0F
F02:0032         cmp #10
               S01:00001079:  C9 0A
F02:0033         bmi cskipletter
               S01:0000107B:  30 02
F02:0034         adc #6
               S01:0000107D:  69 06
F02:0035       cskipletter:
F02:0036         adc #48
               S01:0000107F:  69 30
F02:0037        ; jsr print_char
F02:0038         jsr print_chara
               S01:00001081:  20 B5 10
F02:0039         rts
               S01:00001084:  60
F02:0040       
F02:0041       crlf:
F02:0042         pha
               S01:00001085:  48
F02:0043         txa
               S01:00001086:  8A
F02:0044         pha
               S01:00001087:  48
F02:0045         tya
               S01:00001088:  98
F02:0046         pha
               S01:00001089:  48
F02:0047         lda #$0d
               S01:0000108A:  A9 0D
F02:0048         jsr print_chara
               S01:0000108C:  20 B5 10
F02:0049         lda #$0a
               S01:0000108F:  A9 0A
F02:0050         jsr print_chara
               S01:00001091:  20 B5 10
F02:0051         pla
               S01:00001094:  68
F02:0052         tay
               S01:00001095:  A8
F02:0053         pla
               S01:00001096:  68
F02:0054         tax
               S01:00001097:  AA
F02:0055         pla
               S01:00001098:  68
F02:0056         rts
               S01:00001099:  60
F02:0057       
F02:0058       cleardisplay:
F02:0059         pha
               S01:0000109A:  48
F02:0060         jsr txpoll  ; Poll the TX bit
               S01:0000109B:  20 A5 10
F02:0061         lda #12     ; Print decimal 12 (CLS)
               S01:0000109E:  A9 0C
F02:0062         sta $8000
               S01:000010A0:  8D 00 80
F02:0063         pla
               S01:000010A3:  68
F02:0064         rts
               S01:000010A4:  60
F02:0065       
F02:0066       txpoll:
F02:0067         lda $8001
               S01:000010A5:  AD 01 80
F02:0068         and #$10    ; Poll the TX bit
               S01:000010A8:  29 10
F02:0069         beq txpoll
               S01:000010AA:  F0 F9
F02:0070         rts
               S01:000010AC:  60
F02:0071       
F02:0072       rxpoll:
F02:0073         lda $8001
               S01:000010AD:  AD 01 80
F02:0074         and #$08    ; Poll the RX bit
               S01:000010B0:  29 08
F02:0075         beq rxpoll
               S01:000010B2:  F0 F9
F02:0076         rts
               S01:000010B4:  60
F02:0077       
F02:0078       
F02:0079       print_chara:
F02:0080         pha
               S01:000010B5:  48
F02:0081         jsr txpoll  ; Poll the TX bit
               S01:000010B6:  20 A5 10
F02:0082         pla
               S01:000010B9:  68
F02:0083         sta $8000   ; Print character from A
               S01:000010BA:  8D 00 80
F02:0084         rts
               S01:000010BD:  60
F02:0085       
F02:0086       print_char_acia:
F02:0087         jmp print_chara  ; Same as "print_chara"
               S01:000010BE:  4C B5 10
F02:0088       
F02:0089       ascii_home:
F02:0090         pha
               S01:000010C1:  48
F02:0091         lda #1
               S01:000010C2:  A9 01
F02:0092         jsr print_chara  ; Print 1 (HOME)
               S01:000010C4:  20 B5 10
F02:0093         pla
               S01:000010C7:  68
F02:0094         rts
               S01:000010C8:  60
F02:0095       
F02:0096       w_acia_full:
F02:0097         pha
               S01:000010C9:  48
F02:0098         lda $ff
               S01:000010CA:  A5 FF
F02:0099         pha        ; Push Previous States onto the stack
               S01:000010CC:  48
F02:0100         lda $fe
               S01:000010CD:  A5 FE
F02:0101         pha
               S01:000010CF:  48
F02:0102         sty $ff    ; Set Y as the Upper Address (8-15)
               S01:000010D0:  84 FF
F02:0103         stx $fe    ; Set X as the Lower Adderss (0-7)
               S01:000010D2:  86 FE
F02:0104         ldy #0
               S01:000010D4:  A0 00
F02:0105       acia_man:
F02:0106         jsr txpoll   ; Poll TX
               S01:000010D6:  20 A5 10
F02:0107         lda ($fe),y  ; Load the Address
               S01:000010D9:  B1 FE
F02:0108         sta $8000    ; Print what is at the address
               S01:000010DB:  8D 00 80
F02:0109         beq endwacia ; If Done, End
               S01:000010DE:  F0 04
F02:0110         iny          ; Next Character
               S01:000010E0:  C8
F02:0111         jmp acia_man ; Back to the top
               S01:000010E1:  4C D6 10
F02:0112       endwacia:
F02:0113         pla
               S01:000010E4:  68
F02:0114         sta $fe
               S01:000010E5:  85 FE
F02:0115         pla          ; Restore Variables
               S01:000010E7:  68
F02:0116         sta $ff
               S01:000010E8:  85 FF
F02:0117         pla
               S01:000010EA:  68
F02:0118         rts
               S01:000010EB:  60
F02:0119       
F00:0209       ;     cursor off   |                               | CR | LF | NULL
F00:0210       msg:
F00:0211         .byte $02, $ff, "Press Record And play on Tape.", $0d, $0a, $00
               S01:000010EC:  02
               S01:000010ED:  FF
               S01:000010EE:  50 72 65 73 73 20 52 65 63 6F 72 64 20 41 6E 64
               S01:000010FE:  20 70 6C 61 79 20 6F 6E 20 54 61 70 65 2E
               S01:0000110C:  0D
               S01:0000110D:  0A
               S01:0000110E:  00
F00:0212       loading_msg:         ;NULL
F00:0213         .byte "Loading...", $00
               S01:0000110F:  4C 6F 61 64 69 6E 67 2E 2E 2E
               S01:00001119:  00
F00:0214       saving_msg:
F00:0215         .byte "Saving...", $00
               S01:0000111A:  53 61 76 69 6E 67 2E 2E 2E
               S01:00001123:  00
F00:0216       msg2:
F00:0217       ;       |      | CR | LF |cursor on| NULL
F00:0218         .byte "Done!", $0d, $0a, $02, $5f, $00
               S01:00001124:  44 6F 6E 65 21
               S01:00001129:  0D
               S01:0000112A:  0A
               S01:0000112B:  02
               S01:0000112C:  5F
               S01:0000112D:  00
F00:0219       dat:
F00:0220         .byte "Hello, world!", $0d, $0a, $0d, $0a, $00
               S01:0000112E:  48 65 6C 6C 6F 2C 20 77 6F 72 6C 64 21
               S01:0000113B:  0D
               S01:0000113C:  0A
               S01:0000113D:  0D
               S01:0000113E:  0A
               S01:0000113F:  00
F00:0221       
F00:0222         .org $1200
F00:0223       
F00:0224       clear:
F00:0225         ldx #0
               S02:00001200:  A2 00
F00:0226       clearlop:
F00:0227         stz dat,x
               S02:00001202:  9E 2E 11
F00:0228         dex
               S02:00001205:  CA
F00:0229         bne clearlop
               S02:00001206:  D0 FA
F00:0230         ldx #<clearmsg
               S02:00001208:  A2 13
F00:0231         ldy #>clearmsg
               S02:0000120A:  A0 12
F00:0232         jsr w_acia_full
               S02:0000120C:  20 C9 10
F00:0233         rts
               S02:0000120F:  60
F00:0234         rts
               S02:00001210:  60
F00:0235         rts
               S02:00001211:  60
F00:0236         rts
               S02:00001212:  60
F00:0237       
F00:0238       clearmsg:
F00:0239         .byte "Cleared!", $0d, $0a, $00
               S02:00001213:  43 6C 65 61 72 65 64 21
               S02:0000121B:  0D
               S02:0000121C:  0A
               S02:0000121D:  00
F00:0240       
F00:0241       RDBYTE	LDX     #$08            ; Set up bit read counter (8 bits)
               S02:0000121E:  A2 08
F00:0242       RDBYT2  PHA                     ; Preserve A (RD2BIT clobbers it)
               S02:00001220:  48
F00:0243               JSR     RD2BIT          ; Look for two tape state transitions
               S02:00001221:  20 2A 12
F00:0244               PLA
               S02:00001224:  68
F00:0245               ROL                     ; Roll the read bit into A (from carry)
               S02:00001225:  2A
F00:0246       ;	LDY     #$3A            ; Set the compensated read width
F00:0247               DEX
               S02:00001226:  CA
F00:0248               BNE     RDBYT2          ; Keep going until 8 bits read.
               S02:00001227:  D0 F7
F00:0249               RTS
               S02:00001229:  60
F00:0250       
F00:0251       RD2BIT  JSR     RDBIT           ; Recursive call to self (two transitions)
               S02:0000122A:  20 2D 12
F00:0252       RDBIT   JSR 	waitfreq
               S02:0000122D:  20 46 12
F00:0253       hmmm:
F00:0254               LDA     PORTA
               S02:00001230:  AD 01 B0
F00:0255               EOR     tapest
               S02:00001233:  45 04
F00:0256               BEQ     hmmm            ; Keep looping until state is XOR(tapest) (changed)
               S02:00001235:  F0 F9
F00:0257       	lda	tapest
               S02:00001237:  A5 04
F00:0258               eor     tapest
               S02:00001239:  45 04
F00:0259               STA     tapest
               S02:0000123B:  85 04
F00:0260       	BIT 	$b00d		; is the counter 750 us?
               S02:0000123D:  2C 0D B0
F00:0261       	BVC	RDBIT0
               S02:00001240:  50 02
F00:0262       	SEC			; sec if 1
               S02:00001242:  38
F00:0263       	RTS
               S02:00001243:  60
F00:0264       RDBIT0	CLC			; clc if 0
               S02:00001244:  18
F00:0265       	RTS
               S02:00001245:  60
F00:0266       ;	CPY     #$80            ; If Y went negative, set carry (this is a '1')
F00:0267       
F00:0268       waitfreq:
F00:0269         stz $b00b
               S02:00001246:  9C 0B B0
F00:0270         lda #$ec
               S02:00001249:  A9 EC
F00:0271         sta $b004		; freq
               S02:0000124B:  8D 04 B0
F00:0272         lda #$02
               S02:0000124E:  A9 02
F00:0273         sta $b005
               S02:00001250:  8D 05 B0
F00:0274         rts
               S02:00001253:  60
F00:0275       
F00:0276         .org $1300
F00:0277       
F00:0278       load:
F00:0279         stz PORTA
               S03:00001300:  9C 01 B0
F00:0280         stz DDRA
               S03:00001303:  9C 03 B0
F00:0281       
F00:0282         ldx #<loadmsg		; PRESS PLAY ON TAPE
               S03:00001306:  A2 59
F00:0283         ldy #>loadmsg
               S03:00001308:  A0 13
F00:0284         jsr w_acia_full
               S03:0000130A:  20 C9 10
F00:0285       
F00:0286         lda #$18		; ye fumble
               S03:0000130D:  A9 18
F00:0287         jsr TDELAY		; 4 second delay
               S03:0000130F:  20 47 10
F00:0288       
F00:0289         ldx #<loading_msg	; Loading...
               S03:00001312:  A2 0F
F00:0290         ldy #>loading_msg
               S03:00001314:  A0 11
F00:0291         jsr w_acia_full
               S03:00001316:  20 C9 10
F00:0292       
F00:0293         lda PORTA
               S03:00001319:  AD 01 B0
F00:0294         and #1
               S03:0000131C:  29 01
F00:0295         sta tapest
               S03:0000131E:  85 04
F00:0296       
F00:0297         jsr wait1
               S03:00001320:  20 4D 13
F00:0298         jsr wait0		; header
               S03:00001323:  20 53 13
F00:0299         jsr wait1
               S03:00001326:  20 4D 13
F00:0300         jsr RDBYTE
               S03:00001329:  20 1E 12
F00:0301         sta dat
               S03:0000132C:  8D 2E 11
F00:0302         ldx #1
               S03:0000132F:  A2 01
F00:0303       loadloop:
F00:0304         jsr wait0
               S03:00001331:  20 53 13
F00:0305         jsr wait1
               S03:00001334:  20 4D 13
F00:0306         jsr RDBYTE
               S03:00001337:  20 1E 12
F00:0307         sta dat,x
               S03:0000133A:  9D 2E 11
F00:0308         inx
               S03:0000133D:  E8
F00:0309         cpx #$ff
               S03:0000133E:  E0 FF
F00:0310         bne loadloop
               S03:00001340:  D0 EF
F00:0311       
F00:0312         ldx #<msg2
               S03:00001342:  A2 24
F00:0313         ldy #>msg2
               S03:00001344:  A0 11
F00:0314         jsr w_acia_full
               S03:00001346:  20 C9 10
F00:0315       
F00:0316         rts
               S03:00001349:  60
F00:0317         rts
               S03:0000134A:  60
F00:0318         rts
               S03:0000134B:  60
F00:0319         rts
               S03:0000134C:  60
F00:0320       ; subs
F00:0321       
F00:0322       wait1:
F00:0323         jsr RD2BIT
               S03:0000134D:  20 2A 12
F00:0324         bcs wait1
               S03:00001350:  B0 FB
F00:0325         rts
               S03:00001352:  60
F00:0326       
F00:0327       wait0:
F00:0328         jsr RD2BIT
               S03:00001353:  20 2A 12
F00:0329         bcc wait0
               S03:00001356:  90 FB
F00:0330         rts
               S03:00001358:  60
F00:0331       
F00:0332       loadmsg:
F00:0333         .byte "Press Play On Tape.", $0d, $0a, $00
               S03:00001359:  50 72 65 73 73 20 50 6C 61 79 20 4F 6E 20 54 61
               S03:00001369:  70 65 2E
               S03:0000136C:  0D
               S03:0000136D:  0A
               S03:0000136E:  00
F00:0334       


Sections:
S01  segf00
S02  seg1200
S03  seg1300


Sources:
F00  tap.s
F01  hwtape.s
F02  libacia.s


Symbols:
loadloop EXPR(4913=0x1331) ABS 
wait0 EXPR(4947=0x1353) ABS 
wait1 EXPR(4941=0x134d) ABS 
loadmsg EXPR(4953=0x1359) ABS 
load EXPR(4864=0x1300) UNUSED ABS 
RDBIT0 EXPR(4676=0x1244) ABS 
hmmm EXPR(4656=0x1230) ABS 
waitfreq EXPR(4678=0x1246) ABS 
RDBIT EXPR(4653=0x122d) ABS 
RD2BIT EXPR(4650=0x122a) ABS 
RDBYT2 EXPR(4640=0x1220) ABS 
RDBYTE EXPR(4638=0x121e) ABS 
clearmsg EXPR(4627=0x1213) ABS 
clearlop EXPR(4610=0x1202) ABS 
clear EXPR(4608=0x1200) UNUSED ABS 
loading_msg EXPR(4367=0x110f) ABS 
endwacia EXPR(4324=0x10e4) ABS 
acia_man EXPR(4310=0x10d6) ABS 
ascii_home EXPR(4289=0x10c1) UNUSED ABS 
print_char_acia EXPR(4286=0x10be) UNUSED ABS 
rxpoll EXPR(4269=0x10ad) ABS 
txpoll EXPR(4261=0x10a5) ABS 
cleardisplay EXPR(4250=0x109a) UNUSED ABS 
crlf EXPR(4229=0x1085) UNUSED ABS 
print_chara EXPR(4277=0x10b5) ABS 
cskipletter EXPR(4223=0x107f) ABS 
print_nybble EXPR(4215=0x1077) ABS 
print_hex_acia EXPR(4206=0x106e) UNUSED ABS 
acia_init EXPR(4193=0x1061) UNUSED ABS 
PORTA_OUTPUTPINS EXPR(2=0x2) EQU 
TAPE_MIC EXPR(2=0x2) EQU 
TAPE_EAR EXPR(0=0x0) EQU 
SD_MISO EXPR(2=0x2) UNUSED EQU 
SD_MOSI EXPR(4=0x4) UNUSED EQU 
SD_SCK EXPR(8=0x8) UNUSED EQU 
SD_CS EXPR(16=0x10) UNUSED EQU 
LCD_RS EXPR(32=0x20) UNUSED EQU 
LCD_RW EXPR(64=0x40) UNUSED EQU 
LCD_E EXPR(128=0x80) UNUSED EQU 
DDRA EXPR(45059=0xb003) EQU 
DDRB EXPR(45058=0xb002) EQU 
PORTB EXPR(45056=0xb000) UNUSED EQU 
RD3 EXPR(4175=0x104f) UNUSED ABS 
RD2 EXPR(4171=0x104b) ABS 
RD1 EXPR(4169=0x1049) ABS 
intro2 EXPR(4161=0x1041) ABS 
intro EXPR(4142=0x102e) ABS 
zerofreq EXPR(4148=0x1034) ABS 
onefreq EXPR(4129=0x1021) ABS 
togtap EXPR(4061=0xfdd) ABS 
PORTA EXPR(45057=0xb001) EQU 
starter EXPR(3944=0xf68) ABS 
outer EXPR(3942=0xf66) ABS 
msg2 EXPR(4388=0x1124) ABS 
one EXPR(3957=0xf75) ABS 
noo EXPR(3906=0xf42) ABS 
oner EXPR(3889=0xf31) ABS 
jsrone EXPR(3900=0xf3c) ABS 
dat EXPR(4398=0x112e) ABS 
wop EXPR(3879=0xf27) ABS 
zero EXPR(4071=0xfe7) ABS 
inout EXPR(3937=0xf61) ABS 
saving_msg EXPR(4378=0x111a) ABS 
TDELAY EXPR(4167=0x1047) ABS 
w_acia_full EXPR(4297=0x10c9) ABS 
msg EXPR(4332=0x10ec) ABS 
via_init EXPR(4182=0x1056) ABS 
start EXPR(3840=0xf00) UNUSED ABS 
tapest EXPR(4=0x4) EQU 
eorr EXPR(3=0x3) UNUSED EQU 
buf EXPR(2=0x2) UNUSED EQU 
odd EXPR(1=0x1) EQU 
thing EXPR(0=0x0) EQU 
__RPTCNT EXPR(-1=0xffff) INTERNAL 
__VASM EXPR(0=0x0) INTERNAL 

There have been no errors.
