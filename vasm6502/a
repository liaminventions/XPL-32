F00:0001       ; The Kansas City Standard for the XPL-32
F00:0002       ; 2400hz = 1
F00:0003       ; 1200hz = 0
F00:0004       ; data is encoded with 2400hz starting sound (for alignment)
F00:0005       ; start bit is a 0
F00:0006       ; end bit is =>2 1s
F00:0007       ; a byte is LEAST SIGNIFICANT TO MOST SIGNIFICANT as in 0111 -> 1110
F00:0008       
F00:0009       thing  = $00 ; 1byt
F00:0010       tapest = $01 ; 1byt
F00:0011       cnt    = $02 ; 2byt
F00:0012       len    = $04 ; 2byt
F00:0013       
F00:0014         .org $0f00
F00:0015       
F00:0016       start:
F00:0017         lda #%10111111
               S01:00000F00:  A9 BF
F00:0018         sta DDRA
               S01:00000F02:  8D 03 B0
F00:0019         stz $b00e
               S01:00000F05:  9C 0E B0
F00:0020         stz tapest
               S01:00000F08:  64 01
F00:0021       
F00:0022         ldx #<msg
               S01:00000F0A:  A2 0F
F00:0023         ldy #>msg		; press rec and play
               S01:00000F0C:  A0 11
F00:0024         jsr w_acia_full
               S01:00000F0E:  20 EC 10
F00:0025       
F00:0026         lda #$18		; 4 seconds
               S01:00000F11:  A9 18
F00:0027         jsr tape_delay		; (ye fumble)
               S01:00000F13:  20 6F 10
F00:0028       
F00:0029         ldx #<saving_msg	; Saving...
               S01:00000F16:  A2 CB
F00:0030         ldy #>saving_msg
               S01:00000F18:  A0 13
F00:0031         jsr w_acia_full
               S01:00000F1A:  20 EC 10
F00:0032       
F00:0033         ldy #$40
               S01:00000F1D:  A0 40
F00:0034         jsr inout		; intro sound
               S01:00000F1F:  20 9D 0F
F00:0035       
F00:0036         jsr zero
               S01:00000F22:  20 16 10
F00:0037       
F00:0038         lda #1
               S01:00000F25:  A9 01
F00:0039         sta thing
               S01:00000F27:  85 00
F00:0040         ldy #0
               S01:00000F29:  A0 00
F00:0041       begin:
F00:0042         lda headertable,y	; our data is 100 bytes long
               S01:00000F2B:  B9 99 0F
F00:0043         and thing
               S01:00000F2E:  25 00
F00:0044         bne head1
               S01:00000F30:  D0 0E
F00:0045         jsr zero
               S01:00000F32:  20 16 10
F00:0046       head:
F00:0047         lda thing
               S01:00000F35:  A5 00
F00:0048         cmp #$80
               S01:00000F37:  C9 80
F00:0049         beq header_done
               S01:00000F39:  F0 0B
F00:0050         asl thing
               S01:00000F3B:  06 00
F00:0051         jmp begin
               S01:00000F3D:  4C 2B 0F
F00:0052       head1:
F00:0053         jsr one
               S01:00000F40:  20 A9 0F
F00:0054         jmp head
               S01:00000F43:  4C 35 0F
F00:0055       header_done:
F00:0056         iny
               S01:00000F46:  C8
F00:0057         cmp #$04
               S01:00000F47:  C9 04
F00:0058         bne begin
               S01:00000F49:  D0 E0
F00:0059         ldy #$20
               S01:00000F4B:  A0 20
F00:0060         jsr inout
               S01:00000F4D:  20 9D 0F
F00:0061         ; now to send the actual data
F00:0062         ldx #0
               S01:00000F50:  A2 00
F00:0063         lda #1
               S01:00000F52:  A9 01
F00:0064         sta thing		; first bit
               S01:00000F54:  85 00
F00:0065       wop:
F00:0066         lda dat,x		; load data
               S01:00000F56:  BD 47 11
F00:0067         and thing		; mask it
               S01:00000F59:  25 00
F00:0068         bne jsrone		; one
               S01:00000F5B:  D0 0E
F00:0069         jsr zero		; or zero
               S01:00000F5D:  20 16 10
F00:0070       oner:
F00:0071         lda thing		; load the bitmask
               S01:00000F60:  A5 00
F00:0072         cmp #$80		; end of byte?
               S01:00000F62:  C9 80
F00:0073         beq noo
               S01:00000F64:  F0 0B
F00:0074         asl thing
               S01:00000F66:  06 00
F00:0075         jmp wop		; next bit
               S01:00000F68:  4C 56 0F
F00:0076       jsrone:
F00:0077         jsr one		; a one
               S01:00000F6B:  20 A9 0F
F00:0078         jmp oner
               S01:00000F6E:  4C 60 0F
F00:0079       noo:
F00:0080         lda #1		; byte done
               S01:00000F71:  A9 01
F00:0081         sta thing
               S01:00000F73:  85 00
F00:0082         jsr one
               S01:00000F75:  20 A9 0F
F00:0083         jsr one
               S01:00000F78:  20 A9 0F
F00:0084         lda dat,x
               S01:00000F7B:  BD 47 11
F00:0085         beq savedone
               S01:00000F7E:  F0 08
F00:0086         jsr zero
               S01:00000F80:  20 16 10
F00:0087         inx			; next byte
               S01:00000F83:  E8
F00:0088         cpx #100 		; are we done reading the data?
               S01:00000F84:  E0 64
F00:0089         bne wop
               S01:00000F86:  D0 CE
F00:0090       savedone
F00:0091         ldy #$40
               S01:00000F88:  A0 40
F00:0092         jsr inout		; we are done, ending sound  
               S01:00000F8A:  20 9D 0F
F00:0093       
F00:0094         ; done
F00:0095         ldx #<msg2
               S01:00000F8D:  A2 3D
F00:0096         ldy #>msg2		; "Done!"
               S01:00000F8F:  A0 11
F00:0097         jsr w_acia_full
               S01:00000F91:  20 EC 10
F00:0098       
F00:0099         rts
               S01:00000F94:  60
F00:0100         rts
               S01:00000F95:  60
F00:0101         rts			; return
               S01:00000F96:  60
F00:0102         rts
               S01:00000F97:  60
F00:0103         rts
               S01:00000F98:  60
F00:0104       
F00:0105       headertable:
F00:0106         .byte $00, $20, $64, $20
               S01:00000F99:  00
               S01:00000F9A:  20
               S01:00000F9B:  64
               S01:00000F9C:  20
F00:0107       
F00:0108       ; subs
F00:0109       
F00:0110       inout:
F00:0111       outer:
F00:0112         ldx #$10		; $40 * $10 times make the sound
               S01:00000F9D:  A2 10
F00:0113       starter:
F00:0114         jsr one		; sound
               S01:00000F9F:  20 A9 0F
F00:0115         dex
               S01:00000FA2:  CA
F00:0116         bne starter
               S01:00000FA3:  D0 FA
F00:0117         dey
               S01:00000FA5:  88
F00:0118         bne outer
               S01:00000FA6:  D0 F5
F00:0119         rts
               S01:00000FA8:  60
F00:0120       
F00:0121       one:			; 2400hz sound 8 cyc
F00:0122         pha
               S01:00000FA9:  48
F00:0123         jsr togtap ; 1
               S01:00000FAA:  20 0C 10
F00:0124         jsr onefreq
               S01:00000FAD:  20 49 10
F00:0125         jsr togtap
               S01:00000FB0:  20 0C 10
F00:0126         jsr onefreq
               S01:00000FB3:  20 49 10
F00:0127         jsr togtap ; 2
               S01:00000FB6:  20 0C 10
F00:0128         jsr onefreq
               S01:00000FB9:  20 49 10
F00:0129         jsr togtap
               S01:00000FBC:  20 0C 10
F00:0130         jsr onefreq
               S01:00000FBF:  20 49 10
F00:0131         jsr togtap ; 3
               S01:00000FC2:  20 0C 10
F00:0132         jsr onefreq
               S01:00000FC5:  20 49 10
F00:0133         jsr togtap
               S01:00000FC8:  20 0C 10
F00:0134         jsr onefreq
               S01:00000FCB:  20 49 10
F00:0135         jsr togtap ; 4
               S01:00000FCE:  20 0C 10
F00:0136         jsr onefreq
               S01:00000FD1:  20 49 10
F00:0137         jsr togtap
               S01:00000FD4:  20 0C 10
F00:0138         jsr onefreq
               S01:00000FD7:  20 49 10
F00:0139         jsr togtap ; 5
               S01:00000FDA:  20 0C 10
F00:0140         jsr onefreq
               S01:00000FDD:  20 49 10
F00:0141         jsr togtap
               S01:00000FE0:  20 0C 10
F00:0142         jsr onefreq
               S01:00000FE3:  20 49 10
F00:0143         jsr togtap ; 6
               S01:00000FE6:  20 0C 10
F00:0144         jsr onefreq
               S01:00000FE9:  20 49 10
F00:0145         jsr togtap
               S01:00000FEC:  20 0C 10
F00:0146         jsr onefreq
               S01:00000FEF:  20 49 10
F00:0147         jsr togtap ; 7
               S01:00000FF2:  20 0C 10
F00:0148         jsr onefreq
               S01:00000FF5:  20 49 10
F00:0149         jsr togtap
               S01:00000FF8:  20 0C 10
F00:0150         jsr onefreq
               S01:00000FFB:  20 49 10
F00:0151         jsr togtap ; 8
               S01:00000FFE:  20 0C 10
F00:0152         jsr onefreq
               S01:00001001:  20 49 10
F00:0153         jsr togtap
               S01:00001004:  20 0C 10
F00:0154         jsr onefreq
               S01:00001007:  20 49 10
F00:0155         pla
               S01:0000100A:  68
F00:0156         rts
               S01:0000100B:  60
F00:0157       
F00:0158       togtap:
F00:0159         lda tapest
               S01:0000100C:  A5 01
F00:0160         eor #%10000000 	; data out on PA7
               S01:0000100E:  49 80
F00:0161         sta tapest
               S01:00001010:  85 01
F00:0162         sta PORTA
               S01:00001012:  8D 01 B0
F00:0163         rts
               S01:00001015:  60
F00:0164       
F00:0165       zero: 			; 1200hz sound 4 cyc
F00:0166         pha 
               S01:00001016:  48
F00:0167         jsr togtap ; 1
               S01:00001017:  20 0C 10
F00:0168         jsr zerofreq
               S01:0000101A:  20 5C 10
F00:0169         jsr togtap
               S01:0000101D:  20 0C 10
F00:0170         jsr zerofreq
               S01:00001020:  20 5C 10
F00:0171         jsr togtap ; 2
               S01:00001023:  20 0C 10
F00:0172         jsr zerofreq
               S01:00001026:  20 5C 10
F00:0173         jsr togtap
               S01:00001029:  20 0C 10
F00:0174         jsr zerofreq
               S01:0000102C:  20 5C 10
F00:0175         jsr togtap ; 3
               S01:0000102F:  20 0C 10
F00:0176         jsr zerofreq
               S01:00001032:  20 5C 10
F00:0177         jsr togtap
               S01:00001035:  20 0C 10
F00:0178         jsr zerofreq
               S01:00001038:  20 5C 10
F00:0179         jsr togtap ; 4
               S01:0000103B:  20 0C 10
F00:0180         jsr zerofreq
               S01:0000103E:  20 5C 10
F00:0181         jsr togtap
               S01:00001041:  20 0C 10
F00:0182         jsr zerofreq
               S01:00001044:  20 5C 10
F00:0183         pla
               S01:00001047:  68
F00:0184         rts
               S01:00001048:  60
F00:0185       
F00:0186       onefreq:
F00:0187         stz $b00b
               S01:00001049:  9C 0B B0
F00:0188         lda #$ae
               S01:0000104C:  A9 AE
F00:0189         sta $b004		; freq
               S01:0000104E:  8D 04 B0
F00:0190         lda #$00
               S01:00001051:  A9 00
F00:0191         sta $b005
               S01:00001053:  8D 05 B0
F00:0192       intro:
F00:0193         bit $b00d		; delay complete?
               S01:00001056:  2C 0D B0
F00:0194         bvc intro
               S01:00001059:  50 FB
F00:0195         rts
               S01:0000105B:  60
F00:0196       
F00:0197       zerofreq:
F00:0198         stz $b00b
               S01:0000105C:  9C 0B B0
F00:0199         lda #$3f
               S01:0000105F:  A9 3F
F00:0200         sta $b004
               S01:00001061:  8D 04 B0
F00:0201         lda #$01
               S01:00001064:  A9 01
F00:0202         sta $b005
               S01:00001066:  8D 05 B0
F00:0203       intro2:
F00:0204         bit $b00d
               S01:00001069:  2C 0D B0
F00:0205         bvc intro2
               S01:0000106C:  50 FB
F00:0206         rts
               S01:0000106E:  60
F00:0207       
F00:0208       tape_delay:
F00:0209         ldx #$ff		; wait for ye fumble.
               S01:0000106F:  A2 FF
F00:0210       rd1:
F00:0211         lda #$7a		; (Y times through inner loop,
               S01:00001071:  A9 7A
F00:0212       rd2:     
F00:0213         sbc #$01		;  Y * $FF * 650uS = uS / 1e-6 = S )
               S01:00001073:  E9 01
F00:0214         bne rd2
               S01:00001075:  D0 FC
F00:0215       rd3:
F00:0216         dex
               S01:00001077:  CA
F00:0217         bne rd1
               S01:00001078:  D0 F7
F00:0218         dey
               S01:0000107A:  88
F00:0219         bne tape_delay
               S01:0000107B:  D0 F2
F00:0220         rts
               S01:0000107D:  60
F00:0221       
F00:0222         .include "hwtape.s"
F01:0001       PORTB = $b000
F01:0002       PORTA = $b001
F01:0003       DDRB = $b002
F01:0004       DDRA = $b003
F01:0005       
F01:0006       ;LCD_E  = %10000000
F01:0007       ;LCD_RW = %01000000
F01:0008       ;LCD_RS = %00100000
F01:0009       
F01:0010       SD_CS    = %00010000
F01:0011       SD_SCK   = %00001000
F01:0012       SD_MOSI  = %00000100
F01:0013       SD_MISO  = %00000010
F01:0014       TAPE_EAR = %00000000 ; PA6 IN
F01:0015       TAPE_MIC = %10000000 ; PA7 OUT
F01:0016       
F01:0017       PORTB_OUTPUTPINS = TAPE_EAR | TAPE_MIC
F01:0018       
F01:0019       via_init:
F01:0020         lda PORTB_OUTPUTPINS		; Set various pins on port B to output
               S01:0000107E:  A5 80
F01:0021         sta DDRB
               S01:00001080:  8D 02 B0
F01:0022         ;lda #%11111111 ; Set all pins on port A to output 
F01:0023         ;sta DDRA
F01:0024         rts
               S01:00001083:  60
F01:0025       
F01:0026       
F00:0223         .include "libacia.s"
F02:0001       ;       ------------------ 6551 ACIA Subroutine Library -------------------
F02:0002       ; Includes:
F02:0003       ; acia_init       - Initializes the ACIA
F02:0004       ; print_hex_acia  - Prints a hex value in A
F02:0005       ; crlf		  - Prints <CR> followed by <LF>
F02:0006       ; clear_display   - Sends a <CLS> command
F02:0007       ; txpoll          - Polls the TX bit to see if the ACIA is ready
F02:0008       ; print_chara     - Prints a Character that is stored in A
F02:0009       ; print_char_acia - Same as print_chara
F02:0010       ; ascii_home      - Home the cursor
F02:0011       ; w_acia_full     - Print a NULL-Termintated String with >HIGH in Y and <LOW in X
F02:0012       
F02:0013       acia_init:
F02:0014         pha
               S01:00001084:  48
F02:0015         lda #%00001011          ; No parity, no echo, no interrupt
               S01:00001085:  A9 0B
F02:0016         sta $8002
               S01:00001087:  8D 02 80
F02:0017         lda #%00011111          ; 1 stop bit, 8 data bits, 19200 baud
               S01:0000108A:  A9 1F
F02:0018         sta $8003
               S01:0000108C:  8D 03 80
F02:0019         pla
               S01:0000108F:  68
F02:0020         rts
               S01:00001090:  60
F02:0021       
F02:0022       print_hex_acia:
F02:0023         pha
               S01:00001091:  48
F02:0024         ror
               S01:00001092:  6A
F02:0025         ror
               S01:00001093:  6A
F02:0026         ror
               S01:00001094:  6A
F02:0027         ror
               S01:00001095:  6A
F02:0028         jsr print_nybble   ; This is just som usful hex cod
               S01:00001096:  20 9A 10
F02:0029         pla
               S01:00001099:  68
F02:0030       print_nybble:
F02:0031         and #15
               S01:0000109A:  29 0F
F02:0032         cmp #10
               S01:0000109C:  C9 0A
F02:0033         bmi cskipletter
               S01:0000109E:  30 02
F02:0034         adc #6
               S01:000010A0:  69 06
F02:0035       cskipletter:
F02:0036         adc #48
               S01:000010A2:  69 30
F02:0037        ; jsr print_char
F02:0038         jsr print_chara
               S01:000010A4:  20 D8 10
F02:0039         rts
               S01:000010A7:  60
F02:0040       
F02:0041       crlf:
F02:0042         pha
               S01:000010A8:  48
F02:0043         txa
               S01:000010A9:  8A
F02:0044         pha
               S01:000010AA:  48
F02:0045         tya
               S01:000010AB:  98
F02:0046         pha
               S01:000010AC:  48
F02:0047         lda #$0d
               S01:000010AD:  A9 0D
F02:0048         jsr print_chara
               S01:000010AF:  20 D8 10
F02:0049         lda #$0a
               S01:000010B2:  A9 0A
F02:0050         jsr print_chara
               S01:000010B4:  20 D8 10
F02:0051         pla
               S01:000010B7:  68
F02:0052         tay
               S01:000010B8:  A8
F02:0053         pla
               S01:000010B9:  68
F02:0054         tax
               S01:000010BA:  AA
F02:0055         pla
               S01:000010BB:  68
F02:0056         rts
               S01:000010BC:  60
F02:0057       
F02:0058       cleardisplay:
F02:0059         pha
               S01:000010BD:  48
F02:0060         jsr txpoll  ; Poll the TX bit
               S01:000010BE:  20 C8 10
F02:0061         lda #12     ; Print decimal 12 (CLS)
               S01:000010C1:  A9 0C
F02:0062         sta $8000
               S01:000010C3:  8D 00 80
F02:0063         pla
               S01:000010C6:  68
F02:0064         rts
               S01:000010C7:  60
F02:0065       
F02:0066       txpoll:
F02:0067         lda $8001
               S01:000010C8:  AD 01 80
F02:0068         and #$10    ; Poll the TX bit
               S01:000010CB:  29 10
F02:0069         beq txpoll
               S01:000010CD:  F0 F9
F02:0070         rts
               S01:000010CF:  60
F02:0071       
F02:0072       rxpoll:
F02:0073         lda $8001
               S01:000010D0:  AD 01 80
F02:0074         and #$08    ; Poll the RX bit
               S01:000010D3:  29 08
F02:0075         beq rxpoll
               S01:000010D5:  F0 F9
F02:0076         rts
               S01:000010D7:  60
F02:0077       
F02:0078       
F02:0079       print_chara:
F02:0080         pha
               S01:000010D8:  48
F02:0081         jsr txpoll  ; Poll the TX bit
               S01:000010D9:  20 C8 10
F02:0082         pla
               S01:000010DC:  68
F02:0083         sta $8000   ; Print character from A
               S01:000010DD:  8D 00 80
F02:0084         rts
               S01:000010E0:  60
F02:0085       
F02:0086       print_char_acia:
F02:0087         jmp print_chara  ; Same as "print_chara"
               S01:000010E1:  4C D8 10
F02:0088       
F02:0089       ascii_home:
F02:0090         pha
               S01:000010E4:  48
F02:0091         lda #1
               S01:000010E5:  A9 01
F02:0092         jsr print_chara  ; Print 1 (HOME)
               S01:000010E7:  20 D8 10
F02:0093         pla
               S01:000010EA:  68
F02:0094         rts
               S01:000010EB:  60
F02:0095       
F02:0096       w_acia_full:
F02:0097         pha
               S01:000010EC:  48
F02:0098         lda $ff
               S01:000010ED:  A5 FF
F02:0099         pha        ; Push Previous States onto the stack
               S01:000010EF:  48
F02:0100         lda $fe
               S01:000010F0:  A5 FE
F02:0101         pha
               S01:000010F2:  48
F02:0102         sty $ff    ; Set Y as the Upper Address (8-15)
               S01:000010F3:  84 FF
F02:0103         stx $fe    ; Set X as the Lower Adderss (0-7)
               S01:000010F5:  86 FE
F02:0104         ldy #0
               S01:000010F7:  A0 00
F02:0105       acia_man:
F02:0106         jsr txpoll   ; Poll TX
               S01:000010F9:  20 C8 10
F02:0107         lda ($fe),y  ; Load the Address
               S01:000010FC:  B1 FE
F02:0108         sta $8000    ; Print what is at the address
               S01:000010FE:  8D 00 80
F02:0109         beq endwacia ; If Done, End
               S01:00001101:  F0 04
F02:0110         iny          ; Next Character
               S01:00001103:  C8
F02:0111         jmp acia_man ; Back to the top
               S01:00001104:  4C F9 10
F02:0112       endwacia:
F02:0113         pla
               S01:00001107:  68
F02:0114         sta $fe
               S01:00001108:  85 FE
F02:0115         pla          ; Restore Variables
               S01:0000110A:  68
F02:0116         sta $ff
               S01:0000110B:  85 FF
F02:0117         pla
               S01:0000110D:  68
F02:0118         rts
               S01:0000110E:  60
F02:0119       
F00:0224       ;     cursor off   |                               | CR | LF | NULL
F00:0225       msg:
F00:0226         .byte $02, $ff, "Press Record And play on Tape.", $0d, $0a, $00
               S01:0000110F:  02
               S01:00001110:  FF
               S01:00001111:  50 72 65 73 73 20 52 65 63 6F 72 64 20 41 6E 64
               S01:00001121:  20 70 6C 61 79 20 6F 6E 20 54 61 70 65 2E
               S01:0000112F:  0D
               S01:00001130:  0A
               S01:00001131:  00
F00:0227       loading_msg:         ;NULL
F00:0228         .byte "Loading...", $00
               S01:00001132:  4C 6F 61 64 69 6E 67 2E 2E 2E
               S01:0000113C:  00
F00:0229       msg2:
F00:0230       ;       |      | CR | LF |cursor on| NULL
F00:0231         .byte "Done!", $0d, $0a, $02, $5f, $00
               S01:0000113D:  44 6F 6E 65 21
               S01:00001142:  0D
               S01:00001143:  0A
               S01:00001144:  02
               S01:00001145:  5F
               S01:00001146:  00
F00:0232       dat:
F00:0233         .byte "Hello, World! This is a test of the Kansas City tape protocol. If your are reading this, yay!", $0d, $0a, $0d, 
               S01:00001147:  48 65 6C 6C 6F 2C 20 57 6F 72 6C 64 21 20 54 68
               S01:00001157:  69 73 20 69 73 20 61 20 74 65 73 74 20 6F 66 20
               S01:00001167:  0D
               S01:00001168:  0A
               S01:00001169:  0D
               S01:0000116A:  0A
               S01:0000116B:  00
F00:0234       
F00:0235         .org $1200
F00:0236       
F00:0237       clear:
F00:0238         ldx #0
               S02:00001200:  A2 00
F00:0239       clearlop:
F00:0240         stz dat,x
               S02:00001202:  9E 47 11
F00:0241         inx
               S02:00001205:  E8
F00:0242         cpx #100 ; our message is 100 bytes long
               S02:00001206:  E0 64
F00:0243         bne clearlop
               S02:00001208:  D0 F8
F00:0244         ldx #<clearmsg
               S02:0000120A:  A2 15
F00:0245         ldy #>clearmsg
               S02:0000120C:  A0 12
F00:0246         jsr w_acia_full
               S02:0000120E:  20 EC 10
F00:0247         rts
               S02:00001211:  60
F00:0248         rts
               S02:00001212:  60
F00:0249         rts
               S02:00001213:  60
F00:0250         rts
               S02:00001214:  60
F00:0251       
F00:0252       clearmsg:
F00:0253         .byte "Cleared!", $0d, $0a, $00
               S02:00001215:  43 6C 65 61 72 65 64 21
               S02:0000121D:  0D
               S02:0000121E:  0A
               S02:0000121F:  00
F00:0254       
F00:0255         .org $1300
F00:0256       
F00:0257       load:
F00:0258         lda #%10111111
               S03:00001300:  A9 BF
F00:0259         sta DDRA
               S03:00001302:  8D 03 B0
F00:0260         lda #%11111111
               S03:00001305:  A9 FF
F00:0261         sta DDRB
               S03:00001307:  8D 02 B0
F00:0262       
F00:0263         ldx #<loadmsg		; PRESS PLAY ON TAPE
               S03:0000130A:  A2 B5
F00:0264         ldy #>loadmsg
               S03:0000130C:  A0 13
F00:0265         jsr w_acia_full
               S03:0000130E:  20 EC 10
F00:0266       
F00:0267         lda #$18		; ye fumble
               S03:00001311:  A9 18
F00:0268         jsr tape_delay	; 4 second delay
               S03:00001313:  20 6F 10
F00:0269       
F00:0270         ldx #<loading_msg	; Loading...
               S03:00001316:  A2 32
F00:0271         ldy #>loading_msg
               S03:00001318:  A0 11
F00:0272         jsr w_acia_full
               S03:0000131A:  20 EC 10
F00:0273       
F00:0274         ldy #0
               S03:0000131D:  A0 00
F00:0275       
F00:0276         ; thanks to ben eater for help with this code
F00:0277       
F00:0278       rx_wait_start:
F00:0279         bit PORTA	; wait until PORTB.6 = 0 (start bit)
               S03:0000131F:  2C 01 B0
F00:0280         bvs rx_wait_start
               S03:00001322:  70 FB
F00:0281       
F00:0282         jsr rx_delay  ; half-bit delay
               S03:00001324:  20 A1 13
F00:0283         ldx #8
               S03:00001327:  A2 08
F00:0284       read_bita:
F00:0285         jsr rx_delay	; run full-bit delay for 300 baud serial stream
               S03:00001329:  20 A1 13
F00:0286         jsr rx_delay
               S03:0000132C:  20 A1 13
F00:0287         bit PORTA	; read in the state
               S03:0000132F:  2C 01 B0
F00:0288         bvs recv_1a	; if it's not a one,
               S03:00001332:  70 04
F00:0289         clc		; it's a zero.
               S03:00001334:  18
F00:0290         jmp rx_donea
               S03:00001335:  4C 3B 13
F00:0291       recv_1a:	; otherwise,
F00:0292         sec		; it's a one.
               S03:00001338:  38
F00:0293         nop		; nops for timing
               S03:00001339:  EA
F00:0294         nop
               S03:0000133A:  EA
F00:0295       rx_donea:
F00:0296         ror		; rotate carry into accumulator
               S03:0000133B:  6A
F00:0297         stz PORTB	; DEBUG
               S03:0000133C:  9C 00 B0
F00:0298         dex
               S03:0000133F:  CA
F00:0299         bne read_bita	; repeat until 8 bits read
               S03:00001340:  D0 E7
F00:0300         sta cnt,y
               S03:00001342:  99 02 00
F00:0301         iny
               S03:00001345:  C8
F00:0302         cmp #$04
               S03:00001346:  C9 04
F00:0303         beq got_len
               S03:00001348:  F0 09
F00:0304         jsr rx_delay
               S03:0000134A:  20 A1 13
F00:0305         jsr rx_delay
               S03:0000134D:  20 A1 13
F00:0306         jmp rx_wait_start
               S03:00001350:  4C 1F 13
F00:0307       got_len:
F00:0308         jsr rx_delay
               S03:00001353:  20 A1 13
F00:0309         jsr rx_delay
               S03:00001356:  20 A1 13
F00:0310       rx_wait:
F00:0311         bit PORTA	; wait until PORTB.6 = 0 (start bit)
               S03:00001359:  2C 01 B0
F00:0312         bvs rx_wait
               S03:0000135C:  70 FB
F00:0313       
F00:0314         jsr rx_delay
               S03:0000135E:  20 A1 13
F00:0315         ldx #8
               S03:00001361:  A2 08
F00:0316       read_bit:
F00:0317         jsr rx_delay	; run bit delay for 300 baud serial stream
               S03:00001363:  20 A1 13
F00:0318         jsr rx_delay
               S03:00001366:  20 A1 13
F00:0319         bit PORTA	; read in the state
               S03:00001369:  2C 01 B0
F00:0320         bvs recv_1	; if it's not a one,
               S03:0000136C:  70 04
F00:0321         clc		; it's a zero.
               S03:0000136E:  18
F00:0322         jmp rx_done
               S03:0000136F:  4C 75 13
F00:0323       recv_1:
F00:0324         sec		; it's a one.
               S03:00001372:  38
F00:0325         nop		; nops for timing
               S03:00001373:  EA
F00:0326         nop
               S03:00001374:  EA
F00:0327       rx_done:
F00:0328         ror		; rotate carry into accumulator
               S03:00001375:  6A
F00:0329         stz PORTB
               S03:00001376:  9C 00 B0
F00:0330         dex
               S03:00001379:  CA
F00:0331         bne read_bit	; repeat until 8 bits read
               S03:0000137A:  D0 E7
F00:0332         sta (cnt)	; store data
               S03:0000137C:  92 02
F00:0333         jsr rx_delay
               S03:0000137E:  20 A1 13
F00:0334         jsr rx_delay
               S03:00001381:  20 A1 13
F00:0335         inc cnt
               S03:00001384:  E6 02
F00:0336         bne declen
               S03:00001386:  D0 02
F00:0337         inc cnt+1
               S03:00001388:  E6 03
F00:0338       declen:
F00:0339         lda cnt	; are we done?
               S03:0000138A:  A5 02
F00:0340         cmp len
               S03:0000138C:  C5 04
F00:0341         bne rx_wait
               S03:0000138E:  D0 C9
F00:0342         lda cnt+1
               S03:00001390:  A5 03
F00:0343         cmp len+1
               S03:00001392:  C5 05
F00:0344         bne rx_wait	; if not, get another byte
               S03:00001394:  D0 C3
F00:0345         ;jmp rx_wait
F00:0346       
F00:0347       load_done:
F00:0348         ldx #<msg2	; Done!
               S03:00001396:  A2 3D
F00:0349         ldy #>msg2
               S03:00001398:  A0 11
F00:0350         jsr w_acia_full
               S03:0000139A:  20 EC 10
F00:0351       
F00:0352         rts
               S03:0000139D:  60
F00:0353         rts
               S03:0000139E:  60
F00:0354         rts
               S03:0000139F:  60
F00:0355         rts
               S03:000013A0:  60
F00:0356       
F00:0357       rx_delay:
F00:0358         phx
               S03:000013A1:  DA
F00:0359         phy
               S03:000013A2:  5A
F00:0360         ldy #$02
               S03:000013A3:  A0 02
F00:0361       rx_delay_outer:
F00:0362         ldx #$A4
               S03:000013A5:  A2 A4
F00:0363       rx_delay_inner:
F00:0364         dex
               S03:000013A7:  CA
F00:0365         bne rx_delay_inner
               S03:000013A8:  D0 FD
F00:0366         dey
               S03:000013AA:  88
F00:0367         bne rx_delay_outer
               S03:000013AB:  D0 F8
F00:0368         ply
               S03:000013AD:  7A
F00:0369         plx
               S03:000013AE:  FA
F00:0370         lda #$01
               S03:000013AF:  A9 01
F00:0371         sta PORTB
               S03:000013B1:  8D 00 B0
F00:0372         rts
               S03:000013B4:  60
F00:0373       
F00:0374       loadmsg:
F00:0375         .byte "Press Play On Tape.", $0d, $0a, $00
               S03:000013B5:  50 72 65 73 73 20 50 6C 61 79 20 4F 6E 20 54 61
               S03:000013C5:  70 65 2E
               S03:000013C8:  0D
               S03:000013C9:  0A
               S03:000013CA:  00
F00:0376       saving_msg:
F00:0377         .byte "Saving...", $00
               S03:000013CB:  53 61 76 69 6E 67 2E 2E 2E
               S03:000013D4:  00
F00:0378       
F00:0379       


Sections:
S01  segf00
S02  seg1200
S03  seg1300


Sources:
F00  tap.s
F01  hwtape.s
F02  libacia.s


Symbols:
rx_delay_inner EXPR(5031=0x13a7) ABS 
rx_delay_outer EXPR(5029=0x13a5) ABS 
load_done EXPR(5014=0x1396) UNUSED ABS 
declen EXPR(5002=0x138a) ABS 
rx_done EXPR(4981=0x1375) ABS 
recv_1 EXPR(4978=0x1372) ABS 
read_bit EXPR(4963=0x1363) ABS 
rx_wait EXPR(4953=0x1359) ABS 
got_len EXPR(4947=0x1353) ABS 
rx_donea EXPR(4923=0x133b) ABS 
recv_1a EXPR(4920=0x1338) ABS 
read_bita EXPR(4905=0x1329) ABS 
rx_delay EXPR(5025=0x13a1) ABS 
rx_wait_start EXPR(4895=0x131f) ABS 
loadmsg EXPR(5045=0x13b5) ABS 
load EXPR(4864=0x1300) UNUSED ABS 
clearmsg EXPR(4629=0x1215) ABS 
clearlop EXPR(4610=0x1202) ABS 
clear EXPR(4608=0x1200) UNUSED ABS 
loading_msg EXPR(4402=0x1132) ABS 
endwacia EXPR(4359=0x1107) ABS 
acia_man EXPR(4345=0x10f9) ABS 
ascii_home EXPR(4324=0x10e4) UNUSED ABS 
print_char_acia EXPR(4321=0x10e1) UNUSED ABS 
rxpoll EXPR(4304=0x10d0) ABS 
txpoll EXPR(4296=0x10c8) ABS 
cleardisplay EXPR(4285=0x10bd) UNUSED ABS 
crlf EXPR(4264=0x10a8) UNUSED ABS 
print_chara EXPR(4312=0x10d8) ABS 
cskipletter EXPR(4258=0x10a2) ABS 
print_nybble EXPR(4250=0x109a) ABS 
print_hex_acia EXPR(4241=0x1091) UNUSED ABS 
acia_init EXPR(4228=0x1084) UNUSED ABS 
via_init EXPR(4222=0x107e) UNUSED ABS 
PORTB_OUTPUTPINS EXPR(128=0x80) EQU 
TAPE_MIC EXPR(128=0x80) EQU 
TAPE_EAR EXPR(0=0x0) EQU 
SD_MISO EXPR(2=0x2) UNUSED EQU 
SD_MOSI EXPR(4=0x4) UNUSED EQU 
SD_SCK EXPR(8=0x8) UNUSED EQU 
SD_CS EXPR(16=0x10) UNUSED EQU 
DDRB EXPR(45058=0xb002) EQU 
PORTB EXPR(45056=0xb000) EQU 
rd3 EXPR(4215=0x1077) UNUSED ABS 
rd2 EXPR(4211=0x1073) ABS 
rd1 EXPR(4209=0x1071) ABS 
intro2 EXPR(4201=0x1069) ABS 
intro EXPR(4182=0x1056) ABS 
zerofreq EXPR(4188=0x105c) ABS 
PORTA EXPR(45057=0xb001) EQU 
onefreq EXPR(4169=0x1049) ABS 
togtap EXPR(4108=0x100c) ABS 
starter EXPR(3999=0xf9f) ABS 
outer EXPR(3997=0xf9d) ABS 
msg2 EXPR(4413=0x113d) ABS 
savedone EXPR(3976=0xf88) ABS 
noo EXPR(3953=0xf71) ABS 
oner EXPR(3936=0xf60) ABS 
jsrone EXPR(3947=0xf6b) ABS 
dat EXPR(4423=0x1147) ABS 
wop EXPR(3926=0xf56) ABS 
one EXPR(4009=0xfa9) ABS 
header_done EXPR(3910=0xf46) ABS 
head EXPR(3893=0xf35) ABS 
head1 EXPR(3904=0xf40) ABS 
headertable EXPR(3993=0xf99) ABS 
begin EXPR(3883=0xf2b) ABS 
zero EXPR(4118=0x1016) ABS 
inout EXPR(3997=0xf9d) ABS 
saving_msg EXPR(5067=0x13cb) ABS 
tape_delay EXPR(4207=0x106f) ABS 
w_acia_full EXPR(4332=0x10ec) ABS 
msg EXPR(4367=0x110f) ABS 
DDRA EXPR(45059=0xb003) EQU 
start EXPR(3840=0xf00) UNUSED ABS 
len EXPR(4=0x4) EQU 
cnt EXPR(2=0x2) EQU 
tapest EXPR(1=0x1) EQU 
thing EXPR(0=0x0) EQU 
__RPTCNT EXPR(-1=0xffff) INTERNAL 
__VASM EXPR(0=0x0) INTERNAL 

There have been no errors.
